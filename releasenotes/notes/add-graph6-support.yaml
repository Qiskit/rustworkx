features:
  - |
    This note documents the graph6 family of ASCII formats and the helpers
    added to the codebase. The summary below is a concise description of the
    formats (based on the canonical formats document) and a few developer
    notes to help maintainers and tests.

    references:
      - https://users.cecs.anu.edu.au/~bdm/data/formats.txt
    issue:
      - https://github.com/Qiskit/rustworkx/issues/1496

    graph6
    - A compact ASCII-based encoding for simple undirected graphs.
    - Encodes the graph order (n) using a variable-length size field and packs
      the upper-triangular adjacency bits into 6-bit chunks. Each 6-bit value
      is mapped into a printable ASCII character by adding an offset (so the
      encoded bytes are printable ASCII).
    - Typical uses: small-to-moderately-dense graphs where the adjacency
      matrix can be packed efficiently.

    digraph6
    - A variant of the graph6 scheme adapted for directed graphs. It encodes
      a representation of the full adjacency matrix (row-major) using the
      same 6-bit packing and ASCII mapping as graph6.
    - Useful for representing directed graphs where directionality matters.

    sparse6
    - An alternate encoding designed for very sparse graphs. Instead of
      packing the full adjacency matrix, sparse6 records adjacency in a more
      compact variable-length integer form (adjacency lists / runs), which
      yields much smaller files for low edge-density graphs.

    Developer notes
    - Parsers must correctly handle variable-length size fields, 6-bit packing
      and padding to 6-bit boundaries. Edge cases around very small and very
      large n should be handled robustly.
    - Tests should prefer roundtrip and structural checks (parse -> graph ->
      serialize -> parse) and verify canonical encodings where the format
      features:
        - title: Add graph6/digraph6/sparse6 support and format summary
          release: unreleased
          notes: |
            This note documents the graph6 family of ASCII formats and the helpers
            added to the codebase. The summary below is a concise description of the
            formats (based on the canonical formats document) and a few developer
            notes to help maintainers and tests.

