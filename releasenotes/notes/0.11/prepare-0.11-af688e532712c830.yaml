---
prelude: |
  This release includes many new features and bug fixes. Highlights include
  additional methods to improve working with edges in both 
  :class:`~rustworkx.PyGraph` and :class:`~rustworkx.PyDiGraph`,
  several new graph generators, and a new set of interactive traversal
  functions: :func:`~rustworkx.bfs_search`, :func:`~rustworkx.dfs_search`,
  :func:`~rustworkx.dijkstra_search`, and :class:`~rustworkx.TopologicalSorter`,
  which enable iterative interaction with the graph during different types
  of traversal.

  This release also introduces a new separate Rust crate
  `rustworkx-core <https://crates.io/crates/rustworkx-core>`__ which
  is a library for use in Rust that's built on top of
  `petgraph <https://github.com/petgraph/petgraph>`__ that extends the
  functionality provided by petgraph. The functionality in this crate is generic
  and can work with any petgraph graph, not just the :class:`~rustworkx.PyGraph`
  amd :class:`~rustworkx.PyDiGraph`.

  The 0.11.0 release fully supports Python 3.10. Precompiled binaries
  for Python 3.10 are published on PyPI (previous releases worked with 3.10 but
  required compiling from source to install). This is also the last release to
  support Python 3.6. Starting in rustworkx 0.12.0, Python >=3.7 will be required
  to run rustworkx. Additionally, for users compiling rustworkx from source, this
  will be the last release with a minimum supported Rust version (MSRV) of 1.41.
  In rustworkx 0.12.0, the MSRV will be increased to 1.48.

features:
  - |
    Added a new workspace crate,
    `rustworkx-core <https://crates.io/crates/rustworkx-core>`__ as part of
    rustworkx. This is a standalone Rust library that is built on top of
    petgraph that provides general algorithms and graph functionality that
    rustworkx needs. This new crate only exposes a Rust interface that is
    general for any petgraph graph and can be used by any downstream Rust
    project that wants the extra functionality that rustworkx exposes, but
    without Python.

    It's also worth noting as this is the first release of ``rustworkx-core``
    there may be breaking API changes in a subsequent release. While we will
    attempt to follow the standard deprecation and stability policy, since
    we're not necessarily fully committed to the current API and without having
    a user outside of rustworkx, there may be gaps or issues which require
    breaking changes.
  - |
    A new kwarg, ``keep_attributes``, has been added to the NetworkX graph
    converter function :func:`~rustworkx.networkx_converter`. When this argument
    is set to ``True`` the node attributes from the input NetworkX graph will
    be preserved. The data payload for the output rustworkx graph will be
    a dictionary containing the attributes, with an extra ``"__networkx_node__"`` key
    containing the node from NetworkX. For example::

        import networkx as nx
        import rustworkx as rx

        g = nx.Graph()
        g.add_nodes_from([
          ("A", {"color": "turquoise", "size": "extra large"}),
          ("B", {"color": "fuschia", "size": "tiny"}),
        ])
        g.add_edge("A", "B")
        rx_graph = rx.networkx_converter(g, keep_attributes=True)
        print(rx_graph.nodes())
        print(rx_graph.weighted_edge_list())

    will output::

        [{'color': 'turquoise', 'size': 'extra large', '__networkx_node__': 'A'}, {'color': 'fuschia', 'size': 'tiny', '__networkx_node__': 'B'}]
        WeightedEdgeList[(0, 1, {})]

fixes:
  - |
    Fixed an issue with the :func:`~retworkx.generators.heavy_hex_graph`,
    :func:`~retworkx.generators.directed_heavy_hex_graph`,
    :func:`~retworkx.generators.heavy_square_graph`,
    and :func:`~retworkx.generators.directed_heavy_square_graph` generator
    functions. When the input parameter ``d`` was set to 1 these functions
    would previously raise a ``pyo3_runtime.PanicException`` instead of
    returning the expected graph (a single node). 
    Fixed `#452 <https://github.com/Qiskit/retworkx/issues/452>`__
