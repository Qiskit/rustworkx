---
features:
  - |
    Added a new :func:`~rustworkx.bfs_search` (and it's per type variants
    :func:`~rustworkx.graph_bfs_search` and :func:`~rustworkx.digraph_bfs_search`)
    that traverses the graph in a breadth-first manner and emits events at specified
    points. The events are handled by a visitor object that subclasses
    :class:`~rustworkx.visit.BFSVisitor` through the appropriate callback functions.
    For example:

    .. jupyter-execute::
  
      import rustworkx
      from rustworkx.visit import BFSVisitor


      class TreeEdgesRecorder(BFSVisitor):

          def __init__(self):
              self.edges = []
  
          def tree_edge(self, edge):
              self.edges.append(edge)

      graph = rustworkx.PyGraph()
      graph.extend_from_edge_list([(1, 3), (0, 1), (2, 1), (0, 2)])
      vis = TreeEdgesRecorder()
      rustworkx.bfs_search(graph, [0], vis)
      print('Tree edges:', vis.edges)