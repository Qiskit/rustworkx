---
features:
  - |
    Added a new function, :func:`~rustworkx.edge_betweenness_centrality` to compute
    edge betweenness centrality of all edges in a :class:`~rustworkx.PyGraph` or
    :class:`~rustworkx.PyDiGraph` object. The algorithm used in this function is
    based on:
    Ulrik Brandes, On Variants of Shortest-Path Betweenness Centrality
    and their Generic Computation. Social Networks 30(2):136-145, 2008.
    Edge betweenness centrality of an edge :math:`e` is the sum of the
    fraction of all-pairs shortest paths that pass through :math:`e`
    
    .. math::
  
       c_B(e) =\sum_{s,t \in V} \frac{\sigma(s, t|e)}{\sigma(s, t)}
  
    where :math:`V` is the set of nodes, :math:`\sigma(s, t)` is the
    number of shortest :math:`(s, t)`-paths, and :math:`\sigma(s, t|e)` is
    the number of those paths passing through edge :math:`e`.
    For example, the following computes the edge betweenness centrality for all
    edges in a 5x5 grid graph and uses the result to color the edges in a graph
    visualization:
    
    .. jupyter-execute::
    
      import rustworkx
      from rustworkx.visualization import mpl_draw
      
      graph = rustworkx.generators.grid_graph(5, 5)
      btw = rustworkx.edge_betweenness_centrality(graph)
      # Color edges in graph visualization with edge betweenness centrality
      colors = []
      for i in graph.edge_indices():
          colors.append(btw[i])
      mpl_draw(graph, edge_color=colors)
  - |
    Added a new function to rustworkx-core ``edge_betweenness_centrality`` to
    the ``rustworkx_core:centrality`` module which computes the edge betweenness
    centrality of all edges in a given graph.
