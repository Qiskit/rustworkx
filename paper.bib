@InProceedings{SciPyProceedings_11,
  author =       {Aric A. Hagberg and Daniel A. Schult and Pieter J. Swart},
  title =        {Exploring Network Structure, Dynamics, and Function using NetworkX},
  booktitle =   {Proceedings of the 7th Python in Science Conference},
  pages =     {11 - 15},
  address = {Pasadena, CA USA},
  year =      {2008},
  editor =    {Ga\"el Varoquaux and Travis Vaught and Jarrod Millman},
}

@software{Qiskit2021,
  author       = {Matthew Treinish and
                  Jay Gambetta and
                  Diego M. Rodríguez and
                  Manoel Marques and
                  Luciano Bello and
                  Christopher J. Wood and
                  Juan Gomez and
                  Paul Nation and
                  Richard Chen and
                  Erick Winston and
                  Julien Gacon and
                  Andrew Cross and
                  Kevin Krsulich and
                  Ismael Faro Sertage and
                  Steve Wood and
                  Thomas Alexander and
                  Lauren Capelluto and
                  Salvador de la Puente González and
                  Jesús Rubio and
                  Naoki Kanazawa and
                  Edwin Navarro and
                  Maddy Tod and
                  Ikko Hamamura and
                  Antonio Mezzacapo and
                  Lev Bishop and
                  Shaohan Hu and
                  abbycross and
                  Christa Zoufal and
                  Donny Greenberg and
                  Stefan Woerner},
  title        = {Qiskit/qiskit-terra: Qiskit Terra  0.18.2},
  month        = sep,
  year         = 2021,
  publisher    = {Zenodo},
  version      = {0.18.2},
  doi          = {10.5281/zenodo.2583252},
  url          = {https://doi.org/10.5281/zenodo.2583252}
}

@InProceedings{Childs2019,
  author =	{Andrew M. Childs and Eddie Schoute and Cem M. Unsal},
  title =	{{Circuit Transformations for Quantum Architectures}},
  booktitle =	{14th Conference on the Theory of Quantum Computation, Communication and Cryptography (TQC 2019)},
  pages =	{3:1--3:24},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-112-2},
  ISSN =	{1868-8969},
  year =	{2019},
  volume =	{135},
  editor =	{Wim van Dam and Laura Mancinska},
  publisher =	{Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{http://drops.dagstuhl.de/opus/volltexte/2019/10395},
  URN =		{urn:nbn:de:0030-drops-103958},
  doi =		{10.4230/LIPIcs.TQC.2019.3},
  annote =	{Keywords: quantum circuit, quantum architectures, circuit mapping}
}

@article{10.1145/2692956.2663188,
  author = {Matsakis, Nicholas D. and Klock, Felix S.},
  title = {The Rust Language},
  year = {2014},
  issue_date = {December 2014},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {34},
  number = {3},
  issn = {1094-3641},
  url = {https://doi.org/10.1145/2692956.2663188},
  doi = {10.1145/2692956.2663188},
  abstract = {Rust is a new programming language for developing reliable and efficient systems.
  It is designed to support concurrency and parallelism in building applications and
  libraries that take full advantage of modern hardware. Rust's static type system is
  safe1 and expressive and provides strong guarantees about isolation, concurrency,
  and memory safety.Rust also offers a clear performance model, making it easier to
  predict and reason about program efficiency. One important way it accomplishes this
  is by allowing fine-grained control over memory representations, with direct support
  for stack allocation and contiguous record storage. The language balances such controls
  with the absolute requirement for safety: Rust's type system and runtime guarantee
  the absence of data races, buffer overflows, stack overflows, and accesses to uninitialized
  or deallocated memory.},
  journal = {Ada Lett.},
  month = oct,
  pages = {103–104},
  numpages = {2},
  keywords = {rust, systems programming, memory management, affine type systems}
}


@inproceedings{Matsakis2014,
  author = {Matsakis, Nicholas D. and Klock, Felix S.},
  title = {The Rust Language},
  year = {2014},
  isbn = {9781450332170},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/2663171.2663188},
  doi = {10.1145/2663171.2663188},
  abstract = {Rust is a new programming language for developing reliable and efficient systems.
  It is designed to support concurrency and parallelism in building applications and
  libraries that take full advantage of modern hardware. Rust's static type system is
  safe1 and expressive and provides strong guarantees about isolation, concurrency,
  and memory safety.Rust also offers a clear performance model, making it easier to
  predict and reason about program efficiency. One important way it accomplishes this
  is by allowing fine-grained control over memory representations, with direct support
  for stack allocation and contiguous record storage. The language balances such controls
  with the absolute requirement for safety: Rust's type system and runtime guarantee
  the absence of data races, buffer overflows, stack overflows, and accesses to uninitialized
  or deallocated memory.},
  booktitle = {Proceedings of the 2014 ACM SIGAda Annual Conference on High Integrity Language Technology},
  pages = {103–104},
  numpages = {2},
  keywords = {affine type systems, rust, memory management, systems programming},
  location = {Portland, Oregon, USA},
  series = {HILT '14}
}

@article{Leskovec2016,
  author = {Leskovec, Jure and Sosi\v{c}, Rok},
  title = {SNAP: A General-Purpose Network Analysis and Graph-Mining Library},
  year = {2016},
  issue_date = {October 2016},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {8},
  number = {1},
  issn = {2157-6904},
  url = {https://doi.org/10.1145/2898361},
  doi = {10.1145/2898361},
  abstract = {Large networks are becoming a widely used abstraction for studying complex systems
  in a broad set of disciplines, ranging from social-network analysis to molecular biology
  and neuroscience. Despite an increasing need to analyze and manipulate large networks,
  only a limited number of tools are available for this task.Here, we describe the Stanford
  Network Analysis Platform (SNAP), a general-purpose, high-performance system that
  provides easy-to-use, high-level operations for analysis and manipulation of large
  networks. We present SNAP functionality, describe its implementational details, and
  give performance benchmarks. SNAP has been developed for single big-memory machines,
  and it balances the trade-off between maximum performance, compact in-memory graph
  representation, and the ability to handle dynamic graphs in which nodes and edges
  are being added or removed over time. SNAP can process massive networks with hundreds
  of millions of nodes and billions of edges. SNAP offers over 140 different graph algorithms
  that can efficiently manipulate large graphs, calculate structural properties, generate
  regular and random graphs, and handle attributes and metadata on nodes and edges.
  Besides being able to handle large graphs, an additional strength of SNAP is that
  networks and their attributes are fully dynamic; they can be modified during the computation
  at low cost. SNAP is provided as an open-source library in C++ as well as a module
  in Python.We also describe the Stanford Large Network Dataset, a set of social and
  information real-world networks and datasets, which we make publicly available. The
  collection is a complementary resource to our SNAP software and is widely used for
  development and benchmarking of graph analytics algorithms.},
  journal = {ACM Trans. Intell. Syst. Technol.},
  month = jul,
  articleno = {1},
  numpages = {20},
  keywords = {graph analytics, data mining, open-source software, Networks, graphs}
}

@Article{Csardi2006,
  title = {The igraph software package for complex network research},
  author = {Gabor Csardi and Tamas Nepusz},
  journal = {InterJournal},
  volume = {Complex Systems},
  pages = {1695},
  year = {2006},
  url = {https://igraph.org},
}

@article{Peixoto2014,
  title = {The graph-tool python library},
  url = {http://figshare.com/articles/graph_tool/1164194},
  doi = {10.6084/m9.figshare.1164194},
  urldate = {2014-09-10},
  journal = {figshare},
  author = {Peixoto, Tiago P.},
  year = {2014},
  keywords = {all, complex networks, graph, network, other}
}

@misc{Ullberg2021,
  author = {Seaton Ullberg},
  title = {atompack: A flexible Python library for atomic structure generation},
  year = {2021},
  publisher = {GitHub},
  journal = {GitHub repository},
  url = {https://github.com/seatonullberg/atompack}
}

@misc{Jha2021,
  author = {Shantanu Jha and Jessie Chen and Aaron Householder and Allen Mi},
  title = {qtcodes},
  year = {2021},
  publisher = {GitHub},
  journal = {GitHub repository},
  url = {https://github.com/yaleqc/qtcodes}
}

@misc{bluss2021,
  author = {
    bluss 
    and Jean-Marie Comets 
    and Agustín Borgna 
    and Martin Larralde
    and Bruce Mitchener
    and Anton Kochkov
    },
  title = {petgraph},
  year = {2021},
  publisher = {GitHub},
  journal = {GitHub repository},
  url = {https://github.com/petgraph/petgraph}
}

@misc{Hewitt2021,
  author = {
    David Hewitt
    and Yuji Kanagawa
    and Nikolay Kim
    and Daniel Grunwald
    and Alexander Niederbühl
    and messense
    and Bruno Kolenbrander
    and Georg Brandl
    and Paul Ganssle
    },
  title = {PyO3},
  year = {2021},
  publisher = {GitHub},
  journal = {GitHub repository},
  url = {https://github.com/PyO3/pyo3}
}

@Inbook{Demetrescu2016,
author="Demetrescu, Camil
and Goldberg, Andrew V.
and Johnson, David S.",
editor="Kao, Ming-Yang",
title="Implementation Challenge for Shortest Paths",
bookTitle="Encyclopedia of Algorithms",
year="2016",
publisher="Springer New York",
address="New York, NY",
pages="947--951",
isbn="978-1-4939-2864-4",
doi="10.1007/978-1-4939-2864-4_181",
url="https://doi.org/10.1007/978-1-4939-2864-4_181"
}
