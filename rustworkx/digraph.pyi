# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.

# This file contains only type annotations for PyO3 functions and classes
# For implementation details, see __init__.py and src/digraph.rs

import numpy as np
from .iterators import *

from typing import Any, Callable, Generic, TypeVar, Sequence, TYPE_CHECKING

if TYPE_CHECKING:
    from .graph import PyGraph

__all__ = ["PyDiGraph"]

S = TypeVar("S")
T = TypeVar("T")

class PyDiGraph(Generic[S, T]):
    attrs: Any
    check_cycle: bool = ...
    multigraph: bool = ...
    def __init__(
        self,
        /,
        check_cycle: bool = ...,
        multigraph: bool = ...,
    ) -> None: ...
    def add_child(self, parent: int, obj: S, edge: T, /) -> int: ...
    def add_edge(self, parent: int, child: int, edge: T, /) -> int: ...
    def add_edges_from(
        self,
        obj_list: Sequence[tuple[int, int, T]],
        /,
    ) -> list[int]: ...
    def add_edges_from_no_data(
        self: PyDiGraph[S, T | None], obj_list: Sequence[tuple[int, int]], /
    ) -> list[int]: ...
    def add_node(self, obj: S, /) -> int: ...
    def add_nodes_from(self, obj_list: Sequence[S], /) -> NodeIndices: ...
    def add_parent(self, child: int, obj: S, edge: T, /) -> int: ...
    def adj(self, node: int, /) -> dict[int, T]: ...
    def adj_direction(self, node: int, direction: bool, /) -> dict[int, T]: ...
    def clear(self) -> None: ...
    def clear_edges(self) -> None: ...
    def compose(
        self,
        other: PyDiGraph[S, T],
        node_map: dict[int, tuple[int, T]],
        /,
        node_map_func: Callable[[S], int] | None = ...,
        edge_map_func: Callable[[T], int] | None = ...,
    ) -> dict[int, int]: ...
    def contract_nodes(
        self,
        nodes: Sequence[int],
        obj: S,
        /,
        check_cycle: bool | None = ...,
        weight_combo_fn: Callable[[T, T], T] | None = ...,
    ) -> int: ...
    def copy(self) -> PyDiGraph[S, T]: ...
    def edge_index_map(self) -> EdgeIndexMap[T]: ...
    def edge_indices(self) -> EdgeIndices: ...
    def edge_indices_from_endpoints(self, node_a: int, node_b: int) -> EdgeIndices: ...
    def edge_list(self) -> EdgeList: ...
    def edges(self) -> list[T]: ...
    def edge_subgraph(self, edge_list: Sequence[tuple[int, int]], /) -> PyDiGraph[S, T]: ...
    def extend_from_edge_list(
        self: PyDiGraph[S | None, T | None], edge_list: Sequence[tuple[int, int]], /
    ) -> None: ...
    def extend_from_weighted_edge_list(
        self: PyDiGraph[S | None, T],
        edge_list: Sequence[tuple[int, int, T]],
        /,
    ) -> None: ...
    def filter_edges(self, filter_function: Callable[[T], bool]) -> EdgeIndices: ...
    def filter_nodes(self, filter_function: Callable[[S], bool]) -> NodeIndices: ...
    def find_adjacent_node_by_edge(self, node: int, predicate: Callable[[T], bool], /) -> S: ...
    def find_node_by_weight(
        self,
        obj: Callable[[S], bool],
        /,
    ) -> int | None: ...
    def find_predecessors_by_edge(
        self, node: int, filter_fn: Callable[[T], bool], /
    ) -> list[S]: ...
    def find_predecessor_node_by_edge(self, node: int, predicate: Callable[[T], bool], /) -> S: ...
    def find_successors_by_edge(self, node: int, filter_fn: Callable[[T], bool], /) -> list[S]: ...
    @staticmethod
    def from_adjacency_matrix(
        matrix: np.ndarray, /, null_value: float = ...
    ) -> PyDiGraph[int, float]: ...
    @staticmethod
    def from_complex_adjacency_matrix(
        matrix: np.ndarray, /, null_value: complex = ...
    ) -> PyDiGraph[int, complex]: ...
    def get_all_edge_data(self, node_a: int, node_b: int, /) -> list[T]: ...
    def get_edge_data(self, node_a: int, node_b: int, /) -> T: ...
    def get_node_data(self, node: int, /) -> S: ...
    def get_edge_data_by_index(self, edge_index: int, /) -> T: ...
    def get_edge_endpoints_by_index(self, edge_index: int, /) -> tuple[int, int]: ...
    def has_edge(self, node_a: int, node_b: int, /) -> bool: ...
    def has_parallel_edges(self) -> bool: ...
    def in_degree(self, node: int, /) -> int: ...
    def in_edges(self, node: int, /) -> WeightedEdgeList[T]: ...
    def incident_edge_index_map(self, node: int, /, all_edges: bool = ...) -> EdgeIndexMap: ...
    def incident_edges(self, node: int, /, all_edges: bool = ...) -> EdgeIndices: ...
    def insert_node_on_in_edges(self, node: int, ref_node: int, /) -> None: ...
    def insert_node_on_in_edges_multiple(self, node: int, ref_nodes: Sequence[int], /) -> None: ...
    def insert_node_on_out_edges(self, node: int, ref_node: int, /) -> None: ...
    def insert_node_on_out_edges_multiple(self, node: int, ref_nodes: Sequence[int], /) -> None: ...
    def is_symmetric(self) -> bool: ...
    def make_symmetric(self, edge_payload_fn: Callable[[T], T] | None = ...) -> None: ...
    def merge_nodes(self, u: int, v: int, /) -> None: ...
    def neighbors(self, node: int, /) -> NodeIndices: ...
    def node_indexes(self) -> NodeIndices: ...
    def node_indices(self) -> NodeIndices: ...
    def nodes(self) -> list[S]: ...
    def num_edges(self) -> int: ...
    def num_nodes(self) -> int: ...
    def out_degree(self, node: int, /) -> int: ...
    def out_edges(self, node: int, /) -> WeightedEdgeList[T]: ...
    def predecessor_indices(self, node: int, /) -> NodeIndices: ...
    def predecessors(self, node: int, /) -> list[S]: ...
    @staticmethod
    def read_edge_list(
        path: str,
        /,
        comment: str | None = ...,
        deliminator: str | None = ...,
        labels: bool = ...,
    ) -> PyDiGraph: ...
    def remove_edge(self, parent: int, child: int, /) -> None: ...
    def remove_edge_from_index(self, edge: int, /) -> None: ...
    def remove_edges_from(self, index_list: Sequence[tuple[int, int]], /) -> None: ...
    def remove_node(self, node: int, /) -> None: ...
    def remove_node_retain_edges(
        self,
        node: int,
        /,
        use_outgoing: bool | None = ...,
        condition: Callable[[S, S], bool] | None = ...,
    ) -> None: ...
    def remove_nodes_from(self, index_list: Sequence[int], /) -> None: ...
    def subgraph(self, nodes: Sequence[int], /, preserve_attrs: bool = ...) -> PyDiGraph[S, T]: ...
    def substitute_node_with_subgraph(
        self,
        node: int,
        other: PyDiGraph[S, T],
        edge_map_fn: Callable[[int, int, T], int | None],
        /,
        node_filter: Callable[[S], bool] | None = ...,
        edge_weight_map: Callable[[T], T] | None = ...,
    ) -> NodeMap: ...
    def successor_indices(self, node: int, /) -> NodeIndices: ...
    def successors(self, node: int, /) -> list[S]: ...
    def to_dot(
        self,
        /,
        node_attr: Callable[[S], dict[str, str]] | None = ...,
        edge_attr: Callable[[T], dict[str, str]] | None = ...,
        graph_attr: dict[str, str] | None = ...,
        filename: str | None = ...,
    ) -> str | None: ...
    def to_undirected(
        self,
        /,
        multigraph: bool = ...,
        weight_combo_fn: Callable[[T, T], T] | None = ...,
    ) -> PyGraph[S, T]: ...
    def update_edge(
        self,
        source: int,
        target: int,
        edge: T,
        /,
    ) -> None: ...
    def update_edge_by_index(self, edge_index: int, edge: T, /) -> None: ...
    def weighted_edge_list(self) -> WeightedEdgeList[T]: ...
    def write_edge_list(
        self,
        path: str,
        /,
        deliminator: str | None = ...,
        weight_fn: Callable[[T], str] | None = ...,
    ) -> None: ...
    def reverse(self) -> None: ...
    def __delitem__(self, idx: int, /) -> None: ...
    def __getitem__(self, idx: int, /) -> S: ...
    def __getstate__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __setitem__(self, idx: int, value: S, /) -> None: ...
    def __setstate__(self, state, /) -> None: ...
