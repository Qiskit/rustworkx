Search.setIndex({"docnames": ["CONTRIBUTING", "api/algorithm_functions/centrality", "api/algorithm_functions/coloring", "api/algorithm_functions/connectivity_and_cycles", "api/algorithm_functions/dag_algorithms", "api/algorithm_functions/graph_operations", "api/algorithm_functions/index", "api/algorithm_functions/isomorphism", "api/algorithm_functions/link_analysis", "api/algorithm_functions/matching", "api/algorithm_functions/other", "api/algorithm_functions/shortest_paths", "api/algorithm_functions/traversal", "api/algorithm_functions/tree", "api/converters", "api/custom_return_types", "api/exceptions", "api/generators", "api/graph_classes", "api/index", "api/layout_functions", "api/pydigraph_api_functions", "api/pygraph_api_functions", "api/random_graph_generator_functions", "api/serialization", "apiref/rustworkx.AllPairsPathLengthMapping", "apiref/rustworkx.AllPairsPathLengthMapping.items", "apiref/rustworkx.AllPairsPathLengthMapping.keys", "apiref/rustworkx.AllPairsPathLengthMapping.values", "apiref/rustworkx.AllPairsPathMapping", "apiref/rustworkx.AllPairsPathMapping.items", "apiref/rustworkx.AllPairsPathMapping.keys", "apiref/rustworkx.AllPairsPathMapping.values", "apiref/rustworkx.BFSPredecessors", "apiref/rustworkx.BFSSuccessors", "apiref/rustworkx.BiconnectedComponents", "apiref/rustworkx.BiconnectedComponents.items", "apiref/rustworkx.BiconnectedComponents.keys", "apiref/rustworkx.BiconnectedComponents.values", "apiref/rustworkx.CentralityMapping", "apiref/rustworkx.CentralityMapping.items", "apiref/rustworkx.CentralityMapping.keys", "apiref/rustworkx.CentralityMapping.values", "apiref/rustworkx.Chains", "apiref/rustworkx.ColoringStrategy", "apiref/rustworkx.DAGHasCycle", "apiref/rustworkx.DAGWouldCycle", "apiref/rustworkx.EdgeCentralityMapping", "apiref/rustworkx.EdgeCentralityMapping.items", "apiref/rustworkx.EdgeCentralityMapping.keys", "apiref/rustworkx.EdgeCentralityMapping.values", "apiref/rustworkx.EdgeIndexMap", "apiref/rustworkx.EdgeIndexMap.items", "apiref/rustworkx.EdgeIndexMap.keys", "apiref/rustworkx.EdgeIndexMap.values", "apiref/rustworkx.EdgeIndices", "apiref/rustworkx.EdgeList", "apiref/rustworkx.GraphNotBipartite", "apiref/rustworkx.IndexPartitionBlock", "apiref/rustworkx.InvalidMapping", "apiref/rustworkx.InvalidNode", "apiref/rustworkx.JSONSerializationError", "apiref/rustworkx.NegativeCycle", "apiref/rustworkx.NoEdgeBetweenNodes", "apiref/rustworkx.NoPathFound", "apiref/rustworkx.NoSuitableNeighbors", "apiref/rustworkx.NodeIndices", "apiref/rustworkx.NodeMap", "apiref/rustworkx.NodeMap.items", "apiref/rustworkx.NodeMap.keys", "apiref/rustworkx.NodeMap.values", "apiref/rustworkx.NullGraph", "apiref/rustworkx.PathLengthMapping", "apiref/rustworkx.PathLengthMapping.items", "apiref/rustworkx.PathLengthMapping.keys", "apiref/rustworkx.PathLengthMapping.values", "apiref/rustworkx.PathMapping", "apiref/rustworkx.PathMapping.items", "apiref/rustworkx.PathMapping.keys", "apiref/rustworkx.PathMapping.values", "apiref/rustworkx.Pos2DMapping", "apiref/rustworkx.Pos2DMapping.items", "apiref/rustworkx.Pos2DMapping.keys", "apiref/rustworkx.Pos2DMapping.values", "apiref/rustworkx.ProductNodeMap", "apiref/rustworkx.ProductNodeMap.items", "apiref/rustworkx.ProductNodeMap.keys", "apiref/rustworkx.ProductNodeMap.values", "apiref/rustworkx.PyDAG", "apiref/rustworkx.PyDAG.add_child", "apiref/rustworkx.PyDAG.add_edge", "apiref/rustworkx.PyDAG.add_edges_from", "apiref/rustworkx.PyDAG.add_edges_from_no_data", "apiref/rustworkx.PyDAG.add_node", "apiref/rustworkx.PyDAG.add_nodes_from", "apiref/rustworkx.PyDAG.add_parent", "apiref/rustworkx.PyDAG.adj", "apiref/rustworkx.PyDAG.adj_direction", "apiref/rustworkx.PyDAG.clear", "apiref/rustworkx.PyDAG.clear_edges", "apiref/rustworkx.PyDAG.compose", "apiref/rustworkx.PyDAG.contract_nodes", "apiref/rustworkx.PyDAG.copy", "apiref/rustworkx.PyDAG.edge_index_map", "apiref/rustworkx.PyDAG.edge_indices", "apiref/rustworkx.PyDAG.edge_indices_from_endpoints", "apiref/rustworkx.PyDAG.edge_list", "apiref/rustworkx.PyDAG.edge_subgraph", "apiref/rustworkx.PyDAG.edges", "apiref/rustworkx.PyDAG.extend_from_edge_list", "apiref/rustworkx.PyDAG.extend_from_weighted_edge_list", "apiref/rustworkx.PyDAG.filter_edges", "apiref/rustworkx.PyDAG.filter_nodes", "apiref/rustworkx.PyDAG.find_adjacent_node_by_edge", "apiref/rustworkx.PyDAG.find_node_by_weight", "apiref/rustworkx.PyDAG.find_predecessor_node_by_edge", "apiref/rustworkx.PyDAG.find_predecessors_by_edge", "apiref/rustworkx.PyDAG.find_successors_by_edge", "apiref/rustworkx.PyDAG.from_adjacency_matrix", "apiref/rustworkx.PyDAG.from_complex_adjacency_matrix", "apiref/rustworkx.PyDAG.get_all_edge_data", "apiref/rustworkx.PyDAG.get_edge_data", "apiref/rustworkx.PyDAG.get_edge_data_by_index", "apiref/rustworkx.PyDAG.get_edge_endpoints_by_index", "apiref/rustworkx.PyDAG.get_node_data", "apiref/rustworkx.PyDAG.has_edge", "apiref/rustworkx.PyDAG.has_node", "apiref/rustworkx.PyDAG.has_parallel_edges", "apiref/rustworkx.PyDAG.in_degree", "apiref/rustworkx.PyDAG.in_edges", "apiref/rustworkx.PyDAG.incident_edge_index_map", "apiref/rustworkx.PyDAG.incident_edges", "apiref/rustworkx.PyDAG.insert_node_on_in_edges", "apiref/rustworkx.PyDAG.insert_node_on_in_edges_multiple", "apiref/rustworkx.PyDAG.insert_node_on_out_edges", "apiref/rustworkx.PyDAG.insert_node_on_out_edges_multiple", "apiref/rustworkx.PyDAG.is_symmetric", "apiref/rustworkx.PyDAG.make_symmetric", "apiref/rustworkx.PyDAG.merge_nodes", "apiref/rustworkx.PyDAG.neighbors", "apiref/rustworkx.PyDAG.node_indexes", "apiref/rustworkx.PyDAG.node_indices", "apiref/rustworkx.PyDAG.nodes", "apiref/rustworkx.PyDAG.num_edges", "apiref/rustworkx.PyDAG.num_nodes", "apiref/rustworkx.PyDAG.out_degree", "apiref/rustworkx.PyDAG.out_edges", "apiref/rustworkx.PyDAG.predecessor_indices", "apiref/rustworkx.PyDAG.predecessors", "apiref/rustworkx.PyDAG.read_edge_list", "apiref/rustworkx.PyDAG.remove_edge", "apiref/rustworkx.PyDAG.remove_edge_from_index", "apiref/rustworkx.PyDAG.remove_edges_from", "apiref/rustworkx.PyDAG.remove_node", "apiref/rustworkx.PyDAG.remove_node_retain_edges", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_id", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_key", "apiref/rustworkx.PyDAG.remove_nodes_from", "apiref/rustworkx.PyDAG.reverse", "apiref/rustworkx.PyDAG.subgraph", "apiref/rustworkx.PyDAG.substitute_node_with_subgraph", "apiref/rustworkx.PyDAG.successor_indices", "apiref/rustworkx.PyDAG.successors", "apiref/rustworkx.PyDAG.to_dot", "apiref/rustworkx.PyDAG.to_undirected", "apiref/rustworkx.PyDAG.update_edge", "apiref/rustworkx.PyDAG.update_edge_by_index", "apiref/rustworkx.PyDAG.weighted_edge_list", "apiref/rustworkx.PyDAG.write_edge_list", "apiref/rustworkx.PyDiGraph", "apiref/rustworkx.PyDiGraph.add_child", "apiref/rustworkx.PyDiGraph.add_edge", "apiref/rustworkx.PyDiGraph.add_edges_from", "apiref/rustworkx.PyDiGraph.add_edges_from_no_data", "apiref/rustworkx.PyDiGraph.add_node", "apiref/rustworkx.PyDiGraph.add_nodes_from", "apiref/rustworkx.PyDiGraph.add_parent", "apiref/rustworkx.PyDiGraph.adj", "apiref/rustworkx.PyDiGraph.adj_direction", "apiref/rustworkx.PyDiGraph.clear", "apiref/rustworkx.PyDiGraph.clear_edges", "apiref/rustworkx.PyDiGraph.compose", "apiref/rustworkx.PyDiGraph.contract_nodes", "apiref/rustworkx.PyDiGraph.copy", "apiref/rustworkx.PyDiGraph.edge_index_map", "apiref/rustworkx.PyDiGraph.edge_indices", "apiref/rustworkx.PyDiGraph.edge_indices_from_endpoints", "apiref/rustworkx.PyDiGraph.edge_list", "apiref/rustworkx.PyDiGraph.edge_subgraph", "apiref/rustworkx.PyDiGraph.edges", "apiref/rustworkx.PyDiGraph.extend_from_edge_list", "apiref/rustworkx.PyDiGraph.extend_from_weighted_edge_list", "apiref/rustworkx.PyDiGraph.filter_edges", "apiref/rustworkx.PyDiGraph.filter_nodes", "apiref/rustworkx.PyDiGraph.find_adjacent_node_by_edge", "apiref/rustworkx.PyDiGraph.find_node_by_weight", "apiref/rustworkx.PyDiGraph.find_predecessor_node_by_edge", "apiref/rustworkx.PyDiGraph.find_predecessors_by_edge", "apiref/rustworkx.PyDiGraph.find_successors_by_edge", "apiref/rustworkx.PyDiGraph.from_adjacency_matrix", "apiref/rustworkx.PyDiGraph.from_complex_adjacency_matrix", "apiref/rustworkx.PyDiGraph.get_all_edge_data", "apiref/rustworkx.PyDiGraph.get_edge_data", "apiref/rustworkx.PyDiGraph.get_edge_data_by_index", "apiref/rustworkx.PyDiGraph.get_edge_endpoints_by_index", "apiref/rustworkx.PyDiGraph.get_node_data", "apiref/rustworkx.PyDiGraph.has_edge", "apiref/rustworkx.PyDiGraph.has_node", "apiref/rustworkx.PyDiGraph.has_parallel_edges", "apiref/rustworkx.PyDiGraph.in_degree", "apiref/rustworkx.PyDiGraph.in_edges", "apiref/rustworkx.PyDiGraph.incident_edge_index_map", "apiref/rustworkx.PyDiGraph.incident_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges_multiple", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges_multiple", "apiref/rustworkx.PyDiGraph.is_symmetric", "apiref/rustworkx.PyDiGraph.make_symmetric", "apiref/rustworkx.PyDiGraph.merge_nodes", "apiref/rustworkx.PyDiGraph.neighbors", "apiref/rustworkx.PyDiGraph.node_indexes", "apiref/rustworkx.PyDiGraph.node_indices", "apiref/rustworkx.PyDiGraph.nodes", "apiref/rustworkx.PyDiGraph.num_edges", "apiref/rustworkx.PyDiGraph.num_nodes", "apiref/rustworkx.PyDiGraph.out_degree", "apiref/rustworkx.PyDiGraph.out_edges", "apiref/rustworkx.PyDiGraph.predecessor_indices", "apiref/rustworkx.PyDiGraph.predecessors", "apiref/rustworkx.PyDiGraph.read_edge_list", "apiref/rustworkx.PyDiGraph.remove_edge", "apiref/rustworkx.PyDiGraph.remove_edge_from_index", "apiref/rustworkx.PyDiGraph.remove_edges_from", "apiref/rustworkx.PyDiGraph.remove_node", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_id", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_key", "apiref/rustworkx.PyDiGraph.remove_nodes_from", "apiref/rustworkx.PyDiGraph.reverse", "apiref/rustworkx.PyDiGraph.subgraph", "apiref/rustworkx.PyDiGraph.substitute_node_with_subgraph", "apiref/rustworkx.PyDiGraph.successor_indices", "apiref/rustworkx.PyDiGraph.successors", "apiref/rustworkx.PyDiGraph.to_dot", "apiref/rustworkx.PyDiGraph.to_undirected", "apiref/rustworkx.PyDiGraph.update_edge", "apiref/rustworkx.PyDiGraph.update_edge_by_index", "apiref/rustworkx.PyDiGraph.weighted_edge_list", "apiref/rustworkx.PyDiGraph.write_edge_list", "apiref/rustworkx.PyGraph", "apiref/rustworkx.PyGraph.add_edge", "apiref/rustworkx.PyGraph.add_edges_from", "apiref/rustworkx.PyGraph.add_edges_from_no_data", "apiref/rustworkx.PyGraph.add_node", "apiref/rustworkx.PyGraph.add_nodes_from", "apiref/rustworkx.PyGraph.adj", "apiref/rustworkx.PyGraph.clear", "apiref/rustworkx.PyGraph.clear_edges", "apiref/rustworkx.PyGraph.compose", "apiref/rustworkx.PyGraph.contract_nodes", "apiref/rustworkx.PyGraph.copy", "apiref/rustworkx.PyGraph.degree", "apiref/rustworkx.PyGraph.edge_index_map", "apiref/rustworkx.PyGraph.edge_indices", "apiref/rustworkx.PyGraph.edge_indices_from_endpoints", "apiref/rustworkx.PyGraph.edge_list", "apiref/rustworkx.PyGraph.edge_subgraph", "apiref/rustworkx.PyGraph.edges", "apiref/rustworkx.PyGraph.extend_from_edge_list", "apiref/rustworkx.PyGraph.extend_from_weighted_edge_list", "apiref/rustworkx.PyGraph.filter_edges", "apiref/rustworkx.PyGraph.filter_nodes", "apiref/rustworkx.PyGraph.find_node_by_weight", "apiref/rustworkx.PyGraph.from_adjacency_matrix", "apiref/rustworkx.PyGraph.from_complex_adjacency_matrix", "apiref/rustworkx.PyGraph.get_all_edge_data", "apiref/rustworkx.PyGraph.get_edge_data", "apiref/rustworkx.PyGraph.get_edge_data_by_index", "apiref/rustworkx.PyGraph.get_edge_endpoints_by_index", "apiref/rustworkx.PyGraph.get_node_data", "apiref/rustworkx.PyGraph.has_edge", "apiref/rustworkx.PyGraph.has_node", "apiref/rustworkx.PyGraph.has_parallel_edges", "apiref/rustworkx.PyGraph.in_edges", "apiref/rustworkx.PyGraph.incident_edge_index_map", "apiref/rustworkx.PyGraph.incident_edges", "apiref/rustworkx.PyGraph.neighbors", "apiref/rustworkx.PyGraph.node_indexes", "apiref/rustworkx.PyGraph.node_indices", "apiref/rustworkx.PyGraph.nodes", "apiref/rustworkx.PyGraph.num_edges", "apiref/rustworkx.PyGraph.num_nodes", "apiref/rustworkx.PyGraph.out_edges", "apiref/rustworkx.PyGraph.read_edge_list", "apiref/rustworkx.PyGraph.remove_edge", "apiref/rustworkx.PyGraph.remove_edge_from_index", "apiref/rustworkx.PyGraph.remove_edges_from", "apiref/rustworkx.PyGraph.remove_node", "apiref/rustworkx.PyGraph.remove_nodes_from", "apiref/rustworkx.PyGraph.subgraph", "apiref/rustworkx.PyGraph.substitute_node_with_subgraph", "apiref/rustworkx.PyGraph.to_directed", "apiref/rustworkx.PyGraph.to_dot", "apiref/rustworkx.PyGraph.update_edge", "apiref/rustworkx.PyGraph.update_edge_by_index", "apiref/rustworkx.PyGraph.weighted_edge_list", "apiref/rustworkx.PyGraph.write_edge_list", "apiref/rustworkx.RelationalCoarsestPartition", "apiref/rustworkx.TopologicalSorter", "apiref/rustworkx.TopologicalSorter.done", "apiref/rustworkx.TopologicalSorter.get_ready", "apiref/rustworkx.TopologicalSorter.is_active", "apiref/rustworkx.WeightedEdgeList", "apiref/rustworkx.adjacency_matrix", "apiref/rustworkx.all_pairs_all_simple_paths", "apiref/rustworkx.all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.all_pairs_dijkstra_path_lengths", "apiref/rustworkx.all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.all_shortest_paths", "apiref/rustworkx.all_simple_paths", "apiref/rustworkx.ancestors", "apiref/rustworkx.articulation_points", "apiref/rustworkx.astar_shortest_path", "apiref/rustworkx.barabasi_albert_graph", "apiref/rustworkx.bellman_ford_shortest_path_lengths", "apiref/rustworkx.bellman_ford_shortest_paths", "apiref/rustworkx.betweenness_centrality", "apiref/rustworkx.bfs_predecessors", "apiref/rustworkx.bfs_search", "apiref/rustworkx.bfs_successors", "apiref/rustworkx.biconnected_components", "apiref/rustworkx.bipartite_layout", "apiref/rustworkx.bridges", "apiref/rustworkx.cartesian_product", "apiref/rustworkx.chain_decomposition", "apiref/rustworkx.circular_layout", "apiref/rustworkx.closeness_centrality", "apiref/rustworkx.collect_bicolor_runs", "apiref/rustworkx.collect_runs", "apiref/rustworkx.complement", "apiref/rustworkx.connected_components", "apiref/rustworkx.connected_subgraphs", "apiref/rustworkx.core_number", "apiref/rustworkx.cycle_basis", "apiref/rustworkx.dag_longest_path", "apiref/rustworkx.dag_longest_path_length", "apiref/rustworkx.dag_weighted_longest_path", "apiref/rustworkx.dag_weighted_longest_path_length", "apiref/rustworkx.descendants", "apiref/rustworkx.dfs_edges", "apiref/rustworkx.dfs_search", "apiref/rustworkx.digraph_adjacency_matrix", "apiref/rustworkx.digraph_all_pairs_all_simple_paths", "apiref/rustworkx.digraph_all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.digraph_all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.digraph_all_pairs_dijkstra_path_lengths", "apiref/rustworkx.digraph_all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.digraph_all_shortest_paths", "apiref/rustworkx.digraph_all_simple_paths", "apiref/rustworkx.digraph_astar_shortest_path", "apiref/rustworkx.digraph_bellman_ford_shortest_path_lengths", "apiref/rustworkx.digraph_betweenness_centrality", "apiref/rustworkx.digraph_bfs_search", "apiref/rustworkx.digraph_bipartite_layout", "apiref/rustworkx.digraph_cartesian_product", "apiref/rustworkx.digraph_circular_layout", "apiref/rustworkx.digraph_closeness_centrality", "apiref/rustworkx.digraph_complement", "apiref/rustworkx.digraph_core_number", "apiref/rustworkx.digraph_dfs_edges", "apiref/rustworkx.digraph_dfs_search", "apiref/rustworkx.digraph_dijkstra_search", "apiref/rustworkx.digraph_dijkstra_shortest_path_lengths", "apiref/rustworkx.digraph_dijkstra_shortest_paths", "apiref/rustworkx.digraph_distance_matrix", "apiref/rustworkx.digraph_edge_betweenness_centrality", "apiref/rustworkx.digraph_eigenvector_centrality", "apiref/rustworkx.digraph_find_cycle", "apiref/rustworkx.digraph_floyd_warshall", "apiref/rustworkx.digraph_floyd_warshall_numpy", "apiref/rustworkx.digraph_floyd_warshall_successor_and_distance", "apiref/rustworkx.digraph_is_isomorphic", "apiref/rustworkx.digraph_is_subgraph_isomorphic", "apiref/rustworkx.digraph_k_shortest_path_lengths", "apiref/rustworkx.digraph_katz_centrality", "apiref/rustworkx.digraph_longest_simple_path", "apiref/rustworkx.digraph_maximum_bisimulation", "apiref/rustworkx.digraph_node_link_json", "apiref/rustworkx.digraph_num_shortest_paths_unweighted", "apiref/rustworkx.digraph_random_layout", "apiref/rustworkx.digraph_shell_layout", "apiref/rustworkx.digraph_spiral_layout", "apiref/rustworkx.digraph_spring_layout", "apiref/rustworkx.digraph_tensor_product", "apiref/rustworkx.digraph_transitivity", "apiref/rustworkx.digraph_union", "apiref/rustworkx.digraph_unweighted_average_shortest_path_length", "apiref/rustworkx.digraph_vf2_mapping", "apiref/rustworkx.dijkstra_search", "apiref/rustworkx.dijkstra_shortest_path_lengths", "apiref/rustworkx.dijkstra_shortest_paths", "apiref/rustworkx.directed_barabasi_albert_graph", "apiref/rustworkx.directed_gnm_random_graph", "apiref/rustworkx.directed_gnp_random_graph", "apiref/rustworkx.directed_random_bipartite_graph", "apiref/rustworkx.directed_sbm_random_graph", "apiref/rustworkx.distance_matrix", "apiref/rustworkx.edge_betweenness_centrality", "apiref/rustworkx.eigenvector_centrality", "apiref/rustworkx.find_negative_cycle", "apiref/rustworkx.floyd_warshall", "apiref/rustworkx.floyd_warshall_numpy", "apiref/rustworkx.floyd_warshall_successor_and_distance", "apiref/rustworkx.from_node_link_json_file", "apiref/rustworkx.generators.barbell_graph", "apiref/rustworkx.generators.binomial_tree_graph", "apiref/rustworkx.generators.complete_graph", "apiref/rustworkx.generators.cycle_graph", "apiref/rustworkx.generators.directed_binomial_tree_graph", "apiref/rustworkx.generators.directed_complete_graph", "apiref/rustworkx.generators.directed_cycle_graph", "apiref/rustworkx.generators.directed_empty_graph", "apiref/rustworkx.generators.directed_grid_graph", "apiref/rustworkx.generators.directed_heavy_hex_graph", "apiref/rustworkx.generators.directed_heavy_square_graph", "apiref/rustworkx.generators.directed_hexagonal_lattice_graph", "apiref/rustworkx.generators.directed_mesh_graph", "apiref/rustworkx.generators.directed_path_graph", "apiref/rustworkx.generators.directed_star_graph", "apiref/rustworkx.generators.dorogovtsev_goltsev_mendes_graph", "apiref/rustworkx.generators.empty_graph", "apiref/rustworkx.generators.full_rary_tree", "apiref/rustworkx.generators.generalized_petersen_graph", "apiref/rustworkx.generators.grid_graph", "apiref/rustworkx.generators.heavy_hex_graph", "apiref/rustworkx.generators.heavy_square_graph", "apiref/rustworkx.generators.hexagonal_lattice_graph", "apiref/rustworkx.generators.lollipop_graph", "apiref/rustworkx.generators.mesh_graph", "apiref/rustworkx.generators.path_graph", "apiref/rustworkx.generators.star_graph", "apiref/rustworkx.graph_adjacency_matrix", "apiref/rustworkx.graph_all_pairs_all_simple_paths", "apiref/rustworkx.graph_all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.graph_all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.graph_all_pairs_dijkstra_path_lengths", "apiref/rustworkx.graph_all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.graph_all_shortest_paths", "apiref/rustworkx.graph_all_simple_paths", "apiref/rustworkx.graph_astar_shortest_path", "apiref/rustworkx.graph_bellman_ford_shortest_path_lengths", "apiref/rustworkx.graph_betweenness_centrality", "apiref/rustworkx.graph_bfs_search", "apiref/rustworkx.graph_bipartite_edge_color", "apiref/rustworkx.graph_bipartite_layout", "apiref/rustworkx.graph_cartesian_product", "apiref/rustworkx.graph_circular_layout", "apiref/rustworkx.graph_closeness_centrality", "apiref/rustworkx.graph_complement", "apiref/rustworkx.graph_core_number", "apiref/rustworkx.graph_dfs_edges", "apiref/rustworkx.graph_dfs_search", "apiref/rustworkx.graph_dijkstra_search", "apiref/rustworkx.graph_dijkstra_shortest_path_lengths", "apiref/rustworkx.graph_dijkstra_shortest_paths", "apiref/rustworkx.graph_distance_matrix", "apiref/rustworkx.graph_edge_betweenness_centrality", "apiref/rustworkx.graph_eigenvector_centrality", "apiref/rustworkx.graph_floyd_warshall", "apiref/rustworkx.graph_floyd_warshall_numpy", "apiref/rustworkx.graph_floyd_warshall_successor_and_distance", "apiref/rustworkx.graph_greedy_color", "apiref/rustworkx.graph_greedy_edge_color", "apiref/rustworkx.graph_is_isomorphic", "apiref/rustworkx.graph_is_subgraph_isomorphic", "apiref/rustworkx.graph_k_shortest_path_lengths", "apiref/rustworkx.graph_katz_centrality", "apiref/rustworkx.graph_line_graph", "apiref/rustworkx.graph_longest_simple_path", "apiref/rustworkx.graph_misra_gries_edge_color", "apiref/rustworkx.graph_node_link_json", "apiref/rustworkx.graph_num_shortest_paths_unweighted", "apiref/rustworkx.graph_random_layout", "apiref/rustworkx.graph_shell_layout", "apiref/rustworkx.graph_spiral_layout", "apiref/rustworkx.graph_spring_layout", "apiref/rustworkx.graph_tensor_product", "apiref/rustworkx.graph_token_swapper", "apiref/rustworkx.graph_transitivity", "apiref/rustworkx.graph_union", "apiref/rustworkx.graph_unweighted_average_shortest_path_length", "apiref/rustworkx.graph_vf2_mapping", "apiref/rustworkx.has_path", "apiref/rustworkx.hits", "apiref/rustworkx.hyperbolic_random_graph", "apiref/rustworkx.is_bipartite", "apiref/rustworkx.is_connected", "apiref/rustworkx.is_directed_acyclic_graph", "apiref/rustworkx.is_isomorphic", "apiref/rustworkx.is_isomorphic_node_match", "apiref/rustworkx.is_matching", "apiref/rustworkx.is_maximal_matching", "apiref/rustworkx.is_planar", "apiref/rustworkx.is_subgraph_isomorphic", "apiref/rustworkx.is_weakly_connected", "apiref/rustworkx.isolates", "apiref/rustworkx.k_shortest_path_lengths", "apiref/rustworkx.katz_centrality", "apiref/rustworkx.layers", "apiref/rustworkx.lexicographical_topological_sort", "apiref/rustworkx.longest_simple_path", "apiref/rustworkx.max_weight_matching", "apiref/rustworkx.metric_closure", "apiref/rustworkx.minimum_spanning_edges", "apiref/rustworkx.minimum_spanning_tree", "apiref/rustworkx.negative_edge_cycle", "apiref/rustworkx.networkx_converter", "apiref/rustworkx.node_connected_component", "apiref/rustworkx.node_link_json", "apiref/rustworkx.num_shortest_paths_unweighted", "apiref/rustworkx.number_connected_components", "apiref/rustworkx.number_weakly_connected_components", "apiref/rustworkx.pagerank", "apiref/rustworkx.parse_node_link_json", "apiref/rustworkx.random_geometric_graph", "apiref/rustworkx.random_layout", "apiref/rustworkx.read_graphml", "apiref/rustworkx.shell_layout", "apiref/rustworkx.simple_cycles", "apiref/rustworkx.spiral_layout", "apiref/rustworkx.spring_layout", "apiref/rustworkx.steiner_tree", "apiref/rustworkx.stoer_wagner_min_cut", "apiref/rustworkx.strongly_connected_components", "apiref/rustworkx.topological_generations", "apiref/rustworkx.topological_sort", "apiref/rustworkx.transitive_reduction", "apiref/rustworkx.transitivity", "apiref/rustworkx.two_color", "apiref/rustworkx.undirected_gnm_random_graph", "apiref/rustworkx.undirected_gnp_random_graph", "apiref/rustworkx.undirected_random_bipartite_graph", "apiref/rustworkx.undirected_sbm_random_graph", "apiref/rustworkx.union", "apiref/rustworkx.unweighted_average_shortest_path_length", "apiref/rustworkx.vf2_mapping", "apiref/rustworkx.visit.BFSVisitor", "apiref/rustworkx.visit.BFSVisitor.black_target_edge", "apiref/rustworkx.visit.BFSVisitor.discover_vertex", "apiref/rustworkx.visit.BFSVisitor.finish_vertex", "apiref/rustworkx.visit.BFSVisitor.gray_target_edge", "apiref/rustworkx.visit.BFSVisitor.non_tree_edge", "apiref/rustworkx.visit.BFSVisitor.tree_edge", "apiref/rustworkx.visit.DFSVisitor", "apiref/rustworkx.visit.DFSVisitor.back_edge", "apiref/rustworkx.visit.DFSVisitor.discover_vertex", "apiref/rustworkx.visit.DFSVisitor.finish_vertex", "apiref/rustworkx.visit.DFSVisitor.forward_or_cross_edge", "apiref/rustworkx.visit.DFSVisitor.tree_edge", "apiref/rustworkx.visit.DijkstraVisitor", "apiref/rustworkx.visit.DijkstraVisitor.discover_vertex", "apiref/rustworkx.visit.DijkstraVisitor.edge_not_relaxed", "apiref/rustworkx.visit.DijkstraVisitor.edge_relaxed", "apiref/rustworkx.visit.DijkstraVisitor.examine_edge", "apiref/rustworkx.visit.DijkstraVisitor.finish_vertex", "apiref/rustworkx.visit.PruneSearch", "apiref/rustworkx.visit.StopSearch", "apiref/rustworkx.visualization.graphviz_draw", "apiref/rustworkx.visualization.mpl_draw", "apiref/rustworkx.weakly_connected_components", "benchmarks", "index", "install", "networkx", "release_notes", "tutorial/betweenness_centrality", "tutorial/dags", "tutorial/index", "tutorial/introduction", "visualization"], "filenames": ["CONTRIBUTING.md", "api/algorithm_functions/centrality.rst", "api/algorithm_functions/coloring.rst", "api/algorithm_functions/connectivity_and_cycles.rst", "api/algorithm_functions/dag_algorithms.rst", "api/algorithm_functions/graph_operations.rst", "api/algorithm_functions/index.rst", "api/algorithm_functions/isomorphism.rst", "api/algorithm_functions/link_analysis.rst", "api/algorithm_functions/matching.rst", "api/algorithm_functions/other.rst", "api/algorithm_functions/shortest_paths.rst", "api/algorithm_functions/traversal.rst", "api/algorithm_functions/tree.rst", "api/converters.rst", "api/custom_return_types.rst", "api/exceptions.rst", "api/generators.rst", "api/graph_classes.rst", "api/index.rst", "api/layout_functions.rst", "api/pydigraph_api_functions.rst", "api/pygraph_api_functions.rst", "api/random_graph_generator_functions.rst", "api/serialization.rst", "apiref/rustworkx.AllPairsPathLengthMapping.rst", "apiref/rustworkx.AllPairsPathLengthMapping.items.rst", "apiref/rustworkx.AllPairsPathLengthMapping.keys.rst", "apiref/rustworkx.AllPairsPathLengthMapping.values.rst", "apiref/rustworkx.AllPairsPathMapping.rst", "apiref/rustworkx.AllPairsPathMapping.items.rst", "apiref/rustworkx.AllPairsPathMapping.keys.rst", "apiref/rustworkx.AllPairsPathMapping.values.rst", "apiref/rustworkx.BFSPredecessors.rst", "apiref/rustworkx.BFSSuccessors.rst", "apiref/rustworkx.BiconnectedComponents.rst", "apiref/rustworkx.BiconnectedComponents.items.rst", "apiref/rustworkx.BiconnectedComponents.keys.rst", "apiref/rustworkx.BiconnectedComponents.values.rst", "apiref/rustworkx.CentralityMapping.rst", "apiref/rustworkx.CentralityMapping.items.rst", "apiref/rustworkx.CentralityMapping.keys.rst", "apiref/rustworkx.CentralityMapping.values.rst", "apiref/rustworkx.Chains.rst", "apiref/rustworkx.ColoringStrategy.rst", "apiref/rustworkx.DAGHasCycle.rst", "apiref/rustworkx.DAGWouldCycle.rst", "apiref/rustworkx.EdgeCentralityMapping.rst", "apiref/rustworkx.EdgeCentralityMapping.items.rst", "apiref/rustworkx.EdgeCentralityMapping.keys.rst", "apiref/rustworkx.EdgeCentralityMapping.values.rst", "apiref/rustworkx.EdgeIndexMap.rst", "apiref/rustworkx.EdgeIndexMap.items.rst", "apiref/rustworkx.EdgeIndexMap.keys.rst", "apiref/rustworkx.EdgeIndexMap.values.rst", "apiref/rustworkx.EdgeIndices.rst", "apiref/rustworkx.EdgeList.rst", "apiref/rustworkx.GraphNotBipartite.rst", "apiref/rustworkx.IndexPartitionBlock.rst", "apiref/rustworkx.InvalidMapping.rst", "apiref/rustworkx.InvalidNode.rst", "apiref/rustworkx.JSONSerializationError.rst", "apiref/rustworkx.NegativeCycle.rst", "apiref/rustworkx.NoEdgeBetweenNodes.rst", "apiref/rustworkx.NoPathFound.rst", "apiref/rustworkx.NoSuitableNeighbors.rst", "apiref/rustworkx.NodeIndices.rst", "apiref/rustworkx.NodeMap.rst", "apiref/rustworkx.NodeMap.items.rst", "apiref/rustworkx.NodeMap.keys.rst", "apiref/rustworkx.NodeMap.values.rst", "apiref/rustworkx.NullGraph.rst", "apiref/rustworkx.PathLengthMapping.rst", "apiref/rustworkx.PathLengthMapping.items.rst", "apiref/rustworkx.PathLengthMapping.keys.rst", "apiref/rustworkx.PathLengthMapping.values.rst", "apiref/rustworkx.PathMapping.rst", "apiref/rustworkx.PathMapping.items.rst", "apiref/rustworkx.PathMapping.keys.rst", "apiref/rustworkx.PathMapping.values.rst", "apiref/rustworkx.Pos2DMapping.rst", "apiref/rustworkx.Pos2DMapping.items.rst", "apiref/rustworkx.Pos2DMapping.keys.rst", "apiref/rustworkx.Pos2DMapping.values.rst", "apiref/rustworkx.ProductNodeMap.rst", "apiref/rustworkx.ProductNodeMap.items.rst", "apiref/rustworkx.ProductNodeMap.keys.rst", "apiref/rustworkx.ProductNodeMap.values.rst", "apiref/rustworkx.PyDAG.rst", "apiref/rustworkx.PyDAG.add_child.rst", "apiref/rustworkx.PyDAG.add_edge.rst", "apiref/rustworkx.PyDAG.add_edges_from.rst", "apiref/rustworkx.PyDAG.add_edges_from_no_data.rst", "apiref/rustworkx.PyDAG.add_node.rst", "apiref/rustworkx.PyDAG.add_nodes_from.rst", "apiref/rustworkx.PyDAG.add_parent.rst", "apiref/rustworkx.PyDAG.adj.rst", "apiref/rustworkx.PyDAG.adj_direction.rst", "apiref/rustworkx.PyDAG.clear.rst", "apiref/rustworkx.PyDAG.clear_edges.rst", "apiref/rustworkx.PyDAG.compose.rst", "apiref/rustworkx.PyDAG.contract_nodes.rst", "apiref/rustworkx.PyDAG.copy.rst", "apiref/rustworkx.PyDAG.edge_index_map.rst", "apiref/rustworkx.PyDAG.edge_indices.rst", "apiref/rustworkx.PyDAG.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyDAG.edge_list.rst", "apiref/rustworkx.PyDAG.edge_subgraph.rst", "apiref/rustworkx.PyDAG.edges.rst", "apiref/rustworkx.PyDAG.extend_from_edge_list.rst", "apiref/rustworkx.PyDAG.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyDAG.filter_edges.rst", "apiref/rustworkx.PyDAG.filter_nodes.rst", "apiref/rustworkx.PyDAG.find_adjacent_node_by_edge.rst", "apiref/rustworkx.PyDAG.find_node_by_weight.rst", "apiref/rustworkx.PyDAG.find_predecessor_node_by_edge.rst", "apiref/rustworkx.PyDAG.find_predecessors_by_edge.rst", "apiref/rustworkx.PyDAG.find_successors_by_edge.rst", "apiref/rustworkx.PyDAG.from_adjacency_matrix.rst", "apiref/rustworkx.PyDAG.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyDAG.get_all_edge_data.rst", "apiref/rustworkx.PyDAG.get_edge_data.rst", "apiref/rustworkx.PyDAG.get_edge_data_by_index.rst", "apiref/rustworkx.PyDAG.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyDAG.get_node_data.rst", "apiref/rustworkx.PyDAG.has_edge.rst", "apiref/rustworkx.PyDAG.has_node.rst", "apiref/rustworkx.PyDAG.has_parallel_edges.rst", "apiref/rustworkx.PyDAG.in_degree.rst", "apiref/rustworkx.PyDAG.in_edges.rst", "apiref/rustworkx.PyDAG.incident_edge_index_map.rst", "apiref/rustworkx.PyDAG.incident_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_in_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_in_edges_multiple.rst", "apiref/rustworkx.PyDAG.insert_node_on_out_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_out_edges_multiple.rst", "apiref/rustworkx.PyDAG.is_symmetric.rst", "apiref/rustworkx.PyDAG.make_symmetric.rst", "apiref/rustworkx.PyDAG.merge_nodes.rst", "apiref/rustworkx.PyDAG.neighbors.rst", "apiref/rustworkx.PyDAG.node_indexes.rst", "apiref/rustworkx.PyDAG.node_indices.rst", "apiref/rustworkx.PyDAG.nodes.rst", "apiref/rustworkx.PyDAG.num_edges.rst", "apiref/rustworkx.PyDAG.num_nodes.rst", "apiref/rustworkx.PyDAG.out_degree.rst", "apiref/rustworkx.PyDAG.out_edges.rst", "apiref/rustworkx.PyDAG.predecessor_indices.rst", "apiref/rustworkx.PyDAG.predecessors.rst", "apiref/rustworkx.PyDAG.read_edge_list.rst", "apiref/rustworkx.PyDAG.remove_edge.rst", "apiref/rustworkx.PyDAG.remove_edge_from_index.rst", "apiref/rustworkx.PyDAG.remove_edges_from.rst", "apiref/rustworkx.PyDAG.remove_node.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_id.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_key.rst", "apiref/rustworkx.PyDAG.remove_nodes_from.rst", "apiref/rustworkx.PyDAG.reverse.rst", "apiref/rustworkx.PyDAG.subgraph.rst", "apiref/rustworkx.PyDAG.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyDAG.successor_indices.rst", "apiref/rustworkx.PyDAG.successors.rst", "apiref/rustworkx.PyDAG.to_dot.rst", "apiref/rustworkx.PyDAG.to_undirected.rst", "apiref/rustworkx.PyDAG.update_edge.rst", "apiref/rustworkx.PyDAG.update_edge_by_index.rst", "apiref/rustworkx.PyDAG.weighted_edge_list.rst", "apiref/rustworkx.PyDAG.write_edge_list.rst", "apiref/rustworkx.PyDiGraph.rst", "apiref/rustworkx.PyDiGraph.add_child.rst", "apiref/rustworkx.PyDiGraph.add_edge.rst", "apiref/rustworkx.PyDiGraph.add_edges_from.rst", "apiref/rustworkx.PyDiGraph.add_edges_from_no_data.rst", "apiref/rustworkx.PyDiGraph.add_node.rst", "apiref/rustworkx.PyDiGraph.add_nodes_from.rst", "apiref/rustworkx.PyDiGraph.add_parent.rst", "apiref/rustworkx.PyDiGraph.adj.rst", "apiref/rustworkx.PyDiGraph.adj_direction.rst", "apiref/rustworkx.PyDiGraph.clear.rst", "apiref/rustworkx.PyDiGraph.clear_edges.rst", "apiref/rustworkx.PyDiGraph.compose.rst", "apiref/rustworkx.PyDiGraph.contract_nodes.rst", "apiref/rustworkx.PyDiGraph.copy.rst", "apiref/rustworkx.PyDiGraph.edge_index_map.rst", "apiref/rustworkx.PyDiGraph.edge_indices.rst", "apiref/rustworkx.PyDiGraph.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyDiGraph.edge_list.rst", "apiref/rustworkx.PyDiGraph.edge_subgraph.rst", "apiref/rustworkx.PyDiGraph.edges.rst", "apiref/rustworkx.PyDiGraph.extend_from_edge_list.rst", "apiref/rustworkx.PyDiGraph.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyDiGraph.filter_edges.rst", "apiref/rustworkx.PyDiGraph.filter_nodes.rst", "apiref/rustworkx.PyDiGraph.find_adjacent_node_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_node_by_weight.rst", "apiref/rustworkx.PyDiGraph.find_predecessor_node_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_predecessors_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_successors_by_edge.rst", "apiref/rustworkx.PyDiGraph.from_adjacency_matrix.rst", "apiref/rustworkx.PyDiGraph.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyDiGraph.get_all_edge_data.rst", "apiref/rustworkx.PyDiGraph.get_edge_data.rst", "apiref/rustworkx.PyDiGraph.get_edge_data_by_index.rst", "apiref/rustworkx.PyDiGraph.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyDiGraph.get_node_data.rst", "apiref/rustworkx.PyDiGraph.has_edge.rst", "apiref/rustworkx.PyDiGraph.has_node.rst", "apiref/rustworkx.PyDiGraph.has_parallel_edges.rst", "apiref/rustworkx.PyDiGraph.in_degree.rst", "apiref/rustworkx.PyDiGraph.in_edges.rst", "apiref/rustworkx.PyDiGraph.incident_edge_index_map.rst", "apiref/rustworkx.PyDiGraph.incident_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges_multiple.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges_multiple.rst", "apiref/rustworkx.PyDiGraph.is_symmetric.rst", "apiref/rustworkx.PyDiGraph.make_symmetric.rst", "apiref/rustworkx.PyDiGraph.merge_nodes.rst", "apiref/rustworkx.PyDiGraph.neighbors.rst", "apiref/rustworkx.PyDiGraph.node_indexes.rst", "apiref/rustworkx.PyDiGraph.node_indices.rst", "apiref/rustworkx.PyDiGraph.nodes.rst", "apiref/rustworkx.PyDiGraph.num_edges.rst", "apiref/rustworkx.PyDiGraph.num_nodes.rst", "apiref/rustworkx.PyDiGraph.out_degree.rst", "apiref/rustworkx.PyDiGraph.out_edges.rst", "apiref/rustworkx.PyDiGraph.predecessor_indices.rst", "apiref/rustworkx.PyDiGraph.predecessors.rst", "apiref/rustworkx.PyDiGraph.read_edge_list.rst", "apiref/rustworkx.PyDiGraph.remove_edge.rst", "apiref/rustworkx.PyDiGraph.remove_edge_from_index.rst", "apiref/rustworkx.PyDiGraph.remove_edges_from.rst", "apiref/rustworkx.PyDiGraph.remove_node.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_id.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_key.rst", "apiref/rustworkx.PyDiGraph.remove_nodes_from.rst", "apiref/rustworkx.PyDiGraph.reverse.rst", "apiref/rustworkx.PyDiGraph.subgraph.rst", "apiref/rustworkx.PyDiGraph.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyDiGraph.successor_indices.rst", "apiref/rustworkx.PyDiGraph.successors.rst", "apiref/rustworkx.PyDiGraph.to_dot.rst", "apiref/rustworkx.PyDiGraph.to_undirected.rst", "apiref/rustworkx.PyDiGraph.update_edge.rst", "apiref/rustworkx.PyDiGraph.update_edge_by_index.rst", "apiref/rustworkx.PyDiGraph.weighted_edge_list.rst", "apiref/rustworkx.PyDiGraph.write_edge_list.rst", "apiref/rustworkx.PyGraph.rst", "apiref/rustworkx.PyGraph.add_edge.rst", "apiref/rustworkx.PyGraph.add_edges_from.rst", "apiref/rustworkx.PyGraph.add_edges_from_no_data.rst", "apiref/rustworkx.PyGraph.add_node.rst", "apiref/rustworkx.PyGraph.add_nodes_from.rst", "apiref/rustworkx.PyGraph.adj.rst", "apiref/rustworkx.PyGraph.clear.rst", "apiref/rustworkx.PyGraph.clear_edges.rst", "apiref/rustworkx.PyGraph.compose.rst", "apiref/rustworkx.PyGraph.contract_nodes.rst", "apiref/rustworkx.PyGraph.copy.rst", "apiref/rustworkx.PyGraph.degree.rst", "apiref/rustworkx.PyGraph.edge_index_map.rst", "apiref/rustworkx.PyGraph.edge_indices.rst", "apiref/rustworkx.PyGraph.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyGraph.edge_list.rst", "apiref/rustworkx.PyGraph.edge_subgraph.rst", "apiref/rustworkx.PyGraph.edges.rst", "apiref/rustworkx.PyGraph.extend_from_edge_list.rst", "apiref/rustworkx.PyGraph.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyGraph.filter_edges.rst", "apiref/rustworkx.PyGraph.filter_nodes.rst", "apiref/rustworkx.PyGraph.find_node_by_weight.rst", "apiref/rustworkx.PyGraph.from_adjacency_matrix.rst", "apiref/rustworkx.PyGraph.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyGraph.get_all_edge_data.rst", "apiref/rustworkx.PyGraph.get_edge_data.rst", "apiref/rustworkx.PyGraph.get_edge_data_by_index.rst", "apiref/rustworkx.PyGraph.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyGraph.get_node_data.rst", "apiref/rustworkx.PyGraph.has_edge.rst", "apiref/rustworkx.PyGraph.has_node.rst", "apiref/rustworkx.PyGraph.has_parallel_edges.rst", "apiref/rustworkx.PyGraph.in_edges.rst", "apiref/rustworkx.PyGraph.incident_edge_index_map.rst", "apiref/rustworkx.PyGraph.incident_edges.rst", "apiref/rustworkx.PyGraph.neighbors.rst", "apiref/rustworkx.PyGraph.node_indexes.rst", "apiref/rustworkx.PyGraph.node_indices.rst", "apiref/rustworkx.PyGraph.nodes.rst", "apiref/rustworkx.PyGraph.num_edges.rst", "apiref/rustworkx.PyGraph.num_nodes.rst", "apiref/rustworkx.PyGraph.out_edges.rst", "apiref/rustworkx.PyGraph.read_edge_list.rst", "apiref/rustworkx.PyGraph.remove_edge.rst", "apiref/rustworkx.PyGraph.remove_edge_from_index.rst", "apiref/rustworkx.PyGraph.remove_edges_from.rst", "apiref/rustworkx.PyGraph.remove_node.rst", "apiref/rustworkx.PyGraph.remove_nodes_from.rst", "apiref/rustworkx.PyGraph.subgraph.rst", "apiref/rustworkx.PyGraph.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyGraph.to_directed.rst", "apiref/rustworkx.PyGraph.to_dot.rst", "apiref/rustworkx.PyGraph.update_edge.rst", "apiref/rustworkx.PyGraph.update_edge_by_index.rst", "apiref/rustworkx.PyGraph.weighted_edge_list.rst", "apiref/rustworkx.PyGraph.write_edge_list.rst", "apiref/rustworkx.RelationalCoarsestPartition.rst", "apiref/rustworkx.TopologicalSorter.rst", "apiref/rustworkx.TopologicalSorter.done.rst", "apiref/rustworkx.TopologicalSorter.get_ready.rst", "apiref/rustworkx.TopologicalSorter.is_active.rst", "apiref/rustworkx.WeightedEdgeList.rst", "apiref/rustworkx.adjacency_matrix.rst", "apiref/rustworkx.all_pairs_all_simple_paths.rst", "apiref/rustworkx.all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.all_shortest_paths.rst", "apiref/rustworkx.all_simple_paths.rst", "apiref/rustworkx.ancestors.rst", "apiref/rustworkx.articulation_points.rst", "apiref/rustworkx.astar_shortest_path.rst", "apiref/rustworkx.barabasi_albert_graph.rst", "apiref/rustworkx.bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.bellman_ford_shortest_paths.rst", "apiref/rustworkx.betweenness_centrality.rst", "apiref/rustworkx.bfs_predecessors.rst", "apiref/rustworkx.bfs_search.rst", "apiref/rustworkx.bfs_successors.rst", "apiref/rustworkx.biconnected_components.rst", "apiref/rustworkx.bipartite_layout.rst", "apiref/rustworkx.bridges.rst", "apiref/rustworkx.cartesian_product.rst", "apiref/rustworkx.chain_decomposition.rst", "apiref/rustworkx.circular_layout.rst", "apiref/rustworkx.closeness_centrality.rst", "apiref/rustworkx.collect_bicolor_runs.rst", "apiref/rustworkx.collect_runs.rst", "apiref/rustworkx.complement.rst", "apiref/rustworkx.connected_components.rst", "apiref/rustworkx.connected_subgraphs.rst", "apiref/rustworkx.core_number.rst", "apiref/rustworkx.cycle_basis.rst", "apiref/rustworkx.dag_longest_path.rst", "apiref/rustworkx.dag_longest_path_length.rst", "apiref/rustworkx.dag_weighted_longest_path.rst", "apiref/rustworkx.dag_weighted_longest_path_length.rst", "apiref/rustworkx.descendants.rst", "apiref/rustworkx.dfs_edges.rst", "apiref/rustworkx.dfs_search.rst", "apiref/rustworkx.digraph_adjacency_matrix.rst", "apiref/rustworkx.digraph_all_pairs_all_simple_paths.rst", "apiref/rustworkx.digraph_all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.digraph_all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.digraph_all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.digraph_all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.digraph_all_shortest_paths.rst", "apiref/rustworkx.digraph_all_simple_paths.rst", "apiref/rustworkx.digraph_astar_shortest_path.rst", "apiref/rustworkx.digraph_bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.digraph_betweenness_centrality.rst", "apiref/rustworkx.digraph_bfs_search.rst", "apiref/rustworkx.digraph_bipartite_layout.rst", "apiref/rustworkx.digraph_cartesian_product.rst", "apiref/rustworkx.digraph_circular_layout.rst", "apiref/rustworkx.digraph_closeness_centrality.rst", "apiref/rustworkx.digraph_complement.rst", "apiref/rustworkx.digraph_core_number.rst", "apiref/rustworkx.digraph_dfs_edges.rst", "apiref/rustworkx.digraph_dfs_search.rst", "apiref/rustworkx.digraph_dijkstra_search.rst", "apiref/rustworkx.digraph_dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.digraph_dijkstra_shortest_paths.rst", "apiref/rustworkx.digraph_distance_matrix.rst", "apiref/rustworkx.digraph_edge_betweenness_centrality.rst", "apiref/rustworkx.digraph_eigenvector_centrality.rst", "apiref/rustworkx.digraph_find_cycle.rst", "apiref/rustworkx.digraph_floyd_warshall.rst", "apiref/rustworkx.digraph_floyd_warshall_numpy.rst", "apiref/rustworkx.digraph_floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.digraph_is_isomorphic.rst", "apiref/rustworkx.digraph_is_subgraph_isomorphic.rst", "apiref/rustworkx.digraph_k_shortest_path_lengths.rst", "apiref/rustworkx.digraph_katz_centrality.rst", "apiref/rustworkx.digraph_longest_simple_path.rst", "apiref/rustworkx.digraph_maximum_bisimulation.rst", "apiref/rustworkx.digraph_node_link_json.rst", "apiref/rustworkx.digraph_num_shortest_paths_unweighted.rst", "apiref/rustworkx.digraph_random_layout.rst", "apiref/rustworkx.digraph_shell_layout.rst", "apiref/rustworkx.digraph_spiral_layout.rst", "apiref/rustworkx.digraph_spring_layout.rst", "apiref/rustworkx.digraph_tensor_product.rst", "apiref/rustworkx.digraph_transitivity.rst", "apiref/rustworkx.digraph_union.rst", "apiref/rustworkx.digraph_unweighted_average_shortest_path_length.rst", "apiref/rustworkx.digraph_vf2_mapping.rst", "apiref/rustworkx.dijkstra_search.rst", "apiref/rustworkx.dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.dijkstra_shortest_paths.rst", "apiref/rustworkx.directed_barabasi_albert_graph.rst", "apiref/rustworkx.directed_gnm_random_graph.rst", "apiref/rustworkx.directed_gnp_random_graph.rst", "apiref/rustworkx.directed_random_bipartite_graph.rst", "apiref/rustworkx.directed_sbm_random_graph.rst", "apiref/rustworkx.distance_matrix.rst", "apiref/rustworkx.edge_betweenness_centrality.rst", "apiref/rustworkx.eigenvector_centrality.rst", "apiref/rustworkx.find_negative_cycle.rst", "apiref/rustworkx.floyd_warshall.rst", "apiref/rustworkx.floyd_warshall_numpy.rst", "apiref/rustworkx.floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.from_node_link_json_file.rst", "apiref/rustworkx.generators.barbell_graph.rst", "apiref/rustworkx.generators.binomial_tree_graph.rst", "apiref/rustworkx.generators.complete_graph.rst", "apiref/rustworkx.generators.cycle_graph.rst", "apiref/rustworkx.generators.directed_binomial_tree_graph.rst", "apiref/rustworkx.generators.directed_complete_graph.rst", "apiref/rustworkx.generators.directed_cycle_graph.rst", "apiref/rustworkx.generators.directed_empty_graph.rst", "apiref/rustworkx.generators.directed_grid_graph.rst", "apiref/rustworkx.generators.directed_heavy_hex_graph.rst", "apiref/rustworkx.generators.directed_heavy_square_graph.rst", "apiref/rustworkx.generators.directed_hexagonal_lattice_graph.rst", "apiref/rustworkx.generators.directed_mesh_graph.rst", "apiref/rustworkx.generators.directed_path_graph.rst", "apiref/rustworkx.generators.directed_star_graph.rst", "apiref/rustworkx.generators.dorogovtsev_goltsev_mendes_graph.rst", "apiref/rustworkx.generators.empty_graph.rst", "apiref/rustworkx.generators.full_rary_tree.rst", "apiref/rustworkx.generators.generalized_petersen_graph.rst", "apiref/rustworkx.generators.grid_graph.rst", "apiref/rustworkx.generators.heavy_hex_graph.rst", "apiref/rustworkx.generators.heavy_square_graph.rst", "apiref/rustworkx.generators.hexagonal_lattice_graph.rst", "apiref/rustworkx.generators.lollipop_graph.rst", "apiref/rustworkx.generators.mesh_graph.rst", "apiref/rustworkx.generators.path_graph.rst", "apiref/rustworkx.generators.star_graph.rst", "apiref/rustworkx.graph_adjacency_matrix.rst", "apiref/rustworkx.graph_all_pairs_all_simple_paths.rst", "apiref/rustworkx.graph_all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.graph_all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.graph_all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.graph_all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.graph_all_shortest_paths.rst", "apiref/rustworkx.graph_all_simple_paths.rst", "apiref/rustworkx.graph_astar_shortest_path.rst", "apiref/rustworkx.graph_bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.graph_betweenness_centrality.rst", "apiref/rustworkx.graph_bfs_search.rst", "apiref/rustworkx.graph_bipartite_edge_color.rst", "apiref/rustworkx.graph_bipartite_layout.rst", "apiref/rustworkx.graph_cartesian_product.rst", "apiref/rustworkx.graph_circular_layout.rst", "apiref/rustworkx.graph_closeness_centrality.rst", "apiref/rustworkx.graph_complement.rst", "apiref/rustworkx.graph_core_number.rst", "apiref/rustworkx.graph_dfs_edges.rst", "apiref/rustworkx.graph_dfs_search.rst", "apiref/rustworkx.graph_dijkstra_search.rst", "apiref/rustworkx.graph_dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.graph_dijkstra_shortest_paths.rst", "apiref/rustworkx.graph_distance_matrix.rst", "apiref/rustworkx.graph_edge_betweenness_centrality.rst", "apiref/rustworkx.graph_eigenvector_centrality.rst", "apiref/rustworkx.graph_floyd_warshall.rst", "apiref/rustworkx.graph_floyd_warshall_numpy.rst", "apiref/rustworkx.graph_floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.graph_greedy_color.rst", "apiref/rustworkx.graph_greedy_edge_color.rst", "apiref/rustworkx.graph_is_isomorphic.rst", "apiref/rustworkx.graph_is_subgraph_isomorphic.rst", "apiref/rustworkx.graph_k_shortest_path_lengths.rst", "apiref/rustworkx.graph_katz_centrality.rst", "apiref/rustworkx.graph_line_graph.rst", "apiref/rustworkx.graph_longest_simple_path.rst", "apiref/rustworkx.graph_misra_gries_edge_color.rst", "apiref/rustworkx.graph_node_link_json.rst", "apiref/rustworkx.graph_num_shortest_paths_unweighted.rst", "apiref/rustworkx.graph_random_layout.rst", "apiref/rustworkx.graph_shell_layout.rst", "apiref/rustworkx.graph_spiral_layout.rst", "apiref/rustworkx.graph_spring_layout.rst", "apiref/rustworkx.graph_tensor_product.rst", "apiref/rustworkx.graph_token_swapper.rst", "apiref/rustworkx.graph_transitivity.rst", "apiref/rustworkx.graph_union.rst", "apiref/rustworkx.graph_unweighted_average_shortest_path_length.rst", "apiref/rustworkx.graph_vf2_mapping.rst", "apiref/rustworkx.has_path.rst", "apiref/rustworkx.hits.rst", "apiref/rustworkx.hyperbolic_random_graph.rst", "apiref/rustworkx.is_bipartite.rst", "apiref/rustworkx.is_connected.rst", "apiref/rustworkx.is_directed_acyclic_graph.rst", "apiref/rustworkx.is_isomorphic.rst", "apiref/rustworkx.is_isomorphic_node_match.rst", "apiref/rustworkx.is_matching.rst", "apiref/rustworkx.is_maximal_matching.rst", "apiref/rustworkx.is_planar.rst", "apiref/rustworkx.is_subgraph_isomorphic.rst", "apiref/rustworkx.is_weakly_connected.rst", "apiref/rustworkx.isolates.rst", "apiref/rustworkx.k_shortest_path_lengths.rst", "apiref/rustworkx.katz_centrality.rst", "apiref/rustworkx.layers.rst", "apiref/rustworkx.lexicographical_topological_sort.rst", "apiref/rustworkx.longest_simple_path.rst", "apiref/rustworkx.max_weight_matching.rst", "apiref/rustworkx.metric_closure.rst", "apiref/rustworkx.minimum_spanning_edges.rst", "apiref/rustworkx.minimum_spanning_tree.rst", "apiref/rustworkx.negative_edge_cycle.rst", "apiref/rustworkx.networkx_converter.rst", "apiref/rustworkx.node_connected_component.rst", "apiref/rustworkx.node_link_json.rst", "apiref/rustworkx.num_shortest_paths_unweighted.rst", "apiref/rustworkx.number_connected_components.rst", "apiref/rustworkx.number_weakly_connected_components.rst", "apiref/rustworkx.pagerank.rst", "apiref/rustworkx.parse_node_link_json.rst", "apiref/rustworkx.random_geometric_graph.rst", "apiref/rustworkx.random_layout.rst", "apiref/rustworkx.read_graphml.rst", "apiref/rustworkx.shell_layout.rst", "apiref/rustworkx.simple_cycles.rst", "apiref/rustworkx.spiral_layout.rst", "apiref/rustworkx.spring_layout.rst", "apiref/rustworkx.steiner_tree.rst", "apiref/rustworkx.stoer_wagner_min_cut.rst", "apiref/rustworkx.strongly_connected_components.rst", "apiref/rustworkx.topological_generations.rst", "apiref/rustworkx.topological_sort.rst", "apiref/rustworkx.transitive_reduction.rst", "apiref/rustworkx.transitivity.rst", "apiref/rustworkx.two_color.rst", "apiref/rustworkx.undirected_gnm_random_graph.rst", "apiref/rustworkx.undirected_gnp_random_graph.rst", "apiref/rustworkx.undirected_random_bipartite_graph.rst", "apiref/rustworkx.undirected_sbm_random_graph.rst", "apiref/rustworkx.union.rst", "apiref/rustworkx.unweighted_average_shortest_path_length.rst", "apiref/rustworkx.vf2_mapping.rst", "apiref/rustworkx.visit.BFSVisitor.rst", "apiref/rustworkx.visit.BFSVisitor.black_target_edge.rst", "apiref/rustworkx.visit.BFSVisitor.discover_vertex.rst", "apiref/rustworkx.visit.BFSVisitor.finish_vertex.rst", "apiref/rustworkx.visit.BFSVisitor.gray_target_edge.rst", "apiref/rustworkx.visit.BFSVisitor.non_tree_edge.rst", "apiref/rustworkx.visit.BFSVisitor.tree_edge.rst", "apiref/rustworkx.visit.DFSVisitor.rst", "apiref/rustworkx.visit.DFSVisitor.back_edge.rst", "apiref/rustworkx.visit.DFSVisitor.discover_vertex.rst", "apiref/rustworkx.visit.DFSVisitor.finish_vertex.rst", "apiref/rustworkx.visit.DFSVisitor.forward_or_cross_edge.rst", "apiref/rustworkx.visit.DFSVisitor.tree_edge.rst", "apiref/rustworkx.visit.DijkstraVisitor.rst", "apiref/rustworkx.visit.DijkstraVisitor.discover_vertex.rst", "apiref/rustworkx.visit.DijkstraVisitor.edge_not_relaxed.rst", "apiref/rustworkx.visit.DijkstraVisitor.edge_relaxed.rst", "apiref/rustworkx.visit.DijkstraVisitor.examine_edge.rst", "apiref/rustworkx.visit.DijkstraVisitor.finish_vertex.rst", "apiref/rustworkx.visit.PruneSearch.rst", "apiref/rustworkx.visit.StopSearch.rst", "apiref/rustworkx.visualization.graphviz_draw.rst", "apiref/rustworkx.visualization.mpl_draw.rst", "apiref/rustworkx.weakly_connected_components.rst", "benchmarks.rst", "index.rst", "install.rst", "networkx.rst", "release_notes.rst", "tutorial/betweenness_centrality.rst", "tutorial/dags.rst", "tutorial/index.rst", "tutorial/introduction.rst", "visualization.rst"], "titles": ["Contributing", "Centrality", "Coloring", "Connectivity and Cycles", "DAG Algorithms", "Graph Operations", "Algorithm Functions", "Isomorphism", "Link Analysis", "Matching", "Other Algorithm Functions", "Shortest Paths", "Traversal", "Tree", "Converters", "Custom Return Types", "Exceptions", "Generators", "Graph Classes", "Rustworkx API Reference", "Layout Functions", "API functions for PyDigraph", "API functions for PyGraph", "Random Graph Generator Functions", "Serialization", "AllPairsPathLengthMapping", "rustworkx.AllPairsPathLengthMapping.items", "rustworkx.AllPairsPathLengthMapping.keys", "rustworkx.AllPairsPathLengthMapping.values", "AllPairsPathMapping", "rustworkx.AllPairsPathMapping.items", "rustworkx.AllPairsPathMapping.keys", "rustworkx.AllPairsPathMapping.values", "BFSPredecessors", "BFSSuccessors", "BiconnectedComponents", "rustworkx.BiconnectedComponents.items", "rustworkx.BiconnectedComponents.keys", "rustworkx.BiconnectedComponents.values", "CentralityMapping", "rustworkx.CentralityMapping.items", "rustworkx.CentralityMapping.keys", "rustworkx.CentralityMapping.values", "Chains", "ColoringStrategy", "rustworkx.DAGHasCycle", "rustworkx.DAGWouldCycle", "EdgeCentralityMapping", "rustworkx.EdgeCentralityMapping.items", "rustworkx.EdgeCentralityMapping.keys", "rustworkx.EdgeCentralityMapping.values", "EdgeIndexMap", "rustworkx.EdgeIndexMap.items", "rustworkx.EdgeIndexMap.keys", "rustworkx.EdgeIndexMap.values", "EdgeIndices", "EdgeList", "rustworkx.GraphNotBipartite", "IndexPartitionBlock", "rustworkx.InvalidMapping", "rustworkx.InvalidNode", "rustworkx.JSONSerializationError", "rustworkx.NegativeCycle", "rustworkx.NoEdgeBetweenNodes", "rustworkx.NoPathFound", "rustworkx.NoSuitableNeighbors", "NodeIndices", "NodeMap", "rustworkx.NodeMap.items", "rustworkx.NodeMap.keys", "rustworkx.NodeMap.values", "rustworkx.NullGraph", "PathLengthMapping", "rustworkx.PathLengthMapping.items", "rustworkx.PathLengthMapping.keys", "rustworkx.PathLengthMapping.values", "PathMapping", "rustworkx.PathMapping.items", "rustworkx.PathMapping.keys", "rustworkx.PathMapping.values", "Pos2DMapping", "rustworkx.Pos2DMapping.items", "rustworkx.Pos2DMapping.keys", "rustworkx.Pos2DMapping.values", "ProductNodeMap", "rustworkx.ProductNodeMap.items", "rustworkx.ProductNodeMap.keys", "rustworkx.ProductNodeMap.values", "PyDAG", "rustworkx.PyDAG.add_child", "rustworkx.PyDAG.add_edge", "rustworkx.PyDAG.add_edges_from", "rustworkx.PyDAG.add_edges_from_no_data", "rustworkx.PyDAG.add_node", "rustworkx.PyDAG.add_nodes_from", "rustworkx.PyDAG.add_parent", "rustworkx.PyDAG.adj", "rustworkx.PyDAG.adj_direction", "rustworkx.PyDAG.clear", "rustworkx.PyDAG.clear_edges", "rustworkx.PyDAG.compose", "rustworkx.PyDAG.contract_nodes", "rustworkx.PyDAG.copy", "rustworkx.PyDAG.edge_index_map", "rustworkx.PyDAG.edge_indices", "rustworkx.PyDAG.edge_indices_from_endpoints", "rustworkx.PyDAG.edge_list", "rustworkx.PyDAG.edge_subgraph", "rustworkx.PyDAG.edges", "rustworkx.PyDAG.extend_from_edge_list", "rustworkx.PyDAG.extend_from_weighted_edge_list", "rustworkx.PyDAG.filter_edges", "rustworkx.PyDAG.filter_nodes", "rustworkx.PyDAG.find_adjacent_node_by_edge", "rustworkx.PyDAG.find_node_by_weight", "rustworkx.PyDAG.find_predecessor_node_by_edge", "rustworkx.PyDAG.find_predecessors_by_edge", "rustworkx.PyDAG.find_successors_by_edge", "rustworkx.PyDAG.from_adjacency_matrix", "rustworkx.PyDAG.from_complex_adjacency_matrix", "rustworkx.PyDAG.get_all_edge_data", "rustworkx.PyDAG.get_edge_data", "rustworkx.PyDAG.get_edge_data_by_index", "rustworkx.PyDAG.get_edge_endpoints_by_index", "rustworkx.PyDAG.get_node_data", "rustworkx.PyDAG.has_edge", "rustworkx.PyDAG.has_node", "rustworkx.PyDAG.has_parallel_edges", "rustworkx.PyDAG.in_degree", "rustworkx.PyDAG.in_edges", "rustworkx.PyDAG.incident_edge_index_map", "rustworkx.PyDAG.incident_edges", "rustworkx.PyDAG.insert_node_on_in_edges", "rustworkx.PyDAG.insert_node_on_in_edges_multiple", "rustworkx.PyDAG.insert_node_on_out_edges", "rustworkx.PyDAG.insert_node_on_out_edges_multiple", "rustworkx.PyDAG.is_symmetric", "rustworkx.PyDAG.make_symmetric", "rustworkx.PyDAG.merge_nodes", "rustworkx.PyDAG.neighbors", "rustworkx.PyDAG.node_indexes", "rustworkx.PyDAG.node_indices", "rustworkx.PyDAG.nodes", "rustworkx.PyDAG.num_edges", "rustworkx.PyDAG.num_nodes", "rustworkx.PyDAG.out_degree", "rustworkx.PyDAG.out_edges", "rustworkx.PyDAG.predecessor_indices", "rustworkx.PyDAG.predecessors", "rustworkx.PyDAG.read_edge_list", "rustworkx.PyDAG.remove_edge", "rustworkx.PyDAG.remove_edge_from_index", "rustworkx.PyDAG.remove_edges_from", "rustworkx.PyDAG.remove_node", "rustworkx.PyDAG.remove_node_retain_edges", "rustworkx.PyDAG.remove_node_retain_edges_by_id", "rustworkx.PyDAG.remove_node_retain_edges_by_key", "rustworkx.PyDAG.remove_nodes_from", "rustworkx.PyDAG.reverse", "rustworkx.PyDAG.subgraph", "rustworkx.PyDAG.substitute_node_with_subgraph", "rustworkx.PyDAG.successor_indices", "rustworkx.PyDAG.successors", "rustworkx.PyDAG.to_dot", "rustworkx.PyDAG.to_undirected", "rustworkx.PyDAG.update_edge", "rustworkx.PyDAG.update_edge_by_index", "rustworkx.PyDAG.weighted_edge_list", "rustworkx.PyDAG.write_edge_list", "PyDiGraph", "rustworkx.PyDiGraph.add_child", "rustworkx.PyDiGraph.add_edge", "rustworkx.PyDiGraph.add_edges_from", "rustworkx.PyDiGraph.add_edges_from_no_data", "rustworkx.PyDiGraph.add_node", "rustworkx.PyDiGraph.add_nodes_from", "rustworkx.PyDiGraph.add_parent", "rustworkx.PyDiGraph.adj", "rustworkx.PyDiGraph.adj_direction", "rustworkx.PyDiGraph.clear", "rustworkx.PyDiGraph.clear_edges", "rustworkx.PyDiGraph.compose", "rustworkx.PyDiGraph.contract_nodes", "rustworkx.PyDiGraph.copy", "rustworkx.PyDiGraph.edge_index_map", "rustworkx.PyDiGraph.edge_indices", "rustworkx.PyDiGraph.edge_indices_from_endpoints", "rustworkx.PyDiGraph.edge_list", "rustworkx.PyDiGraph.edge_subgraph", "rustworkx.PyDiGraph.edges", "rustworkx.PyDiGraph.extend_from_edge_list", "rustworkx.PyDiGraph.extend_from_weighted_edge_list", "rustworkx.PyDiGraph.filter_edges", "rustworkx.PyDiGraph.filter_nodes", "rustworkx.PyDiGraph.find_adjacent_node_by_edge", "rustworkx.PyDiGraph.find_node_by_weight", "rustworkx.PyDiGraph.find_predecessor_node_by_edge", "rustworkx.PyDiGraph.find_predecessors_by_edge", "rustworkx.PyDiGraph.find_successors_by_edge", "rustworkx.PyDiGraph.from_adjacency_matrix", "rustworkx.PyDiGraph.from_complex_adjacency_matrix", "rustworkx.PyDiGraph.get_all_edge_data", "rustworkx.PyDiGraph.get_edge_data", "rustworkx.PyDiGraph.get_edge_data_by_index", "rustworkx.PyDiGraph.get_edge_endpoints_by_index", "rustworkx.PyDiGraph.get_node_data", "rustworkx.PyDiGraph.has_edge", "rustworkx.PyDiGraph.has_node", "rustworkx.PyDiGraph.has_parallel_edges", "rustworkx.PyDiGraph.in_degree", "rustworkx.PyDiGraph.in_edges", "rustworkx.PyDiGraph.incident_edge_index_map", "rustworkx.PyDiGraph.incident_edges", "rustworkx.PyDiGraph.insert_node_on_in_edges", "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple", "rustworkx.PyDiGraph.insert_node_on_out_edges", "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple", "rustworkx.PyDiGraph.is_symmetric", "rustworkx.PyDiGraph.make_symmetric", "rustworkx.PyDiGraph.merge_nodes", "rustworkx.PyDiGraph.neighbors", "rustworkx.PyDiGraph.node_indexes", "rustworkx.PyDiGraph.node_indices", "rustworkx.PyDiGraph.nodes", "rustworkx.PyDiGraph.num_edges", "rustworkx.PyDiGraph.num_nodes", "rustworkx.PyDiGraph.out_degree", "rustworkx.PyDiGraph.out_edges", "rustworkx.PyDiGraph.predecessor_indices", "rustworkx.PyDiGraph.predecessors", "rustworkx.PyDiGraph.read_edge_list", "rustworkx.PyDiGraph.remove_edge", "rustworkx.PyDiGraph.remove_edge_from_index", "rustworkx.PyDiGraph.remove_edges_from", "rustworkx.PyDiGraph.remove_node", "rustworkx.PyDiGraph.remove_node_retain_edges", "rustworkx.PyDiGraph.remove_node_retain_edges_by_id", "rustworkx.PyDiGraph.remove_node_retain_edges_by_key", "rustworkx.PyDiGraph.remove_nodes_from", "rustworkx.PyDiGraph.reverse", "rustworkx.PyDiGraph.subgraph", "rustworkx.PyDiGraph.substitute_node_with_subgraph", "rustworkx.PyDiGraph.successor_indices", "rustworkx.PyDiGraph.successors", "rustworkx.PyDiGraph.to_dot", "rustworkx.PyDiGraph.to_undirected", "rustworkx.PyDiGraph.update_edge", "rustworkx.PyDiGraph.update_edge_by_index", "rustworkx.PyDiGraph.weighted_edge_list", "rustworkx.PyDiGraph.write_edge_list", "PyGraph", "rustworkx.PyGraph.add_edge", "rustworkx.PyGraph.add_edges_from", "rustworkx.PyGraph.add_edges_from_no_data", "rustworkx.PyGraph.add_node", "rustworkx.PyGraph.add_nodes_from", "rustworkx.PyGraph.adj", "rustworkx.PyGraph.clear", "rustworkx.PyGraph.clear_edges", "rustworkx.PyGraph.compose", "rustworkx.PyGraph.contract_nodes", "rustworkx.PyGraph.copy", "rustworkx.PyGraph.degree", "rustworkx.PyGraph.edge_index_map", "rustworkx.PyGraph.edge_indices", "rustworkx.PyGraph.edge_indices_from_endpoints", "rustworkx.PyGraph.edge_list", "rustworkx.PyGraph.edge_subgraph", "rustworkx.PyGraph.edges", "rustworkx.PyGraph.extend_from_edge_list", "rustworkx.PyGraph.extend_from_weighted_edge_list", "rustworkx.PyGraph.filter_edges", "rustworkx.PyGraph.filter_nodes", "rustworkx.PyGraph.find_node_by_weight", "rustworkx.PyGraph.from_adjacency_matrix", "rustworkx.PyGraph.from_complex_adjacency_matrix", "rustworkx.PyGraph.get_all_edge_data", "rustworkx.PyGraph.get_edge_data", "rustworkx.PyGraph.get_edge_data_by_index", "rustworkx.PyGraph.get_edge_endpoints_by_index", "rustworkx.PyGraph.get_node_data", "rustworkx.PyGraph.has_edge", "rustworkx.PyGraph.has_node", "rustworkx.PyGraph.has_parallel_edges", "rustworkx.PyGraph.in_edges", "rustworkx.PyGraph.incident_edge_index_map", "rustworkx.PyGraph.incident_edges", "rustworkx.PyGraph.neighbors", "rustworkx.PyGraph.node_indexes", "rustworkx.PyGraph.node_indices", "rustworkx.PyGraph.nodes", "rustworkx.PyGraph.num_edges", "rustworkx.PyGraph.num_nodes", "rustworkx.PyGraph.out_edges", "rustworkx.PyGraph.read_edge_list", "rustworkx.PyGraph.remove_edge", "rustworkx.PyGraph.remove_edge_from_index", "rustworkx.PyGraph.remove_edges_from", "rustworkx.PyGraph.remove_node", "rustworkx.PyGraph.remove_nodes_from", "rustworkx.PyGraph.subgraph", "rustworkx.PyGraph.substitute_node_with_subgraph", "rustworkx.PyGraph.to_directed", "rustworkx.PyGraph.to_dot", "rustworkx.PyGraph.update_edge", "rustworkx.PyGraph.update_edge_by_index", "rustworkx.PyGraph.weighted_edge_list", "rustworkx.PyGraph.write_edge_list", "RelationalCoarsestPartition", "TopologicalSorter", "rustworkx.TopologicalSorter.done", "rustworkx.TopologicalSorter.get_ready", "rustworkx.TopologicalSorter.is_active", "WeightedEdgeList", "rustworkx.adjacency_matrix", "rustworkx.all_pairs_all_simple_paths", "rustworkx.all_pairs_bellman_ford_path_lengths", "rustworkx.all_pairs_bellman_ford_shortest_paths", "rustworkx.all_pairs_dijkstra_path_lengths", "rustworkx.all_pairs_dijkstra_shortest_paths", "rustworkx.all_shortest_paths", "rustworkx.all_simple_paths", "rustworkx.ancestors", "rustworkx.articulation_points", "rustworkx.astar_shortest_path", "rustworkx.barabasi_albert_graph", "rustworkx.bellman_ford_shortest_path_lengths", "rustworkx.bellman_ford_shortest_paths", "rustworkx.betweenness_centrality", "rustworkx.bfs_predecessors", "rustworkx.bfs_search", "rustworkx.bfs_successors", "rustworkx.biconnected_components", "rustworkx.bipartite_layout", "rustworkx.bridges", "rustworkx.cartesian_product", "rustworkx.chain_decomposition", "rustworkx.circular_layout", "rustworkx.closeness_centrality", "rustworkx.collect_bicolor_runs", "rustworkx.collect_runs", "rustworkx.complement", "rustworkx.connected_components", "rustworkx.connected_subgraphs", "rustworkx.core_number", "rustworkx.cycle_basis", "rustworkx.dag_longest_path", "rustworkx.dag_longest_path_length", "rustworkx.dag_weighted_longest_path", "rustworkx.dag_weighted_longest_path_length", "rustworkx.descendants", "rustworkx.dfs_edges", "rustworkx.dfs_search", "rustworkx.digraph_adjacency_matrix", "rustworkx.digraph_all_pairs_all_simple_paths", "rustworkx.digraph_all_pairs_bellman_ford_path_lengths", "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths", "rustworkx.digraph_all_pairs_dijkstra_path_lengths", "rustworkx.digraph_all_pairs_dijkstra_shortest_paths", "rustworkx.digraph_all_shortest_paths", "rustworkx.digraph_all_simple_paths", "rustworkx.digraph_astar_shortest_path", "rustworkx.digraph_bellman_ford_shortest_path_lengths", "rustworkx.digraph_betweenness_centrality", "rustworkx.digraph_bfs_search", "rustworkx.digraph_bipartite_layout", "rustworkx.digraph_cartesian_product", "rustworkx.digraph_circular_layout", "rustworkx.digraph_closeness_centrality", "rustworkx.digraph_complement", "rustworkx.digraph_core_number", "rustworkx.digraph_dfs_edges", "rustworkx.digraph_dfs_search", "rustworkx.digraph_dijkstra_search", "rustworkx.digraph_dijkstra_shortest_path_lengths", "rustworkx.digraph_dijkstra_shortest_paths", "rustworkx.digraph_distance_matrix", "rustworkx.digraph_edge_betweenness_centrality", "rustworkx.digraph_eigenvector_centrality", "rustworkx.digraph_find_cycle", "rustworkx.digraph_floyd_warshall", "rustworkx.digraph_floyd_warshall_numpy", "rustworkx.digraph_floyd_warshall_successor_and_distance", "rustworkx.digraph_is_isomorphic", "rustworkx.digraph_is_subgraph_isomorphic", "rustworkx.digraph_k_shortest_path_lengths", "rustworkx.digraph_katz_centrality", "rustworkx.digraph_longest_simple_path", "rustworkx.digraph_maximum_bisimulation", "rustworkx.digraph_node_link_json", "rustworkx.digraph_num_shortest_paths_unweighted", "rustworkx.digraph_random_layout", "rustworkx.digraph_shell_layout", "rustworkx.digraph_spiral_layout", "rustworkx.digraph_spring_layout", "rustworkx.digraph_tensor_product", "rustworkx.digraph_transitivity", "rustworkx.digraph_union", "rustworkx.digraph_unweighted_average_shortest_path_length", "rustworkx.digraph_vf2_mapping", "rustworkx.dijkstra_search", "rustworkx.dijkstra_shortest_path_lengths", "rustworkx.dijkstra_shortest_paths", "rustworkx.directed_barabasi_albert_graph", "rustworkx.directed_gnm_random_graph", "rustworkx.directed_gnp_random_graph", "rustworkx.directed_random_bipartite_graph", "rustworkx.directed_sbm_random_graph", "rustworkx.distance_matrix", "rustworkx.edge_betweenness_centrality", "rustworkx.eigenvector_centrality", "rustworkx.find_negative_cycle", "rustworkx.floyd_warshall", "rustworkx.floyd_warshall_numpy", "rustworkx.floyd_warshall_successor_and_distance", "rustworkx.from_node_link_json_file", "rustworkx.generators.barbell_graph", "rustworkx.generators.binomial_tree_graph", "rustworkx.generators.complete_graph", "rustworkx.generators.cycle_graph", "rustworkx.generators.directed_binomial_tree_graph", "rustworkx.generators.directed_complete_graph", "rustworkx.generators.directed_cycle_graph", "rustworkx.generators.directed_empty_graph", "rustworkx.generators.directed_grid_graph", "rustworkx.generators.directed_heavy_hex_graph", "rustworkx.generators.directed_heavy_square_graph", "rustworkx.generators.directed_hexagonal_lattice_graph", "rustworkx.generators.directed_mesh_graph", "rustworkx.generators.directed_path_graph", "rustworkx.generators.directed_star_graph", "rustworkx.generators.dorogovtsev_goltsev_mendes_graph", "rustworkx.generators.empty_graph", "rustworkx.generators.full_rary_tree", "rustworkx.generators.generalized_petersen_graph", "rustworkx.generators.grid_graph", "rustworkx.generators.heavy_hex_graph", "rustworkx.generators.heavy_square_graph", "rustworkx.generators.hexagonal_lattice_graph", "rustworkx.generators.lollipop_graph", "rustworkx.generators.mesh_graph", "rustworkx.generators.path_graph", "rustworkx.generators.star_graph", "rustworkx.graph_adjacency_matrix", "rustworkx.graph_all_pairs_all_simple_paths", "rustworkx.graph_all_pairs_bellman_ford_path_lengths", "rustworkx.graph_all_pairs_bellman_ford_shortest_paths", "rustworkx.graph_all_pairs_dijkstra_path_lengths", "rustworkx.graph_all_pairs_dijkstra_shortest_paths", "rustworkx.graph_all_shortest_paths", "rustworkx.graph_all_simple_paths", "rustworkx.graph_astar_shortest_path", "rustworkx.graph_bellman_ford_shortest_path_lengths", "rustworkx.graph_betweenness_centrality", "rustworkx.graph_bfs_search", "rustworkx.graph_bipartite_edge_color", "rustworkx.graph_bipartite_layout", "rustworkx.graph_cartesian_product", "rustworkx.graph_circular_layout", "rustworkx.graph_closeness_centrality", "rustworkx.graph_complement", "rustworkx.graph_core_number", "rustworkx.graph_dfs_edges", "rustworkx.graph_dfs_search", "rustworkx.graph_dijkstra_search", "rustworkx.graph_dijkstra_shortest_path_lengths", "rustworkx.graph_dijkstra_shortest_paths", "rustworkx.graph_distance_matrix", "rustworkx.graph_edge_betweenness_centrality", "rustworkx.graph_eigenvector_centrality", "rustworkx.graph_floyd_warshall", "rustworkx.graph_floyd_warshall_numpy", "rustworkx.graph_floyd_warshall_successor_and_distance", "rustworkx.graph_greedy_color", "rustworkx.graph_greedy_edge_color", "rustworkx.graph_is_isomorphic", "rustworkx.graph_is_subgraph_isomorphic", "rustworkx.graph_k_shortest_path_lengths", "rustworkx.graph_katz_centrality", "rustworkx.graph_line_graph", "rustworkx.graph_longest_simple_path", "rustworkx.graph_misra_gries_edge_color", "rustworkx.graph_node_link_json", "rustworkx.graph_num_shortest_paths_unweighted", "rustworkx.graph_random_layout", "rustworkx.graph_shell_layout", "rustworkx.graph_spiral_layout", "rustworkx.graph_spring_layout", "rustworkx.graph_tensor_product", "rustworkx.graph_token_swapper", "rustworkx.graph_transitivity", "rustworkx.graph_union", "rustworkx.graph_unweighted_average_shortest_path_length", "rustworkx.graph_vf2_mapping", "rustworkx.has_path", "rustworkx.hits", "rustworkx.hyperbolic_random_graph", "rustworkx.is_bipartite", "rustworkx.is_connected", "rustworkx.is_directed_acyclic_graph", "rustworkx.is_isomorphic", "rustworkx.is_isomorphic_node_match", "rustworkx.is_matching", "rustworkx.is_maximal_matching", "rustworkx.is_planar", "rustworkx.is_subgraph_isomorphic", "rustworkx.is_weakly_connected", "rustworkx.isolates", "rustworkx.k_shortest_path_lengths", "rustworkx.katz_centrality", "rustworkx.layers", "rustworkx.lexicographical_topological_sort", "rustworkx.longest_simple_path", "rustworkx.max_weight_matching", "rustworkx.metric_closure", "rustworkx.minimum_spanning_edges", "rustworkx.minimum_spanning_tree", "rustworkx.negative_edge_cycle", "rustworkx.networkx_converter", "rustworkx.node_connected_component", "rustworkx.node_link_json", "rustworkx.num_shortest_paths_unweighted", "rustworkx.number_connected_components", "rustworkx.number_weakly_connected_components", "rustworkx.pagerank", "rustworkx.parse_node_link_json", "rustworkx.random_geometric_graph", "rustworkx.random_layout", "rustworkx.read_graphml", "rustworkx.shell_layout", "rustworkx.simple_cycles", "rustworkx.spiral_layout", "rustworkx.spring_layout", "rustworkx.steiner_tree", "rustworkx.stoer_wagner_min_cut", "rustworkx.strongly_connected_components", "rustworkx.topological_generations", "rustworkx.topological_sort", "rustworkx.transitive_reduction", "rustworkx.transitivity", "rustworkx.two_color", "rustworkx.undirected_gnm_random_graph", "rustworkx.undirected_gnp_random_graph", "rustworkx.undirected_random_bipartite_graph", "rustworkx.undirected_sbm_random_graph", "rustworkx.union", "rustworkx.unweighted_average_shortest_path_length", "rustworkx.vf2_mapping", "BFSVisitor", "rustworkx.visit.BFSVisitor.black_target_edge", "rustworkx.visit.BFSVisitor.discover_vertex", "rustworkx.visit.BFSVisitor.finish_vertex", "rustworkx.visit.BFSVisitor.gray_target_edge", "rustworkx.visit.BFSVisitor.non_tree_edge", "rustworkx.visit.BFSVisitor.tree_edge", "DFSVisitor", "rustworkx.visit.DFSVisitor.back_edge", "rustworkx.visit.DFSVisitor.discover_vertex", "rustworkx.visit.DFSVisitor.finish_vertex", "rustworkx.visit.DFSVisitor.forward_or_cross_edge", "rustworkx.visit.DFSVisitor.tree_edge", "DijkstraVisitor", "rustworkx.visit.DijkstraVisitor.discover_vertex", "rustworkx.visit.DijkstraVisitor.edge_not_relaxed", "rustworkx.visit.DijkstraVisitor.edge_relaxed", "rustworkx.visit.DijkstraVisitor.examine_edge", "rustworkx.visit.DijkstraVisitor.finish_vertex", "rustworkx.visit.PruneSearch", "rustworkx.visit.StopSearch", "rustworkx.visualization.graphviz_draw", "rustworkx.visualization.mpl_draw", "rustworkx.weakly_connected_components", "Rustworkx Comparison Benchmarks With Other Libraries", "rustworkx Documentation", "Getting Started", "rustworkx for NetworkX users", "Release Notes", "Working with Betweenness Centrality", "Directed Acyclic Graphs", "rustworkx Tutorials and Guides", "Introduction to rustworkx", "Visualization"], "terms": {"first": [0, 44, 100, 114, 120, 121, 149, 165, 181, 195, 201, 202, 230, 246, 259, 273, 276, 277, 281, 293, 294, 304, 309, 329, 330, 331, 335, 336, 351, 352, 364, 366, 371, 372, 379, 382, 383, 384, 395, 397, 399, 414, 419, 422, 429, 430, 441, 442, 454, 457, 462, 463, 472, 473, 474, 475, 476, 488, 491, 493, 495, 500, 501, 505, 510, 545, 547, 550, 557, 562, 572, 576, 577, 578, 580], "read": [0, 25, 29, 33, 34, 35, 39, 43, 47, 51, 55, 56, 58, 66, 72, 76, 84, 103, 149, 168, 184, 230, 249, 263, 294, 307, 308, 313, 316, 317, 318, 319, 326, 327, 335, 355, 356, 357, 358, 362, 363, 366, 377, 378, 380, 386, 395, 409, 410, 412, 445, 446, 447, 448, 452, 453, 457, 468, 469, 470, 478, 488, 495, 509, 524, 528, 575, 576, 580], "overal": 0, "qiskit": [0, 573, 575, 576], "project": [0, 524, 575, 576], "guidelin": 0, "These": [0, 21, 22, 88, 169, 250, 574, 575, 576, 580], "ar": [0, 21, 22, 33, 34, 56, 76, 88, 91, 92, 96, 97, 100, 101, 106, 109, 110, 118, 119, 132, 133, 134, 135, 137, 149, 150, 152, 154, 155, 156, 159, 165, 167, 169, 172, 173, 177, 178, 181, 182, 187, 190, 191, 199, 200, 213, 214, 215, 216, 218, 230, 231, 233, 235, 236, 237, 240, 246, 248, 250, 252, 253, 256, 259, 260, 266, 269, 270, 274, 275, 277, 294, 295, 297, 300, 302, 304, 306, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 325, 327, 330, 332, 334, 335, 336, 338, 341, 344, 345, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 364, 366, 368, 369, 370, 371, 372, 373, 375, 377, 378, 380, 381, 382, 383, 384, 386, 387, 394, 395, 396, 397, 399, 400, 402, 403, 404, 407, 409, 410, 412, 413, 414, 416, 418, 419, 421, 422, 424, 427, 428, 429, 430, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 487, 488, 489, 490, 491, 493, 495, 496, 499, 500, 501, 505, 507, 509, 510, 511, 512, 513, 515, 516, 524, 526, 528, 532, 536, 539, 541, 544, 545, 547, 556, 569, 570, 572, 573, 574, 575, 576, 577, 578, 580], "all": [0, 25, 29, 96, 97, 98, 99, 102, 104, 105, 107, 108, 116, 117, 120, 129, 132, 133, 134, 135, 137, 138, 140, 141, 142, 146, 148, 154, 155, 156, 158, 162, 164, 165, 177, 178, 179, 180, 183, 185, 186, 188, 189, 197, 198, 201, 210, 213, 214, 215, 216, 218, 219, 221, 222, 223, 227, 229, 235, 236, 237, 239, 243, 245, 246, 256, 257, 258, 261, 264, 265, 267, 268, 276, 277, 284, 288, 289, 290, 293, 302, 304, 309, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 328, 330, 332, 336, 338, 339, 340, 343, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 364, 368, 371, 372, 373, 377, 378, 380, 381, 382, 386, 387, 396, 397, 398, 399, 400, 403, 404, 405, 406, 409, 410, 412, 413, 414, 424, 435, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 459, 462, 463, 464, 468, 469, 470, 471, 472, 478, 480, 491, 492, 493, 496, 509, 511, 512, 513, 515, 516, 530, 533, 534, 538, 541, 542, 543, 545, 546, 547, 551, 558, 566, 569, 570, 573, 574, 576, 578, 580], "includ": [0, 116, 117, 159, 160, 197, 198, 240, 241, 300, 301, 315, 321, 328, 354, 360, 363, 389, 398, 444, 450, 453, 482, 492, 520, 546, 573, 574, 575, 576, 578, 580], "http": [0, 336, 378, 386, 405, 410, 425, 426, 431, 434, 436, 437, 455, 469, 478, 481, 489, 495, 504, 509, 524, 528, 530, 533, 542, 573, 575, 576], "github": [0, 405, 530, 542, 572, 573, 575, 576], "com": [0, 386, 405, 478, 509, 530, 533, 542, 573, 575, 576], "blob": [0, 405, 530, 542], "main": [0, 576], "md": 0, "while": [0, 118, 119, 199, 200, 274, 275, 309, 322, 330, 350, 351, 352, 364, 371, 372, 373, 382, 383, 384, 394, 398, 399, 400, 414, 454, 462, 463, 464, 472, 475, 476, 487, 493, 500, 505, 528, 532, 536, 537, 546, 547, 567, 569, 573, 575, 576, 578], "": [0, 88, 101, 111, 112, 160, 165, 166, 168, 169, 182, 192, 193, 241, 246, 247, 249, 250, 260, 271, 272, 301, 304, 305, 307, 309, 316, 317, 318, 319, 320, 324, 326, 327, 328, 329, 330, 331, 335, 338, 344, 346, 347, 348, 349, 351, 352, 355, 356, 357, 358, 359, 361, 362, 363, 364, 366, 368, 371, 372, 373, 374, 375, 377, 378, 380, 381, 382, 384, 386, 394, 397, 398, 400, 401, 402, 409, 410, 411, 412, 413, 414, 417, 420, 425, 426, 431, 436, 437, 445, 446, 447, 448, 449, 451, 452, 453, 454, 457, 459, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 476, 478, 481, 487, 489, 491, 492, 495, 497, 505, 509, 511, 514, 515, 516, 517, 524, 530, 532, 533, 534, 535, 539, 545, 546, 562, 569, 570, 573, 574, 575, 576, 577, 580], "directli": [0, 156, 237, 575, 576, 580], "applic": [0, 338, 434, 528, 573, 574, 576], "sinc": [0, 114, 195, 273, 384, 476, 505, 556, 573, 575, 576, 578, 580], "most": [0, 481, 526, 575, 576, 580], "about": [0, 572, 573, 574, 576], "itself": [0, 434, 575], "an": [0, 33, 34, 43, 51, 55, 56, 58, 66, 72, 76, 88, 89, 90, 91, 92, 95, 96, 97, 100, 101, 103, 106, 107, 109, 111, 112, 113, 115, 118, 119, 121, 124, 125, 130, 131, 137, 149, 150, 151, 154, 155, 156, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 181, 182, 184, 187, 188, 190, 192, 193, 194, 196, 199, 200, 202, 205, 206, 211, 212, 218, 230, 231, 232, 235, 236, 237, 240, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 259, 260, 263, 266, 267, 269, 270, 271, 272, 274, 275, 280, 281, 285, 286, 294, 295, 296, 300, 301, 303, 304, 305, 306, 307, 308, 309, 313, 314, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 330, 332, 333, 334, 336, 337, 338, 342, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 361, 362, 364, 365, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 415, 416, 417, 418, 419, 420, 425, 426, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 451, 452, 454, 456, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479, 482, 484, 485, 486, 487, 489, 490, 493, 495, 496, 498, 500, 504, 505, 506, 507, 508, 509, 511, 513, 514, 517, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 538, 540, 541, 542, 543, 544, 547, 556, 559, 569, 570, 572, 573, 574, 575, 576, 578, 580], "independ": [0, 405, 406, 473, 474, 518, 542, 543, 573, 576], "librari": [0, 524, 569, 573, 574, 575, 576, 580], "develop": [0, 574, 576], "tandem": 0, "advic": 0, "still": [0, 312, 404, 513, 541, 573, 574, 575, 576], "appli": [0, 489, 576, 580], "here": [0, 345, 533, 573, 575, 577, 578, 580], "In": [0, 107, 188, 267, 314, 330, 338, 339, 352, 353, 364, 368, 372, 378, 386, 387, 405, 410, 443, 454, 459, 463, 469, 478, 480, 495, 509, 512, 524, 542, 559, 573, 575, 576, 578, 580], "addit": [0, 88, 169, 250, 339, 573, 574, 575, 576, 580], "detail": [0, 156, 237, 378, 386, 410, 434, 469, 478, 495, 509, 524, 569, 570, 573, 574, 575, 576, 580], "below": [0, 330, 351, 352, 364, 371, 372, 373, 394, 400, 416, 439, 454, 462, 463, 464, 487, 532, 575], "implement": [0, 25, 29, 33, 34, 35, 39, 43, 47, 55, 56, 58, 66, 72, 76, 84, 88, 156, 169, 237, 250, 308, 313, 329, 331, 378, 386, 405, 410, 426, 437, 455, 469, 478, 489, 509, 524, 528, 530, 533, 535, 542, 572, 573, 575, 576, 580], "primarili": [0, 575, 576], "thin": 0, "layer": [0, 6, 576], "becaus": [0, 163, 244, 303, 511, 575, 576, 577, 580], "your": [0, 154, 235, 417, 420, 574, 575, 576, 580], "involv": [0, 580], "modif": [0, 309], "src": 0, "To": [0, 277, 382, 414, 472, 574, 576, 577, 578, 580], "understand": 0, "which": [0, 88, 101, 111, 112, 113, 115, 116, 117, 137, 140, 155, 156, 160, 169, 182, 192, 193, 194, 196, 197, 198, 218, 221, 236, 237, 241, 250, 260, 271, 272, 288, 301, 309, 310, 314, 316, 317, 318, 319, 320, 324, 327, 330, 336, 345, 352, 353, 355, 356, 357, 358, 359, 361, 364, 372, 373, 375, 379, 380, 381, 382, 387, 388, 392, 394, 400, 402, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 451, 454, 463, 464, 466, 470, 471, 472, 473, 480, 485, 487, 489, 496, 502, 503, 511, 512, 513, 514, 515, 516, 526, 529, 532, 533, 534, 536, 573, 574, 575, 576, 577, 578, 580], "you": [0, 25, 29, 33, 34, 35, 39, 43, 47, 55, 56, 58, 66, 67, 72, 76, 84, 88, 130, 131, 159, 163, 164, 165, 169, 211, 212, 240, 244, 245, 246, 250, 285, 286, 300, 303, 304, 308, 313, 315, 316, 317, 318, 319, 330, 352, 354, 355, 356, 357, 358, 364, 372, 373, 380, 381, 382, 387, 396, 400, 412, 413, 414, 444, 454, 463, 464, 470, 471, 472, 473, 474, 480, 489, 490, 512, 513, 514, 518, 533, 539, 569, 570, 573, 574, 575, 576, 577, 578, 580], "need": [0, 165, 169, 246, 250, 304, 424, 435, 569, 573, 574, 575, 576, 577, 578, 580], "we": [0, 309, 330, 352, 364, 372, 384, 454, 463, 476, 505, 557, 558, 562, 572, 575, 576, 577, 578, 580], "invit": 0, "overview": 0, "our": [0, 576, 578, 580], "simplifi": [0, 576, 578], "sourc": [0, 88, 101, 106, 107, 109, 110, 113, 115, 125, 130, 138, 160, 165, 167, 182, 187, 188, 190, 191, 194, 196, 206, 211, 219, 241, 246, 248, 266, 267, 269, 270, 285, 301, 304, 306, 314, 315, 316, 317, 318, 319, 320, 321, 324, 326, 327, 328, 329, 330, 331, 333, 335, 336, 337, 338, 341, 344, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 359, 362, 364, 371, 372, 373, 374, 375, 379, 380, 382, 390, 400, 401, 402, 408, 409, 410, 412, 413, 414, 444, 445, 446, 447, 448, 449, 452, 454, 462, 463, 464, 465, 466, 470, 472, 483, 494, 495, 497, 500, 501, 505, 507, 508, 509, 512, 518, 520, 521, 527, 529, 531, 532, 533, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 574, 576, 578], "tree": [0, 6, 19, 330, 336, 351, 352, 364, 371, 372, 373, 400, 417, 420, 433, 454, 462, 463, 464, 515, 516, 533, 549, 552, 554, 556, 558, 560, 567, 576], "tini": [0, 576], "larg": [0, 383, 384, 405, 475, 476, 500, 501, 542, 572, 575, 576, 578], "mod": 0, "pure_rust_cod": 0, "more_pure_rust_cod": 0, "add": [0, 88, 89, 90, 91, 92, 93, 94, 95, 100, 109, 110, 132, 133, 134, 135, 154, 155, 156, 169, 170, 171, 172, 173, 174, 175, 176, 181, 190, 191, 213, 214, 215, 216, 235, 236, 237, 250, 251, 252, 253, 254, 255, 259, 269, 270, 397, 422, 429, 430, 491, 513, 518, 528, 545, 574, 575, 576, 578, 580], "them": [0, 164, 245, 309, 383, 384, 475, 476, 500, 501, 505, 576, 580], "import": [0, 25, 29, 33, 34, 43, 55, 56, 58, 66, 72, 76, 88, 100, 111, 112, 149, 158, 163, 168, 169, 181, 192, 193, 230, 239, 244, 249, 250, 259, 271, 272, 294, 303, 307, 308, 309, 313, 330, 352, 364, 366, 372, 387, 395, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 454, 457, 463, 473, 474, 479, 480, 481, 488, 512, 569, 570, 574, 575, 576, 577, 578], "defin": [0, 316, 317, 326, 327, 338, 345, 355, 356, 362, 368, 396, 424, 435, 445, 446, 452, 459, 490, 534, 576, 577, 578], "see": [0, 336, 407, 434, 528, 544, 570, 572, 573, 576, 580], "next": [0, 33, 34, 43, 55, 56, 58, 66, 72, 76, 308, 313, 324, 351, 361, 371, 382, 399, 414, 451, 462, 472, 489, 493, 547, 576], "section": [0, 44, 579, 580], "us": [0, 33, 34, 43, 51, 55, 56, 58, 66, 72, 76, 80, 88, 90, 92, 96, 97, 100, 101, 113, 115, 116, 117, 118, 119, 129, 137, 146, 149, 154, 156, 159, 160, 163, 164, 165, 168, 169, 171, 173, 177, 178, 181, 182, 194, 196, 197, 198, 199, 200, 210, 218, 227, 230, 235, 237, 240, 241, 244, 245, 246, 249, 250, 252, 253, 259, 260, 270, 274, 275, 277, 284, 293, 294, 300, 301, 303, 304, 307, 308, 309, 313, 314, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 336, 338, 339, 340, 341, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 361, 362, 363, 364, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 421, 422, 428, 429, 430, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 451, 452, 453, 454, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 480, 481, 482, 487, 489, 490, 492, 493, 494, 495, 496, 500, 501, 504, 505, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 524, 525, 526, 528, 532, 533, 534, 535, 539, 541, 542, 543, 544, 546, 547, 548, 555, 561, 569, 570, 572, 573, 575, 576, 577, 578, 579], "m": [0, 325, 336, 403, 404, 405, 406, 433, 455, 541, 542, 543, 572, 576, 578], "add_wrap": 0, "wrap_pyfunct": 0, "your_new_funct": 0, "modifi": [0, 101, 158, 169, 182, 239, 250, 325, 403, 576], "contain": [0, 25, 29, 33, 34, 39, 43, 47, 55, 56, 58, 66, 72, 76, 88, 107, 169, 188, 250, 267, 308, 309, 313, 329, 331, 336, 344, 351, 370, 371, 386, 407, 424, 435, 461, 462, 478, 479, 495, 509, 511, 518, 519, 534, 538, 544, 575, 576, 578, 579, 580], "pyfunct": 0, "can": [0, 25, 29, 33, 34, 35, 39, 43, 47, 55, 56, 58, 66, 72, 76, 84, 88, 90, 118, 119, 129, 130, 131, 146, 154, 164, 169, 171, 199, 200, 210, 211, 212, 227, 235, 245, 250, 251, 274, 275, 284, 285, 286, 293, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 324, 326, 327, 328, 329, 330, 331, 333, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 362, 363, 364, 368, 372, 373, 376, 377, 380, 381, 382, 384, 387, 396, 398, 400, 401, 402, 404, 406, 407, 408, 409, 410, 412, 413, 414, 443, 444, 452, 453, 454, 459, 463, 464, 467, 468, 470, 471, 472, 473, 474, 476, 480, 489, 490, 492, 494, 500, 501, 504, 505, 508, 509, 512, 513, 514, 520, 529, 531, 532, 533, 536, 539, 541, 543, 544, 546, 569, 570, 573, 574, 575, 576, 577, 578, 580], "either": [0, 97, 160, 164, 178, 241, 245, 301, 312, 314, 316, 317, 318, 319, 321, 324, 326, 327, 333, 337, 338, 341, 344, 351, 353, 368, 389, 399, 401, 402, 408, 410, 412, 413, 427, 434, 438, 443, 459, 473, 474, 482, 493, 494, 500, 501, 505, 508, 509, 518, 520, 529, 531, 532, 539, 546, 547, 570, 575, 576, 578], "The": [0, 33, 34, 43, 55, 56, 58, 76, 88, 89, 90, 93, 95, 96, 97, 100, 101, 103, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 174, 176, 177, 178, 181, 182, 184, 188, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 254, 256, 259, 260, 262, 263, 267, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 293, 294, 295, 296, 298, 301, 302, 303, 304, 305, 307, 308, 309, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 552, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580], "give": [0, 309, 339, 511, 576, 578], "power": [0, 378, 386, 410, 469, 478, 495, 509, 524, 580], "interact": [0, 570, 573, 575, 576], "both": [0, 21, 22, 130, 131, 211, 212, 383, 384, 416, 418, 419, 420, 421, 422, 424, 426, 427, 428, 429, 430, 436, 439, 440, 441, 442, 475, 476, 500, 501, 505, 507, 513, 518, 556, 575, 576, 578, 580], "interpret": [0, 576], "pure": [0, 573], "exist": [0, 88, 107, 140, 169, 188, 221, 250, 251, 252, 253, 267, 269, 270, 288, 325, 384, 399, 403, 411, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 476, 493, 494, 505, 517, 547, 575, 576, 580], "search": [0, 113, 114, 115, 194, 195, 196, 273, 309, 329, 330, 331, 336, 351, 352, 364, 371, 372, 373, 383, 384, 387, 399, 400, 454, 462, 463, 464, 475, 476, 480, 493, 500, 505, 512, 547, 554, 560, 567, 576], "its": [0, 122, 123, 131, 132, 134, 203, 204, 212, 213, 215, 278, 279, 286, 323, 328, 338, 368, 459, 473, 474, 513, 538, 551, 566, 572, 576, 577, 578, 580], "name": [0, 149, 230, 294, 573, 575, 576, 580], "edit": 0, "alreadi": [0, 137, 218, 251, 252, 253, 269, 270, 309, 310, 311, 473, 474, 556, 575, 576, 580], "If": [0, 33, 34, 43, 55, 56, 58, 66, 67, 72, 76, 88, 101, 109, 110, 114, 116, 117, 118, 119, 130, 131, 137, 138, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 163, 164, 165, 168, 169, 182, 190, 191, 195, 197, 198, 199, 200, 211, 212, 218, 219, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 244, 245, 246, 249, 250, 251, 252, 253, 260, 269, 270, 273, 274, 275, 285, 286, 294, 295, 297, 298, 299, 300, 301, 303, 304, 307, 308, 309, 310, 313, 314, 320, 325, 327, 328, 330, 336, 338, 339, 340, 343, 346, 347, 348, 349, 351, 352, 353, 354, 359, 363, 364, 368, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 389, 390, 393, 394, 397, 398, 399, 400, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 449, 453, 454, 455, 459, 462, 463, 464, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 478, 480, 482, 483, 486, 487, 489, 491, 492, 493, 494, 495, 496, 498, 500, 501, 505, 506, 509, 510, 511, 512, 513, 515, 516, 518, 520, 521, 524, 525, 526, 531, 532, 534, 540, 541, 542, 545, 546, 547, 558, 569, 570, 574, 575, 576, 577, 578, 580], "want": [0, 33, 34, 43, 55, 56, 58, 66, 72, 76, 308, 313, 576, 580], "find": [0, 97, 113, 114, 115, 128, 145, 178, 194, 195, 196, 209, 226, 262, 273, 315, 317, 319, 320, 321, 324, 326, 327, 339, 340, 342, 343, 345, 346, 347, 348, 349, 354, 356, 358, 359, 360, 361, 362, 374, 375, 379, 380, 381, 382, 385, 387, 388, 390, 398, 399, 401, 402, 411, 412, 413, 414, 444, 446, 448, 449, 450, 451, 452, 455, 465, 466, 470, 471, 472, 473, 474, 477, 480, 483, 493, 494, 507, 508, 512, 513, 514, 515, 516, 521, 522, 523, 530, 535, 540, 546, 547, 571, 573, 576, 578, 580], "d": [0, 100, 181, 259, 338, 368, 373, 398, 400, 425, 426, 436, 437, 459, 464, 479, 481, 492, 496, 546, 570, 572, 576, 578], "like": [0, 101, 130, 131, 182, 211, 212, 260, 315, 321, 354, 360, 363, 376, 377, 378, 386, 387, 408, 409, 410, 444, 450, 453, 467, 468, 469, 478, 480, 495, 509, 512, 524, 570, 574, 575, 576, 578, 580], "insert": [0, 132, 133, 134, 135, 137, 213, 214, 215, 216, 218, 373, 400, 464, 576], "creat": [0, 88, 89, 90, 91, 92, 93, 94, 95, 101, 118, 119, 132, 133, 134, 135, 137, 149, 155, 156, 160, 164, 169, 170, 171, 172, 173, 174, 175, 176, 182, 199, 200, 213, 214, 215, 216, 218, 230, 236, 237, 241, 245, 250, 251, 252, 253, 254, 255, 260, 274, 275, 294, 301, 302, 309, 325, 341, 369, 403, 404, 405, 406, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 460, 526, 541, 542, 543, 570, 572, 573, 575, 576, 578], "one": [0, 96, 97, 100, 101, 114, 116, 117, 132, 133, 134, 135, 137, 150, 152, 154, 156, 165, 177, 178, 181, 182, 195, 197, 198, 213, 214, 215, 216, 218, 231, 233, 235, 237, 246, 259, 260, 273, 277, 295, 297, 304, 310, 332, 338, 339, 340, 368, 382, 383, 384, 387, 399, 414, 431, 459, 472, 473, 474, 475, 476, 480, 493, 500, 501, 505, 512, 524, 534, 547, 570, 573, 575, 576, 578, 580], "your_modul": 0, "Then": [0, 100, 181, 259, 576], "start": [0, 100, 105, 181, 186, 259, 265, 309, 310, 320, 325, 330, 345, 351, 352, 359, 364, 371, 372, 373, 385, 392, 400, 403, 431, 449, 454, 462, 463, 464, 477, 485, 495, 508, 511, 524, 529, 573, 576, 577, 578, 580], "boilerpl": 0, "bellow": 0, "docstr": [0, 575], "descript": 0, "pyo3": [0, 163, 244, 303, 576], "text_signatur": 0, "graph": [0, 6, 19, 21, 22, 25, 29, 33, 34, 43, 44, 51, 55, 56, 58, 66, 72, 76, 80, 88, 89, 91, 92, 93, 94, 100, 101, 102, 104, 107, 108, 109, 110, 111, 112, 114, 118, 119, 126, 127, 130, 131, 136, 137, 138, 140, 141, 142, 143, 144, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 168, 169, 170, 172, 173, 174, 175, 181, 182, 183, 185, 188, 189, 190, 191, 192, 193, 195, 199, 200, 207, 208, 211, 212, 217, 218, 219, 221, 222, 223, 224, 225, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 249, 250, 252, 253, 254, 255, 259, 260, 261, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 283, 285, 286, 288, 289, 290, 291, 292, 294, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 309, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 553, 556, 559, 567, 568, 569, 570, 571, 573, 574, 576, 579], "pub": [0, 524], "fn": 0, "py": [0, 405, 530, 542], "pygraph": [0, 19, 88, 111, 159, 164, 169, 192, 240, 245, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 330, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 351, 352, 368, 372, 377, 385, 394, 395, 400, 401, 402, 408, 409, 410, 412, 413, 415, 416, 417, 418, 419, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 500, 501, 504, 505, 508, 509, 512, 513, 514, 515, 516, 518, 519, 520, 522, 525, 526, 527, 528, 529, 531, 532, 533, 534, 538, 539, 541, 542, 543, 544, 545, 546, 569, 570, 573, 574, 575, 576, 580], "pyresult": 0, "goe": [0, 405, 542], "rememb": 0, "declar": 0, "sometim": [0, 394, 433, 487, 532], "hard": [0, 473, 489, 576], "organ": 0, "those": [0, 107, 111, 112, 132, 133, 134, 135, 188, 192, 193, 213, 214, 215, 216, 267, 271, 272, 311, 328, 332, 335, 363, 366, 377, 395, 409, 453, 457, 468, 488, 533, 575, 576, 577, 578, 580], "case": [0, 96, 97, 107, 114, 155, 156, 177, 178, 188, 195, 236, 237, 251, 256, 267, 273, 314, 330, 338, 353, 364, 368, 373, 378, 386, 387, 400, 410, 443, 454, 459, 464, 469, 473, 474, 478, 480, 495, 509, 512, 524, 575, 576, 578, 580], "suggest": 0, "move": [0, 394, 487, 532, 576], "split": 0, "follow": [0, 88, 169, 250, 309, 330, 336, 352, 364, 372, 431, 454, 455, 463, 536, 576, 578, 580], "structur": [0, 338, 383, 384, 475, 476, 500, 501, 505, 528, 573, 575, 576, 580], "have": [0, 51, 67, 80, 88, 101, 102, 137, 138, 153, 154, 155, 156, 160, 164, 169, 182, 183, 218, 219, 234, 235, 236, 237, 241, 245, 250, 261, 298, 301, 302, 309, 311, 312, 322, 325, 326, 350, 362, 374, 384, 401, 403, 404, 407, 452, 465, 476, 479, 499, 505, 511, 513, 524, 534, 541, 544, 551, 558, 566, 574, 575, 576, 578, 580], "deleg": 0, "logic": [0, 309], "call": [0, 21, 22, 88, 129, 146, 156, 169, 210, 227, 237, 250, 284, 293, 309, 310, 311, 330, 336, 352, 364, 372, 373, 394, 400, 406, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 454, 455, 463, 464, 487, 496, 530, 532, 543, 558, 559, 573, 574, 575, 576, 578, 580], "from": [0, 21, 22, 25, 29, 33, 34, 88, 89, 95, 100, 101, 103, 107, 109, 110, 111, 112, 113, 115, 118, 119, 125, 130, 131, 132, 133, 134, 135, 137, 138, 149, 152, 153, 154, 155, 156, 157, 159, 160, 163, 164, 168, 169, 170, 176, 181, 182, 184, 188, 190, 191, 192, 193, 194, 196, 199, 200, 206, 211, 212, 213, 214, 215, 216, 218, 219, 230, 233, 234, 235, 236, 237, 238, 240, 241, 244, 245, 249, 250, 252, 259, 260, 263, 267, 269, 270, 271, 272, 274, 275, 285, 286, 294, 297, 298, 299, 300, 301, 302, 303, 307, 309, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 330, 331, 335, 336, 345, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 371, 372, 373, 374, 375, 376, 379, 385, 386, 387, 390, 393, 395, 397, 398, 399, 401, 402, 403, 406, 407, 408, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 454, 457, 462, 463, 464, 465, 466, 467, 473, 477, 478, 480, 483, 486, 488, 491, 492, 493, 494, 496, 508, 509, 510, 511, 512, 514, 518, 521, 528, 531, 536, 537, 538, 544, 545, 546, 547, 549, 562, 569, 570, 572, 573, 574, 576, 577, 578], "do": [0, 88, 164, 169, 245, 309, 384, 473, 474, 476, 505, 575, 576, 580], "question": 0, "contact": 0, "u": [0, 138, 219, 330, 338, 352, 364, 368, 372, 373, 400, 407, 454, 459, 463, 464, 480, 496, 511, 544, 556, 574, 576, 578], "channel": 0, "slack": 0, "re": [0, 88, 163, 169, 244, 303, 383, 384, 394, 475, 476, 487, 500, 501, 505, 532, 575, 576, 580], "work": [0, 21, 22, 327, 402, 474, 494, 518, 569, 573, 575, 576, 578, 579, 580], "write": [0, 149, 163, 168, 230, 244, 249, 294, 303, 307, 389, 482, 520, 569, 575, 576, 580], "made": [0, 88, 138, 169, 219, 250, 311, 312, 576, 578, 580], "ani": [0, 88, 90, 101, 107, 116, 117, 118, 119, 149, 155, 156, 163, 169, 171, 182, 188, 197, 198, 199, 200, 230, 236, 237, 244, 250, 251, 260, 267, 274, 275, 294, 303, 309, 310, 323, 334, 336, 345, 378, 386, 398, 405, 410, 417, 420, 469, 473, 474, 478, 492, 495, 503, 504, 507, 509, 511, 524, 536, 542, 546, 569, 573, 574, 575, 576, 578, 580], "petgraph": [0, 576], "ha": [0, 88, 113, 114, 115, 116, 117, 127, 154, 155, 156, 169, 194, 195, 196, 197, 198, 208, 235, 236, 237, 250, 273, 283, 309, 310, 323, 330, 332, 334, 336, 344, 345, 346, 347, 348, 349, 364, 370, 372, 373, 396, 404, 405, 407, 454, 461, 463, 464, 473, 474, 490, 496, 507, 510, 511, 526, 533, 539, 541, 542, 544, 549, 558, 573, 575, 576], "depend": [0, 155, 156, 236, 237, 407, 518, 544, 570, 574, 575, 576, 578], "probabl": [0, 405, 406, 407, 496, 542, 543, 544, 574, 576], "sens": 0, "standalon": [0, 573, 576], "provid": [0, 96, 97, 101, 113, 115, 122, 123, 124, 130, 131, 151, 160, 164, 166, 177, 178, 182, 194, 196, 203, 204, 205, 211, 212, 232, 241, 245, 247, 256, 277, 278, 279, 280, 285, 286, 296, 301, 305, 309, 320, 322, 326, 329, 331, 350, 357, 358, 359, 361, 362, 374, 375, 383, 384, 385, 386, 387, 401, 404, 411, 447, 448, 449, 451, 452, 455, 465, 466, 475, 476, 477, 478, 480, 500, 501, 502, 503, 504, 505, 509, 511, 512, 514, 518, 519, 526, 533, 537, 541, 573, 574, 575, 576, 580], "api": [0, 573, 576, 580], "other": [0, 6, 19, 100, 132, 133, 134, 135, 154, 156, 159, 160, 181, 213, 214, 215, 216, 235, 237, 240, 241, 259, 300, 301, 316, 317, 318, 319, 328, 355, 356, 357, 358, 363, 389, 393, 405, 428, 440, 445, 446, 447, 448, 453, 482, 486, 490, 496, 511, 520, 531, 542, 574, 575, 577, 578, 580], "unlik": [0, 67, 92, 173, 253, 575], "design": [0, 574, 575, 576], "top": [0, 333, 365, 456, 576], "algorithm": [0, 19, 21, 22, 114, 195, 273, 316, 317, 318, 319, 320, 324, 325, 326, 327, 328, 330, 332, 345, 351, 352, 355, 356, 357, 358, 359, 361, 362, 363, 364, 371, 372, 373, 374, 375, 377, 378, 380, 381, 382, 383, 384, 386, 388, 394, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 481, 487, 489, 491, 493, 495, 496, 500, 504, 505, 509, 510, 513, 515, 516, 517, 524, 530, 532, 533, 534, 535, 541, 542, 543, 544, 545, 547, 548, 555, 561, 572, 573, 575, 576, 580], "kei": [0, 96, 97, 100, 156, 163, 177, 178, 181, 237, 244, 256, 259, 303, 316, 317, 318, 319, 326, 327, 332, 335, 344, 355, 356, 357, 358, 362, 363, 366, 370, 373, 374, 375, 377, 378, 380, 385, 386, 387, 389, 394, 395, 400, 401, 402, 409, 410, 412, 415, 445, 446, 447, 448, 452, 453, 455, 457, 461, 464, 465, 466, 468, 469, 470, 473, 474, 477, 478, 479, 480, 481, 482, 487, 488, 495, 508, 509, 511, 512, 518, 520, 524, 525, 532, 569, 570, 573, 576], "differ": [0, 67, 109, 110, 118, 119, 164, 190, 191, 199, 200, 245, 269, 270, 274, 275, 302, 322, 348, 349, 350, 376, 396, 407, 408, 467, 473, 474, 511, 516, 544, 569, 573, 574, 576, 578, 580], "keep": [0, 330, 352, 364, 372, 394, 454, 463, 487, 516, 532, 575, 576, 580], "mind": [0, 575], "public": [0, 575, 576], "interfac": [0, 573, 575, 576, 580], "treat": [0, 25, 29, 33, 34, 35, 39, 43, 47, 55, 56, 58, 66, 72, 76, 84, 118, 119, 149, 199, 200, 230, 274, 275, 294, 308, 313, 314, 327, 353, 375, 376, 380, 381, 382, 394, 398, 402, 403, 408, 414, 443, 466, 467, 487, 494, 511, 532, 546, 575, 576], "where": [0, 33, 34, 56, 76, 91, 92, 96, 97, 106, 109, 110, 154, 155, 156, 167, 172, 173, 177, 178, 187, 190, 191, 235, 236, 237, 248, 252, 253, 256, 266, 269, 270, 306, 309, 313, 314, 321, 326, 328, 335, 336, 338, 339, 340, 342, 353, 360, 362, 363, 366, 368, 374, 377, 380, 381, 382, 385, 394, 395, 398, 401, 405, 407, 409, 412, 413, 414, 416, 428, 439, 440, 443, 450, 452, 453, 455, 457, 459, 465, 468, 470, 471, 472, 473, 474, 477, 479, 481, 487, 488, 492, 496, 508, 511, 513, 515, 518, 530, 532, 533, 542, 544, 546, 571, 573, 575, 576, 577, 578, 580], "compat": [0, 88, 140, 221, 288, 364, 372, 373, 454, 463, 464, 574, 576], "doesn": [0, 107, 168, 188, 249, 267, 307, 426, 437, 499, 575, 576, 578, 580], "t": [0, 107, 138, 168, 188, 219, 249, 267, 307, 312, 320, 327, 328, 346, 347, 348, 349, 359, 363, 375, 377, 394, 398, 402, 403, 409, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 449, 453, 466, 468, 487, 492, 499, 515, 516, 524, 532, 533, 546, 557, 558, 575, 576, 577, 578, 580], "matter": 0, "onli": [0, 25, 29, 33, 34, 35, 39, 43, 47, 51, 55, 56, 58, 66, 72, 76, 84, 88, 96, 97, 103, 114, 130, 131, 150, 152, 154, 155, 156, 165, 169, 177, 178, 184, 195, 211, 212, 231, 233, 235, 236, 237, 246, 250, 256, 263, 273, 277, 295, 297, 304, 308, 309, 310, 313, 316, 317, 318, 319, 322, 326, 327, 335, 336, 339, 340, 346, 347, 348, 349, 350, 351, 355, 356, 357, 358, 362, 363, 366, 371, 374, 377, 378, 380, 386, 387, 395, 398, 401, 402, 409, 410, 412, 445, 446, 447, 448, 452, 453, 457, 462, 465, 468, 469, 470, 478, 480, 488, 492, 494, 495, 509, 511, 512, 513, 524, 538, 546, 570, 574, 575, 576, 578, 580], "addition": [0, 88, 169, 250, 575, 576, 580], "should": [0, 67, 91, 92, 154, 156, 160, 165, 172, 173, 235, 237, 241, 246, 252, 253, 301, 304, 324, 330, 352, 361, 364, 372, 373, 400, 420, 424, 426, 427, 436, 451, 454, 463, 464, 495, 500, 501, 505, 548, 555, 561, 574, 575, 576], "done": [0, 309, 311, 312, 575, 576, 578], "via": [0, 569, 575, 576, 580], "cargo": [0, 574, 576], "doc": [0, 524, 573], "It": [0, 25, 29, 33, 34, 39, 43, 47, 51, 55, 56, 58, 66, 72, 76, 80, 88, 90, 116, 117, 118, 119, 156, 158, 159, 169, 171, 197, 198, 199, 200, 237, 239, 240, 250, 251, 274, 275, 300, 308, 309, 313, 316, 317, 318, 319, 320, 323, 324, 326, 327, 332, 334, 335, 336, 339, 340, 344, 345, 346, 347, 348, 349, 355, 356, 357, 358, 359, 361, 362, 366, 370, 373, 374, 375, 376, 380, 381, 382, 387, 394, 396, 397, 398, 400, 401, 402, 408, 412, 413, 414, 445, 446, 447, 448, 449, 451, 452, 457, 461, 464, 465, 466, 467, 470, 471, 472, 480, 487, 489, 490, 491, 492, 500, 501, 505, 511, 512, 513, 524, 528, 532, 533, 539, 545, 546, 569, 573, 574, 575, 576, 578, 580], "expect": [0, 149, 160, 168, 230, 241, 249, 294, 301, 307, 314, 346, 347, 348, 349, 353, 378, 380, 381, 382, 386, 389, 405, 410, 412, 413, 414, 415, 443, 469, 470, 471, 472, 473, 474, 478, 482, 495, 509, 511, 513, 514, 515, 516, 520, 524, 525, 533, 534, 542, 569, 574, 575, 576], "also": [0, 88, 159, 169, 240, 250, 300, 302, 314, 330, 335, 346, 347, 348, 349, 352, 353, 364, 366, 372, 373, 376, 380, 381, 382, 383, 384, 395, 398, 400, 404, 405, 408, 412, 413, 414, 424, 435, 443, 454, 457, 463, 464, 467, 470, 471, 472, 475, 476, 488, 492, 496, 500, 501, 505, 515, 516, 530, 541, 542, 546, 572, 573, 574, 575, 576, 578, 580], "being": [0, 88, 169, 250, 284, 293, 310, 387, 397, 480, 491, 512, 545, 573, 574, 575, 576, 580], "so": [0, 25, 29, 33, 34, 35, 39, 43, 47, 55, 56, 58, 66, 72, 76, 84, 88, 158, 159, 160, 169, 239, 240, 241, 250, 252, 270, 300, 301, 308, 313, 406, 427, 438, 455, 543, 574, 575, 576, 577, 578, 580], "coverag": 0, "onc": [0, 156, 237, 311, 513, 530, 574, 575, 576, 580], "ve": [0, 100, 181, 259, 577, 578], "verifi": 0, "doe": [0, 88, 158, 160, 169, 239, 241, 250, 260, 301, 511, 528, 573, 575, 576, 578], "break": [0, 576], "successfulli": 0, "befor": [0, 101, 169, 182, 250, 387, 480, 511, 512, 576, 578], "open": [0, 149, 163, 168, 230, 244, 249, 294, 303, 307, 575, 576], "ll": [0, 574, 576, 577, 578], "suit": 0, "easiest": 0, "wai": [0, 556, 575, 580], "nox": [0, 576], "instal": [0, 518, 569, 570, 573, 575, 576], "pip": [0, 569, 570, 574, 576, 580], "sever": [0, 473, 474, 575, 576, 580], "advantag": [0, 573, 574, 576], "biggest": [0, 575, 576], "isol": [0, 6, 576], "virtualenv": 0, "thi": [0, 25, 29, 33, 34, 35, 39, 43, 47, 51, 55, 56, 58, 66, 67, 72, 76, 80, 84, 88, 89, 90, 95, 96, 97, 100, 101, 107, 109, 110, 111, 112, 113, 114, 115, 118, 119, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 146, 147, 153, 154, 155, 156, 158, 159, 160, 161, 163, 164, 169, 170, 171, 176, 177, 178, 181, 182, 188, 190, 191, 192, 193, 194, 195, 196, 199, 200, 210, 211, 212, 213, 214, 215, 216, 218, 220, 221, 227, 228, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 250, 252, 256, 259, 260, 267, 269, 270, 271, 272, 273, 274, 275, 284, 285, 286, 287, 288, 293, 298, 300, 301, 302, 303, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 322, 325, 327, 328, 329, 330, 331, 333, 335, 336, 337, 338, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 364, 365, 366, 367, 368, 371, 372, 373, 375, 376, 377, 378, 380, 381, 382, 383, 384, 386, 387, 389, 391, 392, 393, 394, 396, 397, 398, 399, 400, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 416, 418, 419, 421, 422, 426, 427, 428, 429, 430, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 454, 456, 457, 458, 459, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 480, 482, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 500, 501, 503, 505, 507, 509, 510, 511, 512, 513, 515, 516, 517, 518, 520, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 539, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 569, 570, 573, 574, 575, 576, 577, 578, 579, 580], "mean": [0, 88, 97, 169, 178, 250, 324, 361, 384, 403, 451, 476, 490, 505, 507, 540, 573, 575, 576, 580], "pollut": 0, "system": [0, 417, 420, 573, 574, 576], "howev": [0, 88, 169, 250, 569, 573, 574, 575, 576, 580], "default": [0, 88, 118, 119, 130, 131, 137, 149, 154, 156, 159, 164, 169, 199, 200, 211, 212, 218, 230, 235, 237, 240, 245, 250, 274, 275, 294, 300, 309, 314, 315, 316, 317, 318, 319, 321, 328, 338, 353, 354, 355, 356, 357, 358, 360, 363, 364, 368, 372, 373, 376, 377, 378, 380, 381, 382, 383, 384, 386, 387, 394, 396, 397, 398, 399, 400, 408, 409, 410, 412, 413, 414, 420, 422, 424, 426, 427, 429, 430, 436, 443, 444, 450, 453, 454, 459, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 480, 487, 489, 490, 491, 492, 493, 495, 500, 501, 505, 509, 511, 512, 513, 524, 526, 532, 534, 539, 545, 546, 547, 548, 555, 561, 569, 570, 575, 576, 580], "recompil": [0, 576], "everi": [0, 164, 245, 309, 378, 385, 386, 406, 410, 428, 440, 469, 477, 478, 479, 495, 508, 509, 511, 514, 524, 533, 543, 565, 569, 576, 577], "time": [0, 88, 90, 154, 155, 156, 160, 169, 171, 235, 236, 237, 241, 301, 352, 372, 385, 396, 404, 405, 407, 431, 455, 463, 477, 490, 496, 508, 513, 541, 542, 544, 549, 550, 552, 557, 558, 562, 572, 574, 575, 576, 578, 580], "even": [0, 309, 310, 341, 369, 425, 426, 427, 436, 437, 438, 460, 511, 575, 576], "avoid": [0, 88, 169, 533, 578], "packag": [0, 573, 574, 576], "rerun": 0, "without": [0, 92, 106, 163, 173, 187, 244, 253, 266, 303, 323, 330, 346, 347, 348, 349, 364, 373, 400, 454, 464, 504, 507, 524, 576, 578, 580], "flag": [0, 513, 575, 580], "recent": 0, "ran": [0, 580], "repo": 0, "otherwis": [0, 127, 208, 283, 312, 383, 384, 388, 399, 475, 476, 493, 500, 501, 505, 517, 547, 576], "out": [0, 134, 135, 138, 215, 216, 219, 350, 404, 507, 541, 551, 558, 565, 566, 576], "date": 0, "miss": [0, 489, 575, 576], "outsid": [0, 574, 576, 578], "root": [0, 336, 345, 558, 574], "shim": 0, "conflict": 0, "compil": [0, 573, 574, 576], "extens": [0, 403, 528, 575, 576], "test_with_vers": 0, "target": [0, 25, 29, 39, 47, 72, 76, 101, 106, 107, 109, 110, 113, 130, 138, 160, 165, 167, 182, 187, 188, 190, 191, 194, 211, 219, 241, 246, 248, 266, 267, 269, 270, 285, 301, 304, 306, 315, 316, 317, 318, 319, 320, 327, 330, 346, 347, 348, 349, 351, 354, 355, 356, 357, 358, 359, 364, 371, 375, 380, 382, 390, 402, 412, 414, 444, 445, 446, 447, 448, 449, 454, 462, 466, 470, 472, 483, 494, 521, 549, 552, 564, 576, 578, 580], "For": [0, 25, 29, 33, 34, 43, 55, 56, 58, 66, 72, 76, 88, 100, 111, 112, 149, 154, 158, 163, 164, 168, 169, 181, 192, 193, 230, 235, 239, 244, 245, 249, 250, 259, 271, 272, 294, 303, 307, 308, 309, 313, 315, 316, 317, 318, 319, 324, 335, 336, 346, 347, 348, 349, 354, 355, 356, 357, 358, 361, 366, 370, 378, 380, 381, 382, 383, 384, 386, 387, 395, 396, 403, 404, 405, 406, 410, 412, 413, 414, 444, 445, 446, 447, 448, 451, 457, 469, 470, 471, 472, 475, 476, 478, 480, 488, 489, 490, 495, 500, 501, 507, 509, 512, 513, 514, 524, 528, 533, 534, 539, 541, 542, 543, 556, 570, 574, 575, 576, 577, 578, 580], "exampl": [0, 25, 29, 33, 34, 43, 55, 56, 58, 66, 72, 76, 88, 100, 111, 112, 149, 154, 158, 163, 168, 169, 181, 192, 193, 230, 235, 239, 244, 249, 250, 259, 271, 272, 294, 303, 307, 308, 309, 313, 314, 315, 316, 317, 318, 319, 330, 335, 346, 347, 348, 349, 352, 353, 354, 355, 356, 357, 358, 364, 366, 372, 380, 381, 382, 383, 384, 387, 395, 396, 399, 412, 413, 414, 443, 444, 445, 446, 447, 448, 454, 457, 463, 470, 471, 472, 475, 476, 480, 488, 489, 490, 493, 500, 501, 505, 512, 513, 514, 515, 516, 533, 539, 547, 570, 574, 575, 576, 578, 580], "launch": [0, 315, 316, 317, 318, 319, 354, 355, 356, 357, 358, 380, 381, 382, 387, 396, 412, 413, 414, 444, 470, 471, 472, 480, 489, 490, 512, 539], "3": [0, 29, 51, 67, 80, 88, 103, 111, 112, 149, 158, 160, 168, 169, 184, 192, 193, 230, 239, 241, 249, 250, 263, 271, 272, 294, 301, 307, 309, 330, 346, 347, 348, 349, 352, 364, 366, 372, 395, 396, 399, 424, 425, 426, 427, 431, 434, 435, 436, 437, 454, 457, 463, 473, 474, 479, 481, 488, 490, 493, 513, 530, 547, 572, 575, 576, 577, 578, 580], "11": [0, 434, 573, 574], "command": [0, 569], "e": [0, 100, 139, 181, 220, 259, 260, 377, 385, 396, 405, 409, 431, 434, 468, 477, 489, 496, 508, 510, 524, 534, 538, 542, 549, 552, 553, 554, 556, 559, 560, 576, 578, 580], "just": [0, 88, 336, 346, 347, 348, 349, 383, 384, 475, 476, 500, 501, 505, 570, 573, 574, 575, 576, 580], "pass": [0, 111, 112, 137, 154, 156, 159, 164, 168, 192, 193, 218, 235, 237, 240, 245, 249, 271, 272, 300, 307, 314, 328, 335, 346, 347, 348, 349, 353, 363, 366, 377, 378, 380, 381, 382, 383, 384, 386, 389, 397, 399, 404, 409, 410, 412, 413, 414, 415, 443, 453, 457, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 491, 493, 495, 498, 500, 501, 505, 506, 509, 511, 513, 514, 515, 516, 520, 524, 525, 533, 534, 541, 545, 547, 569, 570, 575, 576, 577, 578], "select": [0, 379, 489, 524, 580], "regex": 0, "runner": [0, 576], "dag": [0, 6, 19, 88, 91, 92, 95, 163, 169, 172, 173, 176, 244, 303, 309, 314, 329, 331, 346, 347, 348, 349, 353, 510, 511, 536, 537, 538, 576], "id": [0, 88, 149, 169, 230, 250, 294, 345, 379, 383, 384, 394, 399, 475, 476, 487, 493, 500, 501, 505, 510, 532, 535, 547, 576], "argument": [0, 111, 112, 116, 117, 137, 156, 169, 192, 193, 197, 198, 218, 237, 250, 271, 272, 309, 316, 317, 318, 319, 320, 327, 338, 339, 340, 346, 347, 348, 349, 353, 355, 356, 357, 358, 359, 364, 368, 372, 373, 375, 384, 394, 399, 400, 402, 407, 443, 445, 446, 447, 448, 449, 454, 459, 463, 464, 466, 476, 487, 493, 505, 511, 513, 526, 532, 544, 547, 576, 580], "after": [0, 88, 100, 160, 169, 181, 241, 250, 259, 301, 551, 558, 565, 566, 575, 576, 578, 580], "bare": 0, "option": [0, 88, 100, 101, 118, 119, 137, 149, 160, 163, 164, 168, 169, 181, 182, 199, 200, 218, 230, 241, 244, 245, 249, 250, 259, 260, 274, 275, 294, 301, 303, 307, 314, 320, 325, 326, 327, 330, 333, 336, 337, 338, 345, 351, 352, 353, 359, 362, 364, 365, 367, 368, 371, 372, 373, 374, 375, 376, 378, 379, 383, 384, 385, 386, 389, 391, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 413, 415, 443, 449, 452, 454, 456, 458, 459, 462, 463, 464, 465, 466, 467, 469, 473, 474, 475, 476, 477, 478, 482, 484, 485, 486, 487, 493, 495, 496, 500, 505, 508, 509, 513, 515, 516, 520, 524, 525, 526, 527, 529, 531, 532, 534, 541, 542, 543, 544, 547, 569, 570, 575, 576], "refer": [0, 44, 102, 132, 133, 134, 135, 159, 160, 164, 183, 213, 214, 215, 216, 240, 241, 245, 261, 300, 301, 302, 335, 366, 378, 386, 397, 410, 457, 469, 478, 491, 495, 509, 524, 530, 545, 569, 574, 575, 576, 580], "stestr": 0, "readthedoc": 0, "io": [0, 573, 576], "en": [0, 524, 576], "html": [0, 530], "class": [0, 19, 25, 29, 33, 34, 35, 39, 43, 44, 47, 51, 55, 56, 58, 66, 67, 72, 76, 80, 84, 88, 169, 250, 308, 309, 313, 321, 329, 330, 331, 352, 364, 372, 443, 454, 463, 548, 555, 561, 573, 574, 576, 580], "individu": 0, "method": [0, 25, 29, 35, 39, 47, 51, 67, 72, 76, 80, 84, 88, 90, 101, 109, 110, 113, 115, 118, 119, 130, 131, 137, 140, 158, 163, 169, 171, 182, 190, 191, 194, 196, 199, 200, 211, 212, 218, 221, 239, 244, 250, 260, 269, 270, 274, 275, 285, 286, 288, 303, 309, 310, 322, 330, 338, 350, 352, 364, 372, 373, 378, 386, 400, 410, 454, 463, 464, 469, 478, 495, 509, 513, 518, 524, 548, 555, 559, 561, 569, 574, 575, 576, 577, 578, 580], "faster": [0, 328, 363, 453, 533, 575, 576], "n": [0, 114, 149, 195, 230, 273, 294, 325, 338, 368, 394, 398, 403, 404, 405, 406, 407, 417, 418, 420, 421, 423, 431, 432, 433, 434, 455, 459, 487, 492, 496, 513, 515, 532, 541, 542, 543, 544, 546, 576, 580], "discov": [0, 330, 351, 352, 364, 371, 372, 373, 400, 454, 462, 463, 464, 557, 565], "test_max_weight_match": 0, "same": [0, 67, 88, 90, 101, 114, 154, 155, 156, 158, 160, 169, 171, 182, 195, 235, 236, 237, 239, 241, 273, 301, 309, 382, 387, 397, 414, 472, 480, 491, 500, 501, 505, 512, 516, 524, 545, 556, 570, 573, 576, 578], "path": [0, 6, 19, 25, 29, 72, 76, 149, 158, 163, 168, 230, 239, 244, 249, 294, 303, 307, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 327, 328, 336, 338, 340, 346, 347, 348, 349, 350, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 368, 374, 375, 376, 377, 380, 381, 382, 385, 387, 389, 390, 398, 401, 402, 409, 412, 413, 414, 415, 416, 429, 439, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 459, 465, 466, 467, 468, 470, 471, 472, 477, 480, 482, 483, 492, 494, 508, 512, 513, 514, 520, 521, 528, 530, 533, 538, 546, 569, 573, 574, 576, 577, 578, 580], "test_nod": 0, "testnod": 0, "test_no_nod": 0, "rel": [0, 392, 394, 485, 487, 529, 532], "each": [0, 88, 107, 116, 117, 137, 156, 158, 168, 169, 188, 197, 198, 218, 237, 239, 249, 250, 267, 302, 307, 309, 310, 316, 317, 318, 319, 320, 321, 325, 327, 328, 330, 332, 334, 336, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 352, 355, 356, 357, 358, 359, 360, 363, 364, 368, 370, 372, 373, 375, 376, 377, 380, 381, 382, 383, 384, 389, 392, 393, 394, 398, 399, 400, 402, 403, 405, 406, 407, 408, 409, 414, 415, 418, 421, 427, 433, 438, 445, 446, 447, 448, 449, 450, 453, 454, 459, 461, 463, 464, 466, 467, 468, 473, 474, 475, 476, 482, 485, 486, 487, 493, 495, 500, 501, 502, 503, 505, 510, 513, 514, 515, 516, 520, 524, 525, 526, 529, 531, 532, 533, 536, 542, 543, 544, 546, 547, 554, 560, 565, 569, 571, 574, 575, 576, 577, 578, 580], "fail": [0, 380, 381, 382, 412, 413, 414, 470, 471, 472, 576], "except": [0, 19, 45, 46, 57, 59, 60, 61, 62, 63, 64, 65, 71, 88, 169, 250, 330, 346, 347, 348, 349, 352, 364, 372, 373, 389, 399, 400, 454, 463, 464, 482, 493, 513, 520, 547, 567, 568, 573, 575, 576], "rais": [0, 88, 90, 101, 120, 121, 122, 123, 124, 138, 150, 152, 163, 165, 166, 168, 169, 171, 182, 201, 202, 203, 204, 205, 219, 231, 233, 244, 246, 247, 249, 250, 276, 277, 278, 279, 280, 295, 297, 303, 304, 305, 307, 309, 310, 316, 317, 320, 326, 327, 330, 343, 344, 346, 347, 348, 349, 352, 354, 355, 356, 357, 358, 359, 361, 362, 364, 372, 373, 374, 375, 385, 389, 394, 400, 411, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 452, 454, 463, 464, 465, 466, 477, 482, 487, 498, 506, 510, 513, 514, 519, 520, 528, 532, 533, 536, 537, 538, 539, 575, 576, 578], "save": [0, 569], "output": [0, 118, 119, 155, 156, 159, 163, 164, 168, 199, 200, 236, 237, 240, 244, 245, 249, 274, 275, 300, 302, 303, 307, 309, 314, 315, 321, 326, 351, 353, 354, 360, 362, 371, 374, 376, 385, 389, 390, 401, 408, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 450, 452, 462, 465, 477, 482, 483, 508, 510, 511, 513, 518, 520, 521, 525, 569, 576, 577, 578], "imag": [0, 163, 244, 259, 303, 425, 426, 436, 437, 569, 575, 576, 577, 578, 580], "current": [0, 88, 163, 244, 303, 353, 417, 420, 443, 513, 552, 576, 580], "ensur": [0, 88, 165, 169, 246, 285, 304, 574, 576], "usabl": [0, 576], "clutter": 0, "clean": 0, "up": [0, 309, 356, 358, 446, 448, 578, 580], "view": [0, 399, 493, 500, 505, 547, 575, 578], "inspect": [0, 578], "common": [0, 479, 502, 524, 576, 578], "set": [0, 88, 90, 101, 121, 124, 130, 131, 149, 154, 159, 164, 168, 169, 171, 182, 202, 205, 211, 212, 230, 235, 240, 245, 249, 250, 251, 260, 277, 280, 294, 300, 307, 309, 310, 315, 316, 317, 318, 319, 321, 322, 323, 327, 328, 333, 334, 336, 341, 342, 345, 346, 347, 350, 354, 355, 356, 357, 358, 360, 363, 365, 369, 375, 376, 377, 378, 380, 381, 382, 383, 384, 386, 387, 391, 394, 396, 397, 398, 399, 402, 406, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 450, 453, 456, 460, 466, 468, 469, 470, 471, 472, 475, 476, 478, 480, 484, 487, 489, 490, 491, 492, 493, 494, 500, 501, 502, 503, 505, 509, 510, 511, 512, 513, 518, 519, 527, 532, 533, 539, 543, 545, 546, 547, 570, 571, 575, 576, 577, 578, 580], "rustworkx_test_preserve_imag": 0, "environ": [0, 315, 316, 317, 318, 319, 354, 355, 356, 357, 358, 380, 381, 382, 387, 396, 398, 412, 413, 414, 444, 470, 471, 472, 480, 489, 490, 492, 495, 512, 539, 546, 574, 576, 580], "variabl": [0, 315, 316, 317, 318, 319, 354, 355, 356, 357, 358, 380, 381, 382, 387, 396, 398, 412, 413, 414, 444, 470, 471, 472, 480, 489, 490, 492, 512, 539, 546, 576], "valu": [0, 96, 97, 100, 101, 111, 112, 118, 119, 137, 160, 163, 177, 178, 181, 182, 192, 193, 199, 200, 218, 241, 244, 256, 259, 271, 272, 274, 275, 301, 303, 309, 314, 316, 317, 318, 319, 320, 326, 327, 328, 332, 333, 335, 337, 353, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 385, 386, 387, 389, 391, 392, 393, 394, 395, 398, 400, 401, 402, 408, 409, 410, 412, 413, 414, 415, 417, 420, 422, 424, 429, 430, 435, 443, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 492, 495, 508, 509, 512, 513, 514, 515, 516, 520, 524, 525, 526, 527, 529, 531, 532, 533, 534, 546, 569, 570, 576, 577, 580], "skip": [0, 101, 160, 182, 241, 301, 339, 340, 576], "cleanup": 0, "enabl": [0, 88, 101, 163, 169, 182, 244, 303, 380, 381, 382, 412, 413, 414, 470, 471, 472, 573, 575, 576], "look": [0, 114, 195, 273, 575, 576, 578, 580], "correct": [0, 576], "1": [0, 25, 29, 35, 44, 51, 67, 72, 80, 84, 88, 100, 103, 111, 149, 158, 168, 169, 181, 184, 192, 230, 239, 249, 250, 259, 263, 271, 294, 307, 309, 314, 316, 317, 318, 319, 320, 324, 326, 327, 328, 330, 333, 335, 337, 338, 345, 352, 353, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 372, 373, 374, 376, 378, 380, 381, 382, 386, 392, 393, 394, 395, 398, 400, 401, 402, 404, 405, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 451, 452, 453, 454, 456, 457, 458, 459, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 478, 479, 481, 485, 486, 487, 488, 492, 495, 496, 504, 509, 510, 513, 515, 516, 517, 526, 529, 530, 531, 532, 533, 534, 538, 540, 541, 542, 545, 546, 570, 573, 575, 577, 578, 580], "preserv": [0, 101, 182, 260, 364, 372, 373, 454, 463, 464, 576], "finish": [0, 309, 324, 330, 352, 361, 364, 372, 373, 400, 451, 454, 463, 464, 558], "As": [0, 155, 156, 236, 237, 284, 293, 578], "crate": [0, 573, 576], "own": 0, "combin": [0, 100, 101, 164, 181, 182, 245, 259, 260, 576], "embed": 0, "book": 0, "how": [0, 314, 328, 332, 353, 363, 376, 377, 380, 381, 382, 398, 408, 409, 412, 413, 414, 443, 453, 467, 468, 470, 471, 472, 492, 515, 516, 546, 569, 575, 576, 578], "lang": [0, 524], "org": [0, 336, 378, 410, 425, 426, 431, 434, 436, 437, 469, 489, 528, 530, 533, 576], "ch11": 0, "01": [0, 336, 576], "primari": 0, "languag": [0, 528, 573, 576], "written": [0, 345, 569, 573, 574, 575, 576, 578], "rustfmt": 0, "enforc": [0, 578], "consist": [0, 67, 137, 160, 218, 241, 301, 528, 572, 576, 578], "job": [0, 576, 578], "configur": 0, "check": [0, 88, 101, 125, 126, 136, 156, 163, 169, 182, 206, 207, 217, 237, 244, 303, 309, 346, 347, 348, 349, 378, 383, 384, 386, 399, 410, 455, 469, 475, 476, 478, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 513, 517, 524, 547, 576, 578], "luckili": 0, "adapt": [0, 345, 394, 487, 532, 575], "simpl": [0, 314, 315, 321, 336, 353, 354, 360, 380, 381, 382, 383, 384, 387, 399, 412, 413, 414, 418, 443, 444, 450, 455, 470, 471, 472, 475, 476, 480, 493, 500, 501, 505, 512, 515, 516, 530, 534, 547, 574, 576, 578], "fmt": 0, "automat": 0, "restyl": 0, "match": [0, 6, 19, 111, 112, 113, 114, 115, 116, 117, 192, 193, 194, 195, 196, 197, 198, 271, 272, 273, 339, 340, 383, 384, 399, 475, 476, 493, 500, 501, 502, 503, 505, 513, 524, 547, 576], "what": [0, 575, 576], "step": [0, 309], "clippi": 0, "some": [0, 111, 112, 192, 193, 271, 272, 309, 314, 328, 353, 363, 380, 381, 382, 406, 412, 413, 414, 443, 453, 470, 471, 472, 515, 516, 543, 556, 573, 576, 577], "small": [0, 576], "piec": 0, "namespac": 0, "actual": [0, 324, 361, 451, 575, 578], "black": [0, 163, 244, 303, 330, 352, 364, 372, 425, 426, 436, 437, 454, 463, 549, 570, 576, 580], "flake8": 0, "repositori": 0, "mode": [0, 163, 244, 303, 425, 426, 436, 437, 569, 576, 577, 578, 580], "conform": 0, "rule": 0, "return": [0, 19, 25, 29, 33, 34, 35, 39, 43, 47, 55, 56, 58, 66, 72, 76, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 154, 156, 159, 160, 161, 162, 163, 164, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 235, 237, 240, 241, 242, 243, 244, 245, 248, 249, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 569, 570, 571, 573, 574, 575, 576, 577, 578, 580], "format": [0, 149, 230, 294, 329, 331, 389, 415, 482, 520, 524, 525, 528, 569, 575, 576, 580], "error": [0, 130, 131, 138, 163, 211, 212, 219, 244, 285, 286, 303, 309, 346, 347, 348, 349, 378, 386, 394, 410, 469, 478, 487, 495, 509, 524, 528, 532, 574, 576, 578], "updat": [0, 88, 159, 165, 166, 169, 240, 246, 247, 250, 251, 252, 253, 269, 270, 300, 304, 305, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 576, 580], "handl": [0, 353, 443, 575, 576, 580], "venv": 0, "render": [0, 580], "web": [0, 431, 524], "browser": 0, "built": [0, 574, 576], "locat": [0, 576], "rustworkx_cor": [0, 573, 576], "off": [0, 574, 576, 580], "dir": [0, 481], "signatur": 0, "anot": 0, "requir": [0, 67, 111, 112, 192, 193, 271, 272, 309, 348, 349, 364, 372, 373, 387, 427, 438, 454, 463, 464, 480, 512, 569, 574, 575, 576], "stub": 0, "tool": [0, 572, 575, 576, 580], "pyi": 0, "thei": [0, 100, 156, 163, 181, 237, 244, 259, 303, 383, 384, 397, 475, 476, 491, 500, 501, 505, 511, 536, 545, 570, 574, 575, 576, 580], "strip": 0, "more": [0, 88, 114, 149, 169, 195, 230, 250, 273, 294, 309, 311, 312, 332, 336, 338, 344, 368, 370, 387, 393, 434, 459, 461, 480, 486, 512, 513, 528, 530, 531, 569, 570, 572, 573, 574, 575, 576, 580], "mypi": [0, 576], "latest": [0, 576], "veri": [0, 575, 580], "help": 0, "end": [0, 105, 186, 265, 320, 326, 330, 351, 352, 359, 362, 364, 371, 372, 373, 374, 400, 401, 449, 452, 454, 462, 463, 464, 465, 576, 578], "user": [0, 88, 481, 518, 573, 576, 580], "let": [0, 351, 371, 462, 576, 577, 578], "bug": 0, "One": [0, 556, 580], "thing": [0, 575, 580], "necessari": [0, 576, 578], "line": [0, 149, 230, 294, 474, 479, 570, 576], "__init__": [0, 330, 352, 364, 372, 454, 463, 575, 576, 580], "form": [0, 25, 29, 33, 34, 35, 51, 56, 67, 72, 76, 80, 84, 91, 92, 103, 106, 109, 110, 129, 146, 167, 172, 173, 184, 187, 190, 191, 210, 227, 248, 252, 253, 263, 266, 269, 270, 284, 293, 306, 313, 335, 338, 345, 351, 366, 368, 371, 379, 395, 397, 427, 438, 457, 459, 462, 488, 491, 545, 554, 560, 576], "foo": 0, "abl": [0, 574, 576], "access": [0, 25, 29, 33, 34, 43, 55, 56, 58, 66, 72, 76, 88, 130, 131, 169, 211, 212, 250, 308, 313, 329, 331, 575, 576], "pattern": [0, 572, 576], "face": 0, "must": [0, 118, 119, 163, 199, 200, 244, 274, 275, 303, 324, 339, 346, 347, 348, 349, 361, 374, 386, 401, 425, 426, 436, 437, 451, 465, 478, 509, 524, 534, 569, 570, 575, 576, 578], "explain": 0, "wa": [0, 88, 373, 376, 380, 381, 382, 398, 400, 408, 412, 413, 414, 464, 470, 471, 472, 526, 546, 569, 573, 574, 575, 576, 578], "why": 0, "idea": 0, "behind": 0, "naiv": 0, "limit": [0, 163, 244, 303, 315, 316, 317, 318, 319, 354, 355, 356, 357, 358, 380, 381, 382, 383, 384, 387, 396, 399, 412, 413, 414, 444, 470, 471, 472, 475, 476, 480, 489, 490, 493, 500, 505, 512, 539, 547, 574, 575, 576], "intern": [0, 21, 22, 101, 182, 260, 434, 573, 576, 578], "knowledg": 0, "upgrad": [0, 574], "previou": [0, 310, 336, 392, 485, 529, 536, 576, 580], "program": [0, 573, 574, 576], "would": [0, 88, 101, 130, 131, 154, 169, 182, 211, 212, 235, 250, 315, 316, 317, 318, 319, 354, 355, 356, 357, 358, 380, 381, 382, 383, 384, 387, 396, 399, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 470, 471, 472, 475, 476, 480, 489, 490, 493, 500, 501, 503, 505, 511, 512, 539, 547, 574, 575, 576, 578, 580], "go": [0, 138, 219, 575], "ideal": 0, "too": [0, 118, 119, 199, 200, 274, 275, 574, 576, 577], "context": [0, 576], "sure": [0, 570, 576], "don": [0, 138, 219, 578, 580], "forget": 0, "over": [0, 67, 132, 133, 134, 135, 137, 158, 160, 213, 214, 215, 216, 218, 239, 241, 301, 309, 338, 368, 397, 399, 459, 489, 491, 493, 545, 547, 576, 578], "cycl": [0, 6, 19, 88, 90, 101, 169, 171, 182, 309, 316, 317, 326, 327, 336, 345, 346, 347, 348, 349, 355, 356, 362, 379, 411, 419, 422, 445, 446, 452, 499, 517, 530, 536, 537, 576, 578], "accomplish": [0, 575], "reno": 0, "git": 0, "base": [0, 21, 22, 25, 29, 33, 34, 35, 39, 43, 44, 47, 51, 55, 56, 58, 66, 67, 72, 76, 80, 84, 88, 101, 169, 182, 250, 260, 308, 309, 313, 328, 329, 331, 353, 363, 377, 378, 383, 384, 386, 399, 405, 409, 410, 443, 453, 455, 468, 469, 475, 476, 478, 481, 489, 493, 500, 501, 504, 505, 509, 513, 518, 530, 542, 547, 548, 555, 561, 575, 576, 577, 578], "workflow": 0, "quit": [0, 580], "straightforward": [0, 575], "checkout": 0, "short": 0, "string": [0, 149, 163, 168, 230, 244, 249, 294, 303, 307, 353, 389, 415, 443, 482, 511, 520, 525, 569, 570, 576, 580], "brief": 0, "space": [0, 496, 526, 576], "describ": [0, 91, 92, 172, 173, 252, 253, 325, 379, 388, 403, 416, 439, 473, 474, 528, 575, 576], "becom": [0, 554, 560, 576], "prefix": [0, 575], "yaml": 0, "releasenot": 0, "text": [0, 396, 490, 496, 570], "editor": 0, "basic": [0, 575, 576], "restructur": 0, "list": [0, 33, 34, 43, 55, 56, 58, 66, 76, 88, 91, 92, 94, 101, 104, 105, 106, 107, 108, 109, 110, 112, 116, 117, 120, 129, 130, 131, 133, 135, 139, 140, 141, 142, 146, 147, 148, 149, 152, 157, 159, 161, 162, 167, 168, 169, 172, 173, 175, 182, 185, 186, 187, 188, 189, 190, 191, 193, 197, 198, 201, 210, 211, 212, 214, 216, 220, 221, 222, 223, 227, 228, 229, 230, 233, 238, 240, 242, 243, 248, 249, 250, 252, 253, 255, 260, 264, 265, 266, 267, 268, 269, 270, 272, 276, 284, 286, 287, 288, 289, 290, 293, 294, 297, 299, 300, 306, 307, 308, 310, 311, 313, 315, 317, 319, 320, 321, 324, 327, 329, 330, 331, 336, 339, 340, 342, 343, 345, 351, 352, 354, 356, 358, 359, 360, 361, 364, 371, 372, 373, 375, 379, 392, 394, 400, 402, 407, 411, 416, 417, 418, 419, 420, 421, 422, 424, 428, 429, 430, 433, 435, 439, 440, 441, 442, 444, 446, 448, 449, 450, 451, 454, 462, 463, 464, 466, 485, 487, 489, 496, 507, 510, 511, 513, 526, 528, 529, 532, 533, 534, 535, 536, 537, 544, 569, 570, 571, 575, 576, 577, 580], "under": [0, 573, 576], "categori": 0, "item": [0, 577, 580], "group": [0, 338, 339, 368, 459], "A": [0, 25, 29, 33, 34, 35, 39, 43, 47, 51, 55, 56, 58, 66, 67, 72, 76, 80, 84, 88, 91, 92, 94, 96, 97, 100, 101, 104, 105, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 129, 130, 131, 139, 140, 141, 142, 146, 147, 148, 152, 154, 156, 157, 159, 160, 161, 162, 163, 164, 169, 172, 173, 175, 177, 178, 181, 182, 185, 186, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 210, 211, 212, 220, 221, 222, 223, 227, 228, 229, 233, 235, 237, 238, 240, 241, 242, 243, 244, 245, 250, 252, 253, 255, 256, 259, 260, 264, 265, 267, 268, 269, 270, 271, 274, 275, 276, 284, 285, 286, 287, 288, 289, 290, 293, 297, 299, 300, 301, 302, 303, 308, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 370, 371, 372, 373, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 390, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 488, 489, 490, 491, 493, 496, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 526, 528, 530, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 547, 548, 555, 561, 569, 570, 571, 572, 573, 574, 576, 578, 580], "mani": [0, 169, 250, 309, 328, 332, 363, 376, 377, 398, 408, 409, 453, 467, 468, 492, 546, 574, 575, 576], "entri": [0, 252, 270, 326, 362, 374, 381, 382, 401, 413, 414, 452, 465, 471, 472, 524, 576], "potenti": [0, 169, 250, 578], "newli": [0, 89, 91, 92, 93, 94, 95, 101, 132, 133, 134, 135, 160, 170, 172, 173, 174, 175, 176, 182, 213, 214, 215, 216, 241, 251, 252, 253, 254, 255, 260, 301, 575], "full": [0, 155, 156, 236, 237, 433, 576], "templat": 0, "delet": [0, 88, 169, 250, 576], "aren": [0, 578], "content": [0, 67, 149, 163, 168, 230, 244, 249, 294, 303, 307, 386, 478, 509, 573, 576], "result": [0, 25, 29, 33, 34, 39, 43, 47, 55, 56, 58, 66, 72, 76, 88, 169, 250, 302, 308, 309, 313, 323, 332, 334, 336, 344, 345, 370, 393, 396, 404, 461, 486, 490, 524, 531, 538, 539, 541, 572, 576, 580], "someth": [0, 387, 480, 512, 570, 575, 576, 578], "featur": [0, 88, 169, 575], "func": [0, 570], "support": [0, 353, 426, 437, 443, 489, 528, 569, 573, 575, 576, 578, 580], "pydigraph": [0, 19, 88, 100, 101, 107, 112, 118, 119, 149, 158, 159, 160, 163, 168, 302, 309, 314, 315, 316, 317, 318, 319, 321, 322, 324, 326, 327, 328, 329, 330, 331, 333, 335, 337, 338, 339, 340, 341, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 459, 494, 495, 499, 500, 501, 502, 503, 505, 506, 508, 509, 510, 511, 517, 518, 520, 521, 523, 524, 525, 528, 529, 530, 531, 532, 535, 536, 537, 538, 539, 545, 546, 569, 570, 571, 573, 575, 576, 578, 580], "object": [0, 21, 22, 25, 29, 33, 34, 35, 39, 43, 44, 47, 51, 55, 56, 58, 66, 67, 72, 76, 80, 84, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 101, 107, 108, 113, 115, 116, 117, 118, 119, 120, 121, 122, 124, 138, 142, 149, 154, 155, 156, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 181, 182, 188, 189, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 219, 223, 230, 235, 236, 237, 240, 241, 244, 245, 247, 249, 250, 251, 252, 254, 255, 256, 259, 260, 267, 268, 274, 275, 276, 277, 278, 280, 290, 294, 300, 301, 302, 303, 305, 307, 308, 309, 313, 314, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 330, 335, 338, 339, 340, 346, 347, 348, 349, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 372, 373, 374, 375, 377, 378, 380, 381, 382, 383, 384, 386, 389, 394, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 487, 488, 491, 493, 495, 496, 500, 501, 505, 507, 509, 513, 514, 515, 516, 517, 518, 520, 524, 525, 526, 532, 533, 534, 541, 542, 543, 544, 545, 547, 548, 555, 561, 569, 570, 575, 576, 578, 580], "meth": 0, "equival": [0, 51, 67, 80, 139, 160, 220, 241, 259, 301, 387, 416, 439, 480, 512, 538, 573, 576, 578], "conveni": [0, 518], "nativ": [0, 575, 576, 578], "g": [0, 260, 330, 351, 352, 364, 371, 372, 373, 396, 400, 407, 434, 454, 462, 463, 464, 479, 538, 544, 570, 576, 578, 580], "deprec": 0, "bar": 0, "been": [0, 100, 164, 181, 245, 259, 302, 310, 312, 511, 549, 551, 558, 566, 573, 576], "remov": [0, 88, 101, 132, 133, 134, 135, 138, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 169, 182, 213, 214, 215, 216, 219, 231, 232, 233, 234, 235, 236, 237, 238, 239, 244, 245, 250, 260, 295, 296, 297, 298, 299, 302, 303, 323, 332, 334, 549, 575, 576, 577], "futur": [0, 310, 576], "supersed": 0, "similar": [0, 353, 443, 575, 576, 580], "accur": 0, "better": [0, 90, 171, 383, 384, 475, 476, 500, 501, 576, 580], "perform": [0, 88, 90, 169, 171, 250, 309, 325, 383, 384, 387, 394, 403, 431, 475, 476, 480, 487, 489, 500, 501, 511, 512, 532, 548, 555, 561, 573, 574, 575, 576, 578], "instead": [0, 88, 149, 154, 156, 164, 165, 169, 230, 235, 237, 245, 246, 250, 294, 304, 336, 387, 389, 399, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 480, 482, 493, 512, 520, 547, 575, 576, 580], "sphinx": 0, "tabl": 0, "enumer": [0, 576], "bullet": 0, "etc": [0, 314, 353, 380, 381, 382, 412, 413, 414, 443, 470, 471, 472, 515, 516, 534, 580], "express": [0, 338, 368, 459, 576], "much": [0, 575, 576], "commit": [0, 576], "pr": 0, "artifact": [0, 364, 372, 373, 454, 463, 464], "part": [0, 330, 332, 352, 364, 372, 373, 400, 454, 463, 464, 534, 567, 573, 574, 576, 580], "inlin": 0, "number": [0, 35, 88, 143, 144, 154, 155, 156, 169, 224, 225, 235, 236, 237, 250, 291, 292, 312, 315, 316, 317, 318, 319, 323, 325, 328, 332, 333, 334, 338, 343, 344, 354, 355, 356, 357, 358, 363, 365, 368, 370, 376, 377, 378, 380, 381, 382, 383, 384, 386, 387, 390, 391, 394, 396, 397, 398, 399, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 453, 455, 456, 459, 461, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 480, 483, 484, 487, 489, 490, 491, 492, 493, 495, 496, 500, 505, 509, 512, 513, 515, 521, 522, 523, 524, 526, 527, 532, 533, 539, 541, 542, 543, 544, 545, 546, 547, 576, 577], "12345": 0, "fix": [0, 137, 218, 394, 487, 532], "race": 0, "condit": [0, 111, 112, 113, 115, 116, 117, 154, 192, 193, 194, 196, 197, 198, 235, 271, 272, 339, 340, 526, 576, 578], "__": [0, 346, 347, 348, 349, 576], "rst": 0, "restructuredtext": 0, "report": [0, 557, 558, 562, 572], "dure": [0, 309, 379, 576], "0": [0, 25, 29, 33, 34, 35, 44, 51, 58, 67, 72, 76, 80, 84, 88, 103, 111, 118, 119, 149, 158, 163, 168, 169, 184, 192, 199, 200, 230, 239, 244, 249, 250, 263, 271, 274, 275, 294, 303, 307, 308, 309, 314, 315, 316, 317, 318, 319, 320, 321, 327, 328, 330, 335, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 364, 366, 372, 373, 376, 378, 380, 381, 382, 386, 393, 394, 395, 400, 402, 404, 405, 408, 410, 412, 413, 414, 418, 421, 434, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 457, 463, 464, 467, 469, 470, 471, 472, 473, 474, 478, 479, 481, 486, 487, 488, 495, 496, 507, 509, 513, 515, 516, 524, 526, 531, 532, 534, 540, 541, 542, 569, 570, 573, 574, 575, 577, 578, 580], "8": [0, 44, 396, 434, 473, 495, 530, 570, 572, 573, 575, 580], "tag": 0, "standard": [0, 573, 576], "state": [0, 111, 112, 192, 193, 271, 272, 383, 384, 399, 475, 476, 493, 500, 505, 547, 576, 578], "_build": 0, "particular": [0, 473, 474, 576], "release_not": 0, "submit": 0, "approv": 0, "team": 0, "get": [0, 96, 97, 103, 106, 116, 117, 122, 123, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 145, 146, 147, 148, 161, 162, 165, 167, 177, 178, 184, 187, 197, 198, 203, 204, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 226, 227, 228, 229, 242, 243, 246, 248, 256, 262, 263, 266, 277, 278, 279, 284, 285, 286, 287, 288, 293, 304, 306, 322, 324, 329, 331, 344, 350, 351, 361, 370, 371, 376, 390, 408, 451, 461, 462, 467, 483, 510, 511, 521, 536, 537, 573, 576, 580], "trigger": [0, 489], "subsequ": [0, 576, 580], "mai": [0, 156, 164, 237, 245, 302, 309, 323, 332, 334, 336, 344, 345, 370, 396, 461, 473, 490, 524, 539, 574, 576, 578], "take": [0, 100, 111, 112, 113, 115, 116, 117, 137, 160, 163, 164, 181, 192, 193, 194, 196, 197, 198, 218, 241, 244, 245, 259, 271, 272, 301, 303, 324, 326, 336, 339, 340, 361, 362, 374, 383, 384, 399, 401, 411, 451, 452, 465, 473, 474, 475, 476, 493, 500, 501, 505, 513, 517, 547, 574, 575, 576, 577, 580], "week": 0, "month": 0, "dai": [0, 575, 576, 580], "avail": [0, 44, 398, 492, 546, 569, 572, 574, 575, 576, 580], "propos": [0, 574, 576], "valuabl": 0, "everyth": [0, 575], "highest": 0, "prioriti": [0, 576], "process": [0, 309, 310, 311, 336, 455, 489, 574, 576, 577], "quickli": [0, 576, 580], "activ": 0, "member": [0, 554, 560], "permiss": 0, "final": [0, 100, 181, 259, 576], "mark": [0, 310, 311, 312, 434, 556, 576], "readi": [0, 309, 311, 312, 576], "everyon": 0, "welcom": 0, "extrem": 0, "reduc": [0, 405, 533, 542, 564, 576], "burden": 0, "bit": [0, 574, 578], "back": [0, 330, 352, 364, 372, 373, 400, 454, 463, 464, 553, 556, 575], "forth": [0, 575], "receiv": [0, 160, 241, 301, 385, 477, 508, 576], "feedback": 0, "multipl": [0, 67, 88, 101, 150, 152, 156, 160, 164, 169, 182, 231, 233, 237, 241, 245, 250, 252, 270, 277, 295, 297, 301, 314, 353, 387, 443, 480, 512, 575, 576, 580], "round": [0, 570], "pleas": [0, 575, 576], "discourag": 0, "normal": [0, 328, 363, 377, 409, 453, 468, 495, 570, 574, 575, 576, 577], "qualiti": 0, "appear": [0, 155, 156, 236, 237, 309, 339, 340, 530, 578], "might": [0, 67, 309, 516], "larger": [0, 343, 576, 580], "implic": 0, "obviou": 0, "feel": 0, "free": [0, 431, 576], "adjust": [0, 88, 169, 250, 328, 363, 376, 377, 398, 408, 409, 453, 467, 468, 492, 546, 576], "comment": [0, 149, 230, 294], "anoth": [0, 100, 181, 259, 572, 576, 578, 580], "constrain": 0, "resourc": [0, 574], "infinit": [0, 576], "wait": 0, "period": [0, 427, 438, 576], "fine": 0, "regress": [0, 576], "codebas": 0, "often": [0, 578, 580], "needlessli": 0, "wast": 0, "starvat": 0, "slow": 0, "down": 0, "total": 0, "throughput": 0, "possibl": [0, 309, 320, 359, 396, 399, 404, 405, 406, 449, 493, 536, 540, 541, 542, 543, 547, 574, 576, 580], "try": [0, 399, 493, 547, 574, 576], "bundl": 0, "head": [0, 570, 578, 580], "automerg": 0, "signal": 0, "mergifi": 0, "bot": 0, "enqueu": 0, "onto": [0, 100, 181, 259], "At": [0, 524], "point": [0, 323, 325, 330, 332, 352, 364, 372, 373, 400, 403, 454, 463, 464, 511, 524, 548, 555, 556, 561, 576, 578, 580], "fulli": [0, 574, 576], "autom": [0, 576], "effort": [0, 574], "conserv": 0, "maxim": [0, 332, 344, 370, 461, 503, 513, 576], "idl": 0, "deep": 0, "backlog": 0, "unless": [0, 137, 218, 394, 487, 518, 532, 575, 576], "delai": [0, 576], "intend": [0, 570], "safe": 0, "high": [0, 325, 403, 573, 574, 576], "impact": [0, 576], "secur": 0, "balanc": 0, "risk": 0, "given": [0, 113, 114, 115, 122, 123, 124, 156, 194, 195, 196, 203, 204, 205, 237, 273, 278, 279, 280, 285, 309, 310, 330, 336, 339, 340, 345, 352, 353, 364, 372, 373, 379, 382, 397, 400, 406, 407, 414, 425, 426, 436, 437, 443, 454, 463, 464, 472, 474, 491, 496, 497, 511, 524, 543, 544, 545, 576, 577, 580], "patch": [0, 570, 576], "appropri": [0, 330, 352, 364, 372, 373, 400, 454, 463, 464, 575, 576], "inclus": 0, "riski": 0, "major": [0, 576], "trivial": 0, "fairli": [0, 580], "obscur": 0, "factor": [0, 333, 337, 365, 367, 386, 392, 393, 394, 433, 456, 458, 478, 485, 486, 487, 509, 529, 531, 532, 533, 576], "weigh": 0, "consid": [0, 154, 235, 336, 383, 384, 387, 403, 475, 476, 480, 500, 501, 512], "tiniest": 0, "carri": 0, "realli": 0, "visibl": 0, "benefit": 0, "notic": [0, 576, 578], "self": [0, 301, 323, 330, 332, 334, 336, 341, 344, 352, 364, 369, 370, 372, 396, 404, 454, 460, 461, 463, 490, 539, 541, 575, 576, 580], "signific": 0, "refactor": 0, "lot": [0, 575], "worth": [0, 159, 240, 300, 335, 346, 347, 348, 349, 366, 397, 457, 491, 545, 569, 576], "think": 0, "less": [0, 312, 328, 363, 377, 409, 417, 420, 424, 433, 435, 453, 468, 489, 534], "whether": [0, 88, 111, 112, 116, 117, 154, 169, 192, 193, 197, 198, 235, 250, 271, 272, 328, 339, 340, 363, 377, 407, 409, 453, 455, 468, 498, 502, 503, 504, 506, 518, 544, 575, 576], "simpli": [0, 576, 580], "non": [0, 324, 330, 336, 339, 361, 364, 374, 384, 401, 434, 451, 454, 465, 476, 505, 524, 530, 549, 552, 575, 578], "allow": [0, 88, 90, 164, 169, 171, 245, 250, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 575, 576, 578, 580], "accept": [0, 316, 317, 318, 319, 320, 327, 355, 356, 357, 358, 359, 373, 375, 394, 400, 402, 445, 446, 447, 448, 449, 464, 466, 487, 532, 575, 576], "least": [0, 116, 117, 197, 198, 524, 576, 577], "until": [0, 309, 330, 336, 351, 352, 364, 371, 372, 373, 394, 400, 454, 462, 463, 464, 487, 532, 576], "mainta": 0, "minor": 0, "approach": [0, 474, 576, 580], "reason": 0, "cherri": 0, "pick": [0, 309], "x": [0, 314, 353, 380, 381, 382, 383, 384, 387, 407, 412, 413, 427, 434, 438, 443, 470, 471, 472, 475, 476, 480, 500, 501, 505, 512, 513, 515, 516, 533, 544, 575, 576, 577, 578], "main_commit_id": 0, "squash": 0, "track": [0, 309, 330, 352, 364, 372, 454, 463], "strict": 0, "cleanli": 0, "resolv": [0, 511, 556, 576], "yourself": [0, 576], "messag": [0, 163, 244, 303, 576], "central": [6, 19, 39, 47, 328, 338, 363, 368, 377, 378, 386, 409, 410, 453, 459, 468, 469, 478, 509, 573, 576, 579], "rustworkx": [6, 22, 25, 29, 33, 34, 43, 51, 55, 56, 58, 66, 72, 76, 80, 88, 169, 250, 308, 309, 313, 576, 577, 578], "betweenness_centr": [6, 409, 576, 577], "edge_betweenness_centr": [6, 328, 576], "eigenvector_centr": [6, 378, 469, 576], "katz_centr": [6, 386, 478, 576], "closeness_centr": [6, 576], "color": [6, 19, 44, 163, 244, 303, 330, 339, 352, 364, 372, 425, 426, 434, 436, 437, 454, 455, 463, 473, 474, 481, 540, 549, 552, 569, 570, 576, 577, 580], "coloringstrategi": [6, 576], "graph_greedy_color": [6, 44, 576], "graph_bipartite_edge_color": [6, 576], "graph_greedy_edge_color": [6, 576], "graph_misra_gries_edge_color": [6, 576], "two_color": [6, 576], "connect": [6, 19, 105, 156, 164, 186, 237, 245, 265, 323, 334, 336, 338, 339, 342, 343, 351, 368, 396, 398, 406, 407, 416, 418, 421, 428, 439, 440, 459, 462, 490, 492, 496, 498, 506, 515, 516, 522, 523, 535, 543, 544, 546, 571, 576, 577, 578, 580], "number_connected_compon": [6, 576], "connected_compon": [6, 576, 580], "node_connected_compon": [6, 576], "is_connect": [6, 576], "strongly_connected_compon": [6, 576], "number_weakly_connected_compon": [6, 576], "weakly_connected_compon": [6, 576], "is_weakly_connect": [6, 576], "cycle_basi": [6, 576], "simple_cycl": [6, 576], "digraph_find_cycl": [6, 576], "articulation_point": [6, 576], "bridg": [6, 576], "biconnected_compon": [6, 576], "chain_decomposit": [6, 43, 576], "all_simple_path": [6, 576], "all_pairs_all_simple_path": [6, 387, 480, 512, 576], "stoer_wagner_min_cut": [6, 576], "longest_simple_path": [6, 576], "is_bipartit": [6, 576], "has_path": [6, 576], "connected_subgraph": [6, 576], "dag_longest_path": [6, 347, 348, 349, 576], "dag_longest_path_length": [6, 349, 576], "dag_weighted_longest_path": [6, 576], "dag_weighted_longest_path_length": [6, 576], "is_directed_acyclic_graph": 6, "transitive_reduct": [6, 576], "topological_gener": [6, 576], "oper": [6, 19, 397, 491, 545, 574, 575, 576, 578], "complement": [6, 369, 460, 576], "union": [6, 335, 397, 491, 528, 576], "cartesian_product": [6, 576, 580], "isomorph": [6, 19, 383, 384, 399, 475, 476, 493, 500, 501, 505, 547, 573, 576], "is_isomorph": [6, 383, 399, 475, 493, 547, 576], "is_subgraph_isomorph": [6, 384, 399, 476, 493, 547, 572, 576], "is_isomorphic_node_match": [6, 576], "vf2_map": [6, 576], "link": [6, 19, 386, 389, 415, 478, 482, 509, 520, 525, 533, 575, 576, 580], "analysi": [6, 19, 338, 576, 578], "pagerank": [6, 576], "hit": [6, 576], "max_weight_match": [6, 576], "is_match": [6, 576], "is_maximal_match": 6, "adjacency_matrix": [6, 575, 576], "transit": [6, 396, 490, 524, 538, 576, 580], "core_numb": [6, 576], "graph_line_graph": [6, 576], "metric_closur": [6, 576], "is_planar": [6, 576], "digraph_maximum_bisimul": [6, 58, 308, 576], "shortest": [6, 19, 316, 317, 318, 319, 320, 324, 326, 327, 328, 338, 355, 356, 357, 358, 359, 361, 362, 363, 368, 374, 375, 377, 380, 381, 382, 385, 390, 398, 401, 402, 409, 412, 413, 414, 445, 446, 447, 448, 449, 451, 452, 453, 459, 465, 466, 468, 470, 471, 472, 477, 483, 492, 508, 514, 521, 533, 546, 573, 574, 576, 577], "dijkstra_shortest_path": [6, 76, 574, 576], "dijkstra_shortest_path_length": [6, 72, 572, 576], "all_pairs_dijkstra_shortest_path": [6, 29, 576], "all_pairs_dijkstra_path_length": [6, 572, 576], "bellman_ford_shortest_path": [6, 576], "bellman_ford_shortest_path_length": [6, 576], "all_pairs_bellman_ford_shortest_path": [6, 576], "all_pairs_bellman_ford_path_length": [6, 576], "negative_edge_cycl": [6, 576], "find_negative_cycl": [6, 576], "distance_matrix": [6, 576], "floyd_warshal": [6, 576], "floyd_warshall_numpi": [6, 408, 575, 576], "floyd_warshall_successor_and_dist": [6, 576], "astar_shortest_path": [6, 576], "k_shortest_path_length": [6, 576], "num_shortest_paths_unweight": [6, 576], "unweighted_average_shortest_path_length": [6, 576], "all_shortest_path": [6, 576], "digraph_all_shortest_path": [6, 576], "travers": [6, 19, 330, 346, 347, 348, 349, 351, 352, 364, 371, 372, 373, 374, 400, 401, 454, 462, 463, 464, 465, 567, 568, 576], "dfs_edg": [6, 576], "dfs_search": [6, 372, 463, 555, 576], "bfs_successor": [6, 34, 576], "bfs_predecessor": [6, 33, 576], "bfs_search": [6, 364, 454, 548, 576], "dijkstra_search": [6, 561, 576], "topological_sort": [6, 511, 576, 578], "lexicographical_topological_sort": [6, 576], "descend": [6, 536, 576], "ancestor": [6, 536, 576], "collect_run": [6, 576, 578], "collect_bicolor_run": [6, 576], "dfsvisitor": [6, 352, 372, 463, 576], "bfsvisitor": [6, 330, 364, 454, 576], "dijkstravisitor": [6, 373, 400, 464, 576], "topologicalsort": [6, 576], "minimum_spanning_edg": [6, 576], "minimum_spanning_tre": [6, 576], "steiner_tre": [6, 576], "pydag": [19, 21, 181, 259, 499, 501, 576], "function": [19, 25, 29, 33, 34, 39, 43, 47, 55, 56, 66, 72, 76, 111, 112, 116, 117, 137, 139, 153, 154, 155, 156, 163, 164, 168, 192, 193, 197, 198, 218, 220, 234, 235, 236, 237, 244, 245, 249, 271, 272, 298, 303, 307, 309, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 325, 327, 328, 330, 332, 334, 336, 339, 340, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 364, 370, 372, 373, 375, 376, 377, 378, 380, 381, 382, 383, 384, 386, 387, 389, 394, 396, 397, 398, 399, 400, 402, 403, 405, 408, 409, 410, 411, 412, 413, 414, 426, 437, 443, 444, 445, 446, 447, 448, 449, 453, 454, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 480, 482, 487, 489, 490, 491, 492, 493, 495, 496, 500, 501, 505, 509, 511, 512, 513, 515, 516, 517, 518, 520, 524, 526, 530, 532, 534, 535, 539, 542, 545, 546, 547, 556, 558, 569, 570, 572, 573, 574, 576, 577, 578, 580], "gener": [19, 25, 29, 33, 34, 43, 55, 56, 58, 66, 72, 76, 80, 107, 111, 118, 119, 156, 158, 159, 163, 164, 168, 188, 192, 199, 200, 237, 239, 240, 244, 245, 249, 267, 271, 274, 275, 300, 302, 303, 307, 308, 309, 313, 314, 316, 317, 318, 319, 320, 325, 327, 333, 337, 338, 353, 356, 358, 359, 365, 366, 367, 368, 375, 377, 389, 391, 392, 393, 394, 395, 399, 402, 403, 404, 405, 406, 407, 409, 415, 443, 445, 446, 447, 448, 449, 456, 457, 458, 459, 466, 468, 473, 474, 481, 482, 484, 485, 486, 487, 488, 493, 496, 520, 525, 526, 527, 529, 530, 531, 532, 536, 541, 542, 543, 544, 547, 569, 570, 573, 574, 575, 576, 578], "random": [19, 325, 391, 394, 403, 404, 405, 406, 407, 484, 487, 489, 496, 526, 527, 532, 541, 542, 543, 544, 573, 576, 580], "layout": [19, 80, 333, 337, 365, 367, 391, 392, 393, 394, 434, 456, 458, 473, 484, 485, 486, 487, 527, 529, 531, 532, 569, 570, 573, 575, 576, 580], "serial": [19, 573, 575, 576], "convert": [19, 518, 573, 576], "custom": [19, 25, 29, 33, 34, 39, 43, 47, 55, 56, 58, 66, 72, 76, 308, 313, 329, 331, 573, 575, 576, 577, 580], "type": [19, 21, 22, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 103, 104, 105, 106, 107, 108, 111, 112, 114, 116, 117, 118, 119, 120, 123, 125, 126, 127, 128, 129, 130, 131, 136, 139, 140, 141, 142, 145, 146, 147, 148, 159, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 184, 185, 186, 187, 188, 189, 192, 193, 195, 197, 198, 199, 200, 201, 204, 206, 207, 208, 209, 210, 211, 212, 217, 220, 221, 222, 223, 226, 227, 228, 229, 240, 241, 242, 243, 244, 245, 248, 251, 252, 253, 254, 255, 256, 259, 262, 263, 264, 265, 266, 267, 268, 271, 272, 273, 274, 275, 276, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 300, 301, 302, 303, 306, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 569, 570, 571, 573, 575, 576, 577, 580], "specif": [21, 22, 113, 114, 115, 118, 119, 165, 194, 195, 196, 199, 200, 246, 273, 274, 275, 304, 528, 570, 574, 575, 576, 578], "univers": [21, 22, 338, 576], "retworkx": [21, 573, 576], "explicitli": [21, 22, 473, 474, 575, 576], "data": [21, 22, 33, 34, 51, 88, 90, 91, 92, 96, 97, 100, 101, 102, 108, 111, 112, 116, 117, 118, 119, 120, 121, 122, 124, 129, 130, 131, 137, 142, 146, 148, 154, 159, 160, 162, 163, 164, 166, 168, 169, 171, 172, 173, 177, 178, 181, 182, 183, 189, 192, 193, 197, 198, 199, 200, 201, 202, 203, 205, 210, 211, 212, 218, 223, 227, 229, 235, 240, 241, 243, 244, 245, 247, 249, 250, 251, 252, 253, 256, 259, 260, 261, 268, 271, 272, 274, 275, 276, 277, 278, 280, 284, 285, 286, 290, 293, 300, 301, 302, 303, 305, 307, 313, 324, 326, 329, 331, 335, 339, 340, 361, 362, 366, 374, 376, 383, 384, 389, 397, 399, 401, 408, 411, 415, 451, 452, 457, 465, 467, 475, 476, 482, 491, 493, 500, 501, 505, 510, 511, 514, 517, 518, 520, 525, 528, 533, 545, 547, 569, 570, 573, 576, 577, 578], "length": [25, 72, 316, 318, 326, 328, 347, 349, 355, 357, 362, 374, 380, 381, 382, 385, 387, 398, 401, 412, 413, 414, 417, 424, 427, 435, 438, 445, 447, 452, 465, 470, 471, 472, 477, 480, 492, 508, 512, 538, 546, 570, 576], "node": [25, 29, 33, 34, 39, 51, 56, 58, 66, 67, 72, 76, 80, 84, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 248, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 269, 270, 272, 273, 274, 275, 276, 277, 280, 281, 282, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 500, 501, 502, 503, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 524, 525, 526, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 562, 569, 570, 572, 574, 576, 577, 578], "i": [25, 29, 33, 34, 39, 43, 47, 51, 55, 56, 58, 66, 67, 72, 76, 80, 88, 90, 91, 92, 96, 97, 100, 101, 103, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 131, 136, 137, 138, 139, 140, 149, 153, 154, 155, 156, 157, 159, 160, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 177, 178, 181, 182, 184, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 217, 218, 219, 220, 221, 230, 234, 235, 236, 237, 238, 240, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 259, 260, 263, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 288, 293, 294, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580], "map": [25, 29, 35, 39, 47, 51, 67, 72, 76, 80, 84, 88, 100, 103, 130, 160, 169, 181, 184, 211, 241, 250, 259, 263, 285, 301, 315, 328, 335, 338, 354, 366, 368, 390, 395, 399, 444, 457, 459, 483, 488, 489, 493, 521, 538, 547, 570, 575, 576, 577, 580], "integ": [25, 29, 33, 34, 39, 43, 47, 55, 56, 58, 66, 72, 76, 88, 91, 92, 109, 110, 169, 172, 173, 190, 191, 250, 252, 253, 269, 270, 308, 313, 332, 339, 346, 347, 434, 473, 474, 510, 513, 540, 575, 576, 580], "indic": [25, 29, 39, 47, 51, 55, 56, 58, 66, 67, 72, 76, 80, 84, 88, 91, 92, 94, 96, 97, 100, 103, 104, 105, 106, 109, 110, 111, 112, 114, 130, 131, 135, 137, 139, 140, 141, 147, 149, 159, 160, 161, 164, 167, 169, 172, 173, 175, 177, 178, 181, 184, 185, 186, 187, 190, 191, 192, 193, 195, 211, 212, 216, 218, 220, 221, 222, 228, 230, 240, 241, 242, 245, 248, 250, 252, 253, 255, 256, 259, 263, 264, 265, 266, 269, 270, 271, 272, 273, 284, 285, 286, 287, 288, 289, 293, 294, 300, 301, 302, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 330, 333, 335, 336, 343, 346, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 372, 373, 375, 378, 380, 386, 387, 390, 392, 395, 399, 400, 402, 408, 410, 412, 420, 424, 426, 427, 436, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 463, 464, 466, 468, 469, 470, 473, 474, 478, 479, 480, 481, 483, 485, 488, 493, 495, 507, 509, 510, 511, 512, 516, 521, 524, 529, 533, 537, 540, 547, 549, 552, 570, 574, 575, 576, 577, 580], "pathlengthmap": [25, 326, 362, 374, 385, 452, 465, 477, 576], "234": 25, "2": [25, 29, 33, 34, 43, 44, 51, 55, 56, 58, 66, 72, 76, 80, 88, 90, 100, 103, 107, 111, 112, 118, 119, 120, 121, 132, 133, 134, 135, 149, 150, 154, 158, 168, 169, 171, 181, 184, 188, 192, 193, 199, 200, 201, 202, 213, 214, 215, 216, 230, 231, 235, 239, 249, 250, 251, 259, 263, 267, 271, 272, 274, 275, 276, 277, 294, 295, 307, 308, 309, 313, 314, 316, 317, 318, 319, 321, 328, 330, 333, 336, 337, 352, 353, 354, 355, 356, 357, 358, 360, 363, 364, 365, 366, 367, 372, 377, 380, 383, 384, 391, 392, 393, 394, 395, 396, 399, 405, 407, 408, 409, 412, 416, 417, 418, 420, 424, 425, 427, 431, 434, 435, 436, 438, 439, 443, 444, 445, 446, 447, 448, 450, 453, 454, 456, 457, 458, 463, 468, 470, 473, 474, 475, 476, 479, 481, 484, 485, 486, 487, 488, 493, 496, 500, 501, 505, 526, 527, 529, 530, 531, 532, 533, 541, 542, 544, 545, 547, 569, 570, 573, 575, 577, 578, 580], "34": 25, "python": [25, 29, 33, 34, 35, 39, 43, 47, 55, 56, 58, 66, 72, 76, 84, 88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 113, 115, 155, 156, 164, 169, 170, 171, 172, 173, 174, 175, 176, 181, 182, 194, 196, 236, 237, 245, 250, 251, 252, 253, 254, 255, 259, 260, 308, 313, 324, 326, 329, 331, 346, 347, 348, 349, 361, 362, 374, 383, 384, 385, 387, 399, 401, 411, 415, 451, 452, 465, 475, 476, 477, 480, 493, 500, 501, 505, 508, 511, 512, 517, 525, 547, 572, 573, 574, 575, 576, 580], "protocol": [25, 29, 33, 34, 35, 39, 43, 47, 55, 56, 58, 66, 72, 76, 84, 88, 169, 250, 308, 313, 329, 331, 575, 576, 580], "dict": [25, 29, 35, 39, 47, 51, 67, 72, 76, 80, 84, 96, 97, 100, 163, 169, 177, 178, 181, 244, 250, 256, 259, 303, 316, 317, 318, 319, 327, 328, 332, 338, 344, 355, 356, 357, 358, 363, 370, 375, 377, 378, 380, 385, 386, 394, 401, 402, 409, 410, 412, 425, 426, 436, 437, 445, 446, 447, 448, 453, 455, 461, 466, 468, 469, 470, 473, 474, 477, 478, 479, 481, 487, 489, 495, 508, 509, 524, 532, 538, 540, 569, 570, 575, 576, 580], "rx": [25, 29, 33, 34, 43, 55, 56, 58, 66, 72, 76, 88, 100, 149, 158, 163, 168, 169, 181, 230, 239, 244, 249, 250, 259, 294, 303, 307, 308, 309, 313, 330, 352, 364, 372, 454, 463, 473, 474, 479, 480, 481, 569, 570, 574, 575, 576, 577, 578, 580], "directed_path_graph": [25, 29, 33, 34, 55, 56, 58, 66, 72, 76, 168, 249, 308, 309, 313, 366, 395, 399, 570, 576, 578, 580], "5": [25, 29, 33, 34, 55, 56, 66, 72, 76, 80, 88, 112, 158, 168, 169, 193, 239, 249, 250, 272, 307, 309, 313, 378, 410, 418, 419, 421, 422, 423, 432, 433, 434, 469, 473, 474, 481, 495, 496, 573, 574, 577, 578, 580], "edg": [25, 29, 35, 43, 47, 51, 55, 56, 72, 76, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 143, 145, 146, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 224, 226, 227, 230, 231, 232, 233, 235, 236, 237, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 274, 275, 276, 277, 278, 279, 281, 283, 284, 285, 286, 291, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 309, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 330, 332, 334, 336, 339, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 362, 364, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 389, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 451, 452, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 482, 487, 490, 491, 492, 493, 495, 500, 502, 503, 504, 505, 508, 509, 511, 513, 514, 515, 516, 517, 520, 524, 525, 526, 528, 532, 533, 534, 538, 539, 541, 542, 543, 545, 546, 547, 549, 551, 552, 553, 554, 556, 558, 559, 560, 563, 564, 565, 566, 569, 570, 572, 574, 576, 577, 578], "all_pairs_dijkstra_shortest_path_length": 25, "third_node_shortest_path_length": 25, "pathmap": [29, 327, 576], "third_node_shortest_path": 29, "sequenc": [33, 34, 43, 55, 56, 58, 66, 308, 313, 329, 331, 387, 480, 512, 570, 575, 576, 577, 578, 580], "tupl": [33, 34, 51, 56, 84, 91, 92, 100, 103, 106, 107, 109, 110, 123, 129, 130, 146, 167, 172, 173, 181, 184, 187, 188, 190, 191, 204, 210, 211, 227, 248, 252, 253, 259, 260, 263, 266, 267, 269, 270, 279, 284, 285, 293, 306, 313, 333, 335, 337, 351, 365, 366, 367, 371, 382, 391, 392, 393, 395, 414, 456, 457, 458, 462, 472, 479, 484, 485, 486, 488, 489, 495, 502, 503, 513, 527, 529, 531, 534, 538, 570, 574, 575, 576], "predecessor_a": 33, "predecessor_b": 33, "payload": [33, 34, 51, 88, 92, 102, 111, 112, 116, 117, 131, 132, 133, 134, 135, 137, 154, 159, 160, 164, 165, 166, 167, 168, 169, 173, 183, 192, 193, 197, 198, 212, 213, 214, 215, 216, 218, 235, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 261, 269, 270, 271, 272, 286, 300, 301, 302, 304, 305, 306, 307, 313, 335, 339, 340, 366, 376, 378, 385, 386, 389, 397, 408, 410, 415, 427, 457, 467, 469, 477, 478, 482, 491, 495, 508, 509, 514, 518, 520, 524, 525, 533, 545, 569, 570, 575, 576, 577, 578], "index": [33, 34, 43, 51, 55, 56, 58, 66, 88, 89, 90, 93, 95, 96, 97, 100, 101, 103, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 169, 170, 171, 174, 176, 177, 178, 181, 182, 184, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 220, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 250, 251, 254, 256, 259, 260, 262, 263, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 293, 295, 296, 297, 298, 299, 300, 301, 304, 305, 308, 310, 313, 320, 321, 322, 324, 326, 327, 328, 329, 331, 334, 336, 338, 344, 345, 350, 351, 359, 360, 361, 362, 368, 370, 371, 374, 375, 379, 385, 386, 401, 402, 449, 450, 451, 452, 459, 461, 462, 465, 466, 473, 474, 477, 478, 494, 502, 503, 508, 509, 510, 519, 534, 538, 574, 575, 576, 577, 578, 580], "iter": [33, 34, 43, 55, 56, 58, 66, 67, 72, 76, 101, 132, 133, 134, 135, 137, 158, 160, 182, 213, 214, 215, 216, 218, 239, 241, 260, 301, 308, 309, 313, 351, 371, 378, 386, 388, 394, 399, 410, 431, 462, 469, 478, 487, 493, 495, 509, 511, 524, 532, 547, 575, 576, 578], "wrap": [33, 34, 43, 55, 56, 58, 66, 72, 76, 308, 313, 576], "yield": [33, 34, 43, 55, 56, 58, 66, 67, 72, 76, 308, 313, 576], "order": [33, 34, 43, 55, 56, 58, 66, 67, 72, 76, 101, 114, 160, 182, 195, 241, 252, 260, 270, 273, 301, 308, 309, 310, 313, 329, 331, 346, 347, 348, 349, 351, 364, 371, 372, 373, 383, 384, 387, 399, 417, 420, 454, 462, 463, 464, 475, 476, 480, 493, 500, 501, 505, 511, 512, 524, 547, 548, 555, 561, 576, 578, 580], "bfs_succ": [33, 34], "third_el": [33, 34, 55, 56, 66, 72, 76, 313], "bfs_iter": [33, 34], "first_el": [33, 34, 55, 56, 58, 66, 313], "second_el": [33, 34, 55, 56, 66, 313], "successor_a": 34, "successor_b": 34, "repres": [35, 51, 56, 67, 76, 80, 84, 88, 159, 160, 169, 240, 241, 300, 301, 313, 316, 317, 318, 319, 320, 324, 326, 327, 334, 336, 343, 355, 356, 357, 358, 359, 361, 362, 373, 374, 375, 376, 387, 389, 392, 394, 399, 400, 401, 402, 411, 415, 445, 446, 447, 448, 449, 451, 452, 464, 465, 466, 467, 473, 474, 479, 480, 482, 485, 487, 489, 493, 512, 517, 520, 524, 525, 529, 532, 538, 547, 572, 576, 578], "endpoint": [35, 56, 123, 131, 204, 212, 260, 279, 284, 285, 286, 293, 313, 328, 332, 363, 453, 502, 576, 580], "biconnect": [35, 323, 332, 576], "compon": [35, 323, 330, 332, 334, 336, 338, 342, 351, 352, 364, 368, 371, 372, 373, 400, 454, 459, 462, 463, 464, 515, 519, 522, 523, 535, 571, 576], "belong": [35, 332, 536, 576], "float": [39, 47, 72, 118, 119, 199, 200, 274, 275, 314, 316, 317, 318, 319, 320, 324, 326, 327, 333, 337, 348, 349, 353, 355, 356, 357, 358, 359, 361, 362, 365, 367, 373, 374, 375, 376, 378, 380, 381, 382, 385, 386, 391, 392, 393, 394, 396, 398, 400, 401, 402, 405, 406, 408, 410, 411, 412, 413, 414, 443, 445, 446, 447, 448, 449, 451, 452, 456, 458, 464, 465, 466, 467, 469, 470, 471, 472, 477, 478, 484, 485, 486, 487, 490, 492, 495, 496, 508, 509, 514, 515, 516, 517, 524, 526, 527, 529, 531, 532, 533, 534, 539, 542, 543, 546, 570, 574, 575, 576, 577], "between": [39, 47, 88, 90, 96, 97, 105, 107, 120, 121, 132, 133, 134, 135, 137, 150, 152, 154, 155, 156, 160, 164, 165, 169, 171, 177, 178, 186, 188, 201, 202, 213, 214, 215, 216, 218, 231, 233, 235, 236, 237, 241, 245, 246, 250, 251, 252, 253, 256, 260, 265, 267, 269, 270, 276, 277, 281, 295, 297, 301, 304, 309, 314, 315, 320, 321, 324, 328, 338, 353, 354, 359, 360, 361, 363, 368, 377, 378, 381, 382, 386, 394, 397, 398, 399, 405, 406, 407, 408, 409, 410, 413, 414, 420, 422, 424, 426, 427, 429, 430, 436, 443, 444, 449, 450, 451, 453, 459, 468, 469, 471, 472, 478, 479, 487, 491, 492, 493, 494, 495, 496, 509, 511, 514, 524, 526, 532, 533, 542, 543, 544, 545, 546, 547, 556, 572, 573, 574, 575, 576, 578, 579, 580], "score": [39, 47, 328, 363, 377, 378, 386, 409, 410, 453, 468, 469, 478, 495, 509, 524, 562, 576], "edgelist": [43, 106, 187, 266, 336, 351, 371, 379, 462, 489, 575, 576], "instanc": [43, 58, 101, 158, 169, 182, 239, 250, 260, 308, 309, 576, 578], "hexagonal_lattice_graph": [43, 576, 577], "third_chain": 43, "chains_it": 43, "first_chain": 43, "second_chain": 43, "greedi": [44, 473, 474, 510, 576], "degre": [44, 128, 145, 209, 226, 309, 325, 344, 370, 403, 461, 473, 474, 481, 507, 511, 575, 576, 580], "largest": [44, 164, 245, 473, 474, 576], "satur": [44, 473, 474, 576], "dsatur": [44, 473, 474], "independentset": [44, 473, 474, 576], "gi": 44, "9": [44, 345, 434, 473, 573, 580], "adrian": [44, 473, 474], "kosowski": [44, 473, 474], "krzysztof": [44, 473, 474], "manuszewski": [44, 473, 474], "classic": [44, 473, 474, 578], "19": [44, 473, 474, 574, 576], "2004": [44, 473, 474], "isbn": [44, 473, 474], "8218": [44, 473, 474], "3458": [44, 473, 474], "4": [44, 88, 100, 112, 168, 169, 181, 193, 249, 250, 259, 272, 307, 309, 315, 316, 317, 318, 319, 354, 355, 356, 357, 358, 380, 381, 382, 387, 396, 405, 412, 413, 414, 416, 417, 420, 428, 434, 439, 440, 444, 470, 471, 472, 473, 474, 480, 481, 489, 490, 512, 530, 534, 539, 542, 573, 575, 577, 580], "attribut": [44, 88, 90, 159, 163, 169, 171, 240, 244, 250, 300, 303, 369, 389, 415, 460, 482, 518, 520, 525, 526, 528, 569, 570, 573, 576, 578], "weight": [51, 88, 100, 101, 102, 103, 106, 109, 110, 114, 116, 117, 118, 119, 138, 149, 154, 155, 156, 158, 159, 160, 164, 165, 166, 167, 168, 169, 181, 182, 183, 184, 187, 190, 191, 195, 197, 198, 199, 200, 219, 230, 235, 236, 237, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 259, 260, 261, 263, 266, 269, 270, 273, 274, 275, 294, 300, 301, 302, 304, 305, 306, 307, 313, 314, 316, 317, 318, 319, 320, 325, 326, 327, 335, 339, 340, 346, 347, 348, 349, 353, 355, 356, 357, 358, 359, 361, 362, 366, 373, 374, 375, 376, 378, 380, 381, 382, 385, 386, 394, 397, 400, 401, 402, 403, 408, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 424, 428, 429, 430, 433, 435, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 451, 452, 457, 464, 465, 466, 467, 469, 470, 471, 472, 477, 478, 487, 491, 495, 509, 513, 514, 515, 516, 524, 532, 533, 534, 545, 569, 570, 572, 574, 575, 576, 578, 580], "effici": [51, 80, 387, 405, 480, 512, 513, 542, 576], "behav": [51, 80, 88, 101, 182, 260, 315, 321, 354, 360, 444, 450, 580], "drop": [51, 80, 573, 576], "replac": [51, 80, 101, 159, 160, 182, 240, 241, 260, 300, 301, 573, 576, 578, 580], "readonli": [51, 80], "edge_indic": [55, 576, 580], "edges_it": [55, 56, 72, 76, 313], "node_index_a": [56, 313], "node_index_b": [56, 313], "edge_list": [56, 107, 109, 110, 168, 188, 190, 191, 249, 260, 267, 269, 270, 307, 479, 570, 575, 576], "block": [58, 309, 407, 544, 576], "funtion": [58, 308], "partit": [58, 308, 388, 534, 576], "a_partition_block": [58, 308], "block_it": 58, "another_el": 58, "the_second_el": 58, "node_indic": [66, 88, 140, 169, 221, 250, 288, 473, 479, 576, 577, 580], "nodes_it": 66, "though": [67, 309], "unord": [67, 160, 241, 301, 490, 580], "when": [67, 88, 90, 92, 100, 101, 120, 121, 122, 123, 124, 137, 160, 164, 165, 166, 169, 171, 173, 181, 182, 201, 202, 203, 204, 205, 218, 241, 245, 246, 247, 250, 253, 259, 260, 276, 277, 278, 279, 280, 301, 304, 305, 309, 316, 317, 320, 326, 327, 355, 356, 357, 358, 359, 361, 362, 374, 375, 378, 385, 386, 401, 404, 405, 410, 411, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 446, 447, 448, 449, 451, 452, 465, 466, 469, 473, 474, 477, 478, 495, 496, 509, 510, 511, 514, 518, 519, 524, 528, 533, 541, 542, 550, 557, 562, 569, 573, 575, 576, 580], "sort": [67, 309, 511, 536, 537, 576, 578], "24": [72, 572, 576], "first_target": [72, 76], "first_path": [72, 76], "second_target": [72, 76], "second_path": [72, 76], "node_c": [76, 100, 181, 259, 479, 576], "node_a": [76, 100, 105, 120, 121, 125, 181, 186, 201, 202, 206, 251, 252, 253, 259, 265, 269, 270, 276, 277, 281, 295, 479, 575, 576], "node_b": [76, 100, 105, 120, 121, 125, 181, 186, 201, 202, 206, 251, 252, 253, 259, 265, 269, 270, 276, 277, 281, 295, 479, 575, 576], "2d": 80, "posit": [80, 137, 160, 218, 241, 301, 316, 317, 318, 319, 333, 337, 346, 347, 348, 349, 355, 356, 357, 358, 365, 367, 383, 384, 391, 392, 393, 394, 399, 445, 446, 447, 448, 456, 458, 475, 476, 484, 485, 486, 487, 493, 500, 501, 505, 526, 527, 529, 531, 532, 547, 570, 576], "direct": [88, 97, 105, 158, 164, 169, 178, 186, 239, 245, 309, 310, 322, 330, 350, 352, 353, 364, 369, 370, 372, 373, 376, 380, 381, 382, 383, 384, 394, 396, 397, 398, 404, 405, 406, 407, 408, 414, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 436, 487, 507, 511, 513, 518, 523, 528, 532, 535, 538, 540, 546, 553, 570, 571, 573, 575, 576, 579], "acycl": [88, 169, 538, 573, 576, 579], "alia": [88, 576], "ident": [88, 137, 140, 154, 155, 218, 221, 235, 236, 288, 416, 575, 576, 580], "interchang": 88, "sole": [88, 576], "backward": [88, 140, 221, 288, 364, 372, 373, 454, 463, 464, 576], "prior": [88, 574, 575, 576], "releas": [88, 140, 221, 288, 573, 574, 575], "multigraph": [88, 90, 96, 97, 101, 107, 164, 169, 171, 177, 178, 182, 188, 245, 250, 251, 252, 253, 256, 260, 267, 269, 270, 341, 369, 378, 386, 404, 410, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 455, 460, 469, 478, 495, 509, 513, 524, 541, 573, 575, 576], "although": [88, 160, 169, 241, 250, 301, 576], "rare": [88, 169, 250], "stabl": [88, 169, 250, 387, 480, 512, 530, 576, 580], "lifetim": [88, 169, 250, 580], "hole": [88, 169, 250, 576, 580], "reus": [88, 169, 250, 580], "add_nodes_from": [88, 111, 112, 169, 192, 193, 250, 259, 271, 272, 575, 576, 578, 580], "rang": [88, 111, 112, 169, 192, 193, 250, 271, 272, 569, 576, 577, 578, 580], "remove_nod": [88, 169, 250, 580], "print": [88, 168, 169, 249, 250, 307, 309, 330, 352, 364, 372, 454, 463, 576, 577, 578, 580], "res_manu": [88, 169, 250], "add_par": [88, 90, 169, 171, 578], "6": [88, 169, 250, 378, 386, 394, 410, 426, 434, 437, 455, 469, 473, 474, 478, 481, 487, 509, 524, 532, 573, 578, 580], "none": [88, 92, 100, 101, 109, 110, 114, 137, 149, 154, 156, 159, 160, 163, 164, 168, 169, 173, 181, 182, 190, 191, 195, 218, 230, 235, 237, 240, 241, 244, 245, 249, 250, 253, 259, 260, 269, 270, 273, 294, 300, 301, 303, 307, 314, 315, 320, 321, 325, 326, 327, 330, 333, 336, 337, 339, 345, 346, 347, 351, 352, 353, 354, 359, 360, 362, 364, 365, 367, 371, 372, 373, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 392, 393, 394, 399, 401, 402, 403, 404, 405, 406, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 428, 429, 430, 433, 435, 439, 440, 441, 442, 443, 444, 449, 450, 452, 454, 455, 456, 458, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 485, 486, 487, 489, 493, 495, 496, 500, 505, 508, 509, 511, 512, 513, 515, 516, 520, 524, 525, 526, 527, 529, 531, 532, 534, 540, 541, 542, 543, 544, 547, 569, 570, 575, 576, 578, 580], "ad": [88, 90, 91, 92, 100, 109, 110, 137, 138, 155, 156, 158, 164, 169, 171, 172, 173, 181, 190, 191, 218, 219, 236, 237, 239, 245, 250, 252, 253, 259, 269, 270, 325, 403, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 503, 575, 576, 578, 580], "new": [88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 107, 118, 119, 137, 138, 149, 155, 156, 158, 159, 164, 169, 170, 171, 172, 173, 174, 175, 176, 181, 182, 188, 199, 200, 218, 219, 230, 236, 237, 239, 240, 245, 250, 252, 253, 254, 255, 259, 260, 267, 274, 275, 294, 300, 302, 311, 325, 335, 366, 386, 395, 397, 403, 457, 478, 479, 488, 491, 509, 516, 545, 574, 575, 578, 580], "nodeindic": [88, 94, 112, 139, 140, 141, 147, 161, 169, 175, 193, 220, 221, 222, 228, 242, 250, 255, 272, 287, 288, 289, 308, 324, 346, 348, 361, 387, 388, 411, 451, 480, 507, 512, 534, 537, 576, 580], "arbitrari": [88, 169, 250, 379, 411, 576], "data_payload": [88, 169, 250], "node_index": [88, 129, 146, 169, 210, 227, 250, 284, 293, 576], "add_nod": [88, 100, 101, 169, 181, 182, 250, 260, 479, 574, 575, 576, 578, 580], "real": [88, 169, 575, 578], "introduc": [88, 101, 169, 182, 260, 576, 578, 580], "By": [88, 118, 119, 130, 131, 154, 159, 169, 199, 200, 211, 212, 235, 240, 250, 274, 275, 300, 309, 314, 315, 321, 353, 354, 360, 376, 384, 398, 408, 443, 444, 450, 467, 476, 492, 505, 524, 546, 548, 555, 561, 569, 570, 576, 580], "disabl": [88, 169, 250, 309, 576], "check_cycl": [88, 101, 169, 182, 309, 576, 578], "true": [88, 90, 97, 100, 101, 116, 117, 125, 126, 127, 130, 131, 136, 149, 154, 156, 159, 160, 164, 169, 171, 178, 181, 182, 197, 198, 206, 207, 208, 211, 212, 217, 230, 235, 237, 240, 241, 245, 259, 281, 282, 283, 294, 300, 301, 309, 312, 324, 327, 328, 333, 338, 339, 341, 361, 363, 365, 368, 369, 375, 376, 377, 380, 381, 382, 383, 384, 393, 394, 397, 398, 399, 402, 408, 409, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 451, 453, 456, 459, 460, 466, 468, 475, 476, 486, 487, 491, 492, 493, 494, 495, 497, 499, 500, 501, 505, 510, 511, 513, 517, 518, 531, 532, 545, 546, 547, 570, 575, 576, 577, 578, 580], "creation": [88, 169, 250, 573, 580], "With": [88, 169, 575, 576, 578], "add_edg": [88, 129, 146, 169, 210, 227, 259, 284, 293, 479, 575, 576, 578, 580], "truli": [88, 169], "note": [88, 96, 97, 137, 150, 152, 159, 164, 169, 177, 178, 218, 231, 233, 240, 245, 256, 277, 295, 297, 300, 332, 335, 346, 347, 348, 349, 366, 384, 397, 437, 457, 473, 474, 476, 491, 505, 513, 545, 569, 570, 573, 574, 575, 580], "add_edges_from": [88, 92, 110, 111, 169, 173, 191, 192, 253, 259, 270, 271, 574, 575, 576, 580], "add_edges_from_no_data": [88, 109, 169, 190, 269, 575, 576], "extend_from_edge_list": [88, 169, 330, 352, 364, 372, 454, 463, 575, 576, 580], "extend_from_weighted_edge_list": [88, 158, 169, 239, 575, 576], "come": [88, 169, 511, 572, 578], "penalti": [88, 169], "grow": [88, 169, 250], "leverag": [88, 163, 169, 244, 303, 573, 576, 577, 580], "add_child": [88, 90, 100, 169, 171, 181, 578], "overhead": [88, 169, 578], "parallel": [88, 101, 107, 127, 137, 164, 165, 169, 182, 188, 208, 218, 245, 246, 250, 252, 260, 267, 270, 283, 304, 323, 328, 332, 334, 336, 341, 344, 345, 353, 363, 369, 370, 376, 377, 378, 380, 381, 382, 386, 387, 396, 398, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 453, 460, 461, 467, 468, 469, 470, 471, 472, 478, 480, 489, 490, 492, 495, 509, 512, 513, 524, 539, 546, 576, 580], "kwarg": [88, 130, 131, 154, 169, 211, 212, 235, 250, 569, 570, 575, 576], "fals": [88, 97, 101, 111, 125, 126, 127, 130, 131, 149, 154, 156, 159, 164, 169, 178, 182, 192, 206, 207, 208, 211, 212, 230, 235, 237, 240, 245, 250, 251, 252, 253, 269, 270, 271, 281, 282, 283, 294, 300, 309, 312, 320, 327, 328, 333, 339, 340, 359, 363, 365, 376, 380, 381, 382, 383, 384, 393, 394, 397, 398, 399, 402, 408, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 456, 475, 476, 486, 487, 491, 492, 493, 494, 497, 499, 500, 501, 505, 510, 511, 513, 517, 518, 531, 532, 545, 546, 547, 570, 575, 576, 578, 580], "constructor": [88, 169, 250, 570, 576, 578, 580], "initi": [88, 169, 250, 309, 310, 311, 325, 336, 352, 372, 394, 403, 463, 487, 511, 532, 575, 576], "maximum": [88, 169, 250, 315, 321, 343, 353, 354, 360, 378, 386, 387, 388, 394, 404, 410, 417, 420, 443, 444, 450, 469, 478, 480, 481, 487, 495, 503, 509, 512, 513, 524, 532, 541, 570, 576], "32": [88, 169, 250, 569, 574, 576], "294": [88, 169, 250], "967": [88, 169, 250], "attempt": [88, 169, 250, 576, 578, 580], "than": [88, 114, 149, 169, 195, 230, 250, 273, 294, 312, 328, 332, 338, 343, 363, 368, 377, 378, 384, 386, 387, 389, 404, 409, 410, 417, 420, 424, 433, 435, 453, 459, 468, 469, 476, 478, 480, 482, 489, 495, 496, 505, 509, 512, 513, 520, 524, 530, 534, 538, 541, 575, 576, 577], "paramet": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 259, 260, 262, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 309, 310, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 569, 570, 571, 575, 576], "bool": [88, 97, 101, 125, 126, 127, 130, 131, 136, 149, 154, 156, 164, 169, 178, 182, 206, 207, 208, 211, 212, 217, 230, 235, 237, 245, 250, 281, 282, 283, 294, 309, 327, 328, 333, 338, 363, 365, 368, 375, 376, 377, 383, 384, 393, 394, 397, 398, 399, 402, 407, 408, 409, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 453, 456, 459, 466, 468, 475, 476, 486, 487, 491, 492, 493, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 510, 511, 513, 517, 518, 531, 532, 544, 545, 546, 547, 570], "runtim": [88, 169, 387, 480, 512, 576, 578], "detect": [88, 127, 169, 208, 283, 309, 576], "multgraph": 88, "place": [88, 158, 169, 239, 250, 304, 305, 325, 403, 526, 576, 580], "attr": [88, 159, 169, 240, 250, 300, 389, 415, 482, 520, 525, 528, 575, 576, 580], "digraph": [88, 169, 353, 575], "dagwouldcycl": [88, 101, 169, 182], "parent": [89, 90, 91, 92, 95, 97, 116, 129, 148, 150, 170, 171, 172, 173, 176, 178, 197, 210, 229, 231, 251, 253, 284, 295, 329, 331, 576], "obj": [89, 91, 93, 95, 101, 114, 170, 172, 174, 176, 182, 195, 252, 254, 260, 273], "child": [89, 90, 91, 92, 95, 117, 146, 150, 162, 170, 171, 172, 173, 176, 198, 227, 231, 243, 251, 253, 293, 295], "int": [89, 90, 91, 92, 93, 94, 95, 96, 97, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 160, 161, 162, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 226, 227, 228, 229, 231, 232, 234, 235, 236, 237, 241, 242, 243, 246, 247, 250, 251, 252, 253, 254, 255, 256, 262, 273, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 293, 295, 296, 298, 301, 304, 305, 309, 310, 315, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 336, 343, 345, 347, 348, 349, 350, 351, 352, 354, 359, 360, 361, 362, 363, 364, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 391, 394, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 449, 450, 451, 452, 453, 454, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 483, 484, 487, 489, 492, 493, 494, 495, 496, 500, 505, 508, 509, 511, 513, 519, 521, 522, 523, 524, 526, 527, 532, 541, 542, 543, 544, 546, 547, 570, 576], "attach": [89, 91, 92, 93, 94, 95, 170, 172, 173, 174, 175, 176, 252, 253, 254, 255, 325, 403, 575, 576], "duplic": [90, 171, 576], "obj_list": [91, 92, 94, 172, 173, 175, 252, 253, 255, 270], "neighbor": [96, 97, 116, 117, 147, 148, 161, 162, 177, 178, 197, 198, 228, 229, 242, 243, 256, 285, 351, 371, 462, 473, 474, 507, 575, 576], "dictionari": [96, 97, 100, 163, 177, 178, 181, 244, 256, 259, 303, 316, 317, 318, 319, 326, 327, 328, 332, 335, 338, 344, 355, 356, 357, 358, 362, 366, 368, 370, 374, 375, 380, 385, 386, 389, 394, 395, 401, 402, 412, 415, 445, 446, 447, 448, 452, 455, 457, 459, 461, 465, 466, 470, 473, 474, 477, 478, 479, 481, 482, 487, 488, 508, 509, 518, 520, 524, 525, 532, 540, 569, 570, 575, 576], "adjac": [96, 97, 113, 118, 119, 177, 178, 194, 199, 200, 256, 274, 275, 314, 353, 443, 479, 575, 576], "inbound": [96, 97, 128, 177, 178, 209, 256, 262], "outbound": [96, 97, 145, 177, 178, 226, 256, 576], "dat": [96, 177], "two": [96, 97, 138, 149, 154, 164, 177, 178, 219, 230, 235, 245, 260, 294, 320, 333, 335, 337, 339, 359, 365, 366, 367, 378, 381, 382, 386, 391, 392, 393, 395, 397, 399, 405, 406, 410, 413, 414, 416, 422, 429, 430, 431, 449, 456, 457, 458, 469, 471, 472, 478, 479, 484, 485, 486, 488, 491, 493, 495, 502, 509, 524, 526, 527, 529, 531, 534, 540, 542, 543, 545, 547, 572, 576, 580], "share": [96, 97, 102, 177, 178, 183, 256, 260, 261, 397, 491, 502, 545, 576], "specifi": [96, 97, 101, 105, 107, 128, 132, 133, 134, 135, 137, 145, 150, 152, 160, 163, 164, 168, 169, 177, 178, 182, 186, 188, 209, 213, 214, 215, 216, 218, 226, 231, 233, 241, 244, 245, 249, 250, 256, 260, 262, 265, 267, 295, 297, 301, 303, 307, 314, 320, 325, 326, 327, 330, 333, 336, 351, 352, 353, 359, 362, 364, 365, 371, 372, 373, 374, 375, 378, 379, 383, 384, 385, 386, 389, 394, 398, 399, 400, 401, 402, 403, 410, 412, 413, 415, 416, 418, 419, 421, 422, 424, 427, 428, 429, 430, 435, 438, 439, 440, 441, 442, 443, 449, 452, 454, 456, 462, 463, 464, 465, 466, 469, 473, 474, 475, 476, 477, 478, 482, 487, 492, 493, 495, 500, 501, 505, 508, 509, 513, 515, 516, 520, 524, 525, 526, 532, 534, 546, 547, 569, 570, 576, 580], "children": [97, 146, 178, 227, 329, 331, 433], "clear": [99, 180, 258, 576], "leav": [99, 101, 180, 182, 258, 260, 580], "intact": [99, 180, 258], "node_map": [100, 181, 259, 576], "node_map_func": [100, 181, 259], "edge_map_func": [100, 181, 259], "weight2": [100, 181, 259], "callabl": [100, 101, 113, 115, 137, 154, 156, 160, 163, 164, 168, 181, 182, 194, 196, 218, 235, 237, 241, 244, 245, 249, 259, 260, 301, 303, 307, 314, 316, 317, 318, 319, 324, 326, 346, 347, 348, 349, 353, 355, 356, 357, 358, 361, 362, 374, 378, 380, 381, 382, 383, 384, 385, 386, 389, 399, 401, 410, 411, 412, 413, 414, 415, 443, 445, 446, 447, 448, 451, 452, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 482, 493, 495, 500, 501, 505, 508, 509, 511, 513, 514, 515, 516, 517, 520, 524, 525, 533, 534, 547, 569, 576], "singl": [100, 101, 113, 115, 137, 164, 181, 182, 194, 196, 218, 245, 256, 259, 260, 316, 317, 318, 319, 320, 326, 327, 328, 339, 340, 351, 355, 356, 357, 358, 359, 362, 363, 373, 374, 375, 377, 394, 400, 401, 402, 409, 425, 426, 436, 437, 445, 446, 447, 448, 449, 452, 453, 462, 464, 465, 466, 468, 487, 489, 490, 511, 513, 532, 533, 570, 573, 576, 577, 578, 580], "new_node_id": [100, 181, 259], "correspond": [100, 181, 381, 382, 413, 414, 471, 472, 479, 576, 580], "build": [100, 181, 259, 573, 574, 575, 576, 580], "visual": [100, 149, 163, 181, 230, 244, 259, 294, 303, 366, 395, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 457, 473, 488, 573, 576, 578, 580], "mpl_draw": [100, 149, 181, 230, 259, 294, 366, 395, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 457, 473, 488, 575, 576, 577, 578, 580], "b": [100, 111, 181, 192, 259, 271, 407, 426, 437, 479, 544, 574, 576, 578, 580], "c": [100, 111, 181, 192, 259, 271, 338, 368, 396, 459, 479, 481, 490, 495, 515, 572, 574, 575, 576, 578, 580], "with_label": [100, 181, 259, 570, 576, 580], "label": [100, 149, 181, 230, 259, 294, 332, 351, 371, 462, 570, 575, 576, 577, 578, 580], "str": [100, 149, 163, 168, 181, 230, 244, 249, 259, 294, 303, 307, 389, 415, 482, 520, 525, 528, 569, 570, 576, 578, 580], "edge_label": [100, 181, 259, 570, 575, 576, 580], "figur": [100, 149, 181, 230, 259, 294, 366, 395, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 457, 473, 488, 570, 576, 577, 578, 580], "size": [100, 149, 163, 169, 181, 230, 244, 250, 259, 294, 303, 366, 395, 407, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 457, 473, 488, 533, 544, 569, 570, 576, 577, 578, 580], "640x480": [100, 149, 181, 230, 259, 294, 366, 395, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 457, 473, 488, 570, 576, 577, 578, 580], "ax": [100, 149, 181, 230, 259, 294, 366, 395, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 457, 473, 488, 570, 576, 577, 578, 580], "second": [100, 120, 121, 165, 181, 201, 202, 246, 259, 276, 277, 281, 284, 285, 304, 335, 366, 382, 383, 384, 395, 397, 399, 414, 457, 472, 475, 476, 488, 491, 493, 495, 500, 501, 505, 545, 547, 572, 576, 580], "other_graph": [100, 181, 259, 576], "node_d": [100, 181, 259, 479, 576], "weight_combo_fn": [101, 164, 182, 245, 260, 576], "substitut": [101, 160, 182, 241, 260, 301], "ignor": [101, 107, 153, 155, 156, 157, 159, 182, 188, 234, 236, 237, 238, 240, 260, 267, 298, 299, 300, 339, 416, 418, 419, 421, 422, 424, 428, 429, 430, 435, 439, 440, 441, 442, 534, 578], "empti": [101, 130, 131, 182, 211, 212, 260, 285, 286, 311, 379, 387, 399, 404, 405, 423, 432, 480, 493, 498, 506, 512, 541, 542, 547, 576, 578, 580], "slower": [101, 182, 260], "associ": [101, 163, 182, 244, 260, 303, 569, 575, 576], "valid": [101, 182, 309, 310, 434, 473, 474, 502, 503, 570, 576], "contract": [101, 182, 260, 576], "inherit": [101, 182], "merg": [101, 138, 182, 219, 260, 397, 491, 545, 576], "occur": [101, 182, 252, 260, 270, 346, 347, 348, 349, 513, 576], "incom": [101, 130, 131, 154, 155, 156, 182, 211, 212, 235, 236, 237, 309, 346, 347, 348, 349, 576], "outgo": [101, 130, 131, 154, 155, 156, 182, 211, 212, 235, 236, 237, 576], "unspecifi": [101, 182, 260], "choos": [101, 182, 260, 473, 474, 570, 575, 576], "arbitrarili": [101, 182, 260], "subject": [101, 182, 260], "chang": [101, 138, 156, 182, 219, 237, 260, 394, 434, 487, 532, 574, 576, 580], "shallow": [102, 183, 261, 576], "origin": [102, 132, 133, 134, 135, 164, 183, 213, 214, 215, 216, 245, 261, 360, 373, 400, 450, 464, 538, 573, 575, 576, 578], "edgeindexmap": [103, 130, 184, 211, 263, 285, 576, 580], "edgeindic": [104, 105, 111, 131, 185, 186, 192, 212, 264, 265, 271, 286, 576, 580], "induc": [107, 188, 267, 384, 399, 476, 493, 505, 533, 547, 576], "subgraph": [107, 188, 267, 332, 343, 344, 370, 384, 399, 461, 476, 493, 500, 505, 510, 533, 547, 573, 576], "incid": [107, 130, 131, 188, 211, 212, 267, 285, 286, 323, 332, 576, 580], "silent": [107, 159, 188, 240, 267, 300], "extend": [109, 110, 190, 191, 269, 270, 325, 403, 576], "present": [109, 110, 122, 123, 130, 131, 137, 153, 154, 155, 156, 157, 159, 166, 190, 191, 203, 204, 211, 212, 218, 234, 235, 236, 237, 238, 240, 247, 269, 270, 278, 279, 285, 286, 298, 299, 300, 305, 387, 480, 512], "filter_funct": [111, 112, 192, 193, 271, 272], "filter": [111, 112, 116, 117, 192, 193, 197, 198, 271, 272, 339, 340, 576], "criteria": [111, 112, 192, 193, 271, 272, 576], "boolean": [111, 112, 113, 115, 116, 117, 192, 193, 194, 196, 197, 198, 271, 272, 324, 339, 340, 361, 399, 451, 493, 495, 513, 547, 576], "fit": [111, 112, 192, 193, 271, 272, 576], "complete_graph": [111, 192, 271, 439, 576], "def": [111, 112, 192, 193, 271, 272, 330, 352, 364, 372, 382, 414, 454, 463, 472, 569, 575, 576, 577, 578, 580], "my_filter_funct": [111, 112, 192, 193, 271, 272, 576], "assert": [111, 112, 158, 192, 193, 239, 271, 272, 474, 479, 481, 575, 576], "predic": [113, 115, 194, 196], "within": [114, 195, 273, 533, 576], "worst": [114, 195, 273], "o": [114, 154, 155, 156, 163, 168, 195, 235, 236, 237, 244, 249, 259, 273, 303, 307, 385, 397, 404, 405, 407, 455, 477, 491, 496, 508, 513, 541, 542, 544, 545, 570, 576], "equal": [114, 138, 154, 156, 195, 219, 235, 237, 273, 315, 316, 317, 318, 319, 354, 355, 356, 357, 358, 380, 381, 382, 383, 384, 387, 396, 397, 412, 413, 414, 444, 470, 471, 472, 475, 476, 480, 489, 490, 491, 500, 501, 505, 512, 539, 545, 576], "found": [114, 195, 273, 346, 347, 348, 349, 351, 371, 379, 387, 399, 462, 480, 493, 511, 512, 513, 530, 547, 574, 576, 577, 578], "predecessor": [115, 116, 132, 133, 147, 154, 155, 156, 196, 197, 213, 214, 228, 235, 236, 237, 311, 322, 329, 556, 576], "filter_fn": [116, 117, 197, 198, 339, 340, 578], "whose": [116, 117, 197, 198, 323, 334, 363, 377, 378, 386, 406, 409, 410, 453, 468, 469, 478, 495, 509, 510, 524, 533, 543, 549, 552, 576], "successor": [117, 134, 135, 139, 154, 155, 156, 161, 198, 215, 216, 220, 235, 236, 237, 242, 310, 331, 340, 350, 382, 414, 472, 576], "static": [118, 119, 149, 199, 200, 230, 274, 275, 294, 575, 576], "matrix": [118, 119, 199, 200, 274, 275, 314, 353, 376, 381, 382, 398, 408, 413, 414, 443, 467, 471, 472, 492, 524, 546, 576, 578], "null_valu": [118, 119, 199, 200, 274, 275, 314, 353, 376, 408, 443, 467, 576], "element": [118, 119, 149, 199, 200, 230, 274, 275, 285, 294, 335, 366, 376, 395, 419, 422, 429, 430, 441, 442, 457, 467, 488, 576], "construct": [118, 119, 169, 199, 200, 250, 274, 275, 479, 481, 510, 576, 580], "input": [118, 119, 154, 199, 200, 235, 274, 275, 310, 314, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 332, 334, 335, 336, 338, 344, 345, 346, 347, 348, 349, 351, 353, 355, 356, 357, 358, 361, 362, 363, 366, 368, 370, 374, 376, 377, 378, 379, 386, 395, 396, 397, 398, 401, 402, 403, 408, 409, 410, 411, 417, 420, 443, 445, 446, 447, 448, 451, 452, 453, 455, 457, 459, 461, 462, 465, 468, 469, 473, 474, 478, 479, 481, 488, 489, 490, 491, 494, 495, 499, 507, 509, 514, 517, 518, 524, 528, 534, 535, 539, 540, 545, 546, 575, 576, 578, 580], "from_complex_adjacency_matrix": [118, 199, 274, 576], "numpi": [118, 119, 199, 200, 274, 275, 314, 353, 376, 381, 382, 408, 413, 414, 443, 467, 471, 472, 574, 575, 576], "float64": [118, 119, 199, 200, 274, 275, 575, 576], "complex": [118, 119, 154, 155, 156, 199, 200, 235, 236, 237, 274, 275, 396, 404, 407, 496, 541, 544, 573, 576], "complex128": [118, 119, 199, 200, 274, 275], "ndarrai": [118, 119, 199, 200, 274, 275, 314, 353, 376, 381, 382, 407, 408, 413, 414, 443, 467, 471, 472, 544], "arrai": [118, 119, 199, 200, 274, 275, 314, 353, 407, 443, 544, 570, 575, 576], "dimension": [118, 119, 199, 200, 274, 275, 575, 576], "np": [118, 119, 199, 200, 274, 275, 381, 382, 405, 407, 413, 414, 471, 472, 473, 542, 544, 575, 576], "null": [118, 119, 199, 200, 274, 275, 314, 353, 376, 408, 443, 467, 576], "0j": [119, 200, 275, 576], "from_adjacency_matrix": [119, 200, 275, 575, 576, 580], "noedgebetweennod": [120, 121, 150, 152, 165, 201, 202, 231, 233, 246, 276, 277, 295, 297, 304], "edge_index": [122, 123, 166, 203, 204, 247, 278, 279, 305, 576, 580], "indexerror": [122, 123, 124, 166, 203, 204, 205, 247, 278, 279, 280, 305, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 433, 434, 435, 436, 437, 439, 440, 441, 442, 576], "invalid": [124, 205, 280, 309, 344, 473, 474, 519, 539, 576], "destin": [125, 206, 327, 375, 385, 402, 446, 448, 466, 477, 508, 576], "recreat": [129, 146, 210, 227, 284, 293, 576], "param": [129, 210, 328, 363, 377, 409, 453, 468], "parent_index": [129, 210, 284], "edge_data": [129, 146, 210, 227, 284, 293], "weightededgelist": [129, 146, 167, 210, 227, 248, 284, 293, 306, 515, 576], "all_edg": [130, 131, 211, 212], "later": [131, 212, 286], "retriev": [131, 212, 286, 399, 493, 547, 576], "get_edge_data_by_index": [131, 212, 286, 576, 580], "get_edge_endpoints_by_index": [131, 212, 286, 576, 580], "ref_nod": [132, 133, 134, 135, 213, 214, 215, 216], "essenti": [132, 133, 134, 135, 213, 214, 215, 216], "copi": [132, 133, 134, 135, 137, 159, 160, 213, 214, 215, 216, 218, 240, 241, 300, 301, 302, 575, 576], "symmetr": [136, 137, 217, 218, 544, 576], "edge_payload_fn": [137, 218], "make": [137, 218, 317, 319, 327, 356, 358, 375, 402, 446, 448, 466, 570, 574, 576, 578, 580], "revers": [137, 218, 309, 511, 575, 576], "guarante": [137, 156, 218, 237, 378, 386, 387, 410, 469, 478, 480, 495, 509, 512, 524, 536, 575, 576, 577, 580], "execut": [137, 218, 380, 381, 382, 387, 412, 413, 414, 470, 471, 472, 480, 512, 576, 578], "edge_payload": [137, 218], "typic": [137, 218, 575, 580], "lower": [137, 218, 393, 405, 486, 531, 542, 576], "v": [138, 219, 328, 330, 338, 351, 352, 363, 364, 368, 371, 372, 373, 377, 385, 398, 400, 407, 409, 431, 453, 454, 459, 462, 463, 464, 468, 477, 492, 496, 508, 511, 538, 544, 546, 550, 551, 556, 557, 558, 562, 566, 570, 576, 577, 578], "successor_indic": [139, 220, 576], "prefer": [140, 221, 288], "earlier": [140, 221, 288, 364, 372, 373, 454, 463, 464, 576, 578], "child_index": [146, 227, 293], "indici": [147, 157, 161, 228, 238, 242, 287, 299], "delimin": [149, 168, 230, 249, 294, 307], "file": [149, 163, 168, 230, 244, 249, 294, 303, 307, 389, 415, 482, 520, 528, 569, 575, 576, 580], "seper": [149, 230, 294], "3rd": [149, 230, 294], "charact": [149, 168, 230, 249, 294, 307, 576], "whitespac": [149, 230, 294, 576], "separ": [149, 230, 294, 569, 575, 576], "field": [149, 230, 294, 389, 482, 520, 528], "uniqu": [149, 230, 294, 418, 421, 575, 576, 580], "identifi": [149, 151, 230, 232, 285, 294, 296, 576, 580], "tempfil": [149, 163, 168, 230, 244, 249, 259, 294, 303, 307, 576, 580], "namedtemporaryfil": [149, 230, 294, 576, 580], "wt": [149, 230, 294, 576, 580], "fd": [149, 230, 294, 576, 580], "flush": [149, 230, 294, 576, 580], "index_list": [152, 157, 233, 238, 297, 299], "pair": [152, 155, 156, 233, 236, 237, 297, 302, 315, 328, 334, 354, 363, 377, 380, 381, 382, 387, 394, 398, 409, 412, 413, 414, 418, 421, 427, 438, 444, 453, 468, 470, 471, 472, 480, 487, 490, 492, 496, 512, 532, 533, 546, 573, 576, 577, 580], "effect": [153, 154, 155, 156, 234, 235, 236, 237, 298, 404, 541], "use_outgo": [154, 156, 235, 237], "retain": [154, 235, 576], "minimum": [154, 155, 156, 235, 236, 237, 315, 321, 353, 354, 360, 443, 444, 450, 515, 516, 533, 534, 570, 576], "mathcal": [154, 155, 156, 235, 236, 237, 397, 491, 545, 576], "e_i": [154, 155, 156, 235, 236, 237], "e_o": [154, 155, 156, 235, 236, 237], "respect": [154, 235, 336, 397, 404, 405, 491, 541, 542, 545, 572, 575, 576, 578], "cast": [154, 235, 314, 353, 380, 381, 382, 412, 413, 414, 443, 470, 471, 472, 514, 515, 516, 533, 570, 576], "hashabl": [154, 156, 235, 237, 575, 576, 580], "quantiti": [154, 235], "remove_node_retain_edges_by_kei": [154, 235, 576], "referenti": [154, 235, 576], "remove_node_retain_edges_by_id": [154, 235, 576], "ingor": [154, 235, 576], "willl": [154, 235], "lambda": [154, 163, 235, 244, 303, 314, 346, 347, 348, 349, 353, 380, 381, 382, 383, 384, 387, 412, 413, 414, 425, 426, 436, 437, 443, 470, 471, 472, 475, 476, 480, 500, 501, 505, 512, 513, 515, 516, 534, 570, 575, 576, 578], "in_edg": [154, 235, 576], "out_edg": [154, 235, 576, 578], "had": [154, 235, 309, 310, 576], "consequ": [155, 156, 236, 237], "exact": [156, 237, 576], "determinist": [156, 160, 237, 241, 301, 576], "drawn": [156, 237, 504, 570], "exactli": [156, 237, 339, 343, 576], "position": [156, 237], "relev": [156, 237, 576, 577], "opposit": [158, 239, 511], "weighted_edge_list": [158, 239, 313, 575, 576], "preserve_attr": [159, 240, 300], "edge_map_fn": [160, 241, 301, 576], "node_filt": [160, 241, 301], "edge_weight_map": [160, 241, 301], "nodemap": [160, 241, 301, 399, 493, 547, 576], "succesor": [161, 242], "node_attr": [163, 244, 303, 389, 415, 482, 520, 525, 569, 576], "edge_attr": [163, 244, 303, 389, 415, 482, 520, 525, 576], "graph_attr": [163, 244, 303, 389, 415, 482, 520, 525, 569], "filenam": [163, 244, 303, 569], "dot": [163, 244, 303, 569, 576], "typeerror": [163, 168, 244, 249, 303, 307, 344, 364, 372, 373, 427, 434, 438, 454, 463, 464, 539, 576], "unfortun": [163, 244, 303], "graphviz": [163, 244, 303, 569, 575, 576, 577, 580], "pydot": [163, 244, 259, 303, 569, 575, 576], "pil": [163, 244, 259, 303, 425, 426, 436, 437, 569, 576, 577, 578, 580], "directed_gnp_random_graph": [163, 244, 407, 576], "15": [163, 244, 303, 433, 434, 533, 573, 577], "25": [163, 244, 303, 328, 363, 453, 570, 576], "dot_str": [163, 244, 303, 576], "fillcolor": [163, 244, 303, 425, 426, 436, 437, 569, 576, 577], "lightblu": [163, 244, 303, 425, 426, 436, 437, 576], "style": [163, 244, 303, 425, 426, 436, 437, 569, 570, 576, 577, 580], "fill": [163, 244, 303, 424, 425, 426, 435, 436, 437, 569, 576, 577, 580], "graph_from_dot_data": [163, 244, 303, 576], "temporarydirectori": [163, 244, 303, 576], "tmpdirnam": [163, 244, 303, 576], "tmp_path": [163, 244, 303, 576], "join": [163, 168, 244, 249, 303, 307, 416, 427, 438, 526, 576], "png": [163, 244, 303, 569, 576], "write_png": [163, 244, 303, 576], "pngimageplugin": [163, 244, 303, 425, 426, 436, 437, 569, 576, 577, 578, 580], "pngimagefil": [163, 244, 303, 425, 426, 436, 437, 569, 576, 577, 578, 580], "rgba": [163, 244, 303, 425, 426, 436, 437, 570, 576, 577, 578, 580], "1016x1211": 163, "undirect": [164, 245, 250, 284, 293, 323, 327, 330, 332, 334, 336, 342, 351, 352, 366, 375, 376, 380, 381, 382, 395, 398, 402, 408, 414, 416, 417, 418, 419, 432, 435, 436, 437, 438, 439, 440, 441, 442, 454, 457, 460, 462, 463, 464, 466, 467, 475, 476, 488, 490, 491, 494, 496, 504, 513, 515, 516, 522, 541, 542, 543, 544, 546, 553, 556, 559, 576, 578, 580], "bidirect": [164, 245, 302, 376, 380, 381, 382, 398, 408, 414, 420, 422, 424, 425, 426, 427, 429, 430, 436, 546, 576], "condens": [164, 245, 576], "kept": [164, 245], "inplac": [165, 246, 576], "update_edge_by_index": [165, 246, 304, 576, 580], "weight_fn": [168, 249, 307, 314, 320, 327, 346, 347, 348, 349, 353, 359, 373, 375, 378, 380, 381, 382, 386, 394, 400, 402, 410, 412, 413, 414, 443, 449, 464, 466, 469, 470, 471, 472, 478, 487, 495, 509, 513, 514, 515, 516, 524, 532, 533, 534, 574, 575, 576], "callback": [168, 249, 307, 330, 352, 364, 372, 373, 400, 454, 463, 464, 473, 474, 570, 575, 576], "gettempdir": [168, 249, 307], "rt": [168, 249, 307], "edge_fil": [168, 249, 307], "metadata": [169, 250, 580], "keyword": [169, 250, 526, 576], "source_path": [169, 250], "tmp": [169, 250], "csv": [169, 250], "new_path": [169, 250], "old_path": [169, 250], "assign": [169, 250, 332, 353, 427, 438, 443, 473, 474, 524, 575, 576, 577, 580], "node_count_hint": [169, 250, 576], "hint": [169, 250, 576], "alloc": [169, 250, 576], "enough": [169, 250], "capac": [169, 250], "store": [169, 250, 526, 528, 578, 580], "prepopul": [169, 250], "optim": [169, 250, 394, 473, 487, 489, 503, 532, 533, 562, 576, 578], "complet": [169, 250, 404, 405, 416, 418, 421, 428, 439, 440, 514, 533, 541, 542, 576, 578], "known": [169, 250, 388, 404, 405, 541, 542, 576, 578], "advanc": [169, 250], "edge_count_hint": [169, 250, 576], "1267x1115": 244, "last": [252, 270, 351, 371, 462, 572, 576, 578], "callabbl": 259, "node_": 259, "represent": [260, 394, 487, 532, 576, 578], "rest": [260, 576], "get_all_edge_data": 277, "alwai": [284, 285, 293, 404, 405, 541, 542, 575, 576], "easili": [285, 576, 580], "undirected_gnp_random_graph": [303, 544, 576], "865x731": 303, "path_graph": [307, 457, 488, 493, 547, 576, 578, 580], "partition_it": 308, "another_block": 308, "parititon_it": 308, "the_second_block": 308, "topolog": [309, 310, 346, 347, 348, 349, 511, 536, 537, 576, 578], "is_act": 309, "get_readi": [309, 310, 312], "sorter": [309, 576], "underli": 309, "mutat": [309, 330, 352, 364, 372, 373, 400, 454, 463, 464, 576, 580], "recommend": 309, "daghascycl": [309, 346, 347, 348, 349, 536, 537], "progress": [309, 311, 312], "regular": [309, 427, 434, 438, 511], "flip": 309, "ones": 309, "certainli": [309, 511], "domin": [309, 511, 576], "notabl": [309, 511], "natur": [309, 511], "zero": [309, 405, 511, 524, 534, 542, 576], "valueerror": [309, 310, 320, 343, 354, 357, 358, 359, 361, 374, 375, 385, 411, 444, 447, 448, 449, 451, 465, 466, 477, 511, 514, 533, 576], "partial": [309, 310, 489, 511, 576], "themselv": [309, 310, 511], "check_arg": [309, 576], "were": [309, 511, 576, 578, 580], "circuit": [309, 530, 578], "meaning": [309, 576], "memori": [309, 576], "improv": [309, 338, 368, 387, 459, 480, 500, 512, 573, 576], "undefin": [309, 576], "unblock": 310, "yet": [310, 312, 576], "happen": 310, "amongst": 310, "further": [311, 576], "haven": 312, "default_weight": [314, 320, 327, 353, 359, 375, 378, 380, 381, 382, 386, 394, 402, 410, 412, 413, 414, 443, 449, 466, 469, 470, 471, 472, 478, 487, 509, 513, 515, 516, 524, 532], "sum": [314, 326, 328, 345, 353, 362, 363, 374, 377, 378, 386, 401, 409, 410, 443, 452, 453, 465, 468, 469, 478, 495, 509, 513, 524, 533, 576], "tell": [314, 353, 380, 381, 382, 412, 413, 414, 443, 470, 471, 472, 515, 516], "rust": [314, 353, 380, 381, 382, 412, 413, 414, 443, 470, 471, 472, 515, 516, 573, 574, 575, 576], "extract": [314, 353, 373, 380, 381, 382, 400, 412, 413, 414, 443, 464, 470, 471, 472, 515, 516], "numer": [314, 353, 380, 381, 382, 412, 413, 414, 443, 470, 471, 472, 515, 516, 570, 573, 575, 580], "absenc": [314, 353, 408, 443, 576], "rtype": [314, 328, 353, 363, 377, 409, 453, 468], "min_depth": [315, 321, 354, 360, 444, 450, 576], "cutoff": [315, 321, 354, 360, 444, 450, 576], "multithread": [315, 316, 317, 318, 319, 328, 354, 355, 356, 357, 358, 363, 376, 377, 380, 381, 382, 387, 396, 398, 408, 409, 412, 413, 414, 444, 453, 467, 468, 470, 471, 472, 480, 489, 490, 492, 512, 539, 546, 576], "thread": [315, 316, 317, 318, 319, 328, 354, 355, 356, 357, 358, 363, 376, 377, 380, 381, 382, 387, 396, 398, 408, 409, 412, 413, 414, 444, 453, 467, 468, 470, 471, 472, 480, 489, 490, 492, 512, 539, 546, 576], "pool": [315, 316, 317, 318, 319, 354, 355, 356, 357, 358, 380, 381, 382, 387, 396, 412, 413, 414, 444, 470, 471, 472, 480, 489, 490, 512, 539], "cpu": [315, 316, 317, 318, 319, 354, 355, 356, 357, 358, 380, 381, 382, 387, 396, 398, 412, 413, 414, 444, 470, 471, 472, 480, 489, 490, 492, 512, 539, 546, 572, 574, 576], "tune": [315, 316, 317, 318, 319, 354, 355, 356, 357, 358, 376, 380, 381, 382, 387, 396, 398, 408, 412, 413, 414, 444, 467, 470, 471, 472, 480, 489, 490, 492, 512, 539, 546], "rayon_num_thread": [315, 316, 317, 318, 319, 328, 354, 355, 356, 357, 358, 363, 376, 377, 380, 381, 382, 387, 396, 398, 408, 409, 412, 413, 414, 444, 453, 467, 468, 470, 471, 472, 480, 489, 490, 492, 512, 539, 546, 576], "depth": [315, 321, 336, 351, 352, 354, 360, 371, 372, 444, 450, 462, 463, 510, 576], "regardless": [315, 321, 354, 360, 444, 450], "allpairsmultiplepathmap": [315, 354, 444], "edge_cost_fn": [316, 317, 318, 319, 324, 326, 355, 356, 357, 358, 361, 362, 374, 401, 411, 445, 446, 447, 448, 451, 452, 465, 517], "calcul": [316, 318, 328, 338, 355, 357, 363, 368, 370, 376, 377, 388, 398, 408, 409, 445, 447, 453, 459, 467, 468, 492, 546, 572, 574, 576], "bellman": [316, 317, 326, 327, 355, 356, 362, 411, 445, 446, 452, 517, 576], "ford": [316, 317, 326, 327, 355, 356, 362, 411, 445, 446, 452, 517, 576], "act": [316, 317, 318, 319, 355, 356, 357, 358, 445, 446, 447, 448, 575], "cost": [316, 317, 318, 319, 320, 324, 326, 327, 355, 356, 357, 358, 359, 361, 362, 373, 374, 375, 385, 394, 400, 401, 402, 411, 445, 446, 447, 448, 449, 451, 452, 464, 465, 466, 477, 487, 508, 515, 516, 517, 532, 576], "allpairspathlengthmap": [316, 318, 355, 357, 380, 412, 445, 447, 470, 576], "negativecycl": [316, 317, 326, 327, 355, 356, 362, 445, 446, 452], "neg": [316, 317, 320, 324, 326, 327, 339, 355, 356, 357, 358, 359, 361, 362, 374, 375, 380, 381, 382, 385, 401, 411, 412, 413, 414, 434, 445, 446, 447, 448, 449, 451, 452, 465, 466, 470, 471, 472, 477, 514, 517, 533, 576], "run": [317, 319, 328, 339, 340, 356, 358, 363, 376, 377, 378, 380, 381, 382, 386, 387, 396, 398, 399, 405, 408, 409, 412, 413, 414, 417, 420, 453, 455, 467, 468, 469, 470, 471, 472, 478, 480, 489, 490, 492, 493, 495, 512, 513, 524, 539, 542, 546, 547, 570, 573, 574, 576, 578, 580], "allpairspathmap": [317, 319, 356, 358, 446, 448], "dijkstra": [318, 319, 320, 357, 358, 359, 373, 374, 375, 380, 381, 382, 400, 401, 402, 412, 413, 414, 447, 448, 449, 464, 465, 466, 470, 471, 472, 576], "as_undirect": [320, 327, 359, 375, 376, 380, 381, 382, 398, 402, 408, 414, 466, 494, 546, 576], "isn": [320, 327, 359, 375, 394, 402, 403, 449, 466, 487, 515, 516, 532, 575], "nan": [320, 357, 358, 359, 361, 374, 375, 385, 398, 447, 448, 449, 451, 465, 466, 477, 492, 514, 533, 534, 546, 576], "from_": 321, "repeat": [321, 330, 336, 351, 352, 360, 364, 371, 372, 373, 400, 450, 454, 462, 463, 464], "inner": [321, 336, 360, 450, 576], "articul": [323, 332, 576], "cut": [323, 332, 534, 576], "vertex": [323, 330, 336, 352, 364, 372, 373, 398, 400, 454, 463, 464, 473, 474, 479, 490, 492, 546, 549, 550, 551, 552, 557, 558, 562, 565, 566, 576], "along": [323, 576], "increas": [323, 334, 394, 487, 496, 532, 576], "implicitli": [323, 332, 334, 336, 344, 345, 370, 396, 461, 490, 539], "assum": [323, 332, 334, 336, 344, 345, 370, 396, 461, 490, 539, 576], "loop": [323, 332, 334, 336, 341, 344, 345, 369, 370, 379, 396, 404, 407, 460, 461, 490, 539, 541, 544, 576], "produc": [323, 332, 334, 336, 344, 345, 370, 396, 461, 481, 489, 490, 533, 539, 576], "incorrect": [323, 332, 334, 336, 344, 345, 370, 396, 461, 490, 539, 576], "unexpect": [323, 332, 334, 336, 344, 345, 346, 347, 348, 349, 370, 396, 461, 490, 539, 576], "goal_fn": [324, 361, 451], "estimate_cost_fn": [324, 361, 451], "comput": [324, 326, 328, 332, 338, 341, 361, 362, 363, 368, 369, 374, 377, 378, 385, 386, 387, 396, 398, 401, 409, 410, 451, 452, 453, 459, 460, 465, 468, 469, 477, 478, 480, 490, 492, 495, 508, 509, 512, 513, 524, 533, 534, 535, 539, 540, 546, 570, 576, 578], "estim": [324, 361, 451], "admiss": [324, 361, 451], "never": [324, 341, 361, 369, 451, 460, 559, 576], "overestim": [324, 361, 451], "nearest": [324, 361, 451], "goal": [324, 326, 361, 362, 374, 385, 401, 451, 452, 465, 477, 508, 575, 576], "seed": [325, 391, 394, 403, 404, 405, 406, 407, 484, 487, 489, 496, 526, 527, 532, 541, 542, 543, 544, 576], "initial_graph": [325, 403, 576], "barab\u00e1si": [325, 403, 576], "albert": [325, 403, 576], "preferenti": [325, 403, 576], "grown": [325, 403, 573, 580], "l": [325, 403, 479, 524, 526, 576], "r": [325, 403, 433, 496, 524, 572, 573, 576], "emerg": [325, 403], "scale": [325, 333, 337, 338, 365, 367, 368, 392, 393, 394, 403, 431, 456, 458, 459, 485, 486, 487, 529, 531, 532, 570, 576], "network": [325, 338, 377, 394, 396, 403, 405, 409, 468, 487, 532, 542, 572, 573, 576, 580], "scienc": [325, 338, 403], "286": [325, 403], "pp": [325, 403], "509": [325, 403], "512": [325, 403], "1999": [325, 403, 495, 524], "star_graph": [325, 403, 576], "star": [325, 403, 430, 434, 442, 576], "spfa": [326, 327, 362, 411, 452, 517, 576], "heurist": [326, 327, 362, 383, 384, 399, 411, 452, 473, 475, 476, 493, 500, 501, 505, 517, 547, 576], "wit": 327, "parallel_threshold": [328, 363, 376, 377, 380, 381, 382, 398, 408, 409, 412, 413, 414, 453, 467, 468, 470, 471, 472, 489, 492, 546, 576], "50": [328, 363, 377, 394, 409, 453, 468, 487, 489, 532, 576], "fraction": [328, 338, 363, 368, 377, 409, 453, 459, 468, 576], "through": [328, 363, 377, 409, 453, 468, 576, 577, 578], "math": [328, 363, 377, 409, 453, 468, 576], "c_b": [328, 363, 377, 409, 453, 468, 576, 577], "sum_": [328, 338, 363, 368, 377, 398, 409, 453, 459, 468, 492, 496, 546, 576, 577], "frac": [328, 338, 363, 368, 377, 394, 396, 398, 409, 453, 459, 468, 487, 490, 492, 496, 532, 546, 576, 577], "sigma": [328, 363, 377, 409, 453, 468, 576, 577], "ulrik": [328, 363, 377, 405, 409, 453, 468, 504, 542, 576], "brand": [328, 363, 377, 405, 409, 453, 468, 504, 542, 576], "journal": [328, 363, 378, 410, 434, 453, 469, 495, 534, 576], "mathemat": [328, 363, 453, 576], "sociologi": [328, 363, 378, 410, 453, 469, 576], "163": [328, 363, 453, 576], "177": [328, 363, 453, 576], "2001": [328, 363, 453, 576], "abov": [328, 363, 376, 377, 380, 381, 382, 387, 398, 405, 408, 409, 412, 413, 414, 417, 420, 453, 467, 468, 470, 471, 472, 480, 492, 512, 542, 546, 575, 576, 578, 580], "env": [328, 363, 376, 377, 398, 408, 409, 453, 467, 468, 492, 546], "var": [328, 363, 376, 377, 398, 408, 409, 453, 467, 468, 492, 546], "distinct": [328, 363, 377, 409, 418, 421, 453, 468, 502, 578], "breadth": [329, 330, 331, 364, 454, 576], "bf": [329, 330, 331, 364, 454], "bfspredecessor": 329, "visitor": [330, 352, 364, 372, 373, 400, 454, 463, 464, 548, 555, 561, 576], "pseudo": [330, 351, 352, 364, 371, 372, 373, 400, 454, 462, 463, 464], "code": [330, 351, 352, 364, 371, 372, 373, 400, 425, 426, 436, 437, 454, 462, 463, 464, 573, 576, 578, 580], "annot": [330, 352, 364, 372, 373, 400, 454, 463, 464, 576], "event": [330, 352, 364, 372, 373, 400, 454, 463, 464, 548, 555, 556, 561, 563, 564, 576], "white": [330, 352, 364, 372, 454, 463, 580], "grai": [330, 352, 364, 372, 454, 463, 552], "equeu": [330, 364, 454], "q": [330, 364, 373, 400, 454, 464], "\u00f8": [330, 351, 364, 371, 373, 400, 454, 462, 464], "dequeu": [330, 364, 454], "adj": [330, 352, 364, 372, 373, 400, 454, 463, 464, 575, 576], "els": [330, 351, 352, 364, 371, 372, 373, 400, 454, 462, 463, 464, 569, 575, 576, 578, 580], "insid": [330, 352, 364, 372, 373, 400, 454, 463, 464, 548, 555, 561], "stop": [330, 339, 352, 364, 372, 373, 374, 378, 383, 384, 386, 394, 399, 400, 401, 410, 454, 463, 464, 465, 469, 475, 476, 478, 487, 493, 495, 500, 505, 509, 524, 532, 547, 568, 576], "immedi": [330, 352, 364, 372, 373, 386, 400, 454, 463, 464, 478, 509, 576], "exploit": [330, 352, 364, 372, 373, 400, 454, 463, 464], "exit": [330, 352, 364, 372, 373, 400, 454, 463, 464, 576], "earli": [330, 352, 364, 372, 373, 400, 454, 463, 464], "stopsearch": [330, 352, 364, 372, 373, 400, 454, 463, 464], "prune": [330, 352, 364, 372, 373, 400, 454, 463, 464, 567], "prunesearch": [330, 352, 364, 372, 373, 400, 454, 463, 464], "visit": [330, 352, 364, 372, 383, 384, 399, 454, 463, 475, 476, 493, 500, 505, 547, 576], "treeedgesrecord": [330, 352, 364, 372, 454, 463, 576], "tree_edg": [330, 352, 364, 372, 454, 463, 556, 576], "append": [330, 352, 364, 372, 382, 414, 417, 420, 424, 433, 435, 454, 463, 472, 576, 577], "vi": [330, 352, 364, 372, 454, 463, 576], "chosen": [330, 336, 351, 352, 364, 371, 372, 373, 400, 454, 462, 463, 464], "arbitrarli": [330, 336, 351, 352, 364, 371, 372, 373, 400, 454, 462, 463, 464], "invok": [330, 352, 364, 372, 373, 400, 454, 463, 464, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566], "subclass": [330, 352, 364, 372, 373, 400, 454, 463, 464, 576], "bfssuccessor": [331, 576], "disconnect": [332, 398, 492, 534, 546, 576], "vertic": [332, 417, 418, 420, 421, 455, 479, 511, 558, 576, 580], "first_nod": [333, 365, 456], "horizont": [333, 365, 456], "center": [333, 337, 365, 367, 391, 392, 393, 394, 419, 422, 429, 430, 441, 442, 456, 458, 484, 485, 486, 487, 527, 529, 531, 532], "aspect_ratio": [333, 365, 456], "3333333333333333": 333, "bipartit": [333, 365, 406, 455, 456, 497, 540, 543, 576], "left": [333, 365, 406, 426, 437, 456, 496, 504, 543], "horitont": [333, 456], "orient": [333, 336, 365, 396, 456], "ratio": [333, 338, 365, 368, 456, 459, 576], "width": [333, 365, 456, 570], "height": [333, 365, 456], "pos2dmap": [333, 337, 365, 367, 391, 392, 393, 456, 458, 484, 485, 486, 527, 529, 531, 570, 575, 576], "cartesian": [335, 366, 457, 576], "product": [335, 366, 395, 457, 488, 576], "productnodemap": [335, 366, 395, 457, 488], "chain": [336, 339, 576], "decomposit": [336, 576], "deriv": [336, 386, 478, 509, 576], "fundament": [336, 345, 576], "manner": [336, 576, 580], "begin": [336, 578], "nontre": 336, "awai": 336, "overlap": [336, 576], "segment": 336, "inform": [336, 406, 528, 543, 572, 576, 580], "schmidt": 336, "jen": 336, "2013": [336, 576], "test": [336, 504, 513, 574, 576], "letter": [336, 572], "113": 336, "241": 336, "244": 336, "elsevi": 336, "doi": [336, 338, 378, 410, 434, 469, 504, 530, 533, 576], "10": [336, 338, 378, 386, 410, 426, 429, 430, 434, 437, 441, 442, 469, 478, 504, 509, 530, 533, 570, 573, 574, 577], "1016": [336, 434, 533, 576], "j": [336, 418, 421, 431, 495, 496, 576], "ipl": [336, 576], "016": [336, 576], "circular": [337, 367, 458], "wf_improv": [338, 368, 459], "close": [338, 368, 394, 459, 487, 530, 532, 576], "reciproc": [338, 368, 459, 576], "averag": [338, 353, 368, 385, 398, 443, 459, 477, 492, 508, 546, 576], "distanc": [338, 368, 376, 381, 382, 394, 398, 408, 413, 414, 425, 426, 436, 437, 459, 467, 471, 472, 487, 492, 496, 514, 526, 532, 533, 546, 562, 564, 572, 576], "reachabl": [338, 351, 368, 371, 385, 459, 462, 477, 508, 576], "reach": [338, 368, 374, 378, 386, 401, 410, 459, 465, 469, 478, 495, 509, 524, 576], "altern": [338, 368, 459, 575, 577, 580], "formula": [338, 368, 459], "actor": [338, 368, 459], "who": [338, 368, 459, 576, 580], "wf": [338, 368, 459], "c_": [338, 368, 459], "wasserman": 338, "faust": 338, "k": [338, 343, 344, 345, 370, 385, 394, 433, 434, 461, 477, 487, 508, 532, 570, 576], "1994": 338, "social": [338, 377, 409, 468, 576], "cambridg": 338, "press": 338, "1017": 338, "cbo9780511815478": 338, "color_fn": 339, "collect": [339, 340, 345, 536, 578], "bicolor": 339, "continu": [339, 394, 487, 532, 575, 576], "core": [344, 370, 461, 528, 572, 576], "basi": [345, 576], "minim": [345, 489, 533, 577], "summat": 345, "exclus": 345, "cacm": 345, "491": 345, "paton": 345, "comm": 345, "acm": [345, 495, 513, 534], "12": [345, 434, 570, 573, 574], "sept": 345, "1969": [345, 434], "514": 345, "518": 345, "longest": [346, 347, 348, 349, 387, 480, 512, 576], "unsign": [346, 347, 576], "_": [346, 347, 348, 349, 366, 395, 414, 457, 488, 576], "could": [346, 347, 348, 349, 570, 575, 576, 578, 580], "df": [351, 352, 371, 372, 379, 462, 463, 558], "procedur": [351, 371, 431, 462, 576], "stack": [351, 371, 462], "push": [351, 371, 462], "hasnext": [351, 371, 462], "w": [351, 371, 462, 538], "pop": [351, 371, 462, 562], "span": [351, 462, 515, 516, 533, 576], "examin": [352, 372, 373, 400, 463, 464, 549, 551, 552, 558, 563, 564, 566, 576, 578], "cross": [352, 372, 463, 553, 559, 574], "forward": [352, 372, 463, 559], "parallel_edg": [353, 443, 576], "dag_adjacency_matrix": 353, "determin": [353, 383, 384, 387, 407, 443, 475, 476, 480, 497, 500, 501, 505, 511, 512, 534, 544, 576], "min": [353, 373, 400, 443, 464, 534, 576, 577], "caus": [353, 443, 503, 576], "behavior": [353, 443, 576], "max": [353, 387, 417, 420, 443, 480, 512, 513, 576, 577], "avg": [353, 443, 576], "digraph_edge_betweenness_centr": 363, "pathlength": [363, 453], "centralitymap": [363, 368, 378, 386, 410, 453, 459, 469, 478, 495, 509, 524, 577], "version": [364, 372, 373, 454, 463, 464, 574, 575, 576], "33333333333333": [365, 456], "graph_1": [366, 395, 457, 488, 576], "graph_2": [366, 395, 457, 488, 576], "graph_product": [366, 395, 457, 488, 576], "in_degre": [370, 576], "out_degre": [370, 576], "infin": [373, 398, 400, 464, 492, 526, 546], "p": [373, 400, 405, 406, 407, 464, 496, 526, 542, 543, 544, 569, 570, 572, 576], "relax": [373, 400, 464, 563], "decreas": [373, 400, 464, 496], "300": [376, 380, 381, 382, 398, 408, 412, 413, 414, 467, 470, 471, 472, 492, 546, 570], "digraph_floyd_warshall_numpi": [376, 467, 575, 576], "absens": [376, 467], "definit": [377, 409, 468], "On": [377, 409, 468, 576], "variant": [377, 409, 426, 437, 468, 575, 576], "30": [377, 409, 468, 576], "136": [377, 409, 468, 576], "145": [377, 409, 468, 533, 576], "2008": [377, 409, 468, 576], "digraph_betweenness_centr": [377, 576], "edgecentralitymap": [377, 409, 468], "max_it": [378, 386, 410, 469, 478, 495, 509, 524], "100": [378, 410, 469, 495, 509, 524, 576], "tol": [378, 386, 394, 410, 469, 478, 487, 495, 509, 524, 532], "1e": [378, 386, 394, 410, 469, 478, 487, 495, 509, 524, 532], "06": [378, 386, 394, 410, 469, 478, 487, 509, 524, 532], "eigenvector": [378, 386, 410, 469, 478, 509, 576], "phillip": [378, 410, 469], "bonacich": [378, 410, 469], "famili": [378, 410, 469, 570], "measur": [378, 410, 469, 533, 576, 577, 578], "american": [378, 410, 469], "92": [378, 410, 469], "1170": [378, 410, 469], "1182": [378, 410, 469], "1986": [378, 410, 469, 513], "1086": [378, 410, 469], "228631": [378, 410, 469], "converg": [378, 386, 410, 469, 478, 495, 509, 524], "vector": [378, 386, 410, 469, 478, 495, 509, 524], "smaller": [378, 386, 410, 469, 478, 495, 496, 509, 524, 580], "toler": [378, 386, 410, 469, 478, 495, 509, 524], "multipli": [378, 386, 410, 469, 478, 495, 509, 524], "networkx": [378, 386, 405, 410, 469, 478, 509, 518, 524, 530, 542, 573, 576, 580], "encount": [379, 528, 536, 537, 550, 557, 562, 575, 576], "floyd": [380, 381, 382, 412, 413, 414, 470, 471, 472, 576], "dens": [380, 381, 382, 412, 413, 414, 470, 471, 472], "graph_floyd_warshall_numpi": [381, 382, 472, 576], "inf": [381, 382, 413, 414, 455, 471, 472, 576], "matric": [382, 414, 472, 575, 576], "reconstruct": [382, 414, 472], "among": [382, 414, 472, 513, 572], "reconstruct_path": [382, 414, 472], "curr": [382, 414, 472], "node_match": [383, 384, 399, 475, 476, 493, 500, 505, 547, 576], "edge_match": [383, 384, 399, 475, 476, 493, 500, 505, 547, 576], "id_ord": [383, 384, 399, 475, 476, 493, 500, 501, 505, 547, 576], "call_limit": [383, 384, 399, 475, 476, 493, 500, 505, 547, 576], "compar": [383, 384, 475, 476, 500, 501, 505, 572, 576], "matcher": [383, 384, 475, 476, 500, 501, 505], "graph_a": [383, 384, 399, 475, 476, 493, 500, 501, 505, 547], "graph_b": [383, 384, 399, 475, 476, 493, 500, 501, 505, 547], "y": [383, 384, 387, 427, 438, 475, 476, 480, 500, 501, 505, 512, 576], "evalu": [383, 384, 387, 399, 475, 476, 480, 493, 500, 501, 505, 512, 547], "vied": [383, 384, 475, 476, 501], "vf2": [383, 384, 399, 475, 476, 493, 500, 501, 505, 547, 576], "paper": [383, 384, 399, 426, 437, 455, 475, 476, 481, 489, 493, 500, 501, 505, 547, 576], "bound": [383, 384, 399, 405, 475, 476, 493, 500, 505, 542, 547, 576], "solut": [383, 384, 399, 473, 475, 476, 493, 500, 505, 513, 547, 576], "exce": [383, 384, 399, 417, 420, 433, 475, 476, 493, 500, 505, 547, 576], "ambigu": [384, 476, 505, 556], "term": [384, 476, 505], "fewer": [384, 476, 505], "edge_cost": [385, 477, 508], "kth": [385, 477, 508], "log": [385, 455, 477, 508, 576], "eedg": [385, 477, 508], "alpha": [386, 478, 509, 524, 570, 576], "beta": [386, 478, 496, 509], "1000": [386, 478], "katz": [386, 478, 509, 576], "leo": [386, 478, 509], "statu": [386, 478, 509, 578], "sociometr": [386, 478, 509], "psychometrika": [386, 478, 509], "18": [386, 478, 509, 576], "39": [386, 478, 509, 576], "43": [386, 478, 509], "1953": [386, 478, 509], "springer": [386, 478, 509, 533, 576], "pdf": [386, 455, 478, 481, 495, 509, 524, 569], "1007": [386, 478, 509, 533, 576], "bf02289026": [386, 478, 509], "attenu": [386, 478, 509], "neighbourhood": [386, 478, 509], "roughli": [387, 480, 512], "len": [387, 480, 512, 576, 578], "There": [387, 480, 512, 575, 576, 580], "tradeoff": [387, 480, 512], "relat": [388, 576], "coarsest": [388, 576], "bisimul": [388, 576], "paig": [388, 576], "tarjan": [388, 576], "three": [388, 397, 491, 545, 576], "refin": [388, 576], "relationalcoarsestpartit": [388, 576], "json": [389, 415, 482, 520, 525, 576], "anyth": [389, 482, 520], "unweight": [390, 398, 483, 492, 521, 546, 576], "preset": [390, 473, 474, 483, 521, 576], "nodescountmap": [390, 521], "nlist": [392, 434, 473, 485, 529, 576, 580], "rotat": [392, 485, 529], "shell": [392, 485, 529], "angl": [392, 485, 529], "radian": [392, 485, 529], "resolut": [393, 486, 531], "35": [393, 486, 531], "equidist": [393, 486, 531], "spiral": [393, 486, 531], "compact": [393, 486, 531], "compress": [393, 486, 531], "plot": [393, 486, 531, 576], "po": [394, 434, 473, 487, 496, 526, 532, 570, 575, 576, 580], "repulsive_expon": [394, 487, 532], "adaptive_cool": [394, 487, 532, 576], "num_it": [394, 487, 532], "fruchterman": [394, 487, 532, 576], "reingold": [394, 487, 532, 576], "forc": [394, 487, 532, 576], "simul": [394, 487, 532], "spring": [394, 487, 532, 570], "hold": [394, 487, 532], "repel": [394, 487, 532], "anti": [394, 487, 532], "graviti": [394, 487, 532], "equilibrium": [394, 487, 532], "coordin": [394, 427, 438, 487, 496, 532, 580], "sqrt": [394, 487, 532], "farther": [394, 487, 532], "apart": [394, 487, 532], "repuls": [394, 487, 532], "expon": [394, 487, 532], "cool": [394, 487, 532], "scheme": [394, 487, 532], "linear": [394, 424, 435, 479, 487, 511, 532, 576, 578], "threshold": [394, 487, 496, 526, 532], "Not": [394, 487, 532], "around": [394, 487, 532, 576], "tensor": [395, 488, 576], "fag": 396, "eq": 396, "triangl": [396, 490], "tripl": [396, 490], "count": [396, 576, 578], "cluster": 396, "fagiolo": 396, "physic": [396, 431], "review": [396, 431, 578], "76": 396, "026107": 396, "2007": 396, "merge_nod": [397, 491, 545, 576], "merge_edg": [397, 491, 545, 576], "phase": [397, 491, 545], "n_2": [397, 491, 545], "n_1": [397, 491, 545], "togeth": [397, 416, 491, 528, 545, 557, 558, 562], "ne": [398, 492, 546], "taken": [398, 492, 546, 576], "funcion": [399, 493, 547], "direccted_path_graph": 399, "stopiter": [399, 493, 547, 576], "dicitonari": [399, 493, 547], "purpos": [403, 573, 574], "weak": 403, "direction": [403, 578, 580], "num_nod": [404, 405, 418, 419, 421, 422, 428, 429, 430, 433, 440, 441, 442, 526, 541, 542, 576], "num_edg": [404, 541, 576], "g_": [404, 405, 541, 542, 576], "nm": [404, 541], "erd\u0151": [404, 405, 541, 542], "r\u00e9nyi": [404, 405, 541, 542], "higher": [404, 473, 474, 541, 576], "reproduc": [404, 541, 572, 576], "binomi": [405, 417, 420, 542, 576], "mention": [405, 542], "upper": [405, 542, 576], "fast_gnp_random_graph": [405, 542], "vladimir": [405, 542], "batagelj": [405, 542], "phy": [405, 542], "rev": [405, 542], "71": [405, 542], "036113": [405, 542], "2005": [405, 542], "random_graph": [405, 542, 576], "l49": [405, 542], "l120": [405, 542], "num_l_nod": [406, 543], "num_r_nod": [406, 543], "divid": [406, 543], "disjoint": [406, 510, 543, 576], "right": [406, 420, 424, 426, 427, 437, 496, 504, 543], "stochast": [407, 544, 576], "model": [407, 496, 526, 544, 576, 578], "commun": [407, 544], "membership": [407, 544], "infer": [407, 496, 544], "pars": [415, 525, 528, 576], "load": 415, "num_mesh_nod": [416, 439], "num_path_nod": [416, 439], "mesh_weight": [416, 439], "path_weight": [416, 439], "barbel": [416, 576], "mesh": [416, 428, 439, 440, 576], "won": [416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442], "recurs": [417, 420, 431, 530, 576], "platform": [417, 420, 573, 576, 580], "64bit": [417, 420, 573, 574], "60": [417, 420, 576], "32bit": [417, 420, 573, 574], "29": [417, 420, 576], "overflowerror": [417, 420, 576], "extra": [417, 420, 424, 433, 435, 576], "greater": [417, 420, 424, 433, 435, 538], "neither": [418, 419, 421, 422, 424, 428, 429, 430, 435, 439, 440, 441, 442, 578], "propag": [420, 424, 427], "toward": [420, 424, 427, 430], "bottom": [420, 424, 427], "lenght": [420, 433], "row": [424, 427, 435, 438], "col": [424, 427, 435, 438, 576], "grid": [424, 427, 435, 438, 576], "wise": [424, 435], "trail": [424, 435, 578], "heavi": [425, 426, 436, 437, 576], "hex": [425, 436, 576], "fig": [425, 426, 436, 437, 569], "arxiv": [425, 426, 431, 436, 437, 489, 576], "ab": [425, 426, 431, 436, 437, 489, 576], "1907": [425, 426, 436, 437], "09528": [425, 426, 436, 437], "ascii": [425, 426, 436, 437], "diagram": [425, 426, 436, 437], "f": [425, 426, 431, 436, 437, 577, 578, 580], "odd": [425, 426, 436, 437, 576], "graphviz_draw": [425, 426, 436, 437, 575, 576, 577, 578, 580], "1043x155": [425, 436], "squar": [426, 437, 576], "four": [426, 437, 572, 576], "frequenc": [426, 437], "467x539": [426, 437], "with_posit": [427, 438, 576], "hexagon": [427, 438, 576, 577], "lattic": [427, 438, 576, 577], "boundari": [427, 438, 575, 576], "emb": [427, 438], "plane": [427, 438, 504], "side": [427, 438], "inward": 430, "dorogovtsev": [431, 576], "goltsev": [431, 576], "mend": [431, 576], "pseudofract": 431, "65": 431, "066122": 431, "2002": 431, "cond": 431, "mat": 431, "0112143": 431, "branching_factor": 433, "ari": [433, 576], "branch": 433, "cannot": [433, 513, 576], "petersen": [434, 576], "2n": 434, "3n": 434, "watkin": 434, "denot": [434, 578], "extern": [434, 575], "polygon": 434, "shift": 434, "shell_layout": [434, 473, 576, 580], "7": [434, 473, 474, 481, 573, 580], "m\u00f6biu": 434, "kantor": 434, "13": [434, 573], "14": [434, 573], "theorem": [434, 481, 576], "tait": 434, "combinatori": 434, "theori": [434, 580], "152": 434, "164": 434, "s0021": 434, "9800": 434, "69": 434, "80116": 434, "column": [438, 576], "lollipop": [439, 576], "nor": 439, "graph_edge_betweenness_centr": 453, "noga": [455, 576], "alon": [455, 576], "lett": 455, "85": [455, 524], "2003": [455, 572, 576], "www": [455, 481, 495], "tau": 455, "ac": 455, "il": 455, "nogaa": 455, "lex2": 455, "graph_betweenness_centr": [468, 576], "strategi": [473, 474, 576], "aka": [473, 474], "slf": [473, 474], "dynam": [473, 474, 575, 576], "tie": [473, 474, 576], "uncolor": [473, 474, 576], "subset": [473, 474, 513, 524, 549, 552, 576], "problem": [473, 533, 572], "preset_color_fn": [473, 474, 576], "manual": [473, 474, 574, 576], "generalized_petersen_graph": [473, 576, 580], "draw": [473, 569, 570, 576], "node_color": [473, 570, 576, 577], "greedili": [474, 576], "cycle_graph": [474, 481, 576, 578], "edge_color": [474, 481, 570, 576], "edge_ab": [479, 576], "edge_ac": [479, 576], "edge_bc": [479, 576], "edge_ad": [479, 576], "out_graph": [479, 576], "out_edge_map": [479, 576], "simple_path_pair": 480, "longest_path": [480, 576], "z": 480, "misra": [481, 576], "gri": [481, 576], "proof": [481, 576], "vize": [481, 576], "1992": [481, 576], "utexa": 481, "edu": [481, 495, 504, 524], "psp": 481, "numpathsmap": 483, "trial": 489, "modul": [489, 576], "approxim": [489, 533, 576], "token": [489, 576], "swap": [489, 576], "permut": [489, 576], "miltzow": [489, 576], "et": [489, 572, 576], "al": [489, 572, 576], "2016": [489, 576], "1602": [489, 576], "05150": [489, 576], "rearrang": 489, "nstart": [495, 524], "08": 495, "hub": [495, 576], "author": [495, 576], "kleinberg": 495, "authorit": 495, "hyperlink": 495, "46": 495, "cornel": 495, "home": 495, "kleinber": 495, "auth": 495, "hyperbol": [496, 576], "geometr": [496, 526, 576], "usual": 496, "exp": 496, "sigmoid": 496, "arccosh": 496, "x_0": 496, "x_j": 496, "dimens": [496, 526], "x_d": 496, "th": 496, "hyperboloid": 496, "x_1": 496, "sharp": 496, "nonneg": [496, 534], "probabilist": 496, "nullgraph": [498, 506], "alp\u00e1r": 500, "j\u00fcttner": 500, "p\u00e9ter": 500, "madarasi": 500, "longer": [503, 573, 576], "global": 503, "local": [503, 574, 576], "planar": [504, 576], "iff": 504, "intersect": 504, "2009": [504, 572], "citeseerx": 504, "ist": 504, "psu": 504, "viewdoc": 504, "summari": 504, "217": 504, "9208": 504, "weakli": [506, 523, 571, 576], "first_lay": [510, 576], "index_output": [510, 576], "invalidnod": [510, 519], "lexicograph": 511, "ti": 511, "affect": 511, "comparison": [511, 575, 576, 580], "max_cardin": 513, "verify_optimum": 513, "cardin": 513, "blossom": 513, "augment": 513, "primal": 513, "dual": [513, 576], "invent": 513, "jack": 513, "edmond": 513, "untest": 513, "optimum": 513, "mostli": [513, 576, 580], "ofth": 513, "zvi": 513, "galil": 513, "survei": 513, "metric": [514, 526, 533, 576], "closur": [514, 533, 576], "forest": [515, 516], "kruskal": [515, 516], "keep_attribut": [518, 576], "__networkx_node__": [518, 576], "person": 524, "dangl": 524, "page": [524, 576], "brin": 524, "motwani": 524, "winograd": 524, "citat": 524, "rank": [524, 576], "bring": 524, "stanford": 524, "digit": 524, "technologi": 524, "1998": 524, "dbpub": 524, "8090": 524, "showdoc": 524, "fulltext": 524, "66": 524, "tri": [524, 576], "damp": 524, "uniform": 524, "distribut": [524, 574, 576], "outedg": 524, "accord": 524, "irreduc": 524, "radiu": [526, 570, 576], "dim": 526, "unit": 526, "cube": [526, 576], "uniformli": 526, "euclidean": 526, "minkowski": 526, "meet": 526, "graphml": [528, 576], "comprehens": 528, "easi": [528, 556], "properti": [528, 575, 578], "flexibl": [528, 580], "mechan": 528, "graphdraw": 528, "mix": 528, "unidirect": 528, "hyperedg": 528, "nest": 528, "port": 528, "domain": 528, "runtimeerror": [528, 576], "elementari": [530, 576], "johnson": [530, 572, 576], "1137": 530, "0204007": 530, "document": [530, 569, 576, 580], "l98": 530, "l222": 530, "terminal_nod": 533, "steiner": [533, 576], "regard": 533, "amoung": 533, "termin": [533, 576], "due": [533, 574, 576], "rather": [533, 576], "kou": [533, 576], "markowski": [533, 576], "berman": [533, 576], "fast": [533, 576], "acta": 533, "informatica": 533, "141": 533, "1981": [533, 576], "articl": [533, 576], "bf00288961": [533, 576], "kurt": 533, "mehlhorn": 533, "0020": [533, 576], "0190": [533, 576], "88": [533, 576], "90066": [533, 576], "stoer": [534, 576], "wagner": [534, 576], "stoer_simple_1997": 534, "conid": 534, "usiz": [534, 576], "mechthild": 534, "frank": [534, 576], "44": 534, "585": [534, 576], "591": 534, "1997": 534, "strongli": [535, 576], "kosaraju": 535, "earliest": 536, "reduct": [538, 576], "prime": 538, "pyvalueerror": 538, "action": [548, 555, 561, 576], "queue": [549, 552, 562, 576], "record": 556, "disregard": 556, "leaf": 558, "upon": [563, 564, 576], "emit": [563, 564, 576], "node_attr_fn": [569, 576, 577, 578, 580], "edge_attr_fn": [569, 578], "image_typ": 569, "pillow": [569, 576], "instruct": [569, 578], "disk": 569, "canon": 569, "cmap": [569, 570], "cmapx": 569, "cmapx_np": 569, "dia": 569, "gd": 569, "gd2": 569, "gif": 569, "hpgl": 569, "imap": 569, "imap_np": 569, "ismap": 569, "jpe": 569, "jpeg": 569, "jpg": 569, "mif": 569, "mp": 569, "pcl": 569, "pic": 569, "plain": 569, "ext": 569, "ps2": 569, "svg": 569, "svgz": 569, "vml": 569, "vmlz": 569, "vrml": 569, "vtx": 569, "wbmp": 569, "xdot": 569, "xlib": 569, "twopi": 569, "neato": [569, 577, 580], "circo": 569, "fdp": [569, 576], "sfdp": [569, 576], "yellow": [569, 576, 580], "blue": [569, 576, 580], "red": [569, 576], "directed_star_graph": [569, 576], "rgb": [569, 570, 576], "766x747": [569, 576], "arrow": [570, 576, 578, 580], "kwd": 570, "matplotlib": [570, 576, 577, 580], "mpl": [570, 576], "layout_funct": 570, "arrowhead": 570, "arrowstyl": 570, "arrowshead": 570, "arrow_s": [570, 575], "fancyarrowpatch": 570, "mutation_scal": 570, "info": 570, "node_list": [570, 575], "node_s": [570, 576], "vmin": [570, 576, 577], "vmax": [570, 576, 577], "scatter": 570, "1f78b4": [570, 576], "node_shap": 570, "shape": [570, 576, 577, 580], "pyplot": [570, 576, 577, 580], "marker": 570, "h": [570, 578], "transpar": 570, "colormap": [570, 577], "intens": 570, "linewidth": 570, "symbol": 570, "border": 570, "edge_cmap": 570, "edge_vmin": 570, "edge_vmax": 570, "word": 570, "solid": 570, "dash": 570, "linestyl": 570, "Or": [570, 576, 580], "font_siz": 570, "fontsiz": 570, "font_color": 570, "font": 570, "ie": 570, "font_weight": 570, "font_famili": 570, "san": 570, "serif": 570, "legend": 570, "connectionstyl": [570, 576], "curv": 570, "arc": [570, 578, 580], "rad": 570, "arc3": 570, "backend": [570, 575], "jupyt": 570, "plt": [570, 576, 577, 580], "competit": 572, "against": [572, 576], "popular": 572, "igraph": 572, "networkit": 572, "task": 572, "machin": 572, "intel": 572, "i9": 572, "9900k": 572, "60ghz": 572, "eight": 572, "16": [572, 576], "thead": 572, "32gb": 572, "ram": 572, "avaialbl": 572, "usa": 572, "road": 572, "9th": 572, "dimac": 572, "challeng": 572, "dataset": 572, "demetrescu": 572, "datta": 572, "third": 572, "citi": 572, "rome": 572, "lastli": 572, "fourth": 572, "answer": 572, "arg": 572, "databas": 572, "de": 572, "santo": 572, "goldberg": 572, "ninth": 572, "foggia": 572, "sanson": 572, "vento": 572, "recognit": 572, "1067": 572, "1079": 572, "studi": 573, "variou": [573, 575, 576], "licens": 573, "apach": 573, "host": 573, "inher": 573, "safeti": [573, 574], "significantli": [573, 576], "oppos": [573, 576], "publish": [573, 574, 576], "pre": [573, 574, 576], "binari": [573, 576, 580], "linux": [573, 574, 576], "x86": 573, "x86_64": [573, 574, 576], "aarch64": [573, 574, 576], "s390x": [573, 574, 576], "ppc64le": [573, 574, 576], "maco": [573, 574, 576], "arm64": [573, 574, 576], "window": [573, 574], "wish": 573, "expos": [573, 575, 576], "renam": [573, 576], "legaci": [573, 576], "now": [573, 576, 577, 578, 580], "usag": [573, 580], "came": 573, "tutori": [573, 577, 578], "guid": [573, 575, 580], "introduct": [573, 574, 576, 579], "contribut": [573, 576], "gap": [573, 576], "benchmark": 573, "pypi": [574, 576], "i686": 574, "64": [574, 576], "rustup": 574, "simpler": 574, "reli": [574, 576, 580], "properli": [574, 576], "prebuilt": 574, "pep": 574, "517": [574, 576], "setuptool": 574, "reciev": [574, 576], "again": [574, 576, 580], "strive": 574, "broken": 574, "level": [574, 575], "architectur": 574, "manylinux": 574, "2014": 574, "pp64le": 574, "musl": [574, 576], "newer": [574, 576], "ci": [574, 576], "upstream": [574, 576], "correctli": [574, 576], "best": [574, 578], "introductori": 575, "impli": [575, 578], "inspir": 575, "util": 575, "offer": 575, "decis": 575, "aspect": 575, "put": 575, "nx": [575, 576], "multidigraph": 575, "my_node_a": 575, "my_node_b": 575, "constraint": [575, 576, 580], "That": [575, 576], "migrat": 575, "similarli": [575, 580], "dist_matrix": 575, "extend_from": 575, "concis": 575, "graph_": 575, "digraph_": 575, "pretti": 575, "referenc": 575, "concept": [575, 576, 578], "dedic": [575, 580], "fridai": [575, 576, 580], "mondai": [575, 576, 580], "But": [575, 576, 578], "analog": [575, 576], "5pm": 575, "2pm": 575, "room": 575, "714": 575, "accessor": 575, "dtype": [575, 576], "astyp": 575, "to_numpy_matrix": 575, "to_numpy_arrai": 575, "to_numpy_recarrai": 575, "to_scipy_sparse_matrix": 575, "to_pandas_adjac": 575, "scipi": 575, "csr": 575, "spars": [575, 576], "per": [575, 576], "digraph_adjacency_matrix": [575, 576], "graph_adjacency_matrix": [575, 576], "networkx_draw": 575, "pygraphviz": 575, "varieti": 575, "strictli": [575, 576, 578], "retwork": [575, 576], "draw_networkx": 575, "fork": 575, "nodelist": 575, "arrows": 575, "mpl_drawer": [575, 576], "draw_networkx_edge_label": 575, "networkx_convert": [575, 576], "respons": 575, "accordingli": 575, "unwant": 575, "convert_rustworkx_to_networkx": 575, "isinst": 575, "matur": 575, "wide": [575, 580], "younger": 575, "enhanc": 575, "request": [575, 576], "issu": [575, 576], "priorit": 575, "bugfix": 576, "inadvert": 576, "to_dot": 576, "incorrectli": 576, "escap": 576, "quot": 576, "color_nod": [576, 577], "_node": 576, "422952": 576, "directed_hexagonal_lattice_graph": 576, "irregular": 576, "highlight": 576, "expans": 576, "previous": 576, "expand": 576, "abi": 576, "offici": 576, "importantli": 576, "70": 576, "promot": 576, "tier": 576, "has_nod": 576, "dag_algo": 576, "from_node_link_json_fil": 576, "parse_node_link_json": 576, "polynomi": 576, "brute": 576, "magnitud": 576, "address": 576, "experiment": 576, "christian": 576, "komusiewicz": 576, "sommer": 576, "gain": 576, "discuss": [576, 580], "lemma": 576, "thu": 576, "intermedi": 576, "speedup": 576, "40": 576, "nameabl": 576, "dorogovtsev_goltsev_mendes_graph": 576, "stablegraph": 576, "graphmap": 576, "contractnod": 576, "trait": 576, "graph_ext": 576, "contract_nod": [576, 578], "hasparalleledgesdirect": 576, "hasparalleledgesundirect": 576, "has_parallel_edg": 576, "noderemov": 576, "matrixgraph": 576, "hyperbolic_random_graph": 576, "sampl": 576, "sinh": 576, "14159": 576, "55": 576, "particularli": 576, "is_semi_connect": 576, "semi": 576, "gneric": 576, "indexpartitionblock": 576, "hexagonal_lattice_graph_weight": 576, "quadrat": 576, "remove_node_retain_edg": 576, "suppli": 576, "greedy_node_color_with_coloring_strategi": 576, "greedy_edge_color_with_coloring_strategi": 576, "preset_color": 576, "directed_sbm_random_graph": 576, "undirected_sbm_random_graph": 576, "sbm_random_graph": 576, "wheel": 576, "storag": 576, "mirror": 576, "onlin": 576, "meaningless": 576, "sizeabl": 576, "condition": 576, "temporari": 576, "find_cycl": 576, "bondari": 576, "didn": [576, 578], "smartli": 576, "special": 576, "scenario": 576, "nlabel": 576, "tooltip": 576, "ntooltip": 576, "107x202": 576, "750": 576, "draw_edg": 576, "labl": 576, "offset": 576, "draw_edge_label": 576, "align": 576, "774": 576, "panicexcept": 576, "1117": 576, "1130": 576, "long": [576, 580], "read_graphml": 576, "1140": 576, "blog": 576, "changelog": 576, "2024": 576, "m1": 576, "switch": 576, "tox": 576, "downgrad": 576, "directed_barabasi_albert_graph": 576, "barabasi_albert_graph": 576, "starting_graph": 576, "20": 576, "graph_all_shortest_path": 576, "shortest_path": 576, "heavy_square_graph": 576, "bridges_set": 576, "clear_edg": 576, "edge_indices_from_endpoint": 576, "filter_nod": 576, "abstract": 576, "filter_edg": 576, "substitute_node_with_subgraph": [576, 578], "sub_graph": 576, "___": 576, "stratifi": 576, "graphnotbipartit": 576, "directed_random_bipartite_graph": 576, "undirected_random_bipartite_graph": 576, "bipartite_layout": 576, "66666667": 576, "entir": 576, "invalidmap": 576, "graph_token_swapp": 576, "feasibl": 576, "path_exist": 576, "greedy_node_color_with_preset_color": 576, "greedy_node_color": 576, "transtiv": 576, "tr": 576, "ref": 576, "wikipedia": 576, "wiki": 576, "msrv": 576, "56": 576, "adopt": [576, 580], "difficult": 576, "catch": 576, "unhandl": 576, "token_swapp": 576, "vec": 576, "nodeindex": 576, "mapnotposs": 576, "ungraph": 576, "from_edg": 576, "hashmap": 576, "err": 576, "panick": 576, "funciton": 576, "pllatform": 576, "infrastructur": 576, "hopefulli": 576, "shouldn": 576, "likelihood": 576, "precompil": [576, 580], "polici": 576, "74": 576, "deprecationwarn": 576, "graph_all_simple_path": 576, "digraph_all_simple_path": 576, "955": 576, "gnp_random_graph": 576, "pin": 576, "seri": [576, 578], "unreleas": 576, "soon": 576, "prevent": [576, 580], "manag": 576, "older": 576, "incompat": 576, "forcibli": 576, "alongsid": 576, "suport": 576, "make_symmetr": 576, "83x443": 576, "5x5": 576, "grid_graph": 576, "btw": [576, 577], "hub_scor": 576, "650": 576, "2f": [576, 577], "centrality_scor": 576, "binomial_tree_graph": 576, "31": 576, "28": 576, "path_set": 576, "longest_simple_path_multiple_target": 576, "hashset": 576, "pagerank_scor": 576, "gnm_random_graph": 576, "random_geometric_graph": 576, "bread": 576, "find_predecessor_node_by_edg": 576, "colorbar": [576, 577], "rcparam": [576, 577], "figsiz": [576, 577], "gca": [576, 577], "sm": [576, 577], "cm": [576, 577], "scalarmapp": [576, 577], "norm": [576, 577], "titl": [576, 577], "1500x1000": [576, 577], "empty_graph": 576, "directed_empty_graph": 576, "directed_complete_graph": 576, "mesh_graph": [576, 580], "directed_mesh_graph": 576, "gnp_directed_random_graph": 576, "gnp_undirected_random_graph": 576, "situat": 576, "48": 576, "well": 576, "facilit": 576, "deepcopi": 576, "836": 576, "flatten": 576, "744": 576, "node_remov": 576, "reflect": 576, "previosuli": 576, "certain": 576, "696": 576, "formerli": 576, "maintain": 576, "notif": 576, "manylinux2014": 576, "parser": 576, "node_link_json": 576, "cut_val": 576, "orang": 576, "graph_tensor_product": 576, "digraph_tensor_product": 576, "all_simple_paths_multiple_target": 576, "algo": 576, "dictmap": 576, "preserve_attribut": 576, "k_5": 576, "bfs_undirect": 576, "xml": [576, 580], "manylinux2010": 576, "glibc": 576, "sdist": 576, "41": 576, "rustc": 576, "bfsssuccessor": 576, "slice": 576, "__getitem__": 576, "did": 576, "590": 576, "amd": 576, "digraph_cartesian_product": 576, "graph_cartesian_product": 576, "throughout": 576, "eventu": 576, "account": 576, "barbell_graph": 576, "graph_bfs_search": 576, "digraph_bfs_search": 576, "remain": [576, 580], "comp": 576, "150": 576, "color_edg": 576, "edges_in_chain": 576, "idx": 576, "adj_matrix": 576, "1j": 576, "2j": 576, "5j": 576, "multi": 576, "guard": 576, "abc": 576, "graph_dfs_search": 576, "digraph_dfs_search": 576, "graph_dijkstra_search": 576, "digraph_dijkstra_search": 576, "dijkstratreeedgesrecord": 576, "discover_vertex": 576, "edge_relax": 576, "incident_edg": [576, 580], "incident_edge_index_map": 576, "endoint": 576, "achiev": 576, "full_rary_tre": 576, "lollipop_graph": [576, 580], "abil": 576, "freed": 576, "workspac": 576, "downstream": 576, "stabil": 576, "necessarili": 576, "turquois": 576, "fuschia": 576, "rx_graph": 576, "arguabl": 576, "desir": 576, "undirected_gnm_random_graph": 576, "42": [576, 580], "d_mat": 576, "avg_shortest_path": 576, "directed_binomial_tree_graph": 576, "overflow": 576, "panic": 576, "exceed": 576, "457": 576, "increment": 576, "515": 576, "oversight": 576, "525": 576, "heavy_hex_graph": [576, 580], "directed_heavy_hex_graph": 576, "directed_heavy_square_graph": 576, "pyo3_runtim": 576, "452": 576, "graph_union": 576, "digraph_union": 576, "unifi": 576, "a_0": 576, "a_1": 576, "b_0": 576, "b_1": 576, "find_node_by_weight": 576, "432": 576, "429": 576, "hash": 576, "367": 576, "slew": 576, "1080": 576, "0022250x": 576, "9990249": 576, "secondli": 576, "edge_subgraph": 576, "ap": 576, "prx": 576, "1103": 576, "physrevx": 576, "011022": 576, "read_edge_list": [576, 580], "first_edg": 576, "second_edg": 576, "original_graph": 576, "_sourc": 576, "_target": 576, "_weight": 576, "17": 576, "21": 576, "22": 576, "23": 576, "26": 576, "27": 576, "to_direct": 576, "rework": 576, "graph_floyd_warshal": 576, "digraph_floyd_warshal": 576, "to_undirect": 576, "control": 576, "undirected_graph": 576, "digraph_num_shortest_paths_unweight": 576, "graph_num_shortest_paths_unweight": 576, "directed_grid_graph": 576, "33": 576, "path_length": 576, "lambda_": 576, "fashion": 576, "explicit": 576, "408": 576, "digraph_dijkstra_shortest_path": 576, "graph_dijkstra_shortest_path": 576, "digraph_all_pairs_dijkstra_shortest_path": 576, "graph_all_pairs_dijkstra_shortest_path": 576, "387": 576, "consecut": 576, "373": 576, "347": 576, "plethora": 576, "drawer": 576, "spring_layout": [576, 580], "convienc": 576, "preclud": 576, "95": 576, "random_layout": 576, "graph_random_layout": 576, "diraph_random_layout": 576, "circl": [576, 577, 580], "fixeds": 576, "540x503": 576, "immut": 576, "coeffici": 576, "digraph_all_pairs_dijkstra_path_length": 576, "graph_all_pairs_dijkstra_path_length": 576, "edge_index_map": [576, 580], "source_node_index": 576, "target_node_index": 576, "find_successors_by_edg": 576, "find_predecessors_by_edg": 576, "mst": 576, "tweak": 576, "00ffff": 576, "directed_cycle_graph": [576, 578], "circular_layout": 576, "spiral_layout": 576, "795x1031": 576, "336x339": 576, "write_edge_list": 576, "digraph_k_shortest_path_length": 576, "graph_k_shortest_path_length": 576, "digraph_dijkstra_shortest_path_length": 576, "graph_dijkstra_shortest_path_length": 576, "predecessor_indic": 576, "dispatch": 576, "mistakenli": 576, "appl": 576, "arm": 576, "outward": 576, "371x155": 576, "is_maxmimal_match": 576, "disallow": 576, "145x291": 576, "143x291": 576, "queri": 576, "__str__": [576, 580], "human": 576, "readabl": [576, 580], "__hash__": 576, "unhash": 576, "update_edg": [576, 580], "garbag": 576, "collector": 576, "know": 576, "integr": [576, 580], "250": 576, "pickl": 576, "multiprocess": 576, "lookup": 576, "graph_astar_shortest_path": 576, "digraph_astar_shortest_path": 576, "digraph_dfs_edg": 576, "graph_dfs_edg": 576, "lock": 576, "meant": 576, "focu": 576, "commonli": 576, "is_symmetr": 576, "directed_gnm_random_graph": 576, "remove_edges_from": [576, 580], "removed_edges_from": 576, "graph_distance_matrix": 576, "digraph_distance_matrix": 576, "insert_node_on_in_edg": 576, "insert_node_on_out_edg": 576, "insert_node_on_in_edges_multipl": 576, "insert_node_on_out_edges_multipl": 576, "contigu": [576, 577, 580], "fortran": 576, "easier": 576, "defer": 576, "convers": 576, "bottleneck": 576, "especi": [576, 580], "across": 576, "172": 576, "eas": 576, "graphivz": 576, "compos": 576, "predecesor": 576, "warshal": 576, "segfault": 576, "backtrac": 576, "problemat": 576, "thank": 576, "contributor": 576, "find_adjacent_node_by_edg": 576, "remove_nodes_from": [576, 580], "No": 576, "export": 576, "pprint": 577, "007277212457600987": 577, "02047046385621779": 577, "07491079688119466": 577, "04242324126690451": 577, "09205321351482312": 577, "magma": 577, "to_hex": 577, "keep_alpha": 577, "1076x910": 577, "explor": 578, "primer": 578, "broader": 578, "restrict": 578, "simultan": 578, "walk": 578, "imposs": 578, "dependency_dag": 578, "job_a": 578, "job_b": 578, "job_c": 578, "job_d": 578, "job_": 578, "job_f": 578, "330x347": 578, "relationship": 578, "releationship": 578, "topo_sort": 578, "job_index": 578, "sdk": 578, "quantum": 578, "acceler": 578, "routin": 578, "coher": 578, "gate": 578, "reset": 578, "graphic": 578, "q_0": 578, "q_1": 578, "mea": 578, "beyond": 578, "fact": 578, "qubit": 578, "c_0": 578, "c_1": 578, "deped": 578, "in_nod": 578, "out_nod": 578, "h_gate": 578, "cx": 578, "cx_gate": 578, "meas_q0": 578, "meas_q1": 578, "q0": 578, "q1": 578, "401x523": 578, "flow": 578, "transform": 578, "hardwar": 578, "translat": 578, "devic": 578, "qpu": 578, "translation_matrix": 578, "rz": 578, "pi": 578, "sx": 578, "insruct": 578, "hardware_instruct": 578, "subcircuit": 578, "gate_index": 578, "edge_v": 578, "equivalent_subcircuit": 578, "map_fn": 578, "401x755": 578, "analyz": 578, "shorter": 578, "bit_nod": 578, "unitari": 578, "simplif": 578, "newest": 578, "nod": 578, "_node_id": 578, "wouldn": 578, "serv": 580, "past": 580, "shorten": 580, "convent": 580, "compris": 580, "green": 580, "first_index_data": 580, "first_index_edgepoint": 580, "helper": 580, "remove_edg": 580, "remove_edge_from_index": 580, "absent": 580, "last_index": 580, "simplic": 580, "graphnod": 580, "graphedg": 580, "edgenod": 580, "popul": 580, "notion": 580, "show": 580, "lolipop_graph": 580, "combined_graph": 580, "new_nod": 580, "spam": 580, "375": 580, "subax1": 580, "subplot": 580, "121": 580, "subax2": 580, "122": 580, "attr_dict": 580, "fill_color": 580, "syndrom": 580, "elif": 580, "fontcolor": 580, "2132x2297": 580, "decid": 580, "few": 580, "consider": 580, "choic": 580}, "objects": {"rustworkx": [[25, 0, 1, "", "AllPairsPathLengthMapping"], [29, 0, 1, "", "AllPairsPathMapping"], [33, 0, 1, "", "BFSPredecessors"], [34, 0, 1, "", "BFSSuccessors"], [35, 0, 1, "", "BiconnectedComponents"], [39, 0, 1, "", "CentralityMapping"], [43, 0, 1, "", "Chains"], [44, 0, 1, "", "ColoringStrategy"], [45, 3, 1, "", "DAGHasCycle"], [46, 3, 1, "", "DAGWouldCycle"], [47, 0, 1, "", "EdgeCentralityMapping"], [51, 0, 1, "", "EdgeIndexMap"], [55, 0, 1, "", "EdgeIndices"], [56, 0, 1, "", "EdgeList"], [57, 3, 1, "", "GraphNotBipartite"], [58, 0, 1, "", "IndexPartitionBlock"], [59, 3, 1, "", "InvalidMapping"], [60, 3, 1, "", "InvalidNode"], [61, 3, 1, "", "JSONSerializationError"], [62, 3, 1, "", "NegativeCycle"], [63, 3, 1, "", "NoEdgeBetweenNodes"], [64, 3, 1, "", "NoPathFound"], [65, 3, 1, "", "NoSuitableNeighbors"], [66, 0, 1, "", "NodeIndices"], [67, 0, 1, "", "NodeMap"], [71, 3, 1, "", "NullGraph"], [72, 0, 1, "", "PathLengthMapping"], [76, 0, 1, "", "PathMapping"], [80, 0, 1, "", "Pos2DMapping"], [84, 0, 1, "", "ProductNodeMap"], [88, 0, 1, "", "PyDAG"], [169, 0, 1, "", "PyDiGraph"], [250, 0, 1, "", "PyGraph"], [308, 0, 1, "", "RelationalCoarsestPartition"], [309, 0, 1, "", "TopologicalSorter"], [313, 0, 1, "", "WeightedEdgeList"], [314, 4, 1, "", "adjacency_matrix"], [315, 4, 1, "", "all_pairs_all_simple_paths"], [316, 4, 1, "", "all_pairs_bellman_ford_path_lengths"], [317, 4, 1, "", "all_pairs_bellman_ford_shortest_paths"], [318, 4, 1, "", "all_pairs_dijkstra_path_lengths"], [319, 4, 1, "", "all_pairs_dijkstra_shortest_paths"], [320, 4, 1, "", "all_shortest_paths"], [321, 4, 1, "", "all_simple_paths"], [322, 4, 1, "", "ancestors"], [323, 4, 1, "", "articulation_points"], [324, 4, 1, "", "astar_shortest_path"], [325, 4, 1, "", "barabasi_albert_graph"], [326, 4, 1, "", "bellman_ford_shortest_path_lengths"], [327, 4, 1, "", "bellman_ford_shortest_paths"], [328, 4, 1, "", "betweenness_centrality"], [329, 4, 1, "", "bfs_predecessors"], [330, 4, 1, "", "bfs_search"], [331, 4, 1, "", "bfs_successors"], [332, 4, 1, "", "biconnected_components"], [333, 4, 1, "", "bipartite_layout"], [334, 4, 1, "", "bridges"], [335, 4, 1, "", "cartesian_product"], [336, 4, 1, "", "chain_decomposition"], [337, 4, 1, "", "circular_layout"], [338, 4, 1, "", "closeness_centrality"], [339, 4, 1, "", "collect_bicolor_runs"], [340, 4, 1, "", "collect_runs"], [341, 4, 1, "", "complement"], [342, 4, 1, "", "connected_components"], [343, 4, 1, "", "connected_subgraphs"], [344, 4, 1, "", "core_number"], [345, 4, 1, "", "cycle_basis"], [346, 4, 1, "", "dag_longest_path"], [347, 4, 1, "", "dag_longest_path_length"], [348, 4, 1, "", "dag_weighted_longest_path"], [349, 4, 1, "", "dag_weighted_longest_path_length"], [350, 4, 1, "", "descendants"], [351, 4, 1, "", "dfs_edges"], [352, 4, 1, "", "dfs_search"], [353, 4, 1, "", "digraph_adjacency_matrix"], [354, 4, 1, "", "digraph_all_pairs_all_simple_paths"], [355, 4, 1, "", "digraph_all_pairs_bellman_ford_path_lengths"], [356, 4, 1, "", "digraph_all_pairs_bellman_ford_shortest_paths"], [357, 4, 1, "", "digraph_all_pairs_dijkstra_path_lengths"], [358, 4, 1, "", "digraph_all_pairs_dijkstra_shortest_paths"], [359, 4, 1, "", "digraph_all_shortest_paths"], [360, 4, 1, "", "digraph_all_simple_paths"], [361, 4, 1, "", "digraph_astar_shortest_path"], [362, 4, 1, "", "digraph_bellman_ford_shortest_path_lengths"], [363, 4, 1, "", "digraph_betweenness_centrality"], [364, 4, 1, "", "digraph_bfs_search"], [365, 4, 1, "", "digraph_bipartite_layout"], [366, 4, 1, "", "digraph_cartesian_product"], [367, 4, 1, "", "digraph_circular_layout"], [368, 4, 1, "", "digraph_closeness_centrality"], [369, 4, 1, "", "digraph_complement"], [370, 4, 1, "", "digraph_core_number"], [371, 4, 1, "", "digraph_dfs_edges"], [372, 4, 1, "", "digraph_dfs_search"], [373, 4, 1, "", "digraph_dijkstra_search"], [374, 4, 1, "", "digraph_dijkstra_shortest_path_lengths"], [375, 4, 1, "", "digraph_dijkstra_shortest_paths"], [376, 4, 1, "", "digraph_distance_matrix"], [377, 4, 1, "", "digraph_edge_betweenness_centrality"], [378, 4, 1, "", "digraph_eigenvector_centrality"], [379, 4, 1, "", "digraph_find_cycle"], [380, 4, 1, "", "digraph_floyd_warshall"], [381, 4, 1, "", "digraph_floyd_warshall_numpy"], [382, 4, 1, "", "digraph_floyd_warshall_successor_and_distance"], [383, 4, 1, "", "digraph_is_isomorphic"], [384, 4, 1, "", "digraph_is_subgraph_isomorphic"], [385, 4, 1, "", "digraph_k_shortest_path_lengths"], [386, 4, 1, "", "digraph_katz_centrality"], [387, 4, 1, "", "digraph_longest_simple_path"], [388, 4, 1, "", "digraph_maximum_bisimulation"], [389, 4, 1, "", "digraph_node_link_json"], [390, 4, 1, "", "digraph_num_shortest_paths_unweighted"], [391, 4, 1, "", "digraph_random_layout"], [392, 4, 1, "", "digraph_shell_layout"], [393, 4, 1, "", "digraph_spiral_layout"], [394, 4, 1, "", "digraph_spring_layout"], [395, 4, 1, "", "digraph_tensor_product"], [396, 4, 1, "", "digraph_transitivity"], [397, 4, 1, "", "digraph_union"], [398, 4, 1, "", "digraph_unweighted_average_shortest_path_length"], [399, 4, 1, "", "digraph_vf2_mapping"], [400, 4, 1, "", "dijkstra_search"], [401, 4, 1, "", "dijkstra_shortest_path_lengths"], [402, 4, 1, "", "dijkstra_shortest_paths"], [403, 4, 1, "", "directed_barabasi_albert_graph"], [404, 4, 1, "", "directed_gnm_random_graph"], [405, 4, 1, "", "directed_gnp_random_graph"], [406, 4, 1, "", "directed_random_bipartite_graph"], [407, 4, 1, "", "directed_sbm_random_graph"], [408, 4, 1, "", "distance_matrix"], [409, 4, 1, "", "edge_betweenness_centrality"], [410, 4, 1, "", "eigenvector_centrality"], [411, 4, 1, "", "find_negative_cycle"], [412, 4, 1, "", "floyd_warshall"], [413, 4, 1, "", "floyd_warshall_numpy"], [414, 4, 1, "", "floyd_warshall_successor_and_distance"], [415, 4, 1, "", "from_node_link_json_file"], [443, 4, 1, "", "graph_adjacency_matrix"], [444, 4, 1, "", "graph_all_pairs_all_simple_paths"], [445, 4, 1, "", "graph_all_pairs_bellman_ford_path_lengths"], [446, 4, 1, "", "graph_all_pairs_bellman_ford_shortest_paths"], [447, 4, 1, "", "graph_all_pairs_dijkstra_path_lengths"], [448, 4, 1, "", "graph_all_pairs_dijkstra_shortest_paths"], [449, 4, 1, "", "graph_all_shortest_paths"], [450, 4, 1, "", "graph_all_simple_paths"], [451, 4, 1, "", "graph_astar_shortest_path"], [452, 4, 1, "", "graph_bellman_ford_shortest_path_lengths"], [453, 4, 1, "", "graph_betweenness_centrality"], [454, 4, 1, "", "graph_bfs_search"], [455, 4, 1, "", "graph_bipartite_edge_color"], [456, 4, 1, "", "graph_bipartite_layout"], [457, 4, 1, "", "graph_cartesian_product"], [458, 4, 1, "", "graph_circular_layout"], [459, 4, 1, "", "graph_closeness_centrality"], [460, 4, 1, "", "graph_complement"], [461, 4, 1, "", "graph_core_number"], [462, 4, 1, "", "graph_dfs_edges"], [463, 4, 1, "", "graph_dfs_search"], [464, 4, 1, "", "graph_dijkstra_search"], [465, 4, 1, "", "graph_dijkstra_shortest_path_lengths"], [466, 4, 1, "", "graph_dijkstra_shortest_paths"], [467, 4, 1, "", "graph_distance_matrix"], [468, 4, 1, "", "graph_edge_betweenness_centrality"], [469, 4, 1, "", "graph_eigenvector_centrality"], [470, 4, 1, "", "graph_floyd_warshall"], [471, 4, 1, "", "graph_floyd_warshall_numpy"], [472, 4, 1, "", "graph_floyd_warshall_successor_and_distance"], [473, 4, 1, "", "graph_greedy_color"], [474, 4, 1, "", "graph_greedy_edge_color"], [475, 4, 1, "", "graph_is_isomorphic"], [476, 4, 1, "", "graph_is_subgraph_isomorphic"], [477, 4, 1, "", "graph_k_shortest_path_lengths"], [478, 4, 1, "", "graph_katz_centrality"], [479, 4, 1, "", "graph_line_graph"], [480, 4, 1, "", "graph_longest_simple_path"], [481, 4, 1, "", "graph_misra_gries_edge_color"], [482, 4, 1, "", "graph_node_link_json"], [483, 4, 1, "", "graph_num_shortest_paths_unweighted"], [484, 4, 1, "", "graph_random_layout"], [485, 4, 1, "", "graph_shell_layout"], [486, 4, 1, "", "graph_spiral_layout"], [487, 4, 1, "", "graph_spring_layout"], [488, 4, 1, "", "graph_tensor_product"], [489, 4, 1, "", "graph_token_swapper"], [490, 4, 1, "", "graph_transitivity"], [491, 4, 1, "", "graph_union"], [492, 4, 1, "", "graph_unweighted_average_shortest_path_length"], [493, 4, 1, "", "graph_vf2_mapping"], [494, 4, 1, "", "has_path"], [495, 4, 1, "", "hits"], [496, 4, 1, "", "hyperbolic_random_graph"], [497, 4, 1, "", "is_bipartite"], [498, 4, 1, "", "is_connected"], [499, 4, 1, "", "is_directed_acyclic_graph"], [500, 4, 1, "", "is_isomorphic"], [501, 4, 1, "", "is_isomorphic_node_match"], [502, 4, 1, "", "is_matching"], [503, 4, 1, "", "is_maximal_matching"], [504, 4, 1, "", "is_planar"], [505, 4, 1, "", "is_subgraph_isomorphic"], [506, 4, 1, "", "is_weakly_connected"], [507, 4, 1, "", "isolates"], [508, 4, 1, "", "k_shortest_path_lengths"], [509, 4, 1, "", "katz_centrality"], [510, 4, 1, "", "layers"], [511, 4, 1, "", "lexicographical_topological_sort"], [512, 4, 1, "", "longest_simple_path"], [513, 4, 1, "", "max_weight_matching"], [514, 4, 1, "", "metric_closure"], [515, 4, 1, "", "minimum_spanning_edges"], [516, 4, 1, "", "minimum_spanning_tree"], [517, 4, 1, "", "negative_edge_cycle"], [518, 4, 1, "", "networkx_converter"], [519, 4, 1, "", "node_connected_component"], [520, 4, 1, "", "node_link_json"], [521, 4, 1, "", "num_shortest_paths_unweighted"], [522, 4, 1, "", "number_connected_components"], [523, 4, 1, "", "number_weakly_connected_components"], [524, 4, 1, "", "pagerank"], [525, 4, 1, "", "parse_node_link_json"], [526, 4, 1, "", "random_geometric_graph"], [527, 4, 1, "", "random_layout"], [528, 4, 1, "", "read_graphml"], [529, 4, 1, "", "shell_layout"], [530, 4, 1, "", "simple_cycles"], [531, 4, 1, "", "spiral_layout"], [532, 4, 1, "", "spring_layout"], [533, 4, 1, "", "steiner_tree"], [534, 4, 1, "", "stoer_wagner_min_cut"], [535, 4, 1, "", "strongly_connected_components"], [536, 4, 1, "", "topological_generations"], [537, 4, 1, "", "topological_sort"], [538, 4, 1, "", "transitive_reduction"], [539, 4, 1, "", "transitivity"], [540, 4, 1, "", "two_color"], [541, 4, 1, "", "undirected_gnm_random_graph"], [542, 4, 1, "", "undirected_gnp_random_graph"], [543, 4, 1, "", "undirected_random_bipartite_graph"], [544, 4, 1, "", "undirected_sbm_random_graph"], [545, 4, 1, "", "union"], [546, 4, 1, "", "unweighted_average_shortest_path_length"], [547, 4, 1, "", "vf2_mapping"], [571, 4, 1, "", "weakly_connected_components"]], "rustworkx.AllPairsPathLengthMapping": [[26, 1, 1, "", "items"], [27, 1, 1, "", "keys"], [28, 1, 1, "", "values"]], "rustworkx.AllPairsPathMapping": [[30, 1, 1, "", "items"], [31, 1, 1, "", "keys"], [32, 1, 1, "", "values"]], "rustworkx.BiconnectedComponents": [[36, 1, 1, "", "items"], [37, 1, 1, "", "keys"], [38, 1, 1, "", "values"]], "rustworkx.CentralityMapping": [[40, 1, 1, "", "items"], [41, 1, 1, "", "keys"], [42, 1, 1, "", "values"]], "rustworkx.ColoringStrategy": [[44, 2, 1, "", "Degree"], [44, 2, 1, "", "IndependentSet"], [44, 2, 1, "", "Saturation"]], "rustworkx.EdgeCentralityMapping": [[48, 1, 1, "", "items"], [49, 1, 1, "", "keys"], [50, 1, 1, "", "values"]], "rustworkx.EdgeIndexMap": [[52, 1, 1, "", "items"], [53, 1, 1, "", "keys"], [54, 1, 1, "", "values"]], "rustworkx.NodeMap": [[68, 1, 1, "", "items"], [69, 1, 1, "", "keys"], [70, 1, 1, "", "values"]], "rustworkx.PathLengthMapping": [[73, 1, 1, "", "items"], [74, 1, 1, "", "keys"], [75, 1, 1, "", "values"]], "rustworkx.PathMapping": [[77, 1, 1, "", "items"], [78, 1, 1, "", "keys"], [79, 1, 1, "", "values"]], "rustworkx.Pos2DMapping": [[81, 1, 1, "", "items"], [82, 1, 1, "", "keys"], [83, 1, 1, "", "values"]], "rustworkx.ProductNodeMap": [[85, 1, 1, "", "items"], [86, 1, 1, "", "keys"], [87, 1, 1, "", "values"]], "rustworkx.PyDAG": [[89, 1, 1, "", "add_child"], [90, 1, 1, "", "add_edge"], [91, 1, 1, "", "add_edges_from"], [92, 1, 1, "", "add_edges_from_no_data"], [93, 1, 1, "", "add_node"], [94, 1, 1, "", "add_nodes_from"], [95, 1, 1, "", "add_parent"], [96, 1, 1, "", "adj"], [97, 1, 1, "", "adj_direction"], [88, 2, 1, "", "attrs"], [88, 2, 1, "", "check_cycle"], [98, 1, 1, "", "clear"], [99, 1, 1, "", "clear_edges"], [100, 1, 1, "", "compose"], [101, 1, 1, "", "contract_nodes"], [102, 1, 1, "", "copy"], [103, 1, 1, "", "edge_index_map"], [104, 1, 1, "", "edge_indices"], [105, 1, 1, "", "edge_indices_from_endpoints"], [106, 1, 1, "", "edge_list"], [107, 1, 1, "", "edge_subgraph"], [108, 1, 1, "", "edges"], [109, 1, 1, "", "extend_from_edge_list"], [110, 1, 1, "", "extend_from_weighted_edge_list"], [111, 1, 1, "", "filter_edges"], [112, 1, 1, "", "filter_nodes"], [113, 1, 1, "", "find_adjacent_node_by_edge"], [114, 1, 1, "", "find_node_by_weight"], [115, 1, 1, "", "find_predecessor_node_by_edge"], [116, 1, 1, "", "find_predecessors_by_edge"], [117, 1, 1, "", "find_successors_by_edge"], [118, 1, 1, "", "from_adjacency_matrix"], [119, 1, 1, "", "from_complex_adjacency_matrix"], [120, 1, 1, "", "get_all_edge_data"], [121, 1, 1, "", "get_edge_data"], [122, 1, 1, "", "get_edge_data_by_index"], [123, 1, 1, "", "get_edge_endpoints_by_index"], [124, 1, 1, "", "get_node_data"], [125, 1, 1, "", "has_edge"], [126, 1, 1, "", "has_node"], [127, 1, 1, "", "has_parallel_edges"], [128, 1, 1, "", "in_degree"], [129, 1, 1, "", "in_edges"], [130, 1, 1, "", "incident_edge_index_map"], [131, 1, 1, "", "incident_edges"], [132, 1, 1, "", "insert_node_on_in_edges"], [133, 1, 1, "", "insert_node_on_in_edges_multiple"], [134, 1, 1, "", "insert_node_on_out_edges"], [135, 1, 1, "", "insert_node_on_out_edges_multiple"], [136, 1, 1, "", "is_symmetric"], [137, 1, 1, "", "make_symmetric"], [138, 1, 1, "", "merge_nodes"], [88, 2, 1, "", "multigraph"], [139, 1, 1, "", "neighbors"], [140, 1, 1, "", "node_indexes"], [141, 1, 1, "", "node_indices"], [142, 1, 1, "", "nodes"], [143, 1, 1, "", "num_edges"], [144, 1, 1, "", "num_nodes"], [145, 1, 1, "", "out_degree"], [146, 1, 1, "", "out_edges"], [147, 1, 1, "", "predecessor_indices"], [148, 1, 1, "", "predecessors"], [149, 1, 1, "", "read_edge_list"], [150, 1, 1, "", "remove_edge"], [151, 1, 1, "", "remove_edge_from_index"], [152, 1, 1, "", "remove_edges_from"], [153, 1, 1, "", "remove_node"], [154, 1, 1, "", "remove_node_retain_edges"], [155, 1, 1, "", "remove_node_retain_edges_by_id"], [156, 1, 1, "", "remove_node_retain_edges_by_key"], [157, 1, 1, "", "remove_nodes_from"], [158, 1, 1, "", "reverse"], [159, 1, 1, "", "subgraph"], [160, 1, 1, "", "substitute_node_with_subgraph"], [161, 1, 1, "", "successor_indices"], [162, 1, 1, "", "successors"], [163, 1, 1, "", "to_dot"], [164, 1, 1, "", "to_undirected"], [165, 1, 1, "", "update_edge"], [166, 1, 1, "", "update_edge_by_index"], [167, 1, 1, "", "weighted_edge_list"], [168, 1, 1, "", "write_edge_list"]], "rustworkx.PyDiGraph": [[170, 1, 1, "", "add_child"], [171, 1, 1, "", "add_edge"], [172, 1, 1, "", "add_edges_from"], [173, 1, 1, "", "add_edges_from_no_data"], [174, 1, 1, "", "add_node"], [175, 1, 1, "", "add_nodes_from"], [176, 1, 1, "", "add_parent"], [177, 1, 1, "", "adj"], [178, 1, 1, "", "adj_direction"], [169, 2, 1, "", "attrs"], [169, 2, 1, "", "check_cycle"], [179, 1, 1, "", "clear"], [180, 1, 1, "", "clear_edges"], [181, 1, 1, "", "compose"], [182, 1, 1, "", "contract_nodes"], [183, 1, 1, "", "copy"], [184, 1, 1, "", "edge_index_map"], [185, 1, 1, "", "edge_indices"], [186, 1, 1, "", "edge_indices_from_endpoints"], [187, 1, 1, "", "edge_list"], [188, 1, 1, "", "edge_subgraph"], [189, 1, 1, "", "edges"], [190, 1, 1, "", "extend_from_edge_list"], [191, 1, 1, "", "extend_from_weighted_edge_list"], [192, 1, 1, "", "filter_edges"], [193, 1, 1, "", "filter_nodes"], [194, 1, 1, "", "find_adjacent_node_by_edge"], [195, 1, 1, "", "find_node_by_weight"], [196, 1, 1, "", "find_predecessor_node_by_edge"], [197, 1, 1, "", "find_predecessors_by_edge"], [198, 1, 1, "", "find_successors_by_edge"], [199, 1, 1, "", "from_adjacency_matrix"], [200, 1, 1, "", "from_complex_adjacency_matrix"], [201, 1, 1, "", "get_all_edge_data"], [202, 1, 1, "", "get_edge_data"], [203, 1, 1, "", "get_edge_data_by_index"], [204, 1, 1, "", "get_edge_endpoints_by_index"], [205, 1, 1, "", "get_node_data"], [206, 1, 1, "", "has_edge"], [207, 1, 1, "", "has_node"], [208, 1, 1, "", "has_parallel_edges"], [209, 1, 1, "", "in_degree"], [210, 1, 1, "", "in_edges"], [211, 1, 1, "", "incident_edge_index_map"], [212, 1, 1, "", "incident_edges"], [213, 1, 1, "", "insert_node_on_in_edges"], [214, 1, 1, "", "insert_node_on_in_edges_multiple"], [215, 1, 1, "", "insert_node_on_out_edges"], [216, 1, 1, "", "insert_node_on_out_edges_multiple"], [217, 1, 1, "", "is_symmetric"], [218, 1, 1, "", "make_symmetric"], [219, 1, 1, "", "merge_nodes"], [169, 2, 1, "", "multigraph"], [220, 1, 1, "", "neighbors"], [221, 1, 1, "", "node_indexes"], [222, 1, 1, "", "node_indices"], [223, 1, 1, "", "nodes"], [224, 1, 1, "", "num_edges"], [225, 1, 1, "", "num_nodes"], [226, 1, 1, "", "out_degree"], [227, 1, 1, "", "out_edges"], [228, 1, 1, "", "predecessor_indices"], [229, 1, 1, "", "predecessors"], [230, 1, 1, "", "read_edge_list"], [231, 1, 1, "", "remove_edge"], [232, 1, 1, "", "remove_edge_from_index"], [233, 1, 1, "", "remove_edges_from"], [234, 1, 1, "", "remove_node"], [235, 1, 1, "", "remove_node_retain_edges"], [236, 1, 1, "", "remove_node_retain_edges_by_id"], [237, 1, 1, "", "remove_node_retain_edges_by_key"], [238, 1, 1, "", "remove_nodes_from"], [239, 1, 1, "", "reverse"], [240, 1, 1, "", "subgraph"], [241, 1, 1, "", "substitute_node_with_subgraph"], [242, 1, 1, "", "successor_indices"], [243, 1, 1, "", "successors"], [244, 1, 1, "", "to_dot"], [245, 1, 1, "", "to_undirected"], [246, 1, 1, "", "update_edge"], [247, 1, 1, "", "update_edge_by_index"], [248, 1, 1, "", "weighted_edge_list"], [249, 1, 1, "", "write_edge_list"]], "rustworkx.PyGraph": [[251, 1, 1, "", "add_edge"], [252, 1, 1, "", "add_edges_from"], [253, 1, 1, "", "add_edges_from_no_data"], [254, 1, 1, "", "add_node"], [255, 1, 1, "", "add_nodes_from"], [256, 1, 1, "", "adj"], [250, 2, 1, "", "attrs"], [257, 1, 1, "", "clear"], [258, 1, 1, "", "clear_edges"], [259, 1, 1, "", "compose"], [260, 1, 1, "", "contract_nodes"], [261, 1, 1, "", "copy"], [262, 1, 1, "", "degree"], [263, 1, 1, "", "edge_index_map"], [264, 1, 1, "", "edge_indices"], [265, 1, 1, "", "edge_indices_from_endpoints"], [266, 1, 1, "", "edge_list"], [267, 1, 1, "", "edge_subgraph"], [268, 1, 1, "", "edges"], [269, 1, 1, "", "extend_from_edge_list"], [270, 1, 1, "", "extend_from_weighted_edge_list"], [271, 1, 1, "", "filter_edges"], [272, 1, 1, "", "filter_nodes"], [273, 1, 1, "", "find_node_by_weight"], [274, 1, 1, "", "from_adjacency_matrix"], [275, 1, 1, "", "from_complex_adjacency_matrix"], [276, 1, 1, "", "get_all_edge_data"], [277, 1, 1, "", "get_edge_data"], [278, 1, 1, "", "get_edge_data_by_index"], [279, 1, 1, "", "get_edge_endpoints_by_index"], [280, 1, 1, "", "get_node_data"], [281, 1, 1, "", "has_edge"], [282, 1, 1, "", "has_node"], [283, 1, 1, "", "has_parallel_edges"], [284, 1, 1, "", "in_edges"], [285, 1, 1, "", "incident_edge_index_map"], [286, 1, 1, "", "incident_edges"], [250, 2, 1, "", "multigraph"], [287, 1, 1, "", "neighbors"], [288, 1, 1, "", "node_indexes"], [289, 1, 1, "", "node_indices"], [290, 1, 1, "", "nodes"], [291, 1, 1, "", "num_edges"], [292, 1, 1, "", "num_nodes"], [293, 1, 1, "", "out_edges"], [294, 1, 1, "", "read_edge_list"], [295, 1, 1, "", "remove_edge"], [296, 1, 1, "", "remove_edge_from_index"], [297, 1, 1, "", "remove_edges_from"], [298, 1, 1, "", "remove_node"], [299, 1, 1, "", "remove_nodes_from"], [300, 1, 1, "", "subgraph"], [301, 1, 1, "", "substitute_node_with_subgraph"], [302, 1, 1, "", "to_directed"], [303, 1, 1, "", "to_dot"], [304, 1, 1, "", "update_edge"], [305, 1, 1, "", "update_edge_by_index"], [306, 1, 1, "", "weighted_edge_list"], [307, 1, 1, "", "write_edge_list"]], "rustworkx.TopologicalSorter": [[310, 1, 1, "", "done"], [311, 1, 1, "", "get_ready"], [312, 1, 1, "", "is_active"]], "rustworkx.generators": [[416, 4, 1, "", "barbell_graph"], [417, 4, 1, "", "binomial_tree_graph"], [418, 4, 1, "", "complete_graph"], [419, 4, 1, "", "cycle_graph"], [420, 4, 1, "", "directed_binomial_tree_graph"], [421, 4, 1, "", "directed_complete_graph"], [422, 4, 1, "", "directed_cycle_graph"], [423, 4, 1, "", "directed_empty_graph"], [424, 4, 1, "", "directed_grid_graph"], [425, 4, 1, "", "directed_heavy_hex_graph"], [426, 4, 1, "", "directed_heavy_square_graph"], [427, 4, 1, "", "directed_hexagonal_lattice_graph"], [428, 4, 1, "", "directed_mesh_graph"], [429, 4, 1, "", "directed_path_graph"], [430, 4, 1, "", "directed_star_graph"], [431, 4, 1, "", "dorogovtsev_goltsev_mendes_graph"], [432, 4, 1, "", "empty_graph"], [433, 4, 1, "", "full_rary_tree"], [434, 4, 1, "", "generalized_petersen_graph"], [435, 4, 1, "", "grid_graph"], [436, 4, 1, "", "heavy_hex_graph"], [437, 4, 1, "", "heavy_square_graph"], [438, 4, 1, "", "hexagonal_lattice_graph"], [439, 4, 1, "", "lollipop_graph"], [440, 4, 1, "", "mesh_graph"], [441, 4, 1, "", "path_graph"], [442, 4, 1, "", "star_graph"]], "rustworkx.visit": [[548, 0, 1, "", "BFSVisitor"], [555, 0, 1, "", "DFSVisitor"], [561, 0, 1, "", "DijkstraVisitor"], [567, 3, 1, "", "PruneSearch"], [568, 3, 1, "", "StopSearch"]], "rustworkx.visit.BFSVisitor": [[549, 1, 1, "", "black_target_edge"], [550, 1, 1, "", "discover_vertex"], [551, 1, 1, "", "finish_vertex"], [552, 1, 1, "", "gray_target_edge"], [553, 1, 1, "", "non_tree_edge"], [554, 1, 1, "", "tree_edge"]], "rustworkx.visit.DFSVisitor": [[556, 1, 1, "", "back_edge"], [557, 1, 1, "", "discover_vertex"], [558, 1, 1, "", "finish_vertex"], [559, 1, 1, "", "forward_or_cross_edge"], [560, 1, 1, "", "tree_edge"]], "rustworkx.visit.DijkstraVisitor": [[562, 1, 1, "", "discover_vertex"], [563, 1, 1, "", "edge_not_relaxed"], [564, 1, 1, "", "edge_relaxed"], [565, 1, 1, "", "examine_edge"], [566, 1, 1, "", "finish_vertex"]], "rustworkx.visualization": [[569, 4, 1, "", "graphviz_draw"], [570, 4, 1, "", "mpl_draw"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:exception", "4": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "exception", "Python exception"], "4": ["py", "function", "Python function"]}, "titleterms": {"contribut": 0, "rustworkx": [0, 19, 26, 27, 28, 30, 31, 32, 36, 37, 38, 40, 41, 42, 45, 46, 48, 49, 50, 52, 53, 54, 57, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 579, 580], "make": 0, "chang": 0, "code": 0, "modul": 0, "export": 0, "lib": 0, "r": 0, "ad": 0, "function": [0, 6, 10, 20, 21, 22, 23, 575], "directori": 0, "when": 0, "singl": [0, 572], "file": 0, "i": 0, "enough": 0, "core": [0, 573], "test": 0, "run": 0, "specif": 0, "python": 0, "version": 0, "subset": 0, "visual": [0, 569, 570, 575, 577, 581], "style": 0, "rust": 0, "lint": 0, "build": 0, "document": [0, 573], "type": [0, 15], "annot": 0, "releas": [0, 576], "note": [0, 576], "new": [0, 576], "link": [0, 8], "issu": 0, "gener": [0, 17, 23, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 577, 580], "local": 0, "pull": 0, "request": 0, "review": 0, "ci": 0, "merg": 0, "queue": 0, "stabl": 0, "branch": 0, "polici": 0, "backport": 0, "procedur": 0, "manual": 0, "central": [1, 577], "color": 2, "connect": 3, "cycl": 3, "dag": [4, 578], "algorithm": [4, 6, 10], "graph": [5, 18, 23, 572, 575, 577, 578, 580], "oper": [5, 580], "isomorph": [7, 572], "analysi": 8, "match": 9, "other": [10, 572, 576], "shortest": [11, 572], "path": [11, 572], "travers": 12, "tree": 13, "convert": [14, 575], "custom": 15, "return": 15, "except": 16, "class": [18, 575], "api": [19, 21, 22, 575, 581], "refer": 19, "layout": 20, "pydigraph": [21, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249], "pygraph": [22, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307], "random": 23, "serial": 24, "allpairspathlengthmap": [25, 26, 27, 28], "item": [26, 30, 36, 40, 48, 52, 68, 73, 77, 81, 85], "kei": [27, 31, 37, 41, 49, 53, 69, 74, 78, 82, 86, 575], "valu": [28, 32, 38, 42, 50, 54, 70, 75, 79, 83, 87], "allpairspathmap": [29, 30, 31, 32], "bfspredecessor": 33, "bfssuccessor": 34, "biconnectedcompon": [35, 36, 37, 38], "centralitymap": [39, 40, 41, 42], "chain": 43, "coloringstrategi": 44, "strategi": 44, "descript": 44, "daghascycl": 45, "dagwouldcycl": 46, "edgecentralitymap": [47, 48, 49, 50], "edgeindexmap": [51, 52, 53, 54], "edgeindic": 55, "edgelist": 56, "graphnotbipartit": 57, "indexpartitionblock": 58, "invalidmap": 59, "invalidnod": 60, "jsonserializationerror": 61, "negativecycl": 62, "noedgebetweennod": 63, "nopathfound": 64, "nosuitableneighbor": 65, "nodeindic": 66, "nodemap": [67, 68, 69, 70], "nullgraph": 71, "pathlengthmap": [72, 73, 74, 75], "pathmap": [76, 77, 78, 79], "pos2dmap": [80, 81, 82, 83], "productnodemap": [84, 85, 86, 87], "pydag": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "add_child": [89, 170], "add_edg": [90, 171, 251], "add_edges_from": [91, 172, 252], "add_edges_from_no_data": [92, 173, 253], "add_nod": [93, 174, 254], "add_nodes_from": [94, 175, 255], "add_par": [95, 176], "adj": [96, 177, 256], "adj_direct": [97, 178], "clear": [98, 179, 257], "clear_edg": [99, 180, 258], "compos": [100, 181, 259], "contract_nod": [101, 182, 260], "copi": [102, 183, 261], "edge_index_map": [103, 184, 263], "edge_indic": [104, 185, 264], "edge_indices_from_endpoint": [105, 186, 265], "edge_list": [106, 187, 266], "edge_subgraph": [107, 188, 267], "edg": [108, 189, 268, 575, 580], "extend_from_edge_list": [109, 190, 269], "extend_from_weighted_edge_list": [110, 191, 270], "filter_edg": [111, 192, 271], "filter_nod": [112, 193, 272], "find_adjacent_node_by_edg": [113, 194], "find_node_by_weight": [114, 195, 273], "find_predecessor_node_by_edg": [115, 196], "find_predecessors_by_edg": [116, 197], "find_successors_by_edg": [117, 198], "from_adjacency_matrix": [118, 199, 274], "from_complex_adjacency_matrix": [119, 200, 275], "get_all_edge_data": [120, 201, 276], "get_edge_data": [121, 202, 277], "get_edge_data_by_index": [122, 203, 278], "get_edge_endpoints_by_index": [123, 204, 279], "get_node_data": [124, 205, 280], "has_edg": [125, 206, 281], "has_nod": [126, 207, 282], "has_parallel_edg": [127, 208, 283], "in_degre": [128, 209], "in_edg": [129, 210, 284], "incident_edge_index_map": [130, 211, 285], "incident_edg": [131, 212, 286], "insert_node_on_in_edg": [132, 213], "insert_node_on_in_edges_multipl": [133, 214], "insert_node_on_out_edg": [134, 215], "insert_node_on_out_edges_multipl": [135, 216], "is_symmetr": [136, 217], "make_symmetr": [137, 218], "merge_nod": [138, 219], "neighbor": [139, 220, 287, 580], "node_index": [140, 221, 288], "node_indic": [141, 222, 289], "node": [142, 223, 290, 575, 580], "num_edg": [143, 224, 291], "num_nod": [144, 225, 292], "out_degre": [145, 226], "out_edg": [146, 227, 293], "predecessor_indic": [147, 228], "predecessor": [148, 229], "read_edge_list": [149, 230, 294], "remove_edg": [150, 231, 295], "remove_edge_from_index": [151, 232, 296], "remove_edges_from": [152, 233, 297], "remove_nod": [153, 234, 298], "remove_node_retain_edg": [154, 235], "remove_node_retain_edges_by_id": [155, 236], "remove_node_retain_edges_by_kei": [156, 237], "remove_nodes_from": [157, 238, 299], "revers": [158, 239], "subgraph": [159, 240, 300, 572], "substitute_node_with_subgraph": [160, 241, 301], "successor_indic": [161, 242], "successor": [162, 243], "to_dot": [163, 244, 303], "to_undirect": [164, 245], "update_edg": [165, 246, 304], "update_edge_by_index": [166, 247, 305], "weighted_edge_list": [167, 248, 306], "write_edge_list": [168, 249, 307], "degre": 262, "to_direct": 302, "relationalcoarsestpartit": 308, "topologicalsort": [309, 310, 311, 312], "done": 310, "get_readi": 311, "is_act": 312, "weightededgelist": 313, "adjacency_matrix": 314, "all_pairs_all_simple_path": 315, "all_pairs_bellman_ford_path_length": 316, "all_pairs_bellman_ford_shortest_path": 317, "all_pairs_dijkstra_path_length": 318, "all_pairs_dijkstra_shortest_path": 319, "all_shortest_path": 320, "all_simple_path": 321, "ancestor": 322, "articulation_point": 323, "astar_shortest_path": 324, "barabasi_albert_graph": 325, "bellman_ford_shortest_path_length": 326, "bellman_ford_shortest_path": 327, "betweenness_centr": 328, "see": [328, 363, 377, 409, 453, 468], "also": [328, 363, 377, 409, 453, 468], "bfs_predecessor": 329, "bfs_search": 330, "bfs_successor": 331, "biconnected_compon": 332, "bipartite_layout": 333, "bridg": 334, "cartesian_product": 335, "chain_decomposit": 336, "circular_layout": 337, "closeness_centr": 338, "collect_bicolor_run": 339, "collect_run": 340, "complement": 341, "connected_compon": 342, "connected_subgraph": 343, "core_numb": 344, "cycle_basi": 345, "dag_longest_path": 346, "dag_longest_path_length": 347, "dag_weighted_longest_path": 348, "dag_weighted_longest_path_length": 349, "descend": 350, "dfs_edg": 351, "dfs_search": 352, "digraph_adjacency_matrix": 353, "digraph_all_pairs_all_simple_path": 354, "digraph_all_pairs_bellman_ford_path_length": 355, "digraph_all_pairs_bellman_ford_shortest_path": 356, "digraph_all_pairs_dijkstra_path_length": 357, "digraph_all_pairs_dijkstra_shortest_path": 358, "digraph_all_shortest_path": 359, "digraph_all_simple_path": 360, "digraph_astar_shortest_path": 361, "digraph_bellman_ford_shortest_path_length": 362, "digraph_betweenness_centr": 363, "digraph_bfs_search": 364, "digraph_bipartite_layout": 365, "digraph_cartesian_product": 366, "digraph_circular_layout": 367, "digraph_closeness_centr": 368, "digraph_compl": 369, "digraph_core_numb": 370, "digraph_dfs_edg": 371, "digraph_dfs_search": 372, "digraph_dijkstra_search": 373, "digraph_dijkstra_shortest_path_length": 374, "digraph_dijkstra_shortest_path": 375, "digraph_distance_matrix": 376, "digraph_edge_betweenness_centr": 377, "digraph_eigenvector_centr": 378, "digraph_find_cycl": 379, "digraph_floyd_warshal": 380, "digraph_floyd_warshall_numpi": 381, "digraph_floyd_warshall_successor_and_dist": 382, "digraph_is_isomorph": 383, "digraph_is_subgraph_isomorph": 384, "digraph_k_shortest_path_length": 385, "digraph_katz_centr": 386, "digraph_longest_simple_path": 387, "digraph_maximum_bisimul": 388, "digraph_node_link_json": 389, "digraph_num_shortest_paths_unweight": 390, "digraph_random_layout": 391, "digraph_shell_layout": 392, "digraph_spiral_layout": 393, "digraph_spring_layout": 394, "digraph_tensor_product": 395, "digraph_transit": 396, "digraph_union": 397, "digraph_unweighted_average_shortest_path_length": 398, "digraph_vf2_map": 399, "dijkstra_search": 400, "dijkstra_shortest_path_length": 401, "dijkstra_shortest_path": 402, "directed_barabasi_albert_graph": 403, "directed_gnm_random_graph": 404, "directed_gnp_random_graph": 405, "directed_random_bipartite_graph": 406, "directed_sbm_random_graph": 407, "distance_matrix": 408, "edge_betweenness_centr": 409, "eigenvector_centr": 410, "find_negative_cycl": 411, "floyd_warshal": 412, "floyd_warshall_numpi": 413, "floyd_warshall_successor_and_dist": 414, "from_node_link_json_fil": 415, "barbell_graph": 416, "binomial_tree_graph": 417, "complete_graph": 418, "cycle_graph": 419, "directed_binomial_tree_graph": 420, "directed_complete_graph": 421, "directed_cycle_graph": 422, "directed_empty_graph": 423, "directed_grid_graph": 424, "directed_heavy_hex_graph": 425, "directed_heavy_square_graph": 426, "directed_hexagonal_lattice_graph": 427, "directed_mesh_graph": 428, "directed_path_graph": 429, "directed_star_graph": 430, "dorogovtsev_goltsev_mendes_graph": 431, "empty_graph": 432, "full_rary_tre": 433, "generalized_petersen_graph": 434, "grid_graph": 435, "heavy_hex_graph": 436, "heavy_square_graph": 437, "hexagonal_lattice_graph": 438, "lollipop_graph": 439, "mesh_graph": 440, "path_graph": 441, "star_graph": 442, "graph_adjacency_matrix": 443, "graph_all_pairs_all_simple_path": 444, "graph_all_pairs_bellman_ford_path_length": 445, "graph_all_pairs_bellman_ford_shortest_path": 446, "graph_all_pairs_dijkstra_path_length": 447, "graph_all_pairs_dijkstra_shortest_path": 448, "graph_all_shortest_path": 449, "graph_all_simple_path": 450, "graph_astar_shortest_path": 451, "graph_bellman_ford_shortest_path_length": 452, "graph_betweenness_centr": 453, "graph_bfs_search": 454, "graph_bipartite_edge_color": 455, "graph_bipartite_layout": 456, "graph_cartesian_product": 457, "graph_circular_layout": 458, "graph_closeness_centr": 459, "graph_compl": 460, "graph_core_numb": 461, "graph_dfs_edg": 462, "graph_dfs_search": 463, "graph_dijkstra_search": 464, "graph_dijkstra_shortest_path_length": 465, "graph_dijkstra_shortest_path": 466, "graph_distance_matrix": 467, "graph_edge_betweenness_centr": 468, "graph_eigenvector_centr": 469, "graph_floyd_warshal": 470, "graph_floyd_warshall_numpi": 471, "graph_floyd_warshall_successor_and_dist": 472, "graph_greedy_color": 473, "graph_greedy_edge_color": 474, "graph_is_isomorph": 475, "graph_is_subgraph_isomorph": 476, "graph_k_shortest_path_length": 477, "graph_katz_centr": 478, "graph_line_graph": 479, "graph_longest_simple_path": 480, "graph_misra_gries_edge_color": 481, "graph_node_link_json": 482, "graph_num_shortest_paths_unweight": 483, "graph_random_layout": 484, "graph_shell_layout": 485, "graph_spiral_layout": 486, "graph_spring_layout": 487, "graph_tensor_product": 488, "graph_token_swapp": 489, "graph_transit": 490, "graph_union": 491, "graph_unweighted_average_shortest_path_length": 492, "graph_vf2_map": 493, "has_path": 494, "hit": 495, "hyperbolic_random_graph": 496, "is_bipartit": 497, "is_connect": 498, "is_directed_acyclic_graph": 499, "is_isomorph": 500, "is_isomorphic_node_match": 501, "is_match": 502, "is_maximal_match": 503, "is_planar": 504, "is_subgraph_isomorph": 505, "is_weakly_connect": 506, "isol": 507, "k_shortest_path_length": 508, "katz_centr": 509, "layer": 510, "lexicographical_topological_sort": 511, "longest_simple_path": 512, "max_weight_match": 513, "metric_closur": 514, "minimum_spanning_edg": 515, "minimum_spanning_tre": 516, "negative_edge_cycl": 517, "networkx_convert": 518, "node_connected_compon": 519, "node_link_json": 520, "num_shortest_paths_unweight": 521, "number_connected_compon": 522, "number_weakly_connected_compon": 523, "pagerank": 524, "parse_node_link_json": 525, "random_geometric_graph": 526, "random_layout": 527, "read_graphml": 528, "shell_layout": 529, "simple_cycl": 530, "spiral_layout": 531, "spring_layout": 532, "steiner_tre": 533, "stoer_wagner_min_cut": 534, "strongly_connected_compon": 535, "topological_gener": 536, "topological_sort": 537, "transitive_reduct": 538, "transit": 539, "two_color": 540, "undirected_gnm_random_graph": 541, "undirected_gnp_random_graph": 542, "undirected_random_bipartite_graph": 543, "undirected_sbm_random_graph": 544, "union": 545, "unweighted_average_shortest_path_length": 546, "vf2_map": 547, "bfsvisitor": [548, 549, 550, 551, 552, 553, 554], "visit": [549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568], "black_target_edg": 549, "discover_vertex": [550, 557, 562], "finish_vertex": [551, 558, 566], "gray_target_edg": 552, "non_tree_edg": 553, "tree_edg": [554, 560], "dfsvisitor": [555, 556, 557, 558, 559, 560], "back_edg": 556, "forward_or_cross_edg": 559, "dijkstravisitor": [561, 562, 563, 564, 565, 566], "edge_not_relax": 563, "edge_relax": 564, "examine_edg": 565, "prunesearch": 567, "stopsearch": 568, "graphviz_draw": 569, "mpl_draw": 570, "weakly_connected_compon": 571, "comparison": 572, "benchmark": 572, "With": 572, "librari": 572, "creation": 572, "sourc": 572, "all": 572, "pair": 572, "citat": 572, "project": 573, "histori": 573, "get": 574, "start": 574, "instal": [574, 580], "platform": 574, "without": 574, "precompil": 574, "binari": 574, "support": 574, "tier": 574, "1": [574, 576], "2": [574, 576], "3": 574, "4": [574, 576], "us": [574, 580], "networkx": 575, "user": 575, "some": 575, "differ": 575, "data": [575, 580], "attribut": [575, 580], "examin": [575, 580], "element": [575, 580], "equival": 575, "constructor": 575, "modifi": [575, 580], "matrix": 575, "matplotlib": 575, "drawer": 575, "from": [575, 580], "gap": 575, "0": 576, "15": 576, "prelud": 576, "bug": 576, "fix": 576, "featur": 576, "upgrad": 576, "14": 576, "deprec": 576, "13": 576, "12": 576, "11": 576, "10": 576, "9": 576, "8": 576, "7": 576, "6": 576, "5": 576, "work": 577, "between": 577, "calcul": 577, "betwe": 577, "direct": [578, 580], "acycl": 578, "applic": 578, "task": 578, "schedul": 578, "qiskit": 578, "": 578, "compil": 578, "tutori": 579, "guid": 579, "introduct": 580, "how": 580, "import": 580, "creat": 580, "remov": 580, "what": 580, "payload": 580, "access": 580, "multigraph": 580, "analyz": 580, "draw": 580}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"Contributing": [[0, "contributing"]], "Contributing to rustworkx": [[0, "contributing-to-rustworkx"]], "Making changes to the code": [[0, "making-changes-to-the-code"]], "Module exports in lib.rs": [[0, "module-exports-in-lib-rs"]], "Adding and changing functions in modules": [[0, "adding-and-changing-functions-in-modules"]], "Module directories: when a single file is not enough": [[0, "module-directories-when-a-single-file-is-not-enough"]], "rustworkx-core": [[0, "rustworkx-core"], [573, "rustworkx-core"]], "Tests": [[0, "tests"]], "Running tests with a specific Python version": [[0, "running-tests-with-a-specific-python-version"]], "Running subsets of tests": [[0, "running-subsets-of-tests"]], "Visualization Tests": [[0, "visualization-tests"]], "rustworkx-core tests": [[0, "rustworkx-core-tests"]], "Style": [[0, "style"]], "Rust": [[0, "rust"]], "Lint": [[0, "lint"]], "Python": [[0, "python"]], "Building documentation": [[0, "building-documentation"]], "rustworkx-core documentation": [[0, "rustworkx-core-documentation"]], "Type Annotations": [[0, "type-annotations"]], "Release Notes": [[0, "release-notes"], [576, "release-notes"]], "Adding a new release note": [[0, "adding-a-new-release-note"]], "Linking to issues": [[0, "linking-to-issues"]], "Generating the release notes": [[0, "generating-the-release-notes"]], "Building release notes locally": [[0, "building-release-notes-locally"]], "Pull request review, CI, and merge queue": [[0, "pull-request-review-ci-and-merge-queue"]], "Stable Branch Policy and Backporting": [[0, "stable-branch-policy-and-backporting"]], "Backporting procedure": [[0, "backporting-procedure"]], "Manual backport procedure": [[0, "manual-backport-procedure"]], "Centrality": [[1, "centrality"]], "Coloring": [[2, "coloring"]], "Connectivity and Cycles": [[3, "connectivity-and-cycles"]], "DAG Algorithms": [[4, "dag-algorithms"]], "Graph Operations": [[5, "graph-operations"]], "Algorithm Functions": [[6, "algorithm-functions"]], "Isomorphism": [[7, "isomorphism"]], "Link Analysis": [[8, "link-analysis"]], "Matching": [[9, "matching"]], "Other Algorithm Functions": [[10, "other-algorithm-functions"]], "Shortest Paths": [[11, "shortest-paths"]], "Traversal": [[12, "traversal"]], "Tree": [[13, "tree"]], "Converters": [[14, "converters"]], "Custom Return Types": [[15, "custom-return-types"]], "Exceptions": [[16, "exceptions"]], "Generators": [[17, "generators"]], "Graph Classes": [[18, "graph-classes"]], "Rustworkx API Reference": [[19, "rustworkx-api-reference"]], "Layout Functions": [[20, "layout-functions"]], "API functions for PyDigraph": [[21, "api-functions-for-pydigraph"]], "API functions for PyGraph": [[22, "api-functions-for-pygraph"]], "Random Graph Generator Functions": [[23, "random-graph-generator-functions"]], "Serialization": [[24, "serialization"]], "AllPairsPathLengthMapping": [[25, "allpairspathlengthmapping"]], "rustworkx.AllPairsPathLengthMapping.items": [[26, "rustworkx-allpairspathlengthmapping-items"]], "rustworkx.AllPairsPathLengthMapping.keys": [[27, "rustworkx-allpairspathlengthmapping-keys"]], "rustworkx.AllPairsPathLengthMapping.values": [[28, "rustworkx-allpairspathlengthmapping-values"]], "AllPairsPathMapping": [[29, "allpairspathmapping"]], "rustworkx.AllPairsPathMapping.items": [[30, "rustworkx-allpairspathmapping-items"]], "rustworkx.AllPairsPathMapping.keys": [[31, "rustworkx-allpairspathmapping-keys"]], "rustworkx.AllPairsPathMapping.values": [[32, "rustworkx-allpairspathmapping-values"]], "BFSPredecessors": [[33, "bfspredecessors"]], "BFSSuccessors": [[34, "bfssuccessors"]], "BiconnectedComponents": [[35, "biconnectedcomponents"]], "rustworkx.BiconnectedComponents.items": [[36, "rustworkx-biconnectedcomponents-items"]], "rustworkx.BiconnectedComponents.keys": [[37, "rustworkx-biconnectedcomponents-keys"]], "rustworkx.BiconnectedComponents.values": [[38, "rustworkx-biconnectedcomponents-values"]], "CentralityMapping": [[39, "centralitymapping"]], "rustworkx.CentralityMapping.items": [[40, "rustworkx-centralitymapping-items"]], "rustworkx.CentralityMapping.keys": [[41, "rustworkx-centralitymapping-keys"]], "rustworkx.CentralityMapping.values": [[42, "rustworkx-centralitymapping-values"]], "Chains": [[43, "chains"]], "ColoringStrategy": [[44, "coloringstrategy"]], "Strategy description": [[44, "id1"]], "rustworkx.DAGHasCycle": [[45, "rustworkx-daghascycle"]], "rustworkx.DAGWouldCycle": [[46, "rustworkx-dagwouldcycle"]], "EdgeCentralityMapping": [[47, "edgecentralitymapping"]], "rustworkx.EdgeCentralityMapping.items": [[48, "rustworkx-edgecentralitymapping-items"]], "rustworkx.EdgeCentralityMapping.keys": [[49, "rustworkx-edgecentralitymapping-keys"]], "rustworkx.EdgeCentralityMapping.values": [[50, "rustworkx-edgecentralitymapping-values"]], "EdgeIndexMap": [[51, "edgeindexmap"]], "rustworkx.EdgeIndexMap.items": [[52, "rustworkx-edgeindexmap-items"]], "rustworkx.EdgeIndexMap.keys": [[53, "rustworkx-edgeindexmap-keys"]], "rustworkx.EdgeIndexMap.values": [[54, "rustworkx-edgeindexmap-values"]], "EdgeIndices": [[55, "edgeindices"]], "EdgeList": [[56, "edgelist"]], "rustworkx.GraphNotBipartite": [[57, "rustworkx-graphnotbipartite"]], "IndexPartitionBlock": [[58, "indexpartitionblock"]], "rustworkx.InvalidMapping": [[59, "rustworkx-invalidmapping"]], "rustworkx.InvalidNode": [[60, "rustworkx-invalidnode"]], "rustworkx.JSONSerializationError": [[61, "rustworkx-jsonserializationerror"]], "rustworkx.NegativeCycle": [[62, "rustworkx-negativecycle"]], "rustworkx.NoEdgeBetweenNodes": [[63, "rustworkx-noedgebetweennodes"]], "rustworkx.NoPathFound": [[64, "rustworkx-nopathfound"]], "rustworkx.NoSuitableNeighbors": [[65, "rustworkx-nosuitableneighbors"]], "NodeIndices": [[66, "nodeindices"]], "NodeMap": [[67, "nodemap"]], "rustworkx.NodeMap.items": [[68, "rustworkx-nodemap-items"]], "rustworkx.NodeMap.keys": [[69, "rustworkx-nodemap-keys"]], "rustworkx.NodeMap.values": [[70, "rustworkx-nodemap-values"]], "rustworkx.NullGraph": [[71, "rustworkx-nullgraph"]], "PathLengthMapping": [[72, "pathlengthmapping"]], "rustworkx.PathLengthMapping.items": [[73, "rustworkx-pathlengthmapping-items"]], "rustworkx.PathLengthMapping.keys": [[74, "rustworkx-pathlengthmapping-keys"]], "rustworkx.PathLengthMapping.values": [[75, "rustworkx-pathlengthmapping-values"]], "PathMapping": [[76, "pathmapping"]], "rustworkx.PathMapping.items": [[77, "rustworkx-pathmapping-items"]], "rustworkx.PathMapping.keys": [[78, "rustworkx-pathmapping-keys"]], "rustworkx.PathMapping.values": [[79, "rustworkx-pathmapping-values"]], "Pos2DMapping": [[80, "pos2dmapping"]], "rustworkx.Pos2DMapping.items": [[81, "rustworkx-pos2dmapping-items"]], "rustworkx.Pos2DMapping.keys": [[82, "rustworkx-pos2dmapping-keys"]], "rustworkx.Pos2DMapping.values": [[83, "rustworkx-pos2dmapping-values"]], "ProductNodeMap": [[84, "productnodemap"]], "rustworkx.ProductNodeMap.items": [[85, "rustworkx-productnodemap-items"]], "rustworkx.ProductNodeMap.keys": [[86, "rustworkx-productnodemap-keys"]], "rustworkx.ProductNodeMap.values": [[87, "rustworkx-productnodemap-values"]], "PyDAG": [[88, "pydag"]], "rustworkx.PyDAG.add_child": [[89, "rustworkx-pydag-add-child"]], "rustworkx.PyDAG.add_edge": [[90, "rustworkx-pydag-add-edge"]], "rustworkx.PyDAG.add_edges_from": [[91, "rustworkx-pydag-add-edges-from"]], "rustworkx.PyDAG.add_edges_from_no_data": [[92, "rustworkx-pydag-add-edges-from-no-data"]], "rustworkx.PyDAG.add_node": [[93, "rustworkx-pydag-add-node"]], "rustworkx.PyDAG.add_nodes_from": [[94, "rustworkx-pydag-add-nodes-from"]], "rustworkx.PyDAG.add_parent": [[95, "rustworkx-pydag-add-parent"]], "rustworkx.PyDAG.adj": [[96, "rustworkx-pydag-adj"]], "rustworkx.PyDAG.adj_direction": [[97, "rustworkx-pydag-adj-direction"]], "rustworkx.PyDAG.clear": [[98, "rustworkx-pydag-clear"]], "rustworkx.PyDAG.clear_edges": [[99, "rustworkx-pydag-clear-edges"]], "rustworkx.PyDAG.compose": [[100, "rustworkx-pydag-compose"]], "rustworkx.PyDAG.contract_nodes": [[101, "rustworkx-pydag-contract-nodes"]], "rustworkx.PyDAG.copy": [[102, "rustworkx-pydag-copy"]], "rustworkx.PyDAG.edge_index_map": [[103, "rustworkx-pydag-edge-index-map"]], "rustworkx.PyDAG.edge_indices": [[104, "rustworkx-pydag-edge-indices"]], "rustworkx.PyDAG.edge_indices_from_endpoints": [[105, "rustworkx-pydag-edge-indices-from-endpoints"]], "rustworkx.PyDAG.edge_list": [[106, "rustworkx-pydag-edge-list"]], "rustworkx.PyDAG.edge_subgraph": [[107, "rustworkx-pydag-edge-subgraph"]], "rustworkx.PyDAG.edges": [[108, "rustworkx-pydag-edges"]], "rustworkx.PyDAG.extend_from_edge_list": [[109, "rustworkx-pydag-extend-from-edge-list"]], "rustworkx.PyDAG.extend_from_weighted_edge_list": [[110, "rustworkx-pydag-extend-from-weighted-edge-list"]], "rustworkx.PyDAG.filter_edges": [[111, "rustworkx-pydag-filter-edges"]], "rustworkx.PyDAG.filter_nodes": [[112, "rustworkx-pydag-filter-nodes"]], "rustworkx.PyDAG.find_adjacent_node_by_edge": [[113, "rustworkx-pydag-find-adjacent-node-by-edge"]], "rustworkx.PyDAG.find_node_by_weight": [[114, "rustworkx-pydag-find-node-by-weight"]], "rustworkx.PyDAG.find_predecessor_node_by_edge": [[115, "rustworkx-pydag-find-predecessor-node-by-edge"]], "rustworkx.PyDAG.find_predecessors_by_edge": [[116, "rustworkx-pydag-find-predecessors-by-edge"]], "rustworkx.PyDAG.find_successors_by_edge": [[117, "rustworkx-pydag-find-successors-by-edge"]], "rustworkx.PyDAG.from_adjacency_matrix": [[118, "rustworkx-pydag-from-adjacency-matrix"]], "rustworkx.PyDAG.from_complex_adjacency_matrix": [[119, "rustworkx-pydag-from-complex-adjacency-matrix"]], "rustworkx.PyDAG.get_all_edge_data": [[120, "rustworkx-pydag-get-all-edge-data"]], "rustworkx.PyDAG.get_edge_data": [[121, "rustworkx-pydag-get-edge-data"]], "rustworkx.PyDAG.get_edge_data_by_index": [[122, "rustworkx-pydag-get-edge-data-by-index"]], "rustworkx.PyDAG.get_edge_endpoints_by_index": [[123, "rustworkx-pydag-get-edge-endpoints-by-index"]], "rustworkx.PyDAG.get_node_data": [[124, "rustworkx-pydag-get-node-data"]], "rustworkx.PyDAG.has_edge": [[125, "rustworkx-pydag-has-edge"]], "rustworkx.PyDAG.has_node": [[126, "rustworkx-pydag-has-node"]], "rustworkx.PyDAG.has_parallel_edges": [[127, "rustworkx-pydag-has-parallel-edges"]], "rustworkx.PyDAG.in_degree": [[128, "rustworkx-pydag-in-degree"]], "rustworkx.PyDAG.in_edges": [[129, "rustworkx-pydag-in-edges"]], "rustworkx.PyDAG.incident_edge_index_map": [[130, "rustworkx-pydag-incident-edge-index-map"]], "rustworkx.PyDAG.incident_edges": [[131, "rustworkx-pydag-incident-edges"]], "rustworkx.PyDAG.insert_node_on_in_edges": [[132, "rustworkx-pydag-insert-node-on-in-edges"]], "rustworkx.PyDAG.insert_node_on_in_edges_multiple": [[133, "rustworkx-pydag-insert-node-on-in-edges-multiple"]], "rustworkx.PyDAG.insert_node_on_out_edges": [[134, "rustworkx-pydag-insert-node-on-out-edges"]], "rustworkx.PyDAG.insert_node_on_out_edges_multiple": [[135, "rustworkx-pydag-insert-node-on-out-edges-multiple"]], "rustworkx.PyDAG.is_symmetric": [[136, "rustworkx-pydag-is-symmetric"]], "rustworkx.PyDAG.make_symmetric": [[137, "rustworkx-pydag-make-symmetric"]], "rustworkx.PyDAG.merge_nodes": [[138, "rustworkx-pydag-merge-nodes"]], "rustworkx.PyDAG.neighbors": [[139, "rustworkx-pydag-neighbors"]], "rustworkx.PyDAG.node_indexes": [[140, "rustworkx-pydag-node-indexes"]], "rustworkx.PyDAG.node_indices": [[141, "rustworkx-pydag-node-indices"]], "rustworkx.PyDAG.nodes": [[142, "rustworkx-pydag-nodes"]], "rustworkx.PyDAG.num_edges": [[143, "rustworkx-pydag-num-edges"]], "rustworkx.PyDAG.num_nodes": [[144, "rustworkx-pydag-num-nodes"]], "rustworkx.PyDAG.out_degree": [[145, "rustworkx-pydag-out-degree"]], "rustworkx.PyDAG.out_edges": [[146, "rustworkx-pydag-out-edges"]], "rustworkx.PyDAG.predecessor_indices": [[147, "rustworkx-pydag-predecessor-indices"]], "rustworkx.PyDAG.predecessors": [[148, "rustworkx-pydag-predecessors"]], "rustworkx.PyDAG.read_edge_list": [[149, "rustworkx-pydag-read-edge-list"]], "rustworkx.PyDAG.remove_edge": [[150, "rustworkx-pydag-remove-edge"]], "rustworkx.PyDAG.remove_edge_from_index": [[151, "rustworkx-pydag-remove-edge-from-index"]], "rustworkx.PyDAG.remove_edges_from": [[152, "rustworkx-pydag-remove-edges-from"]], "rustworkx.PyDAG.remove_node": [[153, "rustworkx-pydag-remove-node"]], "rustworkx.PyDAG.remove_node_retain_edges": [[154, "rustworkx-pydag-remove-node-retain-edges"]], "rustworkx.PyDAG.remove_node_retain_edges_by_id": [[155, "rustworkx-pydag-remove-node-retain-edges-by-id"]], "rustworkx.PyDAG.remove_node_retain_edges_by_key": [[156, "rustworkx-pydag-remove-node-retain-edges-by-key"]], "rustworkx.PyDAG.remove_nodes_from": [[157, "rustworkx-pydag-remove-nodes-from"]], "rustworkx.PyDAG.reverse": [[158, "rustworkx-pydag-reverse"]], "rustworkx.PyDAG.subgraph": [[159, "rustworkx-pydag-subgraph"]], "rustworkx.PyDAG.substitute_node_with_subgraph": [[160, "rustworkx-pydag-substitute-node-with-subgraph"]], "rustworkx.PyDAG.successor_indices": [[161, "rustworkx-pydag-successor-indices"]], "rustworkx.PyDAG.successors": [[162, "rustworkx-pydag-successors"]], "rustworkx.PyDAG.to_dot": [[163, "rustworkx-pydag-to-dot"]], "rustworkx.PyDAG.to_undirected": [[164, "rustworkx-pydag-to-undirected"]], "rustworkx.PyDAG.update_edge": [[165, "rustworkx-pydag-update-edge"]], "rustworkx.PyDAG.update_edge_by_index": [[166, "rustworkx-pydag-update-edge-by-index"]], "rustworkx.PyDAG.weighted_edge_list": [[167, "rustworkx-pydag-weighted-edge-list"]], "rustworkx.PyDAG.write_edge_list": [[168, "rustworkx-pydag-write-edge-list"]], "PyDiGraph": [[169, "pydigraph"]], "rustworkx.PyDiGraph.add_child": [[170, "rustworkx-pydigraph-add-child"]], "rustworkx.PyDiGraph.add_edge": [[171, "rustworkx-pydigraph-add-edge"]], "rustworkx.PyDiGraph.add_edges_from": [[172, "rustworkx-pydigraph-add-edges-from"]], "rustworkx.PyDiGraph.add_edges_from_no_data": [[173, "rustworkx-pydigraph-add-edges-from-no-data"]], "rustworkx.PyDiGraph.add_node": [[174, "rustworkx-pydigraph-add-node"]], "rustworkx.PyDiGraph.add_nodes_from": [[175, "rustworkx-pydigraph-add-nodes-from"]], "rustworkx.PyDiGraph.add_parent": [[176, "rustworkx-pydigraph-add-parent"]], "rustworkx.PyDiGraph.adj": [[177, "rustworkx-pydigraph-adj"]], "rustworkx.PyDiGraph.adj_direction": [[178, "rustworkx-pydigraph-adj-direction"]], "rustworkx.PyDiGraph.clear": [[179, "rustworkx-pydigraph-clear"]], "rustworkx.PyDiGraph.clear_edges": [[180, "rustworkx-pydigraph-clear-edges"]], "rustworkx.PyDiGraph.compose": [[181, "rustworkx-pydigraph-compose"]], "rustworkx.PyDiGraph.contract_nodes": [[182, "rustworkx-pydigraph-contract-nodes"]], "rustworkx.PyDiGraph.copy": [[183, "rustworkx-pydigraph-copy"]], "rustworkx.PyDiGraph.edge_index_map": [[184, "rustworkx-pydigraph-edge-index-map"]], "rustworkx.PyDiGraph.edge_indices": [[185, "rustworkx-pydigraph-edge-indices"]], "rustworkx.PyDiGraph.edge_indices_from_endpoints": [[186, "rustworkx-pydigraph-edge-indices-from-endpoints"]], "rustworkx.PyDiGraph.edge_list": [[187, "rustworkx-pydigraph-edge-list"]], "rustworkx.PyDiGraph.edge_subgraph": [[188, "rustworkx-pydigraph-edge-subgraph"]], "rustworkx.PyDiGraph.edges": [[189, "rustworkx-pydigraph-edges"]], "rustworkx.PyDiGraph.extend_from_edge_list": [[190, "rustworkx-pydigraph-extend-from-edge-list"]], "rustworkx.PyDiGraph.extend_from_weighted_edge_list": [[191, "rustworkx-pydigraph-extend-from-weighted-edge-list"]], "rustworkx.PyDiGraph.filter_edges": [[192, "rustworkx-pydigraph-filter-edges"]], "rustworkx.PyDiGraph.filter_nodes": [[193, "rustworkx-pydigraph-filter-nodes"]], "rustworkx.PyDiGraph.find_adjacent_node_by_edge": [[194, "rustworkx-pydigraph-find-adjacent-node-by-edge"]], "rustworkx.PyDiGraph.find_node_by_weight": [[195, "rustworkx-pydigraph-find-node-by-weight"]], "rustworkx.PyDiGraph.find_predecessor_node_by_edge": [[196, "rustworkx-pydigraph-find-predecessor-node-by-edge"]], "rustworkx.PyDiGraph.find_predecessors_by_edge": [[197, "rustworkx-pydigraph-find-predecessors-by-edge"]], "rustworkx.PyDiGraph.find_successors_by_edge": [[198, "rustworkx-pydigraph-find-successors-by-edge"]], "rustworkx.PyDiGraph.from_adjacency_matrix": [[199, "rustworkx-pydigraph-from-adjacency-matrix"]], "rustworkx.PyDiGraph.from_complex_adjacency_matrix": [[200, "rustworkx-pydigraph-from-complex-adjacency-matrix"]], "rustworkx.PyDiGraph.get_all_edge_data": [[201, "rustworkx-pydigraph-get-all-edge-data"]], "rustworkx.PyDiGraph.get_edge_data": [[202, "rustworkx-pydigraph-get-edge-data"]], "rustworkx.PyDiGraph.get_edge_data_by_index": [[203, "rustworkx-pydigraph-get-edge-data-by-index"]], "rustworkx.PyDiGraph.get_edge_endpoints_by_index": [[204, "rustworkx-pydigraph-get-edge-endpoints-by-index"]], "rustworkx.PyDiGraph.get_node_data": [[205, "rustworkx-pydigraph-get-node-data"]], "rustworkx.PyDiGraph.has_edge": [[206, "rustworkx-pydigraph-has-edge"]], "rustworkx.PyDiGraph.has_node": [[207, "rustworkx-pydigraph-has-node"]], "rustworkx.PyDiGraph.has_parallel_edges": [[208, "rustworkx-pydigraph-has-parallel-edges"]], "rustworkx.PyDiGraph.in_degree": [[209, "rustworkx-pydigraph-in-degree"]], "rustworkx.PyDiGraph.in_edges": [[210, "rustworkx-pydigraph-in-edges"]], "rustworkx.PyDiGraph.incident_edge_index_map": [[211, "rustworkx-pydigraph-incident-edge-index-map"]], "rustworkx.PyDiGraph.incident_edges": [[212, "rustworkx-pydigraph-incident-edges"]], "rustworkx.PyDiGraph.insert_node_on_in_edges": [[213, "rustworkx-pydigraph-insert-node-on-in-edges"]], "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple": [[214, "rustworkx-pydigraph-insert-node-on-in-edges-multiple"]], "rustworkx.PyDiGraph.insert_node_on_out_edges": [[215, "rustworkx-pydigraph-insert-node-on-out-edges"]], "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple": [[216, "rustworkx-pydigraph-insert-node-on-out-edges-multiple"]], "rustworkx.PyDiGraph.is_symmetric": [[217, "rustworkx-pydigraph-is-symmetric"]], "rustworkx.PyDiGraph.make_symmetric": [[218, "rustworkx-pydigraph-make-symmetric"]], "rustworkx.PyDiGraph.merge_nodes": [[219, "rustworkx-pydigraph-merge-nodes"]], "rustworkx.PyDiGraph.neighbors": [[220, "rustworkx-pydigraph-neighbors"]], "rustworkx.PyDiGraph.node_indexes": [[221, "rustworkx-pydigraph-node-indexes"]], "rustworkx.PyDiGraph.node_indices": [[222, "rustworkx-pydigraph-node-indices"]], "rustworkx.PyDiGraph.nodes": [[223, "rustworkx-pydigraph-nodes"]], "rustworkx.PyDiGraph.num_edges": [[224, "rustworkx-pydigraph-num-edges"]], "rustworkx.PyDiGraph.num_nodes": [[225, "rustworkx-pydigraph-num-nodes"]], "rustworkx.PyDiGraph.out_degree": [[226, "rustworkx-pydigraph-out-degree"]], "rustworkx.PyDiGraph.out_edges": [[227, "rustworkx-pydigraph-out-edges"]], "rustworkx.PyDiGraph.predecessor_indices": [[228, "rustworkx-pydigraph-predecessor-indices"]], "rustworkx.PyDiGraph.predecessors": [[229, "rustworkx-pydigraph-predecessors"]], "rustworkx.PyDiGraph.read_edge_list": [[230, "rustworkx-pydigraph-read-edge-list"]], "rustworkx.PyDiGraph.remove_edge": [[231, "rustworkx-pydigraph-remove-edge"]], "rustworkx.PyDiGraph.remove_edge_from_index": [[232, "rustworkx-pydigraph-remove-edge-from-index"]], "rustworkx.PyDiGraph.remove_edges_from": [[233, "rustworkx-pydigraph-remove-edges-from"]], "rustworkx.PyDiGraph.remove_node": [[234, "rustworkx-pydigraph-remove-node"]], "rustworkx.PyDiGraph.remove_node_retain_edges": [[235, "rustworkx-pydigraph-remove-node-retain-edges"]], "rustworkx.PyDiGraph.remove_node_retain_edges_by_id": [[236, "rustworkx-pydigraph-remove-node-retain-edges-by-id"]], "rustworkx.PyDiGraph.remove_node_retain_edges_by_key": [[237, "rustworkx-pydigraph-remove-node-retain-edges-by-key"]], "rustworkx.PyDiGraph.remove_nodes_from": [[238, "rustworkx-pydigraph-remove-nodes-from"]], "rustworkx.PyDiGraph.reverse": [[239, "rustworkx-pydigraph-reverse"]], "rustworkx.PyDiGraph.subgraph": [[240, "rustworkx-pydigraph-subgraph"]], "rustworkx.PyDiGraph.substitute_node_with_subgraph": [[241, "rustworkx-pydigraph-substitute-node-with-subgraph"]], "rustworkx.PyDiGraph.successor_indices": [[242, "rustworkx-pydigraph-successor-indices"]], "rustworkx.PyDiGraph.successors": [[243, "rustworkx-pydigraph-successors"]], "rustworkx.PyDiGraph.to_dot": [[244, "rustworkx-pydigraph-to-dot"]], "rustworkx.PyDiGraph.to_undirected": [[245, "rustworkx-pydigraph-to-undirected"]], "rustworkx.PyDiGraph.update_edge": [[246, "rustworkx-pydigraph-update-edge"]], "rustworkx.PyDiGraph.update_edge_by_index": [[247, "rustworkx-pydigraph-update-edge-by-index"]], "rustworkx.PyDiGraph.weighted_edge_list": [[248, "rustworkx-pydigraph-weighted-edge-list"]], "rustworkx.PyDiGraph.write_edge_list": [[249, "rustworkx-pydigraph-write-edge-list"]], "PyGraph": [[250, "pygraph"]], "rustworkx.PyGraph.add_edge": [[251, "rustworkx-pygraph-add-edge"]], "rustworkx.PyGraph.add_edges_from": [[252, "rustworkx-pygraph-add-edges-from"]], "rustworkx.PyGraph.add_edges_from_no_data": [[253, "rustworkx-pygraph-add-edges-from-no-data"]], "rustworkx.PyGraph.add_node": [[254, "rustworkx-pygraph-add-node"]], "rustworkx.PyGraph.add_nodes_from": [[255, "rustworkx-pygraph-add-nodes-from"]], "rustworkx.PyGraph.adj": [[256, "rustworkx-pygraph-adj"]], "rustworkx.PyGraph.clear": [[257, "rustworkx-pygraph-clear"]], "rustworkx.PyGraph.clear_edges": [[258, "rustworkx-pygraph-clear-edges"]], "rustworkx.PyGraph.compose": [[259, "rustworkx-pygraph-compose"]], "rustworkx.PyGraph.contract_nodes": [[260, "rustworkx-pygraph-contract-nodes"]], "rustworkx.PyGraph.copy": [[261, "rustworkx-pygraph-copy"]], "rustworkx.PyGraph.degree": [[262, "rustworkx-pygraph-degree"]], "rustworkx.PyGraph.edge_index_map": [[263, "rustworkx-pygraph-edge-index-map"]], "rustworkx.PyGraph.edge_indices": [[264, "rustworkx-pygraph-edge-indices"]], "rustworkx.PyGraph.edge_indices_from_endpoints": [[265, "rustworkx-pygraph-edge-indices-from-endpoints"]], "rustworkx.PyGraph.edge_list": [[266, "rustworkx-pygraph-edge-list"]], "rustworkx.PyGraph.edge_subgraph": [[267, "rustworkx-pygraph-edge-subgraph"]], "rustworkx.PyGraph.edges": [[268, "rustworkx-pygraph-edges"]], "rustworkx.PyGraph.extend_from_edge_list": [[269, "rustworkx-pygraph-extend-from-edge-list"]], "rustworkx.PyGraph.extend_from_weighted_edge_list": [[270, "rustworkx-pygraph-extend-from-weighted-edge-list"]], "rustworkx.PyGraph.filter_edges": [[271, "rustworkx-pygraph-filter-edges"]], "rustworkx.PyGraph.filter_nodes": [[272, "rustworkx-pygraph-filter-nodes"]], "rustworkx.PyGraph.find_node_by_weight": [[273, "rustworkx-pygraph-find-node-by-weight"]], "rustworkx.PyGraph.from_adjacency_matrix": [[274, "rustworkx-pygraph-from-adjacency-matrix"]], "rustworkx.PyGraph.from_complex_adjacency_matrix": [[275, "rustworkx-pygraph-from-complex-adjacency-matrix"]], "rustworkx.PyGraph.get_all_edge_data": [[276, "rustworkx-pygraph-get-all-edge-data"]], "rustworkx.PyGraph.get_edge_data": [[277, "rustworkx-pygraph-get-edge-data"]], "rustworkx.PyGraph.get_edge_data_by_index": [[278, "rustworkx-pygraph-get-edge-data-by-index"]], "rustworkx.PyGraph.get_edge_endpoints_by_index": [[279, "rustworkx-pygraph-get-edge-endpoints-by-index"]], "rustworkx.PyGraph.get_node_data": [[280, "rustworkx-pygraph-get-node-data"]], "rustworkx.PyGraph.has_edge": [[281, "rustworkx-pygraph-has-edge"]], "rustworkx.PyGraph.has_node": [[282, "rustworkx-pygraph-has-node"]], "rustworkx.PyGraph.has_parallel_edges": [[283, "rustworkx-pygraph-has-parallel-edges"]], "rustworkx.PyGraph.in_edges": [[284, "rustworkx-pygraph-in-edges"]], "rustworkx.PyGraph.incident_edge_index_map": [[285, "rustworkx-pygraph-incident-edge-index-map"]], "rustworkx.PyGraph.incident_edges": [[286, "rustworkx-pygraph-incident-edges"]], "rustworkx.PyGraph.neighbors": [[287, "rustworkx-pygraph-neighbors"]], "rustworkx.PyGraph.node_indexes": [[288, "rustworkx-pygraph-node-indexes"]], "rustworkx.PyGraph.node_indices": [[289, "rustworkx-pygraph-node-indices"]], "rustworkx.PyGraph.nodes": [[290, "rustworkx-pygraph-nodes"]], "rustworkx.PyGraph.num_edges": [[291, "rustworkx-pygraph-num-edges"]], "rustworkx.PyGraph.num_nodes": [[292, "rustworkx-pygraph-num-nodes"]], "rustworkx.PyGraph.out_edges": [[293, "rustworkx-pygraph-out-edges"]], "rustworkx.PyGraph.read_edge_list": [[294, "rustworkx-pygraph-read-edge-list"]], "rustworkx.PyGraph.remove_edge": [[295, "rustworkx-pygraph-remove-edge"]], "rustworkx.PyGraph.remove_edge_from_index": [[296, "rustworkx-pygraph-remove-edge-from-index"]], "rustworkx.PyGraph.remove_edges_from": [[297, "rustworkx-pygraph-remove-edges-from"]], "rustworkx.PyGraph.remove_node": [[298, "rustworkx-pygraph-remove-node"]], "rustworkx.PyGraph.remove_nodes_from": [[299, "rustworkx-pygraph-remove-nodes-from"]], "rustworkx.PyGraph.subgraph": [[300, "rustworkx-pygraph-subgraph"]], "rustworkx.PyGraph.substitute_node_with_subgraph": [[301, "rustworkx-pygraph-substitute-node-with-subgraph"]], "rustworkx.PyGraph.to_directed": [[302, "rustworkx-pygraph-to-directed"]], "rustworkx.PyGraph.to_dot": [[303, "rustworkx-pygraph-to-dot"]], "rustworkx.PyGraph.update_edge": [[304, "rustworkx-pygraph-update-edge"]], "rustworkx.PyGraph.update_edge_by_index": [[305, "rustworkx-pygraph-update-edge-by-index"]], "rustworkx.PyGraph.weighted_edge_list": [[306, "rustworkx-pygraph-weighted-edge-list"]], "rustworkx.PyGraph.write_edge_list": [[307, "rustworkx-pygraph-write-edge-list"]], "RelationalCoarsestPartition": [[308, "relationalcoarsestpartition"]], "TopologicalSorter": [[309, "topologicalsorter"]], "rustworkx.TopologicalSorter.done": [[310, "rustworkx-topologicalsorter-done"]], "rustworkx.TopologicalSorter.get_ready": [[311, "rustworkx-topologicalsorter-get-ready"]], "rustworkx.TopologicalSorter.is_active": [[312, "rustworkx-topologicalsorter-is-active"]], "WeightedEdgeList": [[313, "weightededgelist"]], "rustworkx.adjacency_matrix": [[314, "rustworkx-adjacency-matrix"]], "rustworkx.all_pairs_all_simple_paths": [[315, "rustworkx-all-pairs-all-simple-paths"]], "rustworkx.all_pairs_bellman_ford_path_lengths": [[316, "rustworkx-all-pairs-bellman-ford-path-lengths"]], "rustworkx.all_pairs_bellman_ford_shortest_paths": [[317, "rustworkx-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.all_pairs_dijkstra_path_lengths": [[318, "rustworkx-all-pairs-dijkstra-path-lengths"]], "rustworkx.all_pairs_dijkstra_shortest_paths": [[319, "rustworkx-all-pairs-dijkstra-shortest-paths"]], "rustworkx.all_shortest_paths": [[320, "rustworkx-all-shortest-paths"]], "rustworkx.all_simple_paths": [[321, "rustworkx-all-simple-paths"]], "rustworkx.ancestors": [[322, "rustworkx-ancestors"]], "rustworkx.articulation_points": [[323, "rustworkx-articulation-points"]], "rustworkx.astar_shortest_path": [[324, "rustworkx-astar-shortest-path"]], "rustworkx.barabasi_albert_graph": [[325, "rustworkx-barabasi-albert-graph"]], "rustworkx.bellman_ford_shortest_path_lengths": [[326, "rustworkx-bellman-ford-shortest-path-lengths"]], "rustworkx.bellman_ford_shortest_paths": [[327, "rustworkx-bellman-ford-shortest-paths"]], "rustworkx.betweenness_centrality": [[328, "rustworkx-betweenness-centrality"]], "See Also": [[328, "see-also"], [363, "see-also"], [377, "see-also"], [409, "see-also"], [453, "see-also"], [468, "see-also"]], "rustworkx.bfs_predecessors": [[329, "rustworkx-bfs-predecessors"]], "rustworkx.bfs_search": [[330, "rustworkx-bfs-search"]], "rustworkx.bfs_successors": [[331, "rustworkx-bfs-successors"]], "rustworkx.biconnected_components": [[332, "rustworkx-biconnected-components"]], "rustworkx.bipartite_layout": [[333, "rustworkx-bipartite-layout"]], "rustworkx.bridges": [[334, "rustworkx-bridges"]], "rustworkx.cartesian_product": [[335, "rustworkx-cartesian-product"]], "rustworkx.chain_decomposition": [[336, "rustworkx-chain-decomposition"]], "rustworkx.circular_layout": [[337, "rustworkx-circular-layout"]], "rustworkx.closeness_centrality": [[338, "rustworkx-closeness-centrality"]], "rustworkx.collect_bicolor_runs": [[339, "rustworkx-collect-bicolor-runs"]], "rustworkx.collect_runs": [[340, "rustworkx-collect-runs"]], "rustworkx.complement": [[341, "rustworkx-complement"]], "rustworkx.connected_components": [[342, "rustworkx-connected-components"]], "rustworkx.connected_subgraphs": [[343, "rustworkx-connected-subgraphs"]], "rustworkx.core_number": [[344, "rustworkx-core-number"]], "rustworkx.cycle_basis": [[345, "rustworkx-cycle-basis"]], "rustworkx.dag_longest_path": [[346, "rustworkx-dag-longest-path"]], "rustworkx.dag_longest_path_length": [[347, "rustworkx-dag-longest-path-length"]], "rustworkx.dag_weighted_longest_path": [[348, "rustworkx-dag-weighted-longest-path"]], "rustworkx.dag_weighted_longest_path_length": [[349, "rustworkx-dag-weighted-longest-path-length"]], "rustworkx.descendants": [[350, "rustworkx-descendants"]], "rustworkx.dfs_edges": [[351, "rustworkx-dfs-edges"]], "rustworkx.dfs_search": [[352, "rustworkx-dfs-search"]], "rustworkx.digraph_adjacency_matrix": [[353, "rustworkx-digraph-adjacency-matrix"]], "rustworkx.digraph_all_pairs_all_simple_paths": [[354, "rustworkx-digraph-all-pairs-all-simple-paths"]], "rustworkx.digraph_all_pairs_bellman_ford_path_lengths": [[355, "rustworkx-digraph-all-pairs-bellman-ford-path-lengths"]], "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths": [[356, "rustworkx-digraph-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.digraph_all_pairs_dijkstra_path_lengths": [[357, "rustworkx-digraph-all-pairs-dijkstra-path-lengths"]], "rustworkx.digraph_all_pairs_dijkstra_shortest_paths": [[358, "rustworkx-digraph-all-pairs-dijkstra-shortest-paths"]], "rustworkx.digraph_all_shortest_paths": [[359, "rustworkx-digraph-all-shortest-paths"]], "rustworkx.digraph_all_simple_paths": [[360, "rustworkx-digraph-all-simple-paths"]], "rustworkx.digraph_astar_shortest_path": [[361, "rustworkx-digraph-astar-shortest-path"]], "rustworkx.digraph_bellman_ford_shortest_path_lengths": [[362, "rustworkx-digraph-bellman-ford-shortest-path-lengths"]], "rustworkx.digraph_betweenness_centrality": [[363, "rustworkx-digraph-betweenness-centrality"]], "rustworkx.digraph_bfs_search": [[364, "rustworkx-digraph-bfs-search"]], "rustworkx.digraph_bipartite_layout": [[365, "rustworkx-digraph-bipartite-layout"]], "rustworkx.digraph_cartesian_product": [[366, "rustworkx-digraph-cartesian-product"]], "rustworkx.digraph_circular_layout": [[367, "rustworkx-digraph-circular-layout"]], "rustworkx.digraph_closeness_centrality": [[368, "rustworkx-digraph-closeness-centrality"]], "rustworkx.digraph_complement": [[369, "rustworkx-digraph-complement"]], "rustworkx.digraph_core_number": [[370, "rustworkx-digraph-core-number"]], "rustworkx.digraph_dfs_edges": [[371, "rustworkx-digraph-dfs-edges"]], "rustworkx.digraph_dfs_search": [[372, "rustworkx-digraph-dfs-search"]], "rustworkx.digraph_dijkstra_search": [[373, "rustworkx-digraph-dijkstra-search"]], "rustworkx.digraph_dijkstra_shortest_path_lengths": [[374, "rustworkx-digraph-dijkstra-shortest-path-lengths"]], "rustworkx.digraph_dijkstra_shortest_paths": [[375, "rustworkx-digraph-dijkstra-shortest-paths"]], "rustworkx.digraph_distance_matrix": [[376, "rustworkx-digraph-distance-matrix"]], "rustworkx.digraph_edge_betweenness_centrality": [[377, "rustworkx-digraph-edge-betweenness-centrality"]], "rustworkx.digraph_eigenvector_centrality": [[378, "rustworkx-digraph-eigenvector-centrality"]], "rustworkx.digraph_find_cycle": [[379, "rustworkx-digraph-find-cycle"]], "rustworkx.digraph_floyd_warshall": [[380, "rustworkx-digraph-floyd-warshall"]], "rustworkx.digraph_floyd_warshall_numpy": [[381, "rustworkx-digraph-floyd-warshall-numpy"]], "rustworkx.digraph_floyd_warshall_successor_and_distance": [[382, "rustworkx-digraph-floyd-warshall-successor-and-distance"]], "rustworkx.digraph_is_isomorphic": [[383, "rustworkx-digraph-is-isomorphic"]], "rustworkx.digraph_is_subgraph_isomorphic": [[384, "rustworkx-digraph-is-subgraph-isomorphic"]], "rustworkx.digraph_k_shortest_path_lengths": [[385, "rustworkx-digraph-k-shortest-path-lengths"]], "rustworkx.digraph_katz_centrality": [[386, "rustworkx-digraph-katz-centrality"]], "rustworkx.digraph_longest_simple_path": [[387, "rustworkx-digraph-longest-simple-path"]], "rustworkx.digraph_maximum_bisimulation": [[388, "rustworkx-digraph-maximum-bisimulation"]], "rustworkx.digraph_node_link_json": [[389, "rustworkx-digraph-node-link-json"]], "rustworkx.digraph_num_shortest_paths_unweighted": [[390, "rustworkx-digraph-num-shortest-paths-unweighted"]], "rustworkx.digraph_random_layout": [[391, "rustworkx-digraph-random-layout"]], "rustworkx.digraph_shell_layout": [[392, "rustworkx-digraph-shell-layout"]], "rustworkx.digraph_spiral_layout": [[393, "rustworkx-digraph-spiral-layout"]], "rustworkx.digraph_spring_layout": [[394, "rustworkx-digraph-spring-layout"]], "rustworkx.digraph_tensor_product": [[395, "rustworkx-digraph-tensor-product"]], "rustworkx.digraph_transitivity": [[396, "rustworkx-digraph-transitivity"]], "rustworkx.digraph_union": [[397, "rustworkx-digraph-union"]], "rustworkx.digraph_unweighted_average_shortest_path_length": [[398, "rustworkx-digraph-unweighted-average-shortest-path-length"]], "rustworkx.digraph_vf2_mapping": [[399, "rustworkx-digraph-vf2-mapping"]], "rustworkx.dijkstra_search": [[400, "rustworkx-dijkstra-search"]], "rustworkx.dijkstra_shortest_path_lengths": [[401, "rustworkx-dijkstra-shortest-path-lengths"]], "rustworkx.dijkstra_shortest_paths": [[402, "rustworkx-dijkstra-shortest-paths"]], "rustworkx.directed_barabasi_albert_graph": [[403, "rustworkx-directed-barabasi-albert-graph"]], "rustworkx.directed_gnm_random_graph": [[404, "rustworkx-directed-gnm-random-graph"]], "rustworkx.directed_gnp_random_graph": [[405, "rustworkx-directed-gnp-random-graph"]], "rustworkx.directed_random_bipartite_graph": [[406, "rustworkx-directed-random-bipartite-graph"]], "rustworkx.directed_sbm_random_graph": [[407, "rustworkx-directed-sbm-random-graph"]], "rustworkx.distance_matrix": [[408, "rustworkx-distance-matrix"]], "rustworkx.edge_betweenness_centrality": [[409, "rustworkx-edge-betweenness-centrality"]], "rustworkx.eigenvector_centrality": [[410, "rustworkx-eigenvector-centrality"]], "rustworkx.find_negative_cycle": [[411, "rustworkx-find-negative-cycle"]], "rustworkx.floyd_warshall": [[412, "rustworkx-floyd-warshall"]], "rustworkx.floyd_warshall_numpy": [[413, "rustworkx-floyd-warshall-numpy"]], "rustworkx.floyd_warshall_successor_and_distance": [[414, "rustworkx-floyd-warshall-successor-and-distance"]], "rustworkx.from_node_link_json_file": [[415, "rustworkx-from-node-link-json-file"]], "rustworkx.generators.barbell_graph": [[416, "rustworkx-generators-barbell-graph"]], "rustworkx.generators.binomial_tree_graph": [[417, "rustworkx-generators-binomial-tree-graph"]], "rustworkx.generators.complete_graph": [[418, "rustworkx-generators-complete-graph"]], "rustworkx.generators.cycle_graph": [[419, "rustworkx-generators-cycle-graph"]], "rustworkx.generators.directed_binomial_tree_graph": [[420, "rustworkx-generators-directed-binomial-tree-graph"]], "rustworkx.generators.directed_complete_graph": [[421, "rustworkx-generators-directed-complete-graph"]], "rustworkx.generators.directed_cycle_graph": [[422, "rustworkx-generators-directed-cycle-graph"]], "rustworkx.generators.directed_empty_graph": [[423, "rustworkx-generators-directed-empty-graph"]], "rustworkx.generators.directed_grid_graph": [[424, "rustworkx-generators-directed-grid-graph"]], "rustworkx.generators.directed_heavy_hex_graph": [[425, "rustworkx-generators-directed-heavy-hex-graph"]], "rustworkx.generators.directed_heavy_square_graph": [[426, "rustworkx-generators-directed-heavy-square-graph"]], "rustworkx.generators.directed_hexagonal_lattice_graph": [[427, "rustworkx-generators-directed-hexagonal-lattice-graph"]], "rustworkx.generators.directed_mesh_graph": [[428, "rustworkx-generators-directed-mesh-graph"]], "rustworkx.generators.directed_path_graph": [[429, "rustworkx-generators-directed-path-graph"]], "rustworkx.generators.directed_star_graph": [[430, "rustworkx-generators-directed-star-graph"]], "rustworkx.generators.dorogovtsev_goltsev_mendes_graph": [[431, "rustworkx-generators-dorogovtsev-goltsev-mendes-graph"]], "rustworkx.generators.empty_graph": [[432, "rustworkx-generators-empty-graph"]], "rustworkx.generators.full_rary_tree": [[433, "rustworkx-generators-full-rary-tree"]], "rustworkx.generators.generalized_petersen_graph": [[434, "rustworkx-generators-generalized-petersen-graph"]], "rustworkx.generators.grid_graph": [[435, "rustworkx-generators-grid-graph"]], "rustworkx.generators.heavy_hex_graph": [[436, "rustworkx-generators-heavy-hex-graph"]], "rustworkx.generators.heavy_square_graph": [[437, "rustworkx-generators-heavy-square-graph"]], "rustworkx.generators.hexagonal_lattice_graph": [[438, "rustworkx-generators-hexagonal-lattice-graph"]], "rustworkx.generators.lollipop_graph": [[439, "rustworkx-generators-lollipop-graph"]], "rustworkx.generators.mesh_graph": [[440, "rustworkx-generators-mesh-graph"]], "rustworkx.generators.path_graph": [[441, "rustworkx-generators-path-graph"]], "rustworkx.generators.star_graph": [[442, "rustworkx-generators-star-graph"]], "rustworkx.graph_adjacency_matrix": [[443, "rustworkx-graph-adjacency-matrix"]], "rustworkx.graph_all_pairs_all_simple_paths": [[444, "rustworkx-graph-all-pairs-all-simple-paths"]], "rustworkx.graph_all_pairs_bellman_ford_path_lengths": [[445, "rustworkx-graph-all-pairs-bellman-ford-path-lengths"]], "rustworkx.graph_all_pairs_bellman_ford_shortest_paths": [[446, "rustworkx-graph-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.graph_all_pairs_dijkstra_path_lengths": [[447, "rustworkx-graph-all-pairs-dijkstra-path-lengths"]], "rustworkx.graph_all_pairs_dijkstra_shortest_paths": [[448, "rustworkx-graph-all-pairs-dijkstra-shortest-paths"]], "rustworkx.graph_all_shortest_paths": [[449, "rustworkx-graph-all-shortest-paths"]], "rustworkx.graph_all_simple_paths": [[450, "rustworkx-graph-all-simple-paths"]], "rustworkx.graph_astar_shortest_path": [[451, "rustworkx-graph-astar-shortest-path"]], "rustworkx.graph_bellman_ford_shortest_path_lengths": [[452, "rustworkx-graph-bellman-ford-shortest-path-lengths"]], "rustworkx.graph_betweenness_centrality": [[453, "rustworkx-graph-betweenness-centrality"]], "rustworkx.graph_bfs_search": [[454, "rustworkx-graph-bfs-search"]], "rustworkx.graph_bipartite_edge_color": [[455, "rustworkx-graph-bipartite-edge-color"]], "rustworkx.graph_bipartite_layout": [[456, "rustworkx-graph-bipartite-layout"]], "rustworkx.graph_cartesian_product": [[457, "rustworkx-graph-cartesian-product"]], "rustworkx.graph_circular_layout": [[458, "rustworkx-graph-circular-layout"]], "rustworkx.graph_closeness_centrality": [[459, "rustworkx-graph-closeness-centrality"]], "rustworkx.graph_complement": [[460, "rustworkx-graph-complement"]], "rustworkx.graph_core_number": [[461, "rustworkx-graph-core-number"]], "rustworkx.graph_dfs_edges": [[462, "rustworkx-graph-dfs-edges"]], "rustworkx.graph_dfs_search": [[463, "rustworkx-graph-dfs-search"]], "rustworkx.graph_dijkstra_search": [[464, "rustworkx-graph-dijkstra-search"]], "rustworkx.graph_dijkstra_shortest_path_lengths": [[465, "rustworkx-graph-dijkstra-shortest-path-lengths"]], "rustworkx.graph_dijkstra_shortest_paths": [[466, "rustworkx-graph-dijkstra-shortest-paths"]], "rustworkx.graph_distance_matrix": [[467, "rustworkx-graph-distance-matrix"]], "rustworkx.graph_edge_betweenness_centrality": [[468, "rustworkx-graph-edge-betweenness-centrality"]], "rustworkx.graph_eigenvector_centrality": [[469, "rustworkx-graph-eigenvector-centrality"]], "rustworkx.graph_floyd_warshall": [[470, "rustworkx-graph-floyd-warshall"]], "rustworkx.graph_floyd_warshall_numpy": [[471, "rustworkx-graph-floyd-warshall-numpy"]], "rustworkx.graph_floyd_warshall_successor_and_distance": [[472, "rustworkx-graph-floyd-warshall-successor-and-distance"]], "rustworkx.graph_greedy_color": [[473, "rustworkx-graph-greedy-color"]], "rustworkx.graph_greedy_edge_color": [[474, "rustworkx-graph-greedy-edge-color"]], "rustworkx.graph_is_isomorphic": [[475, "rustworkx-graph-is-isomorphic"]], "rustworkx.graph_is_subgraph_isomorphic": [[476, "rustworkx-graph-is-subgraph-isomorphic"]], "rustworkx.graph_k_shortest_path_lengths": [[477, "rustworkx-graph-k-shortest-path-lengths"]], "rustworkx.graph_katz_centrality": [[478, "rustworkx-graph-katz-centrality"]], "rustworkx.graph_line_graph": [[479, "rustworkx-graph-line-graph"]], "rustworkx.graph_longest_simple_path": [[480, "rustworkx-graph-longest-simple-path"]], "rustworkx.graph_misra_gries_edge_color": [[481, "rustworkx-graph-misra-gries-edge-color"]], "rustworkx.graph_node_link_json": [[482, "rustworkx-graph-node-link-json"]], "rustworkx.graph_num_shortest_paths_unweighted": [[483, "rustworkx-graph-num-shortest-paths-unweighted"]], "rustworkx.graph_random_layout": [[484, "rustworkx-graph-random-layout"]], "rustworkx.graph_shell_layout": [[485, "rustworkx-graph-shell-layout"]], "rustworkx.graph_spiral_layout": [[486, "rustworkx-graph-spiral-layout"]], "rustworkx.graph_spring_layout": [[487, "rustworkx-graph-spring-layout"]], "rustworkx.graph_tensor_product": [[488, "rustworkx-graph-tensor-product"]], "rustworkx.graph_token_swapper": [[489, "rustworkx-graph-token-swapper"]], "rustworkx.graph_transitivity": [[490, "rustworkx-graph-transitivity"]], "rustworkx.graph_union": [[491, "rustworkx-graph-union"]], "rustworkx.graph_unweighted_average_shortest_path_length": [[492, "rustworkx-graph-unweighted-average-shortest-path-length"]], "rustworkx.graph_vf2_mapping": [[493, "rustworkx-graph-vf2-mapping"]], "rustworkx.has_path": [[494, "rustworkx-has-path"]], "rustworkx.hits": [[495, "rustworkx-hits"]], "rustworkx.hyperbolic_random_graph": [[496, "rustworkx-hyperbolic-random-graph"]], "rustworkx.is_bipartite": [[497, "rustworkx-is-bipartite"]], "rustworkx.is_connected": [[498, "rustworkx-is-connected"]], "rustworkx.is_directed_acyclic_graph": [[499, "rustworkx-is-directed-acyclic-graph"]], "rustworkx.is_isomorphic": [[500, "rustworkx-is-isomorphic"]], "rustworkx.is_isomorphic_node_match": [[501, "rustworkx-is-isomorphic-node-match"]], "rustworkx.is_matching": [[502, "rustworkx-is-matching"]], "rustworkx.is_maximal_matching": [[503, "rustworkx-is-maximal-matching"]], "rustworkx.is_planar": [[504, "rustworkx-is-planar"]], "rustworkx.is_subgraph_isomorphic": [[505, "rustworkx-is-subgraph-isomorphic"]], "rustworkx.is_weakly_connected": [[506, "rustworkx-is-weakly-connected"]], "rustworkx.isolates": [[507, "rustworkx-isolates"]], "rustworkx.k_shortest_path_lengths": [[508, "rustworkx-k-shortest-path-lengths"]], "rustworkx.katz_centrality": [[509, "rustworkx-katz-centrality"]], "rustworkx.layers": [[510, "rustworkx-layers"]], "rustworkx.lexicographical_topological_sort": [[511, "rustworkx-lexicographical-topological-sort"]], "rustworkx.longest_simple_path": [[512, "rustworkx-longest-simple-path"]], "rustworkx.max_weight_matching": [[513, "rustworkx-max-weight-matching"]], "rustworkx.metric_closure": [[514, "rustworkx-metric-closure"]], "rustworkx.minimum_spanning_edges": [[515, "rustworkx-minimum-spanning-edges"]], "rustworkx.minimum_spanning_tree": [[516, "rustworkx-minimum-spanning-tree"]], "rustworkx.negative_edge_cycle": [[517, "rustworkx-negative-edge-cycle"]], "rustworkx.networkx_converter": [[518, "rustworkx-networkx-converter"]], "rustworkx.node_connected_component": [[519, "rustworkx-node-connected-component"]], "rustworkx.node_link_json": [[520, "rustworkx-node-link-json"]], "rustworkx.num_shortest_paths_unweighted": [[521, "rustworkx-num-shortest-paths-unweighted"]], "rustworkx.number_connected_components": [[522, "rustworkx-number-connected-components"]], "rustworkx.number_weakly_connected_components": [[523, "rustworkx-number-weakly-connected-components"]], "rustworkx.pagerank": [[524, "rustworkx-pagerank"]], "rustworkx.parse_node_link_json": [[525, "rustworkx-parse-node-link-json"]], "rustworkx.random_geometric_graph": [[526, "rustworkx-random-geometric-graph"]], "rustworkx.random_layout": [[527, "rustworkx-random-layout"]], "rustworkx.read_graphml": [[528, "rustworkx-read-graphml"]], "rustworkx.shell_layout": [[529, "rustworkx-shell-layout"]], "rustworkx.simple_cycles": [[530, "rustworkx-simple-cycles"]], "rustworkx.spiral_layout": [[531, "rustworkx-spiral-layout"]], "rustworkx.spring_layout": [[532, "rustworkx-spring-layout"]], "rustworkx.steiner_tree": [[533, "rustworkx-steiner-tree"]], "rustworkx.stoer_wagner_min_cut": [[534, "rustworkx-stoer-wagner-min-cut"]], "rustworkx.strongly_connected_components": [[535, "rustworkx-strongly-connected-components"]], "rustworkx.topological_generations": [[536, "rustworkx-topological-generations"]], "rustworkx.topological_sort": [[537, "rustworkx-topological-sort"]], "rustworkx.transitive_reduction": [[538, "rustworkx-transitive-reduction"]], "rustworkx.transitivity": [[539, "rustworkx-transitivity"]], "rustworkx.two_color": [[540, "rustworkx-two-color"]], "rustworkx.undirected_gnm_random_graph": [[541, "rustworkx-undirected-gnm-random-graph"]], "rustworkx.undirected_gnp_random_graph": [[542, "rustworkx-undirected-gnp-random-graph"]], "rustworkx.undirected_random_bipartite_graph": [[543, "rustworkx-undirected-random-bipartite-graph"]], "rustworkx.undirected_sbm_random_graph": [[544, "rustworkx-undirected-sbm-random-graph"]], "rustworkx.union": [[545, "rustworkx-union"]], "rustworkx.unweighted_average_shortest_path_length": [[546, "rustworkx-unweighted-average-shortest-path-length"]], "rustworkx.vf2_mapping": [[547, "rustworkx-vf2-mapping"]], "BFSVisitor": [[548, "bfsvisitor"]], "rustworkx.visit.BFSVisitor.black_target_edge": [[549, "rustworkx-visit-bfsvisitor-black-target-edge"]], "rustworkx.visit.BFSVisitor.discover_vertex": [[550, "rustworkx-visit-bfsvisitor-discover-vertex"]], "rustworkx.visit.BFSVisitor.finish_vertex": [[551, "rustworkx-visit-bfsvisitor-finish-vertex"]], "rustworkx.visit.BFSVisitor.gray_target_edge": [[552, "rustworkx-visit-bfsvisitor-gray-target-edge"]], "rustworkx.visit.BFSVisitor.non_tree_edge": [[553, "rustworkx-visit-bfsvisitor-non-tree-edge"]], "rustworkx.visit.BFSVisitor.tree_edge": [[554, "rustworkx-visit-bfsvisitor-tree-edge"]], "DFSVisitor": [[555, "dfsvisitor"]], "rustworkx.visit.DFSVisitor.back_edge": [[556, "rustworkx-visit-dfsvisitor-back-edge"]], "rustworkx.visit.DFSVisitor.discover_vertex": [[557, "rustworkx-visit-dfsvisitor-discover-vertex"]], "rustworkx.visit.DFSVisitor.finish_vertex": [[558, "rustworkx-visit-dfsvisitor-finish-vertex"]], "rustworkx.visit.DFSVisitor.forward_or_cross_edge": [[559, "rustworkx-visit-dfsvisitor-forward-or-cross-edge"]], "rustworkx.visit.DFSVisitor.tree_edge": [[560, "rustworkx-visit-dfsvisitor-tree-edge"]], "DijkstraVisitor": [[561, "dijkstravisitor"]], "rustworkx.visit.DijkstraVisitor.discover_vertex": [[562, "rustworkx-visit-dijkstravisitor-discover-vertex"]], "rustworkx.visit.DijkstraVisitor.edge_not_relaxed": [[563, "rustworkx-visit-dijkstravisitor-edge-not-relaxed"]], "rustworkx.visit.DijkstraVisitor.edge_relaxed": [[564, "rustworkx-visit-dijkstravisitor-edge-relaxed"]], "rustworkx.visit.DijkstraVisitor.examine_edge": [[565, "rustworkx-visit-dijkstravisitor-examine-edge"]], "rustworkx.visit.DijkstraVisitor.finish_vertex": [[566, "rustworkx-visit-dijkstravisitor-finish-vertex"]], "rustworkx.visit.PruneSearch": [[567, "rustworkx-visit-prunesearch"]], "rustworkx.visit.StopSearch": [[568, "rustworkx-visit-stopsearch"]], "rustworkx.visualization.graphviz_draw": [[569, "rustworkx-visualization-graphviz-draw"]], "rustworkx.visualization.mpl_draw": [[570, "rustworkx-visualization-mpl-draw"]], "rustworkx.weakly_connected_components": [[571, "rustworkx-weakly-connected-components"]], "Rustworkx Comparison Benchmarks With Other Libraries": [[572, "rustworkx-comparison-benchmarks-with-other-libraries"]], "Graph Creation": [[572, "graph-creation"]], "Single Source Shortest Path": [[572, "single-source-shortest-path"]], "All-Pairs Shortest Path": [[572, "all-pairs-shortest-path"]], "Subgraph Isomorphism": [[572, "subgraph-isomorphism"]], "Citation": [[572, "citation"]], "rustworkx Documentation": [[573, "rustworkx-documentation"]], "Project history": [[573, "project-history"]], "Getting Started": [[574, "getting-started"]], "Installing Rustworkx": [[574, "installing-rustworkx"]], "Installing on a platform without precompiled binaries": [[574, "installing-on-a-platform-without-precompiled-binaries"]], "Platform Support": [[574, "platform-support"], [574, "id6"]], "Tier 1": [[574, "tier-1"]], "Tier 2": [[574, "tier-2"]], "Tier 3": [[574, "tier-3"]], "Tier 4": [[574, "tier-4"]], "Using rustworkx": [[574, "using-rustworkx"]], "rustworkx for NetworkX users": [[575, "rustworkx-for-networkx-users"]], "Some Key Differences": [[575, "some-key-differences"]], "Graph Data and Attributes": [[575, "graph-data-and-attributes"]], "Nodes": [[575, "nodes"], [580, "nodes"]], "Edges": [[575, "edges"], [580, "edges"]], "Attributes": [[575, "attributes"]], "Examining elements of a graph": [[575, "examining-elements-of-a-graph"], [580, "examining-elements-of-a-graph"]], "API Equivalents": [[575, "api-equivalents"]], "Class Constructors": [[575, "class-constructors"]], "Graph Modifiers": [[575, "graph-modifiers"]], "Matrix Converter Functions": [[575, "matrix-converter-functions"]], "Visualization Functions": [[575, "visualization-functions"]], "Matplotlib Drawers": [[575, "matplotlib-drawers"]], "Converting from a networkx graph": [[575, "converting-from-a-networkx-graph"]], "Functionality Gaps": [[575, "functionality-gaps"]], "0.15.1": [[576, "relnotes-0-15-1"]], "Prelude": [[576, "prelude"], [576, "relnotes-0-15-0-prelude"], [576, "relnotes-0-14-0-prelude"], [576, "relnotes-0-13-0-prelude"], [576, "relnotes-0-12-0-prelude"], [576, "relnotes-0-11-0-prelude"], [576, "relnotes-0-10-2-prelude"], [576, "relnotes-0-10-1-prelude"], [576, "relnotes-0-10-0-prelude"], [576, "relnotes-0-9-0-prelude"], [576, "relnotes-0-8-0-prelude"]], "Bug Fixes": [[576, "bug-fixes"], [576, "relnotes-0-15-0-bug-fixes"], [576, "relnotes-0-14-0-bug-fixes"], [576, "relnotes-0-13-0-bug-fixes"], [576, "relnotes-0-12-0-bug-fixes"], [576, "relnotes-0-11-0-bug-fixes"], [576, "relnotes-0-10-2-bug-fixes"], [576, "relnotes-0-10-0-bug-fixes"], [576, "relnotes-0-9-0-bug-fixes"], [576, "relnotes-0-8-0-bug-fixes"]], "0.15.0": [[576, "relnotes-0-15-0"]], "New Features": [[576, "new-features"], [576, "relnotes-0-14-0-new-features"], [576, "relnotes-0-13-0-new-features"], [576, "relnotes-0-12-0-new-features"], [576, "relnotes-0-11-0-new-features"], [576, "relnotes-0-10-2-new-features"], [576, "relnotes-0-10-0-new-features"], [576, "relnotes-0-9-0-new-features"], [576, "relnotes-0-8-0-new-features"], [576, "id51"], [576, "id54"], [576, "id58"], [576, "id61"]], "Upgrade Notes": [[576, "upgrade-notes"], [576, "relnotes-0-14-0-upgrade-notes"], [576, "relnotes-0-13-0-upgrade-notes"], [576, "relnotes-0-12-0-upgrade-notes"], [576, "relnotes-0-11-0-upgrade-notes"], [576, "relnotes-0-10-0-upgrade-notes"], [576, "relnotes-0-9-0-upgrade-notes"], [576, "relnotes-0-8-0-upgrade-notes"], [576, "id52"], [576, "id55"], [576, "id62"]], "Other Notes": [[576, "other-notes"], [576, "relnotes-0-14-0-other-notes"]], "0.14.0": [[576, "relnotes-0-14-0"]], "Deprecation Notes": [[576, "deprecation-notes"]], "0.13.0": [[576, "relnotes-0-13-0"]], "0.12.0": [[576, "relnotes-0-12-0"]], "0.11.0": [[576, "relnotes-0-11-0"]], "0.10.2": [[576, "relnotes-0-10-2"]], "0.10.1": [[576, "relnotes-0-10-1"]], "0.10.0": [[576, "relnotes-0-10-0"]], "0.9.0": [[576, "relnotes-0-9-0"]], "0.8.0": [[576, "relnotes-0-8-0"]], "0.7.1": [[576, "id49"]], "0.7.0": [[576, "id50"]], "Fixes": [[576, "fixes"], [576, "id56"], [576, "id59"], [576, "id63"]], "0.6.0": [[576, "id53"]], "0.5.0": [[576, "id57"]], "0.4.0": [[576, "id60"]], "Working with Betweenness Centrality": [[577, "working-with-betweenness-centrality"]], "Generate a Graph": [[577, "generate-a-graph"]], "Calculate the Betweeness Centrality": [[577, "calculate-the-betweeness-centrality"]], "Visualize the Betweenness Centrality": [[577, "visualize-the-betweenness-centrality"]], "Directed Acyclic Graphs": [[578, "directed-acyclic-graphs"], [578, "id1"]], "Directed Graph": [[578, "directed-graph"]], "Applications of DAGs": [[578, "applications-of-dags"]], "Task Scheduling": [[578, "task-scheduling"]], "Qiskit\u2019s Compiler": [[578, "qiskit-s-compiler"]], "rustworkx Tutorials and Guides": [[579, "rustworkx-tutorials-and-guides"]], "Introduction to rustworkx": [[580, "introduction-to-rustworkx"]], "Installing rustworkx": [[580, "installing-rustworkx"]], "How to import rustworkx": [[580, "how-to-import-rustworkx"]], "Creating a Graph": [[580, "creating-a-graph"]], "Removing elements from a graph": [[580, "removing-elements-from-a-graph"]], "Modifying elements of a graph": [[580, "modifying-elements-of-a-graph"]], "What to use for node and edge data payload": [[580, "what-to-use-for-node-and-edge-data-payload"]], "Accessing edges and neighbors": [[580, "accessing-edges-and-neighbors"]], "Graph Attributes": [[580, "graph-attributes"]], "Directed Graphs": [[580, "directed-graphs"]], "Multigraphs": [[580, "multigraphs"]], "Graph Generators and operations": [[580, "graph-generators-and-operations"]], "Analyzing graphs": [[580, "analyzing-graphs"]], "Drawing graphs": [[580, "drawing-graphs"]], "Visualization": [[581, "visualization"]], "Visualization API": [[581, "visualization-api"]]}, "indexentries": {"allpairspathlengthmapping (class in rustworkx)": [[25, "rustworkx.AllPairsPathLengthMapping"]], "items() (allpairspathlengthmapping method)": [[26, "rustworkx.AllPairsPathLengthMapping.items"]], "keys() (allpairspathlengthmapping method)": [[27, "rustworkx.AllPairsPathLengthMapping.keys"]], "values() (allpairspathlengthmapping method)": [[28, "rustworkx.AllPairsPathLengthMapping.values"]], "allpairspathmapping (class in rustworkx)": [[29, "rustworkx.AllPairsPathMapping"]], "items() (allpairspathmapping method)": [[30, "rustworkx.AllPairsPathMapping.items"]], "keys() (allpairspathmapping method)": [[31, "rustworkx.AllPairsPathMapping.keys"]], "values() (allpairspathmapping method)": [[32, "rustworkx.AllPairsPathMapping.values"]], "bfspredecessors (class in rustworkx)": [[33, "rustworkx.BFSPredecessors"]], "bfssuccessors (class in rustworkx)": [[34, "rustworkx.BFSSuccessors"]], "biconnectedcomponents (class in rustworkx)": [[35, "rustworkx.BiconnectedComponents"]], "items() (biconnectedcomponents method)": [[36, "rustworkx.BiconnectedComponents.items"]], "keys() (biconnectedcomponents method)": [[37, "rustworkx.BiconnectedComponents.keys"]], "values() (biconnectedcomponents method)": [[38, "rustworkx.BiconnectedComponents.values"]], "centralitymapping (class in rustworkx)": [[39, "rustworkx.CentralityMapping"]], "items() (centralitymapping method)": [[40, "rustworkx.CentralityMapping.items"]], "keys() (centralitymapping method)": [[41, "rustworkx.CentralityMapping.keys"]], "values() (centralitymapping method)": [[42, "rustworkx.CentralityMapping.values"]], "chains (class in rustworkx)": [[43, "rustworkx.Chains"]], "coloringstrategy (class in rustworkx)": [[44, "rustworkx.ColoringStrategy"]], "degree (coloringstrategy attribute)": [[44, "rustworkx.ColoringStrategy.Degree"]], "independentset (coloringstrategy attribute)": [[44, "rustworkx.ColoringStrategy.IndependentSet"]], "saturation (coloringstrategy attribute)": [[44, "rustworkx.ColoringStrategy.Saturation"]], "daghascycle": [[45, "rustworkx.DAGHasCycle"]], "dagwouldcycle": [[46, "rustworkx.DAGWouldCycle"]], "edgecentralitymapping (class in rustworkx)": [[47, "rustworkx.EdgeCentralityMapping"]], "items() (edgecentralitymapping method)": [[48, "rustworkx.EdgeCentralityMapping.items"]], "keys() (edgecentralitymapping method)": [[49, "rustworkx.EdgeCentralityMapping.keys"]], "values() (edgecentralitymapping method)": [[50, "rustworkx.EdgeCentralityMapping.values"]], "edgeindexmap (class in rustworkx)": [[51, "rustworkx.EdgeIndexMap"]], "items() (edgeindexmap method)": [[52, "rustworkx.EdgeIndexMap.items"]], "keys() (edgeindexmap method)": [[53, "rustworkx.EdgeIndexMap.keys"]], "values() (edgeindexmap method)": [[54, "rustworkx.EdgeIndexMap.values"]], "edgeindices (class in rustworkx)": [[55, "rustworkx.EdgeIndices"]], "edgelist (class in rustworkx)": [[56, "rustworkx.EdgeList"]], "graphnotbipartite": [[57, "rustworkx.GraphNotBipartite"]], "indexpartitionblock (class in rustworkx)": [[58, "rustworkx.IndexPartitionBlock"]], "invalidmapping": [[59, "rustworkx.InvalidMapping"]], "invalidnode": [[60, "rustworkx.InvalidNode"]], "jsonserializationerror": [[61, "rustworkx.JSONSerializationError"]], "negativecycle": [[62, "rustworkx.NegativeCycle"]], "noedgebetweennodes": [[63, "rustworkx.NoEdgeBetweenNodes"]], "nopathfound": [[64, "rustworkx.NoPathFound"]], "nosuitableneighbors": [[65, "rustworkx.NoSuitableNeighbors"]], "nodeindices (class in rustworkx)": [[66, "rustworkx.NodeIndices"]], "nodemap (class in rustworkx)": [[67, "rustworkx.NodeMap"]], "items() (nodemap method)": [[68, "rustworkx.NodeMap.items"]], "keys() (nodemap method)": [[69, "rustworkx.NodeMap.keys"]], "values() (nodemap method)": [[70, "rustworkx.NodeMap.values"]], "nullgraph": [[71, "rustworkx.NullGraph"]], "pathlengthmapping (class in rustworkx)": [[72, "rustworkx.PathLengthMapping"]], "items() (pathlengthmapping method)": [[73, "rustworkx.PathLengthMapping.items"]], "keys() (pathlengthmapping method)": [[74, "rustworkx.PathLengthMapping.keys"]], "values() (pathlengthmapping method)": [[75, "rustworkx.PathLengthMapping.values"]], "pathmapping (class in rustworkx)": [[76, "rustworkx.PathMapping"]], "items() (pathmapping method)": [[77, "rustworkx.PathMapping.items"]], "keys() (pathmapping method)": [[78, "rustworkx.PathMapping.keys"]], "values() (pathmapping method)": [[79, "rustworkx.PathMapping.values"]], "pos2dmapping (class in rustworkx)": [[80, "rustworkx.Pos2DMapping"]], "items() (pos2dmapping method)": [[81, "rustworkx.Pos2DMapping.items"]], "keys() (pos2dmapping method)": [[82, "rustworkx.Pos2DMapping.keys"]], "values() (pos2dmapping method)": [[83, "rustworkx.Pos2DMapping.values"]], "productnodemap (class in rustworkx)": [[84, "rustworkx.ProductNodeMap"]], "items() (productnodemap method)": [[85, "rustworkx.ProductNodeMap.items"]], "keys() (productnodemap method)": [[86, "rustworkx.ProductNodeMap.keys"]], "values() (productnodemap method)": [[87, "rustworkx.ProductNodeMap.values"]], "pydag (class in rustworkx)": [[88, "rustworkx.PyDAG"]], "attrs (pydag attribute)": [[88, "rustworkx.PyDAG.attrs"]], "check_cycle (pydag attribute)": [[88, "rustworkx.PyDAG.check_cycle"]], "multigraph (pydag attribute)": [[88, "rustworkx.PyDAG.multigraph"]], "add_child() (pydag method)": [[89, "rustworkx.PyDAG.add_child"]], "add_edge() (pydag method)": [[90, "rustworkx.PyDAG.add_edge"]], "add_edges_from() (pydag method)": [[91, "rustworkx.PyDAG.add_edges_from"]], "add_edges_from_no_data() (pydag method)": [[92, "rustworkx.PyDAG.add_edges_from_no_data"]], "add_node() (pydag method)": [[93, "rustworkx.PyDAG.add_node"]], "add_nodes_from() (pydag method)": [[94, "rustworkx.PyDAG.add_nodes_from"]], "add_parent() (pydag method)": [[95, "rustworkx.PyDAG.add_parent"]], "adj() (pydag method)": [[96, "rustworkx.PyDAG.adj"]], "adj_direction() (pydag method)": [[97, "rustworkx.PyDAG.adj_direction"]], "clear() (pydag method)": [[98, "rustworkx.PyDAG.clear"]], "clear_edges() (pydag method)": [[99, "rustworkx.PyDAG.clear_edges"]], "compose() (pydag method)": [[100, "rustworkx.PyDAG.compose"]], "contract_nodes() (pydag method)": [[101, "rustworkx.PyDAG.contract_nodes"]], "copy() (pydag method)": [[102, "rustworkx.PyDAG.copy"]], "edge_index_map() (pydag method)": [[103, "rustworkx.PyDAG.edge_index_map"]], "edge_indices() (pydag method)": [[104, "rustworkx.PyDAG.edge_indices"]], "edge_indices_from_endpoints() (pydag method)": [[105, "rustworkx.PyDAG.edge_indices_from_endpoints"]], "edge_list() (pydag method)": [[106, "rustworkx.PyDAG.edge_list"]], "edge_subgraph() (pydag method)": [[107, "rustworkx.PyDAG.edge_subgraph"]], "edges() (pydag method)": [[108, "rustworkx.PyDAG.edges"]], "extend_from_edge_list() (pydag method)": [[109, "rustworkx.PyDAG.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pydag method)": [[110, "rustworkx.PyDAG.extend_from_weighted_edge_list"]], "filter_edges() (pydag method)": [[111, "rustworkx.PyDAG.filter_edges"]], "filter_nodes() (pydag method)": [[112, "rustworkx.PyDAG.filter_nodes"]], "find_adjacent_node_by_edge() (pydag method)": [[113, "rustworkx.PyDAG.find_adjacent_node_by_edge"]], "find_node_by_weight() (pydag method)": [[114, "rustworkx.PyDAG.find_node_by_weight"]], "find_predecessor_node_by_edge() (pydag method)": [[115, "rustworkx.PyDAG.find_predecessor_node_by_edge"]], "find_predecessors_by_edge() (pydag method)": [[116, "rustworkx.PyDAG.find_predecessors_by_edge"]], "find_successors_by_edge() (pydag method)": [[117, "rustworkx.PyDAG.find_successors_by_edge"]], "from_adjacency_matrix() (pydag static method)": [[118, "rustworkx.PyDAG.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pydag static method)": [[119, "rustworkx.PyDAG.from_complex_adjacency_matrix"]], "get_all_edge_data() (pydag method)": [[120, "rustworkx.PyDAG.get_all_edge_data"]], "get_edge_data() (pydag method)": [[121, "rustworkx.PyDAG.get_edge_data"]], "get_edge_data_by_index() (pydag method)": [[122, "rustworkx.PyDAG.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pydag method)": [[123, "rustworkx.PyDAG.get_edge_endpoints_by_index"]], "get_node_data() (pydag method)": [[124, "rustworkx.PyDAG.get_node_data"]], "has_edge() (pydag method)": [[125, "rustworkx.PyDAG.has_edge"]], "has_node() (pydag method)": [[126, "rustworkx.PyDAG.has_node"]], "has_parallel_edges() (pydag method)": [[127, "rustworkx.PyDAG.has_parallel_edges"]], "in_degree() (pydag method)": [[128, "rustworkx.PyDAG.in_degree"]], "in_edges() (pydag method)": [[129, "rustworkx.PyDAG.in_edges"]], "incident_edge_index_map() (pydag method)": [[130, "rustworkx.PyDAG.incident_edge_index_map"]], "incident_edges() (pydag method)": [[131, "rustworkx.PyDAG.incident_edges"]], "insert_node_on_in_edges() (pydag method)": [[132, "rustworkx.PyDAG.insert_node_on_in_edges"]], "insert_node_on_in_edges_multiple() (pydag method)": [[133, "rustworkx.PyDAG.insert_node_on_in_edges_multiple"]], "insert_node_on_out_edges() (pydag method)": [[134, "rustworkx.PyDAG.insert_node_on_out_edges"]], "insert_node_on_out_edges_multiple() (pydag method)": [[135, "rustworkx.PyDAG.insert_node_on_out_edges_multiple"]], "is_symmetric() (pydag method)": [[136, "rustworkx.PyDAG.is_symmetric"]], "make_symmetric() (pydag method)": [[137, "rustworkx.PyDAG.make_symmetric"]], "merge_nodes() (pydag method)": [[138, "rustworkx.PyDAG.merge_nodes"]], "neighbors() (pydag method)": [[139, "rustworkx.PyDAG.neighbors"]], "node_indexes() (pydag method)": [[140, "rustworkx.PyDAG.node_indexes"]], "node_indices() (pydag method)": [[141, "rustworkx.PyDAG.node_indices"]], "nodes() (pydag method)": [[142, "rustworkx.PyDAG.nodes"]], "num_edges() (pydag method)": [[143, "rustworkx.PyDAG.num_edges"]], "num_nodes() (pydag method)": [[144, "rustworkx.PyDAG.num_nodes"]], "out_degree() (pydag method)": [[145, "rustworkx.PyDAG.out_degree"]], "out_edges() (pydag method)": [[146, "rustworkx.PyDAG.out_edges"]], "predecessor_indices() (pydag method)": [[147, "rustworkx.PyDAG.predecessor_indices"]], "predecessors() (pydag method)": [[148, "rustworkx.PyDAG.predecessors"]], "read_edge_list() (pydag static method)": [[149, "rustworkx.PyDAG.read_edge_list"]], "remove_edge() (pydag method)": [[150, "rustworkx.PyDAG.remove_edge"]], "remove_edge_from_index() (pydag method)": [[151, "rustworkx.PyDAG.remove_edge_from_index"]], "remove_edges_from() (pydag method)": [[152, "rustworkx.PyDAG.remove_edges_from"]], "remove_node() (pydag method)": [[153, "rustworkx.PyDAG.remove_node"]], "remove_node_retain_edges() (pydag method)": [[154, "rustworkx.PyDAG.remove_node_retain_edges"]], "remove_node_retain_edges_by_id() (pydag method)": [[155, "rustworkx.PyDAG.remove_node_retain_edges_by_id"]], "remove_node_retain_edges_by_key() (pydag method)": [[156, "rustworkx.PyDAG.remove_node_retain_edges_by_key"]], "remove_nodes_from() (pydag method)": [[157, "rustworkx.PyDAG.remove_nodes_from"]], "reverse() (pydag method)": [[158, "rustworkx.PyDAG.reverse"]], "subgraph() (pydag method)": [[159, "rustworkx.PyDAG.subgraph"]], "substitute_node_with_subgraph() (pydag method)": [[160, "rustworkx.PyDAG.substitute_node_with_subgraph"]], "successor_indices() (pydag method)": [[161, "rustworkx.PyDAG.successor_indices"]], "successors() (pydag method)": [[162, "rustworkx.PyDAG.successors"]], "to_dot() (pydag method)": [[163, "rustworkx.PyDAG.to_dot"]], "to_undirected() (pydag method)": [[164, "rustworkx.PyDAG.to_undirected"]], "update_edge() (pydag method)": [[165, "rustworkx.PyDAG.update_edge"]], "update_edge_by_index() (pydag method)": [[166, "rustworkx.PyDAG.update_edge_by_index"]], "weighted_edge_list() (pydag method)": [[167, "rustworkx.PyDAG.weighted_edge_list"]], "write_edge_list() (pydag method)": [[168, "rustworkx.PyDAG.write_edge_list"]], "pydigraph (class in rustworkx)": [[169, "rustworkx.PyDiGraph"]], "attrs (pydigraph attribute)": [[169, "rustworkx.PyDiGraph.attrs"]], "check_cycle (pydigraph attribute)": [[169, "rustworkx.PyDiGraph.check_cycle"]], "multigraph (pydigraph attribute)": [[169, "rustworkx.PyDiGraph.multigraph"]], "add_child() (pydigraph method)": [[170, "rustworkx.PyDiGraph.add_child"]], "add_edge() (pydigraph method)": [[171, "rustworkx.PyDiGraph.add_edge"]], "add_edges_from() (pydigraph method)": [[172, "rustworkx.PyDiGraph.add_edges_from"]], "add_edges_from_no_data() (pydigraph method)": [[173, "rustworkx.PyDiGraph.add_edges_from_no_data"]], "add_node() (pydigraph method)": [[174, "rustworkx.PyDiGraph.add_node"]], "add_nodes_from() (pydigraph method)": [[175, "rustworkx.PyDiGraph.add_nodes_from"]], "add_parent() (pydigraph method)": [[176, "rustworkx.PyDiGraph.add_parent"]], "adj() (pydigraph method)": [[177, "rustworkx.PyDiGraph.adj"]], "adj_direction() (pydigraph method)": [[178, "rustworkx.PyDiGraph.adj_direction"]], "clear() (pydigraph method)": [[179, "rustworkx.PyDiGraph.clear"]], "clear_edges() (pydigraph method)": [[180, "rustworkx.PyDiGraph.clear_edges"]], "compose() (pydigraph method)": [[181, "rustworkx.PyDiGraph.compose"]], "contract_nodes() (pydigraph method)": [[182, "rustworkx.PyDiGraph.contract_nodes"]], "copy() (pydigraph method)": [[183, "rustworkx.PyDiGraph.copy"]], "edge_index_map() (pydigraph method)": [[184, "rustworkx.PyDiGraph.edge_index_map"]], "edge_indices() (pydigraph method)": [[185, "rustworkx.PyDiGraph.edge_indices"]], "edge_indices_from_endpoints() (pydigraph method)": [[186, "rustworkx.PyDiGraph.edge_indices_from_endpoints"]], "edge_list() (pydigraph method)": [[187, "rustworkx.PyDiGraph.edge_list"]], "edge_subgraph() (pydigraph method)": [[188, "rustworkx.PyDiGraph.edge_subgraph"]], "edges() (pydigraph method)": [[189, "rustworkx.PyDiGraph.edges"]], "extend_from_edge_list() (pydigraph method)": [[190, "rustworkx.PyDiGraph.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pydigraph method)": [[191, "rustworkx.PyDiGraph.extend_from_weighted_edge_list"]], "filter_edges() (pydigraph method)": [[192, "rustworkx.PyDiGraph.filter_edges"]], "filter_nodes() (pydigraph method)": [[193, "rustworkx.PyDiGraph.filter_nodes"]], "find_adjacent_node_by_edge() (pydigraph method)": [[194, "rustworkx.PyDiGraph.find_adjacent_node_by_edge"]], "find_node_by_weight() (pydigraph method)": [[195, "rustworkx.PyDiGraph.find_node_by_weight"]], "find_predecessor_node_by_edge() (pydigraph method)": [[196, "rustworkx.PyDiGraph.find_predecessor_node_by_edge"]], "find_predecessors_by_edge() (pydigraph method)": [[197, "rustworkx.PyDiGraph.find_predecessors_by_edge"]], "find_successors_by_edge() (pydigraph method)": [[198, "rustworkx.PyDiGraph.find_successors_by_edge"]], "from_adjacency_matrix() (pydigraph static method)": [[199, "rustworkx.PyDiGraph.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pydigraph static method)": [[200, "rustworkx.PyDiGraph.from_complex_adjacency_matrix"]], "get_all_edge_data() (pydigraph method)": [[201, "rustworkx.PyDiGraph.get_all_edge_data"]], "get_edge_data() (pydigraph method)": [[202, "rustworkx.PyDiGraph.get_edge_data"]], "get_edge_data_by_index() (pydigraph method)": [[203, "rustworkx.PyDiGraph.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pydigraph method)": [[204, "rustworkx.PyDiGraph.get_edge_endpoints_by_index"]], "get_node_data() (pydigraph method)": [[205, "rustworkx.PyDiGraph.get_node_data"]], "has_edge() (pydigraph method)": [[206, "rustworkx.PyDiGraph.has_edge"]], "has_node() (pydigraph method)": [[207, "rustworkx.PyDiGraph.has_node"]], "has_parallel_edges() (pydigraph method)": [[208, "rustworkx.PyDiGraph.has_parallel_edges"]], "in_degree() (pydigraph method)": [[209, "rustworkx.PyDiGraph.in_degree"]], "in_edges() (pydigraph method)": [[210, "rustworkx.PyDiGraph.in_edges"]], "incident_edge_index_map() (pydigraph method)": [[211, "rustworkx.PyDiGraph.incident_edge_index_map"]], "incident_edges() (pydigraph method)": [[212, "rustworkx.PyDiGraph.incident_edges"]], "insert_node_on_in_edges() (pydigraph method)": [[213, "rustworkx.PyDiGraph.insert_node_on_in_edges"]], "insert_node_on_in_edges_multiple() (pydigraph method)": [[214, "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple"]], "insert_node_on_out_edges() (pydigraph method)": [[215, "rustworkx.PyDiGraph.insert_node_on_out_edges"]], "insert_node_on_out_edges_multiple() (pydigraph method)": [[216, "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple"]], "is_symmetric() (pydigraph method)": [[217, "rustworkx.PyDiGraph.is_symmetric"]], "make_symmetric() (pydigraph method)": [[218, "rustworkx.PyDiGraph.make_symmetric"]], "merge_nodes() (pydigraph method)": [[219, "rustworkx.PyDiGraph.merge_nodes"]], "neighbors() (pydigraph method)": [[220, "rustworkx.PyDiGraph.neighbors"]], "node_indexes() (pydigraph method)": [[221, "rustworkx.PyDiGraph.node_indexes"]], "node_indices() (pydigraph method)": [[222, "rustworkx.PyDiGraph.node_indices"]], "nodes() (pydigraph method)": [[223, "rustworkx.PyDiGraph.nodes"]], "num_edges() (pydigraph method)": [[224, "rustworkx.PyDiGraph.num_edges"]], "num_nodes() (pydigraph method)": [[225, "rustworkx.PyDiGraph.num_nodes"]], "out_degree() (pydigraph method)": [[226, "rustworkx.PyDiGraph.out_degree"]], "out_edges() (pydigraph method)": [[227, "rustworkx.PyDiGraph.out_edges"]], "predecessor_indices() (pydigraph method)": [[228, "rustworkx.PyDiGraph.predecessor_indices"]], "predecessors() (pydigraph method)": [[229, "rustworkx.PyDiGraph.predecessors"]], "read_edge_list() (pydigraph static method)": [[230, "rustworkx.PyDiGraph.read_edge_list"]], "remove_edge() (pydigraph method)": [[231, "rustworkx.PyDiGraph.remove_edge"]], "remove_edge_from_index() (pydigraph method)": [[232, "rustworkx.PyDiGraph.remove_edge_from_index"]], "remove_edges_from() (pydigraph method)": [[233, "rustworkx.PyDiGraph.remove_edges_from"]], "remove_node() (pydigraph method)": [[234, "rustworkx.PyDiGraph.remove_node"]], "remove_node_retain_edges() (pydigraph method)": [[235, "rustworkx.PyDiGraph.remove_node_retain_edges"]], "remove_node_retain_edges_by_id() (pydigraph method)": [[236, "rustworkx.PyDiGraph.remove_node_retain_edges_by_id"]], "remove_node_retain_edges_by_key() (pydigraph method)": [[237, "rustworkx.PyDiGraph.remove_node_retain_edges_by_key"]], "remove_nodes_from() (pydigraph method)": [[238, "rustworkx.PyDiGraph.remove_nodes_from"]], "reverse() (pydigraph method)": [[239, "rustworkx.PyDiGraph.reverse"]], "subgraph() (pydigraph method)": [[240, "rustworkx.PyDiGraph.subgraph"]], "substitute_node_with_subgraph() (pydigraph method)": [[241, "rustworkx.PyDiGraph.substitute_node_with_subgraph"]], "successor_indices() (pydigraph method)": [[242, "rustworkx.PyDiGraph.successor_indices"]], "successors() (pydigraph method)": [[243, "rustworkx.PyDiGraph.successors"]], "to_dot() (pydigraph method)": [[244, "rustworkx.PyDiGraph.to_dot"]], "to_undirected() (pydigraph method)": [[245, "rustworkx.PyDiGraph.to_undirected"]], "update_edge() (pydigraph method)": [[246, "rustworkx.PyDiGraph.update_edge"]], "update_edge_by_index() (pydigraph method)": [[247, "rustworkx.PyDiGraph.update_edge_by_index"]], "weighted_edge_list() (pydigraph method)": [[248, "rustworkx.PyDiGraph.weighted_edge_list"]], "write_edge_list() (pydigraph method)": [[249, "rustworkx.PyDiGraph.write_edge_list"]], "pygraph (class in rustworkx)": [[250, "rustworkx.PyGraph"]], "attrs (pygraph attribute)": [[250, "rustworkx.PyGraph.attrs"]], "multigraph (pygraph attribute)": [[250, "rustworkx.PyGraph.multigraph"]], "add_edge() (pygraph method)": [[251, "rustworkx.PyGraph.add_edge"]], "add_edges_from() (pygraph method)": [[252, "rustworkx.PyGraph.add_edges_from"]], "add_edges_from_no_data() (pygraph method)": [[253, "rustworkx.PyGraph.add_edges_from_no_data"]], "add_node() (pygraph method)": [[254, "rustworkx.PyGraph.add_node"]], "add_nodes_from() (pygraph method)": [[255, "rustworkx.PyGraph.add_nodes_from"]], "adj() (pygraph method)": [[256, "rustworkx.PyGraph.adj"]], "clear() (pygraph method)": [[257, "rustworkx.PyGraph.clear"]], "clear_edges() (pygraph method)": [[258, "rustworkx.PyGraph.clear_edges"]], "compose() (pygraph method)": [[259, "rustworkx.PyGraph.compose"]], "contract_nodes() (pygraph method)": [[260, "rustworkx.PyGraph.contract_nodes"]], "copy() (pygraph method)": [[261, "rustworkx.PyGraph.copy"]], "degree() (pygraph method)": [[262, "rustworkx.PyGraph.degree"]], "edge_index_map() (pygraph method)": [[263, "rustworkx.PyGraph.edge_index_map"]], "edge_indices() (pygraph method)": [[264, "rustworkx.PyGraph.edge_indices"]], "edge_indices_from_endpoints() (pygraph method)": [[265, "rustworkx.PyGraph.edge_indices_from_endpoints"]], "edge_list() (pygraph method)": [[266, "rustworkx.PyGraph.edge_list"]], "edge_subgraph() (pygraph method)": [[267, "rustworkx.PyGraph.edge_subgraph"]], "edges() (pygraph method)": [[268, "rustworkx.PyGraph.edges"]], "extend_from_edge_list() (pygraph method)": [[269, "rustworkx.PyGraph.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pygraph method)": [[270, "rustworkx.PyGraph.extend_from_weighted_edge_list"]], "filter_edges() (pygraph method)": [[271, "rustworkx.PyGraph.filter_edges"]], "filter_nodes() (pygraph method)": [[272, "rustworkx.PyGraph.filter_nodes"]], "find_node_by_weight() (pygraph method)": [[273, "rustworkx.PyGraph.find_node_by_weight"]], "from_adjacency_matrix() (pygraph static method)": [[274, "rustworkx.PyGraph.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pygraph static method)": [[275, "rustworkx.PyGraph.from_complex_adjacency_matrix"]], "get_all_edge_data() (pygraph method)": [[276, "rustworkx.PyGraph.get_all_edge_data"]], "get_edge_data() (pygraph method)": [[277, "rustworkx.PyGraph.get_edge_data"]], "get_edge_data_by_index() (pygraph method)": [[278, "rustworkx.PyGraph.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pygraph method)": [[279, "rustworkx.PyGraph.get_edge_endpoints_by_index"]], "get_node_data() (pygraph method)": [[280, "rustworkx.PyGraph.get_node_data"]], "has_edge() (pygraph method)": [[281, "rustworkx.PyGraph.has_edge"]], "has_node() (pygraph method)": [[282, "rustworkx.PyGraph.has_node"]], "has_parallel_edges() (pygraph method)": [[283, "rustworkx.PyGraph.has_parallel_edges"]], "in_edges() (pygraph method)": [[284, "rustworkx.PyGraph.in_edges"]], "incident_edge_index_map() (pygraph method)": [[285, "rustworkx.PyGraph.incident_edge_index_map"]], "incident_edges() (pygraph method)": [[286, "rustworkx.PyGraph.incident_edges"]], "neighbors() (pygraph method)": [[287, "rustworkx.PyGraph.neighbors"]], "node_indexes() (pygraph method)": [[288, "rustworkx.PyGraph.node_indexes"]], "node_indices() (pygraph method)": [[289, "rustworkx.PyGraph.node_indices"]], "nodes() (pygraph method)": [[290, "rustworkx.PyGraph.nodes"]], "num_edges() (pygraph method)": [[291, "rustworkx.PyGraph.num_edges"]], "num_nodes() (pygraph method)": [[292, "rustworkx.PyGraph.num_nodes"]], "out_edges() (pygraph method)": [[293, "rustworkx.PyGraph.out_edges"]], "read_edge_list() (pygraph static method)": [[294, "rustworkx.PyGraph.read_edge_list"]], "remove_edge() (pygraph method)": [[295, "rustworkx.PyGraph.remove_edge"]], "remove_edge_from_index() (pygraph method)": [[296, "rustworkx.PyGraph.remove_edge_from_index"]], "remove_edges_from() (pygraph method)": [[297, "rustworkx.PyGraph.remove_edges_from"]], "remove_node() (pygraph method)": [[298, "rustworkx.PyGraph.remove_node"]], "remove_nodes_from() (pygraph method)": [[299, "rustworkx.PyGraph.remove_nodes_from"]], "subgraph() (pygraph method)": [[300, "rustworkx.PyGraph.subgraph"]], "substitute_node_with_subgraph() (pygraph method)": [[301, "rustworkx.PyGraph.substitute_node_with_subgraph"]], "to_directed() (pygraph method)": [[302, "rustworkx.PyGraph.to_directed"]], "to_dot() (pygraph method)": [[303, "rustworkx.PyGraph.to_dot"]], "update_edge() (pygraph method)": [[304, "rustworkx.PyGraph.update_edge"]], "update_edge_by_index() (pygraph method)": [[305, "rustworkx.PyGraph.update_edge_by_index"]], "weighted_edge_list() (pygraph method)": [[306, "rustworkx.PyGraph.weighted_edge_list"]], "write_edge_list() (pygraph method)": [[307, "rustworkx.PyGraph.write_edge_list"]], "relationalcoarsestpartition (class in rustworkx)": [[308, "rustworkx.RelationalCoarsestPartition"]], "topologicalsorter (class in rustworkx)": [[309, "rustworkx.TopologicalSorter"]], "done() (topologicalsorter method)": [[310, "rustworkx.TopologicalSorter.done"]], "get_ready() (topologicalsorter method)": [[311, "rustworkx.TopologicalSorter.get_ready"]], "is_active() (topologicalsorter method)": [[312, "rustworkx.TopologicalSorter.is_active"]], "weightededgelist (class in rustworkx)": [[313, "rustworkx.WeightedEdgeList"]], "adjacency_matrix() (in module rustworkx)": [[314, "rustworkx.adjacency_matrix"]], "all_pairs_all_simple_paths() (in module rustworkx)": [[315, "rustworkx.all_pairs_all_simple_paths"]], "all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[316, "rustworkx.all_pairs_bellman_ford_path_lengths"]], "all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[317, "rustworkx.all_pairs_bellman_ford_shortest_paths"]], "all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[318, "rustworkx.all_pairs_dijkstra_path_lengths"]], "all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[319, "rustworkx.all_pairs_dijkstra_shortest_paths"]], "all_shortest_paths() (in module rustworkx)": [[320, "rustworkx.all_shortest_paths"]], "all_simple_paths() (in module rustworkx)": [[321, "rustworkx.all_simple_paths"]], "ancestors() (in module rustworkx)": [[322, "rustworkx.ancestors"]], "articulation_points() (in module rustworkx)": [[323, "rustworkx.articulation_points"]], "astar_shortest_path() (in module rustworkx)": [[324, "rustworkx.astar_shortest_path"]], "barabasi_albert_graph() (in module rustworkx)": [[325, "rustworkx.barabasi_albert_graph"]], "bellman_ford_shortest_path_lengths() (in module rustworkx)": [[326, "rustworkx.bellman_ford_shortest_path_lengths"]], "bellman_ford_shortest_paths() (in module rustworkx)": [[327, "rustworkx.bellman_ford_shortest_paths"]], "betweenness_centrality() (in module rustworkx)": [[328, "rustworkx.betweenness_centrality"]], "bfs_predecessors() (in module rustworkx)": [[329, "rustworkx.bfs_predecessors"]], "bfs_search() (in module rustworkx)": [[330, "rustworkx.bfs_search"]], "bfs_successors() (in module rustworkx)": [[331, "rustworkx.bfs_successors"]], "biconnected_components() (in module rustworkx)": [[332, "rustworkx.biconnected_components"]], "bipartite_layout() (in module rustworkx)": [[333, "rustworkx.bipartite_layout"]], "bridges() (in module rustworkx)": [[334, "rustworkx.bridges"]], "cartesian_product() (in module rustworkx)": [[335, "rustworkx.cartesian_product"]], "chain_decomposition() (in module rustworkx)": [[336, "rustworkx.chain_decomposition"]], "circular_layout() (in module rustworkx)": [[337, "rustworkx.circular_layout"]], "closeness_centrality() (in module rustworkx)": [[338, "rustworkx.closeness_centrality"]], "collect_bicolor_runs() (in module rustworkx)": [[339, "rustworkx.collect_bicolor_runs"]], "collect_runs() (in module rustworkx)": [[340, "rustworkx.collect_runs"]], "complement() (in module rustworkx)": [[341, "rustworkx.complement"]], "connected_components() (in module rustworkx)": [[342, "rustworkx.connected_components"]], "connected_subgraphs() (in module rustworkx)": [[343, "rustworkx.connected_subgraphs"]], "core_number() (in module rustworkx)": [[344, "rustworkx.core_number"]], "cycle_basis() (in module rustworkx)": [[345, "rustworkx.cycle_basis"]], "dag_longest_path() (in module rustworkx)": [[346, "rustworkx.dag_longest_path"]], "dag_longest_path_length() (in module rustworkx)": [[347, "rustworkx.dag_longest_path_length"]], "dag_weighted_longest_path() (in module rustworkx)": [[348, "rustworkx.dag_weighted_longest_path"]], "dag_weighted_longest_path_length() (in module rustworkx)": [[349, "rustworkx.dag_weighted_longest_path_length"]], "descendants() (in module rustworkx)": [[350, "rustworkx.descendants"]], "dfs_edges() (in module rustworkx)": [[351, "rustworkx.dfs_edges"]], "dfs_search() (in module rustworkx)": [[352, "rustworkx.dfs_search"]], "digraph_adjacency_matrix() (in module rustworkx)": [[353, "rustworkx.digraph_adjacency_matrix"]], "digraph_all_pairs_all_simple_paths() (in module rustworkx)": [[354, "rustworkx.digraph_all_pairs_all_simple_paths"]], "digraph_all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[355, "rustworkx.digraph_all_pairs_bellman_ford_path_lengths"]], "digraph_all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[356, "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths"]], "digraph_all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[357, "rustworkx.digraph_all_pairs_dijkstra_path_lengths"]], "digraph_all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[358, "rustworkx.digraph_all_pairs_dijkstra_shortest_paths"]], "digraph_all_shortest_paths() (in module rustworkx)": [[359, "rustworkx.digraph_all_shortest_paths"]], "digraph_all_simple_paths() (in module rustworkx)": [[360, "rustworkx.digraph_all_simple_paths"]], "digraph_astar_shortest_path() (in module rustworkx)": [[361, "rustworkx.digraph_astar_shortest_path"]], "digraph_bellman_ford_shortest_path_lengths() (in module rustworkx)": [[362, "rustworkx.digraph_bellman_ford_shortest_path_lengths"]], "digraph_betweenness_centrality() (in module rustworkx)": [[363, "rustworkx.digraph_betweenness_centrality"]], "digraph_bfs_search() (in module rustworkx)": [[364, "rustworkx.digraph_bfs_search"]], "digraph_bipartite_layout() (in module rustworkx)": [[365, "rustworkx.digraph_bipartite_layout"]], "digraph_cartesian_product() (in module rustworkx)": [[366, "rustworkx.digraph_cartesian_product"]], "digraph_circular_layout() (in module rustworkx)": [[367, "rustworkx.digraph_circular_layout"]], "digraph_closeness_centrality() (in module rustworkx)": [[368, "rustworkx.digraph_closeness_centrality"]], "digraph_complement() (in module rustworkx)": [[369, "rustworkx.digraph_complement"]], "digraph_core_number() (in module rustworkx)": [[370, "rustworkx.digraph_core_number"]], "digraph_dfs_edges() (in module rustworkx)": [[371, "rustworkx.digraph_dfs_edges"]], "digraph_dfs_search() (in module rustworkx)": [[372, "rustworkx.digraph_dfs_search"]], "digraph_dijkstra_search() (in module rustworkx)": [[373, "rustworkx.digraph_dijkstra_search"]], "digraph_dijkstra_shortest_path_lengths() (in module rustworkx)": [[374, "rustworkx.digraph_dijkstra_shortest_path_lengths"]], "digraph_dijkstra_shortest_paths() (in module rustworkx)": [[375, "rustworkx.digraph_dijkstra_shortest_paths"]], "digraph_distance_matrix() (in module rustworkx)": [[376, "rustworkx.digraph_distance_matrix"]], "digraph_edge_betweenness_centrality() (in module rustworkx)": [[377, "rustworkx.digraph_edge_betweenness_centrality"]], "digraph_eigenvector_centrality() (in module rustworkx)": [[378, "rustworkx.digraph_eigenvector_centrality"]], "digraph_find_cycle() (in module rustworkx)": [[379, "rustworkx.digraph_find_cycle"]], "digraph_floyd_warshall() (in module rustworkx)": [[380, "rustworkx.digraph_floyd_warshall"]], "digraph_floyd_warshall_numpy() (in module rustworkx)": [[381, "rustworkx.digraph_floyd_warshall_numpy"]], "digraph_floyd_warshall_successor_and_distance() (in module rustworkx)": [[382, "rustworkx.digraph_floyd_warshall_successor_and_distance"]], "digraph_is_isomorphic() (in module rustworkx)": [[383, "rustworkx.digraph_is_isomorphic"]], "digraph_is_subgraph_isomorphic() (in module rustworkx)": [[384, "rustworkx.digraph_is_subgraph_isomorphic"]], "digraph_k_shortest_path_lengths() (in module rustworkx)": [[385, "rustworkx.digraph_k_shortest_path_lengths"]], "digraph_katz_centrality() (in module rustworkx)": [[386, "rustworkx.digraph_katz_centrality"]], "digraph_longest_simple_path() (in module rustworkx)": [[387, "rustworkx.digraph_longest_simple_path"]], "digraph_maximum_bisimulation() (in module rustworkx)": [[388, "rustworkx.digraph_maximum_bisimulation"]], "digraph_node_link_json() (in module rustworkx)": [[389, "rustworkx.digraph_node_link_json"]], "digraph_num_shortest_paths_unweighted() (in module rustworkx)": [[390, "rustworkx.digraph_num_shortest_paths_unweighted"]], "digraph_random_layout() (in module rustworkx)": [[391, "rustworkx.digraph_random_layout"]], "digraph_shell_layout() (in module rustworkx)": [[392, "rustworkx.digraph_shell_layout"]], "digraph_spiral_layout() (in module rustworkx)": [[393, "rustworkx.digraph_spiral_layout"]], "digraph_spring_layout() (in module rustworkx)": [[394, "rustworkx.digraph_spring_layout"]], "digraph_tensor_product() (in module rustworkx)": [[395, "rustworkx.digraph_tensor_product"]], "digraph_transitivity() (in module rustworkx)": [[396, "rustworkx.digraph_transitivity"]], "digraph_union() (in module rustworkx)": [[397, "rustworkx.digraph_union"]], "digraph_unweighted_average_shortest_path_length() (in module rustworkx)": [[398, "rustworkx.digraph_unweighted_average_shortest_path_length"]], "digraph_vf2_mapping() (in module rustworkx)": [[399, "rustworkx.digraph_vf2_mapping"]], "dijkstra_search() (in module rustworkx)": [[400, "rustworkx.dijkstra_search"]], "dijkstra_shortest_path_lengths() (in module rustworkx)": [[401, "rustworkx.dijkstra_shortest_path_lengths"]], "dijkstra_shortest_paths() (in module rustworkx)": [[402, "rustworkx.dijkstra_shortest_paths"]], "directed_barabasi_albert_graph() (in module rustworkx)": [[403, "rustworkx.directed_barabasi_albert_graph"]], "directed_gnm_random_graph() (in module rustworkx)": [[404, "rustworkx.directed_gnm_random_graph"]], "directed_gnp_random_graph() (in module rustworkx)": [[405, "rustworkx.directed_gnp_random_graph"]], "directed_random_bipartite_graph() (in module rustworkx)": [[406, "rustworkx.directed_random_bipartite_graph"]], "directed_sbm_random_graph() (in module rustworkx)": [[407, "rustworkx.directed_sbm_random_graph"]], "distance_matrix() (in module rustworkx)": [[408, "rustworkx.distance_matrix"]], "edge_betweenness_centrality() (in module rustworkx)": [[409, "rustworkx.edge_betweenness_centrality"]], "eigenvector_centrality() (in module rustworkx)": [[410, "rustworkx.eigenvector_centrality"]], "find_negative_cycle() (in module rustworkx)": [[411, "rustworkx.find_negative_cycle"]], "floyd_warshall() (in module rustworkx)": [[412, "rustworkx.floyd_warshall"]], "floyd_warshall_numpy() (in module rustworkx)": [[413, "rustworkx.floyd_warshall_numpy"]], "floyd_warshall_successor_and_distance() (in module rustworkx)": [[414, "rustworkx.floyd_warshall_successor_and_distance"]], "from_node_link_json_file() (in module rustworkx)": [[415, "rustworkx.from_node_link_json_file"]], "barbell_graph() (in module rustworkx.generators)": [[416, "rustworkx.generators.barbell_graph"]], "binomial_tree_graph() (in module rustworkx.generators)": [[417, "rustworkx.generators.binomial_tree_graph"]], "complete_graph() (in module rustworkx.generators)": [[418, "rustworkx.generators.complete_graph"]], "cycle_graph() (in module rustworkx.generators)": [[419, "rustworkx.generators.cycle_graph"]], "directed_binomial_tree_graph() (in module rustworkx.generators)": [[420, "rustworkx.generators.directed_binomial_tree_graph"]], "directed_complete_graph() (in module rustworkx.generators)": [[421, "rustworkx.generators.directed_complete_graph"]], "directed_cycle_graph() (in module rustworkx.generators)": [[422, "rustworkx.generators.directed_cycle_graph"]], "directed_empty_graph() (in module rustworkx.generators)": [[423, "rustworkx.generators.directed_empty_graph"]], "directed_grid_graph() (in module rustworkx.generators)": [[424, "rustworkx.generators.directed_grid_graph"]], "directed_heavy_hex_graph() (in module rustworkx.generators)": [[425, "rustworkx.generators.directed_heavy_hex_graph"]], "directed_heavy_square_graph() (in module rustworkx.generators)": [[426, "rustworkx.generators.directed_heavy_square_graph"]], "directed_hexagonal_lattice_graph() (in module rustworkx.generators)": [[427, "rustworkx.generators.directed_hexagonal_lattice_graph"]], "directed_mesh_graph() (in module rustworkx.generators)": [[428, "rustworkx.generators.directed_mesh_graph"]], "directed_path_graph() (in module rustworkx.generators)": [[429, "rustworkx.generators.directed_path_graph"]], "directed_star_graph() (in module rustworkx.generators)": [[430, "rustworkx.generators.directed_star_graph"]], "dorogovtsev_goltsev_mendes_graph() (in module rustworkx.generators)": [[431, "rustworkx.generators.dorogovtsev_goltsev_mendes_graph"]], "empty_graph() (in module rustworkx.generators)": [[432, "rustworkx.generators.empty_graph"]], "full_rary_tree() (in module rustworkx.generators)": [[433, "rustworkx.generators.full_rary_tree"]], "generalized_petersen_graph() (in module rustworkx.generators)": [[434, "rustworkx.generators.generalized_petersen_graph"]], "grid_graph() (in module rustworkx.generators)": [[435, "rustworkx.generators.grid_graph"]], "heavy_hex_graph() (in module rustworkx.generators)": [[436, "rustworkx.generators.heavy_hex_graph"]], "heavy_square_graph() (in module rustworkx.generators)": [[437, "rustworkx.generators.heavy_square_graph"]], "hexagonal_lattice_graph() (in module rustworkx.generators)": [[438, "rustworkx.generators.hexagonal_lattice_graph"]], "lollipop_graph() (in module rustworkx.generators)": [[439, "rustworkx.generators.lollipop_graph"]], "mesh_graph() (in module rustworkx.generators)": [[440, "rustworkx.generators.mesh_graph"]], "path_graph() (in module rustworkx.generators)": [[441, "rustworkx.generators.path_graph"]], "star_graph() (in module rustworkx.generators)": [[442, "rustworkx.generators.star_graph"]], "graph_adjacency_matrix() (in module rustworkx)": [[443, "rustworkx.graph_adjacency_matrix"]], "graph_all_pairs_all_simple_paths() (in module rustworkx)": [[444, "rustworkx.graph_all_pairs_all_simple_paths"]], "graph_all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[445, "rustworkx.graph_all_pairs_bellman_ford_path_lengths"]], "graph_all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[446, "rustworkx.graph_all_pairs_bellman_ford_shortest_paths"]], "graph_all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[447, "rustworkx.graph_all_pairs_dijkstra_path_lengths"]], "graph_all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[448, "rustworkx.graph_all_pairs_dijkstra_shortest_paths"]], "graph_all_shortest_paths() (in module rustworkx)": [[449, "rustworkx.graph_all_shortest_paths"]], "graph_all_simple_paths() (in module rustworkx)": [[450, "rustworkx.graph_all_simple_paths"]], "graph_astar_shortest_path() (in module rustworkx)": [[451, "rustworkx.graph_astar_shortest_path"]], "graph_bellman_ford_shortest_path_lengths() (in module rustworkx)": [[452, "rustworkx.graph_bellman_ford_shortest_path_lengths"]], "graph_betweenness_centrality() (in module rustworkx)": [[453, "rustworkx.graph_betweenness_centrality"]], "graph_bfs_search() (in module rustworkx)": [[454, "rustworkx.graph_bfs_search"]], "graph_bipartite_edge_color() (in module rustworkx)": [[455, "rustworkx.graph_bipartite_edge_color"]], "graph_bipartite_layout() (in module rustworkx)": [[456, "rustworkx.graph_bipartite_layout"]], "graph_cartesian_product() (in module rustworkx)": [[457, "rustworkx.graph_cartesian_product"]], "graph_circular_layout() (in module rustworkx)": [[458, "rustworkx.graph_circular_layout"]], "graph_closeness_centrality() (in module rustworkx)": [[459, "rustworkx.graph_closeness_centrality"]], "graph_complement() (in module rustworkx)": [[460, "rustworkx.graph_complement"]], "graph_core_number() (in module rustworkx)": [[461, "rustworkx.graph_core_number"]], "graph_dfs_edges() (in module rustworkx)": [[462, "rustworkx.graph_dfs_edges"]], "graph_dfs_search() (in module rustworkx)": [[463, "rustworkx.graph_dfs_search"]], "graph_dijkstra_search() (in module rustworkx)": [[464, "rustworkx.graph_dijkstra_search"]], "graph_dijkstra_shortest_path_lengths() (in module rustworkx)": [[465, "rustworkx.graph_dijkstra_shortest_path_lengths"]], "graph_dijkstra_shortest_paths() (in module rustworkx)": [[466, "rustworkx.graph_dijkstra_shortest_paths"]], "graph_distance_matrix() (in module rustworkx)": [[467, "rustworkx.graph_distance_matrix"]], "graph_edge_betweenness_centrality() (in module rustworkx)": [[468, "rustworkx.graph_edge_betweenness_centrality"]], "graph_eigenvector_centrality() (in module rustworkx)": [[469, "rustworkx.graph_eigenvector_centrality"]], "graph_floyd_warshall() (in module rustworkx)": [[470, "rustworkx.graph_floyd_warshall"]], "graph_floyd_warshall_numpy() (in module rustworkx)": [[471, "rustworkx.graph_floyd_warshall_numpy"]], "graph_floyd_warshall_successor_and_distance() (in module rustworkx)": [[472, "rustworkx.graph_floyd_warshall_successor_and_distance"]], "graph_greedy_color() (in module rustworkx)": [[473, "rustworkx.graph_greedy_color"]], "graph_greedy_edge_color() (in module rustworkx)": [[474, "rustworkx.graph_greedy_edge_color"]], "graph_is_isomorphic() (in module rustworkx)": [[475, "rustworkx.graph_is_isomorphic"]], "graph_is_subgraph_isomorphic() (in module rustworkx)": [[476, "rustworkx.graph_is_subgraph_isomorphic"]], "graph_k_shortest_path_lengths() (in module rustworkx)": [[477, "rustworkx.graph_k_shortest_path_lengths"]], "graph_katz_centrality() (in module rustworkx)": [[478, "rustworkx.graph_katz_centrality"]], "graph_line_graph() (in module rustworkx)": [[479, "rustworkx.graph_line_graph"]], "graph_longest_simple_path() (in module rustworkx)": [[480, "rustworkx.graph_longest_simple_path"]], "graph_misra_gries_edge_color() (in module rustworkx)": [[481, "rustworkx.graph_misra_gries_edge_color"]], "graph_node_link_json() (in module rustworkx)": [[482, "rustworkx.graph_node_link_json"]], "graph_num_shortest_paths_unweighted() (in module rustworkx)": [[483, "rustworkx.graph_num_shortest_paths_unweighted"]], "graph_random_layout() (in module rustworkx)": [[484, "rustworkx.graph_random_layout"]], "graph_shell_layout() (in module rustworkx)": [[485, "rustworkx.graph_shell_layout"]], "graph_spiral_layout() (in module rustworkx)": [[486, "rustworkx.graph_spiral_layout"]], "graph_spring_layout() (in module rustworkx)": [[487, "rustworkx.graph_spring_layout"]], "graph_tensor_product() (in module rustworkx)": [[488, "rustworkx.graph_tensor_product"]], "graph_token_swapper() (in module rustworkx)": [[489, "rustworkx.graph_token_swapper"]], "graph_transitivity() (in module rustworkx)": [[490, "rustworkx.graph_transitivity"]], "graph_union() (in module rustworkx)": [[491, "rustworkx.graph_union"]], "graph_unweighted_average_shortest_path_length() (in module rustworkx)": [[492, "rustworkx.graph_unweighted_average_shortest_path_length"]], "graph_vf2_mapping() (in module rustworkx)": [[493, "rustworkx.graph_vf2_mapping"]], "has_path() (in module rustworkx)": [[494, "rustworkx.has_path"]], "hits() (in module rustworkx)": [[495, "rustworkx.hits"]], "hyperbolic_random_graph() (in module rustworkx)": [[496, "rustworkx.hyperbolic_random_graph"]], "is_bipartite() (in module rustworkx)": [[497, "rustworkx.is_bipartite"]], "is_connected() (in module rustworkx)": [[498, "rustworkx.is_connected"]], "is_directed_acyclic_graph() (in module rustworkx)": [[499, "rustworkx.is_directed_acyclic_graph"]], "is_isomorphic() (in module rustworkx)": [[500, "rustworkx.is_isomorphic"]], "is_isomorphic_node_match() (in module rustworkx)": [[501, "rustworkx.is_isomorphic_node_match"]], "is_matching() (in module rustworkx)": [[502, "rustworkx.is_matching"]], "is_maximal_matching() (in module rustworkx)": [[503, "rustworkx.is_maximal_matching"]], "is_planar() (in module rustworkx)": [[504, "rustworkx.is_planar"]], "is_subgraph_isomorphic() (in module rustworkx)": [[505, "rustworkx.is_subgraph_isomorphic"]], "is_weakly_connected() (in module rustworkx)": [[506, "rustworkx.is_weakly_connected"]], "isolates() (in module rustworkx)": [[507, "rustworkx.isolates"]], "k_shortest_path_lengths() (in module rustworkx)": [[508, "rustworkx.k_shortest_path_lengths"]], "katz_centrality() (in module rustworkx)": [[509, "rustworkx.katz_centrality"]], "layers() (in module rustworkx)": [[510, "rustworkx.layers"]], "lexicographical_topological_sort() (in module rustworkx)": [[511, "rustworkx.lexicographical_topological_sort"]], "longest_simple_path() (in module rustworkx)": [[512, "rustworkx.longest_simple_path"]], "max_weight_matching() (in module rustworkx)": [[513, "rustworkx.max_weight_matching"]], "metric_closure() (in module rustworkx)": [[514, "rustworkx.metric_closure"]], "minimum_spanning_edges() (in module rustworkx)": [[515, "rustworkx.minimum_spanning_edges"]], "minimum_spanning_tree() (in module rustworkx)": [[516, "rustworkx.minimum_spanning_tree"]], "negative_edge_cycle() (in module rustworkx)": [[517, "rustworkx.negative_edge_cycle"]], "networkx_converter() (in module rustworkx)": [[518, "rustworkx.networkx_converter"]], "node_connected_component() (in module rustworkx)": [[519, "rustworkx.node_connected_component"]], "node_link_json() (in module rustworkx)": [[520, "rustworkx.node_link_json"]], "num_shortest_paths_unweighted() (in module rustworkx)": [[521, "rustworkx.num_shortest_paths_unweighted"]], "number_connected_components() (in module rustworkx)": [[522, "rustworkx.number_connected_components"]], "number_weakly_connected_components() (in module rustworkx)": [[523, "rustworkx.number_weakly_connected_components"]], "pagerank() (in module rustworkx)": [[524, "rustworkx.pagerank"]], "parse_node_link_json() (in module rustworkx)": [[525, "rustworkx.parse_node_link_json"]], "random_geometric_graph() (in module rustworkx)": [[526, "rustworkx.random_geometric_graph"]], "random_layout() (in module rustworkx)": [[527, "rustworkx.random_layout"]], "read_graphml() (in module rustworkx)": [[528, "rustworkx.read_graphml"]], "shell_layout() (in module rustworkx)": [[529, "rustworkx.shell_layout"]], "simple_cycles() (in module rustworkx)": [[530, "rustworkx.simple_cycles"]], "spiral_layout() (in module rustworkx)": [[531, "rustworkx.spiral_layout"]], "spring_layout() (in module rustworkx)": [[532, "rustworkx.spring_layout"]], "steiner_tree() (in module rustworkx)": [[533, "rustworkx.steiner_tree"]], "stoer_wagner_min_cut() (in module rustworkx)": [[534, "rustworkx.stoer_wagner_min_cut"]], "strongly_connected_components() (in module rustworkx)": [[535, "rustworkx.strongly_connected_components"]], "topological_generations() (in module rustworkx)": [[536, "rustworkx.topological_generations"]], "topological_sort() (in module rustworkx)": [[537, "rustworkx.topological_sort"]], "transitive_reduction() (in module rustworkx)": [[538, "rustworkx.transitive_reduction"]], "transitivity() (in module rustworkx)": [[539, "rustworkx.transitivity"]], "two_color() (in module rustworkx)": [[540, "rustworkx.two_color"]], "undirected_gnm_random_graph() (in module rustworkx)": [[541, "rustworkx.undirected_gnm_random_graph"]], "undirected_gnp_random_graph() (in module rustworkx)": [[542, "rustworkx.undirected_gnp_random_graph"]], "undirected_random_bipartite_graph() (in module rustworkx)": [[543, "rustworkx.undirected_random_bipartite_graph"]], "undirected_sbm_random_graph() (in module rustworkx)": [[544, "rustworkx.undirected_sbm_random_graph"]], "union() (in module rustworkx)": [[545, "rustworkx.union"]], "unweighted_average_shortest_path_length() (in module rustworkx)": [[546, "rustworkx.unweighted_average_shortest_path_length"]], "vf2_mapping() (in module rustworkx)": [[547, "rustworkx.vf2_mapping"]], "bfsvisitor (class in rustworkx.visit)": [[548, "rustworkx.visit.BFSVisitor"]], "black_target_edge() (bfsvisitor method)": [[549, "rustworkx.visit.BFSVisitor.black_target_edge"]], "discover_vertex() (bfsvisitor method)": [[550, "rustworkx.visit.BFSVisitor.discover_vertex"]], "finish_vertex() (bfsvisitor method)": [[551, "rustworkx.visit.BFSVisitor.finish_vertex"]], "gray_target_edge() (bfsvisitor method)": [[552, "rustworkx.visit.BFSVisitor.gray_target_edge"]], "non_tree_edge() (bfsvisitor method)": [[553, "rustworkx.visit.BFSVisitor.non_tree_edge"]], "tree_edge() (bfsvisitor method)": [[554, "rustworkx.visit.BFSVisitor.tree_edge"]], "dfsvisitor (class in rustworkx.visit)": [[555, "rustworkx.visit.DFSVisitor"]], "back_edge() (dfsvisitor method)": [[556, "rustworkx.visit.DFSVisitor.back_edge"]], "discover_vertex() (dfsvisitor method)": [[557, "rustworkx.visit.DFSVisitor.discover_vertex"]], "finish_vertex() (dfsvisitor method)": [[558, "rustworkx.visit.DFSVisitor.finish_vertex"]], "forward_or_cross_edge() (dfsvisitor method)": [[559, "rustworkx.visit.DFSVisitor.forward_or_cross_edge"]], "tree_edge() (dfsvisitor method)": [[560, "rustworkx.visit.DFSVisitor.tree_edge"]], "dijkstravisitor (class in rustworkx.visit)": [[561, "rustworkx.visit.DijkstraVisitor"]], "discover_vertex() (dijkstravisitor method)": [[562, "rustworkx.visit.DijkstraVisitor.discover_vertex"]], "edge_not_relaxed() (dijkstravisitor method)": [[563, "rustworkx.visit.DijkstraVisitor.edge_not_relaxed"]], "edge_relaxed() (dijkstravisitor method)": [[564, "rustworkx.visit.DijkstraVisitor.edge_relaxed"]], "examine_edge() (dijkstravisitor method)": [[565, "rustworkx.visit.DijkstraVisitor.examine_edge"]], "finish_vertex() (dijkstravisitor method)": [[566, "rustworkx.visit.DijkstraVisitor.finish_vertex"]], "prunesearch": [[567, "rustworkx.visit.PruneSearch"]], "stopsearch": [[568, "rustworkx.visit.StopSearch"]], "graphviz_draw() (in module rustworkx.visualization)": [[569, "rustworkx.visualization.graphviz_draw"]], "mpl_draw() (in module rustworkx.visualization)": [[570, "rustworkx.visualization.mpl_draw"]], "weakly_connected_components() (in module rustworkx)": [[571, "rustworkx.weakly_connected_components"]]}})