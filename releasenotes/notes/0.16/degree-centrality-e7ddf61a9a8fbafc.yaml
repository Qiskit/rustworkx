---
features:
  - |
    Added a new function, :func:`~rustworkx.degree_centrality` which is used to
    compute the degree centrality for all nodes in a given graph. For
    example:

    .. jupyter-execute::

        import rustworkx as rx
        from rustworkx.visualization import mpl_draw

        graph = rx.generators.hexagonal_lattice_graph(4, 4)
        centrality = rx.degree_centrality(graph)

        # Generate a color list
        colors = []
        for node in graph.node_indices():
            centrality_score = centrality[node]
            graph[node] = centrality_score
            colors.append(centrality_score)
        mpl_draw(
            graph,
            with_labels=True,
            node_color=colors,
            node_size=650,
            labels=lambda x: "{0:.2f}".format(x)
        )

  - |
    Added two new functions, :func:`~rustworkx.in_degree_centrality` and
    :func:`~rustworkx.out_degree_centrality` to calculate two special
    types of degree centrality for directed graphs.