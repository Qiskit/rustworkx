---
features:
  - |
    Added a new :func:`~rustworkx.dijkstra_search` (and it's per type variants
    :func:`~rustworkx.graph_dijkstra_search` and :func:`~rustworkx.digraph_dijkstra_search`)
    that traverses the graph using dijkstra algorithm and emits events at specified
    points. The events are handled by a visitor object that subclasses
    :class:`~rustworkx.visit.DijkstraVisitor` through the appropriate callback functions.
    For example:

    .. jupyter-execute::
  
      import rustworkx
      from rustworkx.visit import DijkstraVisitor


      class DijkstraTreeEdgesRecorder(rustworkx.visit.DijkstraVisitor):

          def __init__(self):
              self.edges = []
              self.parents = dict()

          def discover_vertex(self, v, _):
              u = self.parents.get(v, None)
              if u is not None:
                  self.edges.append((u, v))

          def edge_relaxed(self, edge):
              u, v, _ = edge
              self.parents[v] = u

      graph = rustworkx.PyGraph()
      graph.extend_from_weighted_edge_list([(1, 3, 1), (0, 1, 10), (2, 1, 1), (0, 2, 1)])
      vis = DijkstraTreeEdgesRecorder()
      rustworkx.graph_dijkstra_search(graph, [0], float, vis)
      print('Tree edges:', vis.edges)
