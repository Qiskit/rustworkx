---
features:
  - |
    Four simple layout functions were added:

      * :func:`~rustworkx.bipartite_layout`
      * :func:`~rustworkx.circular_layout`
      * :func:`~rustworkx.shell_layout`
      * :func:`~rustworkx.spiral_layout`

    These can be used to adjust the layout used in visualizations, for example:

    .. jupyter-execute::

      import rustworkx
      from rustworkx.visualization import mpl_draw

      graph = rustworkx.generators.path_graph(weights=list(range(24)))
      layout = rustworkx.bipartite_layout(graph, set(range(12)))
      mpl_draw(graph, pos=layout)

    .. jupyter-execute::

      import rustworkx
      from rustworkx.visualization import mpl_draw

      graph = rustworkx.generators.path_graph(weights=list(range(24)))
      layout = rustworkx.circular_layout(graph)
      mpl_draw(graph, pos=layout)

    .. jupyter-execute::

      import rustworkx
      from rustworkx.visualization import mpl_draw

      graph = rustworkx.generators.star_graph(25)
      layout = rustworkx.shell_layout(graph)
      mpl_draw(graph, pos=layout)

    .. jupyter-execute::

      import rustworkx
      from rustworkx.visualization import mpl_draw

      graph = rustworkx.generators.path_graph(weights=list(range(24)))
      layout = rustworkx.spiral_layout(graph)
      mpl_draw(graph, pos=layout)

    Or with the :func:`~rustworkx.visualization.graphviz_drawer` function:

    .. jupyter-execute::

      import rustworkx
      from rustworkx.visualization import graphviz_draw

      graph = rustworkx.generators.path_graph(weights=list(range(24)))
      layout = rustworkx.spiral_layout(graph)

      def node_attr_fn(node):
          point = layout[node]
          return {
              "shape": "circle",
              "pos": '"%s,%s!"' % (point[0], point[1]),
              "fillcolor": "yellow",
              "style": "filled",
          }

      graphviz_draw(graph, node_attr_fn=node_attr_fn, method='fdp')
