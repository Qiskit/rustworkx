Search.setIndex({"docnames": ["CONTRIBUTING", "api/algorithm_functions/centrality", "api/algorithm_functions/coloring", "api/algorithm_functions/connectivity_and_cycles", "api/algorithm_functions/dag_algorithms", "api/algorithm_functions/dominance", "api/algorithm_functions/graph_operations", "api/algorithm_functions/index", "api/algorithm_functions/isomorphism", "api/algorithm_functions/link_analysis", "api/algorithm_functions/matching", "api/algorithm_functions/other", "api/algorithm_functions/shortest_paths", "api/algorithm_functions/traversal", "api/algorithm_functions/tree", "api/converters", "api/custom_return_types", "api/exceptions", "api/generators", "api/graph_classes", "api/index", "api/layout_functions", "api/pydigraph_api_functions", "api/pygraph_api_functions", "api/random_graph_generator_functions", "api/serialization", "apiref/rustworkx.AllPairsPathLengthMapping", "apiref/rustworkx.AllPairsPathLengthMapping.items", "apiref/rustworkx.AllPairsPathLengthMapping.keys", "apiref/rustworkx.AllPairsPathLengthMapping.values", "apiref/rustworkx.AllPairsPathMapping", "apiref/rustworkx.AllPairsPathMapping.items", "apiref/rustworkx.AllPairsPathMapping.keys", "apiref/rustworkx.AllPairsPathMapping.values", "apiref/rustworkx.BFSPredecessors", "apiref/rustworkx.BFSSuccessors", "apiref/rustworkx.BiconnectedComponents", "apiref/rustworkx.BiconnectedComponents.items", "apiref/rustworkx.BiconnectedComponents.keys", "apiref/rustworkx.BiconnectedComponents.values", "apiref/rustworkx.CentralityMapping", "apiref/rustworkx.CentralityMapping.items", "apiref/rustworkx.CentralityMapping.keys", "apiref/rustworkx.CentralityMapping.values", "apiref/rustworkx.Chains", "apiref/rustworkx.ColoringStrategy", "apiref/rustworkx.DAGHasCycle", "apiref/rustworkx.DAGWouldCycle", "apiref/rustworkx.EdgeCentralityMapping", "apiref/rustworkx.EdgeCentralityMapping.items", "apiref/rustworkx.EdgeCentralityMapping.keys", "apiref/rustworkx.EdgeCentralityMapping.values", "apiref/rustworkx.EdgeIndexMap", "apiref/rustworkx.EdgeIndexMap.items", "apiref/rustworkx.EdgeIndexMap.keys", "apiref/rustworkx.EdgeIndexMap.values", "apiref/rustworkx.EdgeIndices", "apiref/rustworkx.EdgeList", "apiref/rustworkx.GraphNotBipartite", "apiref/rustworkx.IndexPartitionBlock", "apiref/rustworkx.InvalidMapping", "apiref/rustworkx.InvalidNode", "apiref/rustworkx.JSONSerializationError", "apiref/rustworkx.NegativeCycle", "apiref/rustworkx.NoEdgeBetweenNodes", "apiref/rustworkx.NoPathFound", "apiref/rustworkx.NoSuitableNeighbors", "apiref/rustworkx.NodeIndices", "apiref/rustworkx.NodeMap", "apiref/rustworkx.NodeMap.items", "apiref/rustworkx.NodeMap.keys", "apiref/rustworkx.NodeMap.values", "apiref/rustworkx.NullGraph", "apiref/rustworkx.PathLengthMapping", "apiref/rustworkx.PathLengthMapping.items", "apiref/rustworkx.PathLengthMapping.keys", "apiref/rustworkx.PathLengthMapping.values", "apiref/rustworkx.PathMapping", "apiref/rustworkx.PathMapping.items", "apiref/rustworkx.PathMapping.keys", "apiref/rustworkx.PathMapping.values", "apiref/rustworkx.Pos2DMapping", "apiref/rustworkx.Pos2DMapping.items", "apiref/rustworkx.Pos2DMapping.keys", "apiref/rustworkx.Pos2DMapping.values", "apiref/rustworkx.ProductNodeMap", "apiref/rustworkx.ProductNodeMap.items", "apiref/rustworkx.ProductNodeMap.keys", "apiref/rustworkx.ProductNodeMap.values", "apiref/rustworkx.PyDAG", "apiref/rustworkx.PyDAG.add_child", "apiref/rustworkx.PyDAG.add_edge", "apiref/rustworkx.PyDAG.add_edges_from", "apiref/rustworkx.PyDAG.add_edges_from_no_data", "apiref/rustworkx.PyDAG.add_node", "apiref/rustworkx.PyDAG.add_nodes_from", "apiref/rustworkx.PyDAG.add_parent", "apiref/rustworkx.PyDAG.adj", "apiref/rustworkx.PyDAG.adj_direction", "apiref/rustworkx.PyDAG.clear", "apiref/rustworkx.PyDAG.clear_edges", "apiref/rustworkx.PyDAG.compose", "apiref/rustworkx.PyDAG.contract_nodes", "apiref/rustworkx.PyDAG.copy", "apiref/rustworkx.PyDAG.edge_index_map", "apiref/rustworkx.PyDAG.edge_indices", "apiref/rustworkx.PyDAG.edge_indices_from_endpoints", "apiref/rustworkx.PyDAG.edge_list", "apiref/rustworkx.PyDAG.edge_subgraph", "apiref/rustworkx.PyDAG.edges", "apiref/rustworkx.PyDAG.extend_from_edge_list", "apiref/rustworkx.PyDAG.extend_from_weighted_edge_list", "apiref/rustworkx.PyDAG.filter_edges", "apiref/rustworkx.PyDAG.filter_nodes", "apiref/rustworkx.PyDAG.find_adjacent_node_by_edge", "apiref/rustworkx.PyDAG.find_node_by_weight", "apiref/rustworkx.PyDAG.find_predecessor_node_by_edge", "apiref/rustworkx.PyDAG.find_predecessors_by_edge", "apiref/rustworkx.PyDAG.find_successors_by_edge", "apiref/rustworkx.PyDAG.from_adjacency_matrix", "apiref/rustworkx.PyDAG.from_complex_adjacency_matrix", "apiref/rustworkx.PyDAG.get_all_edge_data", "apiref/rustworkx.PyDAG.get_edge_data", "apiref/rustworkx.PyDAG.get_edge_data_by_index", "apiref/rustworkx.PyDAG.get_edge_endpoints_by_index", "apiref/rustworkx.PyDAG.get_node_data", "apiref/rustworkx.PyDAG.has_edge", "apiref/rustworkx.PyDAG.has_node", "apiref/rustworkx.PyDAG.has_parallel_edges", "apiref/rustworkx.PyDAG.in_degree", "apiref/rustworkx.PyDAG.in_edges", "apiref/rustworkx.PyDAG.incident_edge_index_map", "apiref/rustworkx.PyDAG.incident_edges", "apiref/rustworkx.PyDAG.insert_node_on_in_edges", "apiref/rustworkx.PyDAG.insert_node_on_in_edges_multiple", "apiref/rustworkx.PyDAG.insert_node_on_out_edges", "apiref/rustworkx.PyDAG.insert_node_on_out_edges_multiple", "apiref/rustworkx.PyDAG.is_symmetric", "apiref/rustworkx.PyDAG.make_symmetric", "apiref/rustworkx.PyDAG.merge_nodes", "apiref/rustworkx.PyDAG.neighbors", "apiref/rustworkx.PyDAG.neighbors_undirected", "apiref/rustworkx.PyDAG.node_indexes", "apiref/rustworkx.PyDAG.node_indices", "apiref/rustworkx.PyDAG.nodes", "apiref/rustworkx.PyDAG.num_edges", "apiref/rustworkx.PyDAG.num_nodes", "apiref/rustworkx.PyDAG.out_degree", "apiref/rustworkx.PyDAG.out_edges", "apiref/rustworkx.PyDAG.predecessor_indices", "apiref/rustworkx.PyDAG.predecessors", "apiref/rustworkx.PyDAG.read_edge_list", "apiref/rustworkx.PyDAG.remove_edge", "apiref/rustworkx.PyDAG.remove_edge_from_index", "apiref/rustworkx.PyDAG.remove_edges_from", "apiref/rustworkx.PyDAG.remove_node", "apiref/rustworkx.PyDAG.remove_node_retain_edges", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_id", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_key", "apiref/rustworkx.PyDAG.remove_nodes_from", "apiref/rustworkx.PyDAG.reverse", "apiref/rustworkx.PyDAG.subgraph", "apiref/rustworkx.PyDAG.substitute_node_with_subgraph", "apiref/rustworkx.PyDAG.successor_indices", "apiref/rustworkx.PyDAG.successors", "apiref/rustworkx.PyDAG.to_dot", "apiref/rustworkx.PyDAG.to_undirected", "apiref/rustworkx.PyDAG.update_edge", "apiref/rustworkx.PyDAG.update_edge_by_index", "apiref/rustworkx.PyDAG.weighted_edge_list", "apiref/rustworkx.PyDAG.write_edge_list", "apiref/rustworkx.PyDiGraph", "apiref/rustworkx.PyDiGraph.add_child", "apiref/rustworkx.PyDiGraph.add_edge", "apiref/rustworkx.PyDiGraph.add_edges_from", "apiref/rustworkx.PyDiGraph.add_edges_from_no_data", "apiref/rustworkx.PyDiGraph.add_node", "apiref/rustworkx.PyDiGraph.add_nodes_from", "apiref/rustworkx.PyDiGraph.add_parent", "apiref/rustworkx.PyDiGraph.adj", "apiref/rustworkx.PyDiGraph.adj_direction", "apiref/rustworkx.PyDiGraph.clear", "apiref/rustworkx.PyDiGraph.clear_edges", "apiref/rustworkx.PyDiGraph.compose", "apiref/rustworkx.PyDiGraph.contract_nodes", "apiref/rustworkx.PyDiGraph.copy", "apiref/rustworkx.PyDiGraph.edge_index_map", "apiref/rustworkx.PyDiGraph.edge_indices", "apiref/rustworkx.PyDiGraph.edge_indices_from_endpoints", "apiref/rustworkx.PyDiGraph.edge_list", "apiref/rustworkx.PyDiGraph.edge_subgraph", "apiref/rustworkx.PyDiGraph.edges", "apiref/rustworkx.PyDiGraph.extend_from_edge_list", "apiref/rustworkx.PyDiGraph.extend_from_weighted_edge_list", "apiref/rustworkx.PyDiGraph.filter_edges", "apiref/rustworkx.PyDiGraph.filter_nodes", "apiref/rustworkx.PyDiGraph.find_adjacent_node_by_edge", "apiref/rustworkx.PyDiGraph.find_node_by_weight", "apiref/rustworkx.PyDiGraph.find_predecessor_node_by_edge", "apiref/rustworkx.PyDiGraph.find_predecessors_by_edge", "apiref/rustworkx.PyDiGraph.find_successors_by_edge", "apiref/rustworkx.PyDiGraph.from_adjacency_matrix", "apiref/rustworkx.PyDiGraph.from_complex_adjacency_matrix", "apiref/rustworkx.PyDiGraph.get_all_edge_data", "apiref/rustworkx.PyDiGraph.get_edge_data", "apiref/rustworkx.PyDiGraph.get_edge_data_by_index", "apiref/rustworkx.PyDiGraph.get_edge_endpoints_by_index", "apiref/rustworkx.PyDiGraph.get_node_data", "apiref/rustworkx.PyDiGraph.has_edge", "apiref/rustworkx.PyDiGraph.has_node", "apiref/rustworkx.PyDiGraph.has_parallel_edges", "apiref/rustworkx.PyDiGraph.in_degree", "apiref/rustworkx.PyDiGraph.in_edges", "apiref/rustworkx.PyDiGraph.incident_edge_index_map", "apiref/rustworkx.PyDiGraph.incident_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges_multiple", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges_multiple", "apiref/rustworkx.PyDiGraph.is_symmetric", "apiref/rustworkx.PyDiGraph.make_symmetric", "apiref/rustworkx.PyDiGraph.merge_nodes", "apiref/rustworkx.PyDiGraph.neighbors", "apiref/rustworkx.PyDiGraph.neighbors_undirected", "apiref/rustworkx.PyDiGraph.node_indexes", "apiref/rustworkx.PyDiGraph.node_indices", "apiref/rustworkx.PyDiGraph.nodes", "apiref/rustworkx.PyDiGraph.num_edges", "apiref/rustworkx.PyDiGraph.num_nodes", "apiref/rustworkx.PyDiGraph.out_degree", "apiref/rustworkx.PyDiGraph.out_edges", "apiref/rustworkx.PyDiGraph.predecessor_indices", "apiref/rustworkx.PyDiGraph.predecessors", "apiref/rustworkx.PyDiGraph.read_edge_list", "apiref/rustworkx.PyDiGraph.remove_edge", "apiref/rustworkx.PyDiGraph.remove_edge_from_index", "apiref/rustworkx.PyDiGraph.remove_edges_from", "apiref/rustworkx.PyDiGraph.remove_node", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_id", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_key", "apiref/rustworkx.PyDiGraph.remove_nodes_from", "apiref/rustworkx.PyDiGraph.reverse", "apiref/rustworkx.PyDiGraph.subgraph", "apiref/rustworkx.PyDiGraph.substitute_node_with_subgraph", "apiref/rustworkx.PyDiGraph.successor_indices", "apiref/rustworkx.PyDiGraph.successors", "apiref/rustworkx.PyDiGraph.to_dot", "apiref/rustworkx.PyDiGraph.to_undirected", "apiref/rustworkx.PyDiGraph.update_edge", "apiref/rustworkx.PyDiGraph.update_edge_by_index", "apiref/rustworkx.PyDiGraph.weighted_edge_list", "apiref/rustworkx.PyDiGraph.write_edge_list", "apiref/rustworkx.PyGraph", "apiref/rustworkx.PyGraph.add_edge", "apiref/rustworkx.PyGraph.add_edges_from", "apiref/rustworkx.PyGraph.add_edges_from_no_data", "apiref/rustworkx.PyGraph.add_node", "apiref/rustworkx.PyGraph.add_nodes_from", "apiref/rustworkx.PyGraph.adj", "apiref/rustworkx.PyGraph.clear", "apiref/rustworkx.PyGraph.clear_edges", "apiref/rustworkx.PyGraph.compose", "apiref/rustworkx.PyGraph.contract_nodes", "apiref/rustworkx.PyGraph.copy", "apiref/rustworkx.PyGraph.degree", "apiref/rustworkx.PyGraph.edge_index_map", "apiref/rustworkx.PyGraph.edge_indices", "apiref/rustworkx.PyGraph.edge_indices_from_endpoints", "apiref/rustworkx.PyGraph.edge_list", "apiref/rustworkx.PyGraph.edge_subgraph", "apiref/rustworkx.PyGraph.edges", "apiref/rustworkx.PyGraph.extend_from_edge_list", "apiref/rustworkx.PyGraph.extend_from_weighted_edge_list", "apiref/rustworkx.PyGraph.filter_edges", "apiref/rustworkx.PyGraph.filter_nodes", "apiref/rustworkx.PyGraph.find_node_by_weight", "apiref/rustworkx.PyGraph.from_adjacency_matrix", "apiref/rustworkx.PyGraph.from_complex_adjacency_matrix", "apiref/rustworkx.PyGraph.get_all_edge_data", "apiref/rustworkx.PyGraph.get_edge_data", "apiref/rustworkx.PyGraph.get_edge_data_by_index", "apiref/rustworkx.PyGraph.get_edge_endpoints_by_index", "apiref/rustworkx.PyGraph.get_node_data", "apiref/rustworkx.PyGraph.has_edge", "apiref/rustworkx.PyGraph.has_node", "apiref/rustworkx.PyGraph.has_parallel_edges", "apiref/rustworkx.PyGraph.in_edges", "apiref/rustworkx.PyGraph.incident_edge_index_map", "apiref/rustworkx.PyGraph.incident_edges", "apiref/rustworkx.PyGraph.neighbors", "apiref/rustworkx.PyGraph.node_indexes", "apiref/rustworkx.PyGraph.node_indices", "apiref/rustworkx.PyGraph.nodes", "apiref/rustworkx.PyGraph.num_edges", "apiref/rustworkx.PyGraph.num_nodes", "apiref/rustworkx.PyGraph.out_edges", "apiref/rustworkx.PyGraph.read_edge_list", "apiref/rustworkx.PyGraph.remove_edge", "apiref/rustworkx.PyGraph.remove_edge_from_index", "apiref/rustworkx.PyGraph.remove_edges_from", "apiref/rustworkx.PyGraph.remove_node", "apiref/rustworkx.PyGraph.remove_nodes_from", "apiref/rustworkx.PyGraph.subgraph", "apiref/rustworkx.PyGraph.substitute_node_with_subgraph", "apiref/rustworkx.PyGraph.to_directed", "apiref/rustworkx.PyGraph.to_dot", "apiref/rustworkx.PyGraph.update_edge", "apiref/rustworkx.PyGraph.update_edge_by_index", "apiref/rustworkx.PyGraph.weighted_edge_list", "apiref/rustworkx.PyGraph.write_edge_list", "apiref/rustworkx.RelationalCoarsestPartition", "apiref/rustworkx.TopologicalSorter", "apiref/rustworkx.TopologicalSorter.done", "apiref/rustworkx.TopologicalSorter.get_ready", "apiref/rustworkx.TopologicalSorter.is_active", "apiref/rustworkx.WeightedEdgeList", "apiref/rustworkx.adjacency_matrix", "apiref/rustworkx.all_pairs_all_simple_paths", "apiref/rustworkx.all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.all_pairs_dijkstra_path_lengths", "apiref/rustworkx.all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.all_shortest_paths", "apiref/rustworkx.all_simple_paths", "apiref/rustworkx.ancestors", "apiref/rustworkx.articulation_points", "apiref/rustworkx.astar_shortest_path", "apiref/rustworkx.barabasi_albert_graph", "apiref/rustworkx.bellman_ford_shortest_path_lengths", "apiref/rustworkx.bellman_ford_shortest_paths", "apiref/rustworkx.betweenness_centrality", "apiref/rustworkx.bfs_predecessors", "apiref/rustworkx.bfs_search", "apiref/rustworkx.bfs_successors", "apiref/rustworkx.biconnected_components", "apiref/rustworkx.bipartite_layout", "apiref/rustworkx.bridges", "apiref/rustworkx.cartesian_product", "apiref/rustworkx.chain_decomposition", "apiref/rustworkx.circular_layout", "apiref/rustworkx.closeness_centrality", "apiref/rustworkx.collect_bicolor_runs", "apiref/rustworkx.collect_runs", "apiref/rustworkx.complement", "apiref/rustworkx.connected_components", "apiref/rustworkx.connected_subgraphs", "apiref/rustworkx.core_number", "apiref/rustworkx.cycle_basis", "apiref/rustworkx.dag_longest_path", "apiref/rustworkx.dag_longest_path_length", "apiref/rustworkx.dag_weighted_longest_path", "apiref/rustworkx.dag_weighted_longest_path_length", "apiref/rustworkx.degree_centrality", "apiref/rustworkx.descendants", "apiref/rustworkx.dfs_edges", "apiref/rustworkx.dfs_search", "apiref/rustworkx.digraph_adjacency_matrix", "apiref/rustworkx.digraph_all_pairs_all_simple_paths", "apiref/rustworkx.digraph_all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.digraph_all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.digraph_all_pairs_dijkstra_path_lengths", "apiref/rustworkx.digraph_all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.digraph_all_shortest_paths", "apiref/rustworkx.digraph_all_simple_paths", "apiref/rustworkx.digraph_astar_shortest_path", "apiref/rustworkx.digraph_bellman_ford_shortest_path_lengths", "apiref/rustworkx.digraph_betweenness_centrality", "apiref/rustworkx.digraph_bfs_search", "apiref/rustworkx.digraph_bipartite_layout", "apiref/rustworkx.digraph_cartesian_product", "apiref/rustworkx.digraph_circular_layout", "apiref/rustworkx.digraph_closeness_centrality", "apiref/rustworkx.digraph_complement", "apiref/rustworkx.digraph_core_number", "apiref/rustworkx.digraph_dfs_edges", "apiref/rustworkx.digraph_dfs_search", "apiref/rustworkx.digraph_dijkstra_search", "apiref/rustworkx.digraph_dijkstra_shortest_path_lengths", "apiref/rustworkx.digraph_dijkstra_shortest_paths", "apiref/rustworkx.digraph_distance_matrix", "apiref/rustworkx.digraph_edge_betweenness_centrality", "apiref/rustworkx.digraph_eigenvector_centrality", "apiref/rustworkx.digraph_find_cycle", "apiref/rustworkx.digraph_floyd_warshall", "apiref/rustworkx.digraph_floyd_warshall_numpy", "apiref/rustworkx.digraph_floyd_warshall_successor_and_distance", "apiref/rustworkx.digraph_is_isomorphic", "apiref/rustworkx.digraph_is_subgraph_isomorphic", "apiref/rustworkx.digraph_k_shortest_path_lengths", "apiref/rustworkx.digraph_katz_centrality", "apiref/rustworkx.digraph_longest_simple_path", "apiref/rustworkx.digraph_maximum_bisimulation", "apiref/rustworkx.digraph_node_link_json", "apiref/rustworkx.digraph_num_shortest_paths_unweighted", "apiref/rustworkx.digraph_random_layout", "apiref/rustworkx.digraph_shell_layout", "apiref/rustworkx.digraph_spiral_layout", "apiref/rustworkx.digraph_spring_layout", "apiref/rustworkx.digraph_tensor_product", "apiref/rustworkx.digraph_transitivity", "apiref/rustworkx.digraph_union", "apiref/rustworkx.digraph_unweighted_average_shortest_path_length", "apiref/rustworkx.digraph_vf2_mapping", "apiref/rustworkx.dijkstra_search", "apiref/rustworkx.dijkstra_shortest_path_lengths", "apiref/rustworkx.dijkstra_shortest_paths", "apiref/rustworkx.directed_barabasi_albert_graph", "apiref/rustworkx.directed_gnm_random_graph", "apiref/rustworkx.directed_gnp_random_graph", "apiref/rustworkx.directed_random_bipartite_graph", "apiref/rustworkx.directed_sbm_random_graph", "apiref/rustworkx.distance_matrix", "apiref/rustworkx.dominance_frontiers", "apiref/rustworkx.edge_betweenness_centrality", "apiref/rustworkx.eigenvector_centrality", "apiref/rustworkx.find_negative_cycle", "apiref/rustworkx.floyd_warshall", "apiref/rustworkx.floyd_warshall_numpy", "apiref/rustworkx.floyd_warshall_successor_and_distance", "apiref/rustworkx.from_node_link_json_file", "apiref/rustworkx.generators.barbell_graph", "apiref/rustworkx.generators.binomial_tree_graph", "apiref/rustworkx.generators.complete_graph", "apiref/rustworkx.generators.cycle_graph", "apiref/rustworkx.generators.directed_binomial_tree_graph", "apiref/rustworkx.generators.directed_complete_graph", "apiref/rustworkx.generators.directed_cycle_graph", "apiref/rustworkx.generators.directed_empty_graph", "apiref/rustworkx.generators.directed_grid_graph", "apiref/rustworkx.generators.directed_heavy_hex_graph", "apiref/rustworkx.generators.directed_heavy_square_graph", "apiref/rustworkx.generators.directed_hexagonal_lattice_graph", "apiref/rustworkx.generators.directed_mesh_graph", "apiref/rustworkx.generators.directed_path_graph", "apiref/rustworkx.generators.directed_star_graph", "apiref/rustworkx.generators.dorogovtsev_goltsev_mendes_graph", "apiref/rustworkx.generators.empty_graph", "apiref/rustworkx.generators.full_rary_tree", "apiref/rustworkx.generators.generalized_petersen_graph", "apiref/rustworkx.generators.grid_graph", "apiref/rustworkx.generators.heavy_hex_graph", "apiref/rustworkx.generators.heavy_square_graph", "apiref/rustworkx.generators.hexagonal_lattice_graph", "apiref/rustworkx.generators.lollipop_graph", "apiref/rustworkx.generators.mesh_graph", "apiref/rustworkx.generators.path_graph", "apiref/rustworkx.generators.star_graph", "apiref/rustworkx.graph_adjacency_matrix", "apiref/rustworkx.graph_all_pairs_all_simple_paths", "apiref/rustworkx.graph_all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.graph_all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.graph_all_pairs_dijkstra_path_lengths", "apiref/rustworkx.graph_all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.graph_all_shortest_paths", "apiref/rustworkx.graph_all_simple_paths", "apiref/rustworkx.graph_astar_shortest_path", "apiref/rustworkx.graph_bellman_ford_shortest_path_lengths", "apiref/rustworkx.graph_betweenness_centrality", "apiref/rustworkx.graph_bfs_search", "apiref/rustworkx.graph_bipartite_edge_color", "apiref/rustworkx.graph_bipartite_layout", "apiref/rustworkx.graph_cartesian_product", "apiref/rustworkx.graph_circular_layout", "apiref/rustworkx.graph_closeness_centrality", "apiref/rustworkx.graph_complement", "apiref/rustworkx.graph_core_number", "apiref/rustworkx.graph_dfs_edges", "apiref/rustworkx.graph_dfs_search", "apiref/rustworkx.graph_dijkstra_search", "apiref/rustworkx.graph_dijkstra_shortest_path_lengths", "apiref/rustworkx.graph_dijkstra_shortest_paths", "apiref/rustworkx.graph_distance_matrix", "apiref/rustworkx.graph_edge_betweenness_centrality", "apiref/rustworkx.graph_eigenvector_centrality", "apiref/rustworkx.graph_floyd_warshall", "apiref/rustworkx.graph_floyd_warshall_numpy", "apiref/rustworkx.graph_floyd_warshall_successor_and_distance", "apiref/rustworkx.graph_greedy_color", "apiref/rustworkx.graph_greedy_edge_color", "apiref/rustworkx.graph_is_isomorphic", "apiref/rustworkx.graph_is_subgraph_isomorphic", "apiref/rustworkx.graph_k_shortest_path_lengths", "apiref/rustworkx.graph_katz_centrality", "apiref/rustworkx.graph_line_graph", "apiref/rustworkx.graph_longest_simple_path", "apiref/rustworkx.graph_misra_gries_edge_color", "apiref/rustworkx.graph_node_link_json", "apiref/rustworkx.graph_num_shortest_paths_unweighted", "apiref/rustworkx.graph_random_layout", "apiref/rustworkx.graph_shell_layout", "apiref/rustworkx.graph_spiral_layout", "apiref/rustworkx.graph_spring_layout", "apiref/rustworkx.graph_tensor_product", "apiref/rustworkx.graph_token_swapper", "apiref/rustworkx.graph_transitivity", "apiref/rustworkx.graph_union", "apiref/rustworkx.graph_unweighted_average_shortest_path_length", "apiref/rustworkx.graph_vf2_mapping", "apiref/rustworkx.has_path", "apiref/rustworkx.hits", "apiref/rustworkx.hyperbolic_random_graph", "apiref/rustworkx.immediate_dominators", "apiref/rustworkx.in_degree_centrality", "apiref/rustworkx.is_bipartite", "apiref/rustworkx.is_connected", "apiref/rustworkx.is_directed_acyclic_graph", "apiref/rustworkx.is_isomorphic", "apiref/rustworkx.is_isomorphic_node_match", "apiref/rustworkx.is_matching", "apiref/rustworkx.is_maximal_matching", "apiref/rustworkx.is_planar", "apiref/rustworkx.is_subgraph_isomorphic", "apiref/rustworkx.is_weakly_connected", "apiref/rustworkx.isolates", "apiref/rustworkx.k_shortest_path_lengths", "apiref/rustworkx.katz_centrality", "apiref/rustworkx.layers", "apiref/rustworkx.lexicographical_topological_sort", "apiref/rustworkx.longest_simple_path", "apiref/rustworkx.max_weight_matching", "apiref/rustworkx.metric_closure", "apiref/rustworkx.minimum_spanning_edges", "apiref/rustworkx.minimum_spanning_tree", "apiref/rustworkx.negative_edge_cycle", "apiref/rustworkx.networkx_converter", "apiref/rustworkx.node_connected_component", "apiref/rustworkx.node_link_json", "apiref/rustworkx.num_shortest_paths_unweighted", "apiref/rustworkx.number_connected_components", "apiref/rustworkx.number_weakly_connected_components", "apiref/rustworkx.out_degree_centrality", "apiref/rustworkx.pagerank", "apiref/rustworkx.parse_node_link_json", "apiref/rustworkx.random_geometric_graph", "apiref/rustworkx.random_layout", "apiref/rustworkx.read_graphml", "apiref/rustworkx.shell_layout", "apiref/rustworkx.simple_cycles", "apiref/rustworkx.spiral_layout", "apiref/rustworkx.spring_layout", "apiref/rustworkx.steiner_tree", "apiref/rustworkx.stoer_wagner_min_cut", "apiref/rustworkx.strongly_connected_components", "apiref/rustworkx.topological_generations", "apiref/rustworkx.topological_sort", "apiref/rustworkx.transitive_reduction", "apiref/rustworkx.transitivity", "apiref/rustworkx.two_color", "apiref/rustworkx.undirected_gnm_random_graph", "apiref/rustworkx.undirected_gnp_random_graph", "apiref/rustworkx.undirected_random_bipartite_graph", "apiref/rustworkx.undirected_sbm_random_graph", "apiref/rustworkx.union", "apiref/rustworkx.unweighted_average_shortest_path_length", "apiref/rustworkx.vf2_mapping", "apiref/rustworkx.visit.BFSVisitor", "apiref/rustworkx.visit.BFSVisitor.black_target_edge", "apiref/rustworkx.visit.BFSVisitor.discover_vertex", "apiref/rustworkx.visit.BFSVisitor.finish_vertex", "apiref/rustworkx.visit.BFSVisitor.gray_target_edge", "apiref/rustworkx.visit.BFSVisitor.non_tree_edge", "apiref/rustworkx.visit.BFSVisitor.tree_edge", "apiref/rustworkx.visit.DFSVisitor", "apiref/rustworkx.visit.DFSVisitor.back_edge", "apiref/rustworkx.visit.DFSVisitor.discover_vertex", "apiref/rustworkx.visit.DFSVisitor.finish_vertex", "apiref/rustworkx.visit.DFSVisitor.forward_or_cross_edge", "apiref/rustworkx.visit.DFSVisitor.tree_edge", "apiref/rustworkx.visit.DijkstraVisitor", "apiref/rustworkx.visit.DijkstraVisitor.discover_vertex", "apiref/rustworkx.visit.DijkstraVisitor.edge_not_relaxed", "apiref/rustworkx.visit.DijkstraVisitor.edge_relaxed", "apiref/rustworkx.visit.DijkstraVisitor.examine_edge", "apiref/rustworkx.visit.DijkstraVisitor.finish_vertex", "apiref/rustworkx.visit.PruneSearch", "apiref/rustworkx.visit.StopSearch", "apiref/rustworkx.visualization.graphviz_draw", "apiref/rustworkx.visualization.mpl_draw", "apiref/rustworkx.weakly_connected_components", "benchmarks", "index", "install", "networkx", "release_notes", "tutorial/betweenness_centrality", "tutorial/dags", "tutorial/index", "tutorial/introduction", "visualization"], "filenames": ["CONTRIBUTING.md", "api/algorithm_functions/centrality.rst", "api/algorithm_functions/coloring.rst", "api/algorithm_functions/connectivity_and_cycles.rst", "api/algorithm_functions/dag_algorithms.rst", "api/algorithm_functions/dominance.rst", "api/algorithm_functions/graph_operations.rst", "api/algorithm_functions/index.rst", "api/algorithm_functions/isomorphism.rst", "api/algorithm_functions/link_analysis.rst", "api/algorithm_functions/matching.rst", "api/algorithm_functions/other.rst", "api/algorithm_functions/shortest_paths.rst", "api/algorithm_functions/traversal.rst", "api/algorithm_functions/tree.rst", "api/converters.rst", "api/custom_return_types.rst", "api/exceptions.rst", "api/generators.rst", "api/graph_classes.rst", "api/index.rst", "api/layout_functions.rst", "api/pydigraph_api_functions.rst", "api/pygraph_api_functions.rst", "api/random_graph_generator_functions.rst", "api/serialization.rst", "apiref/rustworkx.AllPairsPathLengthMapping.rst", "apiref/rustworkx.AllPairsPathLengthMapping.items.rst", "apiref/rustworkx.AllPairsPathLengthMapping.keys.rst", "apiref/rustworkx.AllPairsPathLengthMapping.values.rst", "apiref/rustworkx.AllPairsPathMapping.rst", "apiref/rustworkx.AllPairsPathMapping.items.rst", "apiref/rustworkx.AllPairsPathMapping.keys.rst", "apiref/rustworkx.AllPairsPathMapping.values.rst", "apiref/rustworkx.BFSPredecessors.rst", "apiref/rustworkx.BFSSuccessors.rst", "apiref/rustworkx.BiconnectedComponents.rst", "apiref/rustworkx.BiconnectedComponents.items.rst", "apiref/rustworkx.BiconnectedComponents.keys.rst", "apiref/rustworkx.BiconnectedComponents.values.rst", "apiref/rustworkx.CentralityMapping.rst", "apiref/rustworkx.CentralityMapping.items.rst", "apiref/rustworkx.CentralityMapping.keys.rst", "apiref/rustworkx.CentralityMapping.values.rst", "apiref/rustworkx.Chains.rst", "apiref/rustworkx.ColoringStrategy.rst", "apiref/rustworkx.DAGHasCycle.rst", "apiref/rustworkx.DAGWouldCycle.rst", "apiref/rustworkx.EdgeCentralityMapping.rst", "apiref/rustworkx.EdgeCentralityMapping.items.rst", "apiref/rustworkx.EdgeCentralityMapping.keys.rst", "apiref/rustworkx.EdgeCentralityMapping.values.rst", "apiref/rustworkx.EdgeIndexMap.rst", "apiref/rustworkx.EdgeIndexMap.items.rst", "apiref/rustworkx.EdgeIndexMap.keys.rst", "apiref/rustworkx.EdgeIndexMap.values.rst", "apiref/rustworkx.EdgeIndices.rst", "apiref/rustworkx.EdgeList.rst", "apiref/rustworkx.GraphNotBipartite.rst", "apiref/rustworkx.IndexPartitionBlock.rst", "apiref/rustworkx.InvalidMapping.rst", "apiref/rustworkx.InvalidNode.rst", "apiref/rustworkx.JSONSerializationError.rst", "apiref/rustworkx.NegativeCycle.rst", "apiref/rustworkx.NoEdgeBetweenNodes.rst", "apiref/rustworkx.NoPathFound.rst", "apiref/rustworkx.NoSuitableNeighbors.rst", "apiref/rustworkx.NodeIndices.rst", "apiref/rustworkx.NodeMap.rst", "apiref/rustworkx.NodeMap.items.rst", "apiref/rustworkx.NodeMap.keys.rst", "apiref/rustworkx.NodeMap.values.rst", "apiref/rustworkx.NullGraph.rst", "apiref/rustworkx.PathLengthMapping.rst", "apiref/rustworkx.PathLengthMapping.items.rst", "apiref/rustworkx.PathLengthMapping.keys.rst", "apiref/rustworkx.PathLengthMapping.values.rst", "apiref/rustworkx.PathMapping.rst", "apiref/rustworkx.PathMapping.items.rst", "apiref/rustworkx.PathMapping.keys.rst", "apiref/rustworkx.PathMapping.values.rst", "apiref/rustworkx.Pos2DMapping.rst", "apiref/rustworkx.Pos2DMapping.items.rst", "apiref/rustworkx.Pos2DMapping.keys.rst", "apiref/rustworkx.Pos2DMapping.values.rst", "apiref/rustworkx.ProductNodeMap.rst", "apiref/rustworkx.ProductNodeMap.items.rst", "apiref/rustworkx.ProductNodeMap.keys.rst", "apiref/rustworkx.ProductNodeMap.values.rst", "apiref/rustworkx.PyDAG.rst", "apiref/rustworkx.PyDAG.add_child.rst", "apiref/rustworkx.PyDAG.add_edge.rst", "apiref/rustworkx.PyDAG.add_edges_from.rst", "apiref/rustworkx.PyDAG.add_edges_from_no_data.rst", "apiref/rustworkx.PyDAG.add_node.rst", "apiref/rustworkx.PyDAG.add_nodes_from.rst", "apiref/rustworkx.PyDAG.add_parent.rst", "apiref/rustworkx.PyDAG.adj.rst", "apiref/rustworkx.PyDAG.adj_direction.rst", "apiref/rustworkx.PyDAG.clear.rst", "apiref/rustworkx.PyDAG.clear_edges.rst", "apiref/rustworkx.PyDAG.compose.rst", "apiref/rustworkx.PyDAG.contract_nodes.rst", "apiref/rustworkx.PyDAG.copy.rst", "apiref/rustworkx.PyDAG.edge_index_map.rst", "apiref/rustworkx.PyDAG.edge_indices.rst", "apiref/rustworkx.PyDAG.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyDAG.edge_list.rst", "apiref/rustworkx.PyDAG.edge_subgraph.rst", "apiref/rustworkx.PyDAG.edges.rst", "apiref/rustworkx.PyDAG.extend_from_edge_list.rst", "apiref/rustworkx.PyDAG.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyDAG.filter_edges.rst", "apiref/rustworkx.PyDAG.filter_nodes.rst", "apiref/rustworkx.PyDAG.find_adjacent_node_by_edge.rst", "apiref/rustworkx.PyDAG.find_node_by_weight.rst", "apiref/rustworkx.PyDAG.find_predecessor_node_by_edge.rst", "apiref/rustworkx.PyDAG.find_predecessors_by_edge.rst", "apiref/rustworkx.PyDAG.find_successors_by_edge.rst", "apiref/rustworkx.PyDAG.from_adjacency_matrix.rst", "apiref/rustworkx.PyDAG.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyDAG.get_all_edge_data.rst", "apiref/rustworkx.PyDAG.get_edge_data.rst", "apiref/rustworkx.PyDAG.get_edge_data_by_index.rst", "apiref/rustworkx.PyDAG.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyDAG.get_node_data.rst", "apiref/rustworkx.PyDAG.has_edge.rst", "apiref/rustworkx.PyDAG.has_node.rst", "apiref/rustworkx.PyDAG.has_parallel_edges.rst", "apiref/rustworkx.PyDAG.in_degree.rst", "apiref/rustworkx.PyDAG.in_edges.rst", "apiref/rustworkx.PyDAG.incident_edge_index_map.rst", "apiref/rustworkx.PyDAG.incident_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_in_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_in_edges_multiple.rst", "apiref/rustworkx.PyDAG.insert_node_on_out_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_out_edges_multiple.rst", "apiref/rustworkx.PyDAG.is_symmetric.rst", "apiref/rustworkx.PyDAG.make_symmetric.rst", "apiref/rustworkx.PyDAG.merge_nodes.rst", "apiref/rustworkx.PyDAG.neighbors.rst", "apiref/rustworkx.PyDAG.neighbors_undirected.rst", "apiref/rustworkx.PyDAG.node_indexes.rst", "apiref/rustworkx.PyDAG.node_indices.rst", "apiref/rustworkx.PyDAG.nodes.rst", "apiref/rustworkx.PyDAG.num_edges.rst", "apiref/rustworkx.PyDAG.num_nodes.rst", "apiref/rustworkx.PyDAG.out_degree.rst", "apiref/rustworkx.PyDAG.out_edges.rst", "apiref/rustworkx.PyDAG.predecessor_indices.rst", "apiref/rustworkx.PyDAG.predecessors.rst", "apiref/rustworkx.PyDAG.read_edge_list.rst", "apiref/rustworkx.PyDAG.remove_edge.rst", "apiref/rustworkx.PyDAG.remove_edge_from_index.rst", "apiref/rustworkx.PyDAG.remove_edges_from.rst", "apiref/rustworkx.PyDAG.remove_node.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_id.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_key.rst", "apiref/rustworkx.PyDAG.remove_nodes_from.rst", "apiref/rustworkx.PyDAG.reverse.rst", "apiref/rustworkx.PyDAG.subgraph.rst", "apiref/rustworkx.PyDAG.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyDAG.successor_indices.rst", "apiref/rustworkx.PyDAG.successors.rst", "apiref/rustworkx.PyDAG.to_dot.rst", "apiref/rustworkx.PyDAG.to_undirected.rst", "apiref/rustworkx.PyDAG.update_edge.rst", "apiref/rustworkx.PyDAG.update_edge_by_index.rst", "apiref/rustworkx.PyDAG.weighted_edge_list.rst", "apiref/rustworkx.PyDAG.write_edge_list.rst", "apiref/rustworkx.PyDiGraph.rst", "apiref/rustworkx.PyDiGraph.add_child.rst", "apiref/rustworkx.PyDiGraph.add_edge.rst", "apiref/rustworkx.PyDiGraph.add_edges_from.rst", "apiref/rustworkx.PyDiGraph.add_edges_from_no_data.rst", "apiref/rustworkx.PyDiGraph.add_node.rst", "apiref/rustworkx.PyDiGraph.add_nodes_from.rst", "apiref/rustworkx.PyDiGraph.add_parent.rst", "apiref/rustworkx.PyDiGraph.adj.rst", "apiref/rustworkx.PyDiGraph.adj_direction.rst", "apiref/rustworkx.PyDiGraph.clear.rst", "apiref/rustworkx.PyDiGraph.clear_edges.rst", "apiref/rustworkx.PyDiGraph.compose.rst", "apiref/rustworkx.PyDiGraph.contract_nodes.rst", "apiref/rustworkx.PyDiGraph.copy.rst", "apiref/rustworkx.PyDiGraph.edge_index_map.rst", "apiref/rustworkx.PyDiGraph.edge_indices.rst", "apiref/rustworkx.PyDiGraph.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyDiGraph.edge_list.rst", "apiref/rustworkx.PyDiGraph.edge_subgraph.rst", "apiref/rustworkx.PyDiGraph.edges.rst", "apiref/rustworkx.PyDiGraph.extend_from_edge_list.rst", "apiref/rustworkx.PyDiGraph.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyDiGraph.filter_edges.rst", "apiref/rustworkx.PyDiGraph.filter_nodes.rst", "apiref/rustworkx.PyDiGraph.find_adjacent_node_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_node_by_weight.rst", "apiref/rustworkx.PyDiGraph.find_predecessor_node_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_predecessors_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_successors_by_edge.rst", "apiref/rustworkx.PyDiGraph.from_adjacency_matrix.rst", "apiref/rustworkx.PyDiGraph.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyDiGraph.get_all_edge_data.rst", "apiref/rustworkx.PyDiGraph.get_edge_data.rst", "apiref/rustworkx.PyDiGraph.get_edge_data_by_index.rst", "apiref/rustworkx.PyDiGraph.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyDiGraph.get_node_data.rst", "apiref/rustworkx.PyDiGraph.has_edge.rst", "apiref/rustworkx.PyDiGraph.has_node.rst", "apiref/rustworkx.PyDiGraph.has_parallel_edges.rst", "apiref/rustworkx.PyDiGraph.in_degree.rst", "apiref/rustworkx.PyDiGraph.in_edges.rst", "apiref/rustworkx.PyDiGraph.incident_edge_index_map.rst", "apiref/rustworkx.PyDiGraph.incident_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges_multiple.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges_multiple.rst", "apiref/rustworkx.PyDiGraph.is_symmetric.rst", "apiref/rustworkx.PyDiGraph.make_symmetric.rst", "apiref/rustworkx.PyDiGraph.merge_nodes.rst", "apiref/rustworkx.PyDiGraph.neighbors.rst", "apiref/rustworkx.PyDiGraph.neighbors_undirected.rst", "apiref/rustworkx.PyDiGraph.node_indexes.rst", "apiref/rustworkx.PyDiGraph.node_indices.rst", "apiref/rustworkx.PyDiGraph.nodes.rst", "apiref/rustworkx.PyDiGraph.num_edges.rst", "apiref/rustworkx.PyDiGraph.num_nodes.rst", "apiref/rustworkx.PyDiGraph.out_degree.rst", "apiref/rustworkx.PyDiGraph.out_edges.rst", "apiref/rustworkx.PyDiGraph.predecessor_indices.rst", "apiref/rustworkx.PyDiGraph.predecessors.rst", "apiref/rustworkx.PyDiGraph.read_edge_list.rst", "apiref/rustworkx.PyDiGraph.remove_edge.rst", "apiref/rustworkx.PyDiGraph.remove_edge_from_index.rst", "apiref/rustworkx.PyDiGraph.remove_edges_from.rst", "apiref/rustworkx.PyDiGraph.remove_node.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_id.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_key.rst", "apiref/rustworkx.PyDiGraph.remove_nodes_from.rst", "apiref/rustworkx.PyDiGraph.reverse.rst", "apiref/rustworkx.PyDiGraph.subgraph.rst", "apiref/rustworkx.PyDiGraph.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyDiGraph.successor_indices.rst", "apiref/rustworkx.PyDiGraph.successors.rst", "apiref/rustworkx.PyDiGraph.to_dot.rst", "apiref/rustworkx.PyDiGraph.to_undirected.rst", "apiref/rustworkx.PyDiGraph.update_edge.rst", "apiref/rustworkx.PyDiGraph.update_edge_by_index.rst", "apiref/rustworkx.PyDiGraph.weighted_edge_list.rst", "apiref/rustworkx.PyDiGraph.write_edge_list.rst", "apiref/rustworkx.PyGraph.rst", "apiref/rustworkx.PyGraph.add_edge.rst", "apiref/rustworkx.PyGraph.add_edges_from.rst", "apiref/rustworkx.PyGraph.add_edges_from_no_data.rst", "apiref/rustworkx.PyGraph.add_node.rst", "apiref/rustworkx.PyGraph.add_nodes_from.rst", "apiref/rustworkx.PyGraph.adj.rst", "apiref/rustworkx.PyGraph.clear.rst", "apiref/rustworkx.PyGraph.clear_edges.rst", "apiref/rustworkx.PyGraph.compose.rst", "apiref/rustworkx.PyGraph.contract_nodes.rst", "apiref/rustworkx.PyGraph.copy.rst", "apiref/rustworkx.PyGraph.degree.rst", "apiref/rustworkx.PyGraph.edge_index_map.rst", "apiref/rustworkx.PyGraph.edge_indices.rst", "apiref/rustworkx.PyGraph.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyGraph.edge_list.rst", "apiref/rustworkx.PyGraph.edge_subgraph.rst", "apiref/rustworkx.PyGraph.edges.rst", "apiref/rustworkx.PyGraph.extend_from_edge_list.rst", "apiref/rustworkx.PyGraph.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyGraph.filter_edges.rst", "apiref/rustworkx.PyGraph.filter_nodes.rst", "apiref/rustworkx.PyGraph.find_node_by_weight.rst", "apiref/rustworkx.PyGraph.from_adjacency_matrix.rst", "apiref/rustworkx.PyGraph.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyGraph.get_all_edge_data.rst", "apiref/rustworkx.PyGraph.get_edge_data.rst", "apiref/rustworkx.PyGraph.get_edge_data_by_index.rst", "apiref/rustworkx.PyGraph.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyGraph.get_node_data.rst", "apiref/rustworkx.PyGraph.has_edge.rst", "apiref/rustworkx.PyGraph.has_node.rst", "apiref/rustworkx.PyGraph.has_parallel_edges.rst", "apiref/rustworkx.PyGraph.in_edges.rst", "apiref/rustworkx.PyGraph.incident_edge_index_map.rst", "apiref/rustworkx.PyGraph.incident_edges.rst", "apiref/rustworkx.PyGraph.neighbors.rst", "apiref/rustworkx.PyGraph.node_indexes.rst", "apiref/rustworkx.PyGraph.node_indices.rst", "apiref/rustworkx.PyGraph.nodes.rst", "apiref/rustworkx.PyGraph.num_edges.rst", "apiref/rustworkx.PyGraph.num_nodes.rst", "apiref/rustworkx.PyGraph.out_edges.rst", "apiref/rustworkx.PyGraph.read_edge_list.rst", "apiref/rustworkx.PyGraph.remove_edge.rst", "apiref/rustworkx.PyGraph.remove_edge_from_index.rst", "apiref/rustworkx.PyGraph.remove_edges_from.rst", "apiref/rustworkx.PyGraph.remove_node.rst", "apiref/rustworkx.PyGraph.remove_nodes_from.rst", "apiref/rustworkx.PyGraph.subgraph.rst", "apiref/rustworkx.PyGraph.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyGraph.to_directed.rst", "apiref/rustworkx.PyGraph.to_dot.rst", "apiref/rustworkx.PyGraph.update_edge.rst", "apiref/rustworkx.PyGraph.update_edge_by_index.rst", "apiref/rustworkx.PyGraph.weighted_edge_list.rst", "apiref/rustworkx.PyGraph.write_edge_list.rst", "apiref/rustworkx.RelationalCoarsestPartition.rst", "apiref/rustworkx.TopologicalSorter.rst", "apiref/rustworkx.TopologicalSorter.done.rst", "apiref/rustworkx.TopologicalSorter.get_ready.rst", "apiref/rustworkx.TopologicalSorter.is_active.rst", "apiref/rustworkx.WeightedEdgeList.rst", "apiref/rustworkx.adjacency_matrix.rst", "apiref/rustworkx.all_pairs_all_simple_paths.rst", "apiref/rustworkx.all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.all_shortest_paths.rst", "apiref/rustworkx.all_simple_paths.rst", "apiref/rustworkx.ancestors.rst", "apiref/rustworkx.articulation_points.rst", "apiref/rustworkx.astar_shortest_path.rst", "apiref/rustworkx.barabasi_albert_graph.rst", "apiref/rustworkx.bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.bellman_ford_shortest_paths.rst", "apiref/rustworkx.betweenness_centrality.rst", "apiref/rustworkx.bfs_predecessors.rst", "apiref/rustworkx.bfs_search.rst", "apiref/rustworkx.bfs_successors.rst", "apiref/rustworkx.biconnected_components.rst", "apiref/rustworkx.bipartite_layout.rst", "apiref/rustworkx.bridges.rst", "apiref/rustworkx.cartesian_product.rst", "apiref/rustworkx.chain_decomposition.rst", "apiref/rustworkx.circular_layout.rst", "apiref/rustworkx.closeness_centrality.rst", "apiref/rustworkx.collect_bicolor_runs.rst", "apiref/rustworkx.collect_runs.rst", "apiref/rustworkx.complement.rst", "apiref/rustworkx.connected_components.rst", "apiref/rustworkx.connected_subgraphs.rst", "apiref/rustworkx.core_number.rst", "apiref/rustworkx.cycle_basis.rst", "apiref/rustworkx.dag_longest_path.rst", "apiref/rustworkx.dag_longest_path_length.rst", "apiref/rustworkx.dag_weighted_longest_path.rst", "apiref/rustworkx.dag_weighted_longest_path_length.rst", "apiref/rustworkx.degree_centrality.rst", "apiref/rustworkx.descendants.rst", "apiref/rustworkx.dfs_edges.rst", "apiref/rustworkx.dfs_search.rst", "apiref/rustworkx.digraph_adjacency_matrix.rst", "apiref/rustworkx.digraph_all_pairs_all_simple_paths.rst", "apiref/rustworkx.digraph_all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.digraph_all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.digraph_all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.digraph_all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.digraph_all_shortest_paths.rst", "apiref/rustworkx.digraph_all_simple_paths.rst", "apiref/rustworkx.digraph_astar_shortest_path.rst", "apiref/rustworkx.digraph_bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.digraph_betweenness_centrality.rst", "apiref/rustworkx.digraph_bfs_search.rst", "apiref/rustworkx.digraph_bipartite_layout.rst", "apiref/rustworkx.digraph_cartesian_product.rst", "apiref/rustworkx.digraph_circular_layout.rst", "apiref/rustworkx.digraph_closeness_centrality.rst", "apiref/rustworkx.digraph_complement.rst", "apiref/rustworkx.digraph_core_number.rst", "apiref/rustworkx.digraph_dfs_edges.rst", "apiref/rustworkx.digraph_dfs_search.rst", "apiref/rustworkx.digraph_dijkstra_search.rst", "apiref/rustworkx.digraph_dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.digraph_dijkstra_shortest_paths.rst", "apiref/rustworkx.digraph_distance_matrix.rst", "apiref/rustworkx.digraph_edge_betweenness_centrality.rst", "apiref/rustworkx.digraph_eigenvector_centrality.rst", "apiref/rustworkx.digraph_find_cycle.rst", "apiref/rustworkx.digraph_floyd_warshall.rst", "apiref/rustworkx.digraph_floyd_warshall_numpy.rst", "apiref/rustworkx.digraph_floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.digraph_is_isomorphic.rst", "apiref/rustworkx.digraph_is_subgraph_isomorphic.rst", "apiref/rustworkx.digraph_k_shortest_path_lengths.rst", "apiref/rustworkx.digraph_katz_centrality.rst", "apiref/rustworkx.digraph_longest_simple_path.rst", "apiref/rustworkx.digraph_maximum_bisimulation.rst", "apiref/rustworkx.digraph_node_link_json.rst", "apiref/rustworkx.digraph_num_shortest_paths_unweighted.rst", "apiref/rustworkx.digraph_random_layout.rst", "apiref/rustworkx.digraph_shell_layout.rst", "apiref/rustworkx.digraph_spiral_layout.rst", "apiref/rustworkx.digraph_spring_layout.rst", "apiref/rustworkx.digraph_tensor_product.rst", "apiref/rustworkx.digraph_transitivity.rst", "apiref/rustworkx.digraph_union.rst", "apiref/rustworkx.digraph_unweighted_average_shortest_path_length.rst", "apiref/rustworkx.digraph_vf2_mapping.rst", "apiref/rustworkx.dijkstra_search.rst", "apiref/rustworkx.dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.dijkstra_shortest_paths.rst", "apiref/rustworkx.directed_barabasi_albert_graph.rst", "apiref/rustworkx.directed_gnm_random_graph.rst", "apiref/rustworkx.directed_gnp_random_graph.rst", "apiref/rustworkx.directed_random_bipartite_graph.rst", "apiref/rustworkx.directed_sbm_random_graph.rst", "apiref/rustworkx.distance_matrix.rst", "apiref/rustworkx.dominance_frontiers.rst", "apiref/rustworkx.edge_betweenness_centrality.rst", "apiref/rustworkx.eigenvector_centrality.rst", "apiref/rustworkx.find_negative_cycle.rst", "apiref/rustworkx.floyd_warshall.rst", "apiref/rustworkx.floyd_warshall_numpy.rst", "apiref/rustworkx.floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.from_node_link_json_file.rst", "apiref/rustworkx.generators.barbell_graph.rst", "apiref/rustworkx.generators.binomial_tree_graph.rst", "apiref/rustworkx.generators.complete_graph.rst", "apiref/rustworkx.generators.cycle_graph.rst", "apiref/rustworkx.generators.directed_binomial_tree_graph.rst", "apiref/rustworkx.generators.directed_complete_graph.rst", "apiref/rustworkx.generators.directed_cycle_graph.rst", "apiref/rustworkx.generators.directed_empty_graph.rst", "apiref/rustworkx.generators.directed_grid_graph.rst", "apiref/rustworkx.generators.directed_heavy_hex_graph.rst", "apiref/rustworkx.generators.directed_heavy_square_graph.rst", "apiref/rustworkx.generators.directed_hexagonal_lattice_graph.rst", "apiref/rustworkx.generators.directed_mesh_graph.rst", "apiref/rustworkx.generators.directed_path_graph.rst", "apiref/rustworkx.generators.directed_star_graph.rst", "apiref/rustworkx.generators.dorogovtsev_goltsev_mendes_graph.rst", "apiref/rustworkx.generators.empty_graph.rst", "apiref/rustworkx.generators.full_rary_tree.rst", "apiref/rustworkx.generators.generalized_petersen_graph.rst", "apiref/rustworkx.generators.grid_graph.rst", "apiref/rustworkx.generators.heavy_hex_graph.rst", "apiref/rustworkx.generators.heavy_square_graph.rst", "apiref/rustworkx.generators.hexagonal_lattice_graph.rst", "apiref/rustworkx.generators.lollipop_graph.rst", "apiref/rustworkx.generators.mesh_graph.rst", "apiref/rustworkx.generators.path_graph.rst", "apiref/rustworkx.generators.star_graph.rst", "apiref/rustworkx.graph_adjacency_matrix.rst", "apiref/rustworkx.graph_all_pairs_all_simple_paths.rst", "apiref/rustworkx.graph_all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.graph_all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.graph_all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.graph_all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.graph_all_shortest_paths.rst", "apiref/rustworkx.graph_all_simple_paths.rst", "apiref/rustworkx.graph_astar_shortest_path.rst", "apiref/rustworkx.graph_bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.graph_betweenness_centrality.rst", "apiref/rustworkx.graph_bfs_search.rst", "apiref/rustworkx.graph_bipartite_edge_color.rst", "apiref/rustworkx.graph_bipartite_layout.rst", "apiref/rustworkx.graph_cartesian_product.rst", "apiref/rustworkx.graph_circular_layout.rst", "apiref/rustworkx.graph_closeness_centrality.rst", "apiref/rustworkx.graph_complement.rst", "apiref/rustworkx.graph_core_number.rst", "apiref/rustworkx.graph_dfs_edges.rst", "apiref/rustworkx.graph_dfs_search.rst", "apiref/rustworkx.graph_dijkstra_search.rst", "apiref/rustworkx.graph_dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.graph_dijkstra_shortest_paths.rst", "apiref/rustworkx.graph_distance_matrix.rst", "apiref/rustworkx.graph_edge_betweenness_centrality.rst", "apiref/rustworkx.graph_eigenvector_centrality.rst", "apiref/rustworkx.graph_floyd_warshall.rst", "apiref/rustworkx.graph_floyd_warshall_numpy.rst", "apiref/rustworkx.graph_floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.graph_greedy_color.rst", "apiref/rustworkx.graph_greedy_edge_color.rst", "apiref/rustworkx.graph_is_isomorphic.rst", "apiref/rustworkx.graph_is_subgraph_isomorphic.rst", "apiref/rustworkx.graph_k_shortest_path_lengths.rst", "apiref/rustworkx.graph_katz_centrality.rst", "apiref/rustworkx.graph_line_graph.rst", "apiref/rustworkx.graph_longest_simple_path.rst", "apiref/rustworkx.graph_misra_gries_edge_color.rst", "apiref/rustworkx.graph_node_link_json.rst", "apiref/rustworkx.graph_num_shortest_paths_unweighted.rst", "apiref/rustworkx.graph_random_layout.rst", "apiref/rustworkx.graph_shell_layout.rst", "apiref/rustworkx.graph_spiral_layout.rst", "apiref/rustworkx.graph_spring_layout.rst", "apiref/rustworkx.graph_tensor_product.rst", "apiref/rustworkx.graph_token_swapper.rst", "apiref/rustworkx.graph_transitivity.rst", "apiref/rustworkx.graph_union.rst", "apiref/rustworkx.graph_unweighted_average_shortest_path_length.rst", "apiref/rustworkx.graph_vf2_mapping.rst", "apiref/rustworkx.has_path.rst", "apiref/rustworkx.hits.rst", "apiref/rustworkx.hyperbolic_random_graph.rst", "apiref/rustworkx.immediate_dominators.rst", "apiref/rustworkx.in_degree_centrality.rst", "apiref/rustworkx.is_bipartite.rst", "apiref/rustworkx.is_connected.rst", "apiref/rustworkx.is_directed_acyclic_graph.rst", "apiref/rustworkx.is_isomorphic.rst", "apiref/rustworkx.is_isomorphic_node_match.rst", "apiref/rustworkx.is_matching.rst", "apiref/rustworkx.is_maximal_matching.rst", "apiref/rustworkx.is_planar.rst", "apiref/rustworkx.is_subgraph_isomorphic.rst", "apiref/rustworkx.is_weakly_connected.rst", "apiref/rustworkx.isolates.rst", "apiref/rustworkx.k_shortest_path_lengths.rst", "apiref/rustworkx.katz_centrality.rst", "apiref/rustworkx.layers.rst", "apiref/rustworkx.lexicographical_topological_sort.rst", "apiref/rustworkx.longest_simple_path.rst", "apiref/rustworkx.max_weight_matching.rst", "apiref/rustworkx.metric_closure.rst", "apiref/rustworkx.minimum_spanning_edges.rst", "apiref/rustworkx.minimum_spanning_tree.rst", "apiref/rustworkx.negative_edge_cycle.rst", "apiref/rustworkx.networkx_converter.rst", "apiref/rustworkx.node_connected_component.rst", "apiref/rustworkx.node_link_json.rst", "apiref/rustworkx.num_shortest_paths_unweighted.rst", "apiref/rustworkx.number_connected_components.rst", "apiref/rustworkx.number_weakly_connected_components.rst", "apiref/rustworkx.out_degree_centrality.rst", "apiref/rustworkx.pagerank.rst", "apiref/rustworkx.parse_node_link_json.rst", "apiref/rustworkx.random_geometric_graph.rst", "apiref/rustworkx.random_layout.rst", "apiref/rustworkx.read_graphml.rst", "apiref/rustworkx.shell_layout.rst", "apiref/rustworkx.simple_cycles.rst", "apiref/rustworkx.spiral_layout.rst", "apiref/rustworkx.spring_layout.rst", "apiref/rustworkx.steiner_tree.rst", "apiref/rustworkx.stoer_wagner_min_cut.rst", "apiref/rustworkx.strongly_connected_components.rst", "apiref/rustworkx.topological_generations.rst", "apiref/rustworkx.topological_sort.rst", "apiref/rustworkx.transitive_reduction.rst", "apiref/rustworkx.transitivity.rst", "apiref/rustworkx.two_color.rst", "apiref/rustworkx.undirected_gnm_random_graph.rst", "apiref/rustworkx.undirected_gnp_random_graph.rst", "apiref/rustworkx.undirected_random_bipartite_graph.rst", "apiref/rustworkx.undirected_sbm_random_graph.rst", "apiref/rustworkx.union.rst", "apiref/rustworkx.unweighted_average_shortest_path_length.rst", "apiref/rustworkx.vf2_mapping.rst", "apiref/rustworkx.visit.BFSVisitor.rst", "apiref/rustworkx.visit.BFSVisitor.black_target_edge.rst", "apiref/rustworkx.visit.BFSVisitor.discover_vertex.rst", "apiref/rustworkx.visit.BFSVisitor.finish_vertex.rst", "apiref/rustworkx.visit.BFSVisitor.gray_target_edge.rst", "apiref/rustworkx.visit.BFSVisitor.non_tree_edge.rst", "apiref/rustworkx.visit.BFSVisitor.tree_edge.rst", "apiref/rustworkx.visit.DFSVisitor.rst", "apiref/rustworkx.visit.DFSVisitor.back_edge.rst", "apiref/rustworkx.visit.DFSVisitor.discover_vertex.rst", "apiref/rustworkx.visit.DFSVisitor.finish_vertex.rst", "apiref/rustworkx.visit.DFSVisitor.forward_or_cross_edge.rst", "apiref/rustworkx.visit.DFSVisitor.tree_edge.rst", "apiref/rustworkx.visit.DijkstraVisitor.rst", "apiref/rustworkx.visit.DijkstraVisitor.discover_vertex.rst", "apiref/rustworkx.visit.DijkstraVisitor.edge_not_relaxed.rst", "apiref/rustworkx.visit.DijkstraVisitor.edge_relaxed.rst", "apiref/rustworkx.visit.DijkstraVisitor.examine_edge.rst", "apiref/rustworkx.visit.DijkstraVisitor.finish_vertex.rst", "apiref/rustworkx.visit.PruneSearch.rst", "apiref/rustworkx.visit.StopSearch.rst", "apiref/rustworkx.visualization.graphviz_draw.rst", "apiref/rustworkx.visualization.mpl_draw.rst", "apiref/rustworkx.weakly_connected_components.rst", "benchmarks.rst", "index.rst", "install.rst", "networkx.rst", "release_notes.rst", "tutorial/betweenness_centrality.rst", "tutorial/dags.rst", "tutorial/index.rst", "tutorial/introduction.rst", "visualization.rst"], "titles": ["Contributing", "Centrality", "Coloring", "Connectivity and Cycles", "DAG Algorithms", "Dominance", "Graph Operations", "Algorithm Functions", "Isomorphism", "Link Analysis", "Matching", "Other Algorithm Functions", "Shortest Paths", "Traversal", "Tree", "Converters", "Custom Return Types", "Exceptions", "Generators", "Graph Classes", "Rustworkx API Reference", "Layout Functions", "API functions for PyDigraph", "API functions for PyGraph", "Random Graph Generator Functions", "Serialization", "AllPairsPathLengthMapping", "rustworkx.AllPairsPathLengthMapping.items", "rustworkx.AllPairsPathLengthMapping.keys", "rustworkx.AllPairsPathLengthMapping.values", "AllPairsPathMapping", "rustworkx.AllPairsPathMapping.items", "rustworkx.AllPairsPathMapping.keys", "rustworkx.AllPairsPathMapping.values", "BFSPredecessors", "BFSSuccessors", "BiconnectedComponents", "rustworkx.BiconnectedComponents.items", "rustworkx.BiconnectedComponents.keys", "rustworkx.BiconnectedComponents.values", "CentralityMapping", "rustworkx.CentralityMapping.items", "rustworkx.CentralityMapping.keys", "rustworkx.CentralityMapping.values", "Chains", "ColoringStrategy", "rustworkx.DAGHasCycle", "rustworkx.DAGWouldCycle", "EdgeCentralityMapping", "rustworkx.EdgeCentralityMapping.items", "rustworkx.EdgeCentralityMapping.keys", "rustworkx.EdgeCentralityMapping.values", "EdgeIndexMap", "rustworkx.EdgeIndexMap.items", "rustworkx.EdgeIndexMap.keys", "rustworkx.EdgeIndexMap.values", "EdgeIndices", "EdgeList", "rustworkx.GraphNotBipartite", "IndexPartitionBlock", "rustworkx.InvalidMapping", "rustworkx.InvalidNode", "rustworkx.JSONSerializationError", "rustworkx.NegativeCycle", "rustworkx.NoEdgeBetweenNodes", "rustworkx.NoPathFound", "rustworkx.NoSuitableNeighbors", "NodeIndices", "NodeMap", "rustworkx.NodeMap.items", "rustworkx.NodeMap.keys", "rustworkx.NodeMap.values", "rustworkx.NullGraph", "PathLengthMapping", "rustworkx.PathLengthMapping.items", "rustworkx.PathLengthMapping.keys", "rustworkx.PathLengthMapping.values", "PathMapping", "rustworkx.PathMapping.items", "rustworkx.PathMapping.keys", "rustworkx.PathMapping.values", "Pos2DMapping", "rustworkx.Pos2DMapping.items", "rustworkx.Pos2DMapping.keys", "rustworkx.Pos2DMapping.values", "ProductNodeMap", "rustworkx.ProductNodeMap.items", "rustworkx.ProductNodeMap.keys", "rustworkx.ProductNodeMap.values", "PyDAG", "rustworkx.PyDAG.add_child", "rustworkx.PyDAG.add_edge", "rustworkx.PyDAG.add_edges_from", "rustworkx.PyDAG.add_edges_from_no_data", "rustworkx.PyDAG.add_node", "rustworkx.PyDAG.add_nodes_from", "rustworkx.PyDAG.add_parent", "rustworkx.PyDAG.adj", "rustworkx.PyDAG.adj_direction", "rustworkx.PyDAG.clear", "rustworkx.PyDAG.clear_edges", "rustworkx.PyDAG.compose", "rustworkx.PyDAG.contract_nodes", "rustworkx.PyDAG.copy", "rustworkx.PyDAG.edge_index_map", "rustworkx.PyDAG.edge_indices", "rustworkx.PyDAG.edge_indices_from_endpoints", "rustworkx.PyDAG.edge_list", "rustworkx.PyDAG.edge_subgraph", "rustworkx.PyDAG.edges", "rustworkx.PyDAG.extend_from_edge_list", "rustworkx.PyDAG.extend_from_weighted_edge_list", "rustworkx.PyDAG.filter_edges", "rustworkx.PyDAG.filter_nodes", "rustworkx.PyDAG.find_adjacent_node_by_edge", "rustworkx.PyDAG.find_node_by_weight", "rustworkx.PyDAG.find_predecessor_node_by_edge", "rustworkx.PyDAG.find_predecessors_by_edge", "rustworkx.PyDAG.find_successors_by_edge", "rustworkx.PyDAG.from_adjacency_matrix", "rustworkx.PyDAG.from_complex_adjacency_matrix", "rustworkx.PyDAG.get_all_edge_data", "rustworkx.PyDAG.get_edge_data", "rustworkx.PyDAG.get_edge_data_by_index", "rustworkx.PyDAG.get_edge_endpoints_by_index", "rustworkx.PyDAG.get_node_data", "rustworkx.PyDAG.has_edge", "rustworkx.PyDAG.has_node", "rustworkx.PyDAG.has_parallel_edges", "rustworkx.PyDAG.in_degree", "rustworkx.PyDAG.in_edges", "rustworkx.PyDAG.incident_edge_index_map", "rustworkx.PyDAG.incident_edges", "rustworkx.PyDAG.insert_node_on_in_edges", "rustworkx.PyDAG.insert_node_on_in_edges_multiple", "rustworkx.PyDAG.insert_node_on_out_edges", "rustworkx.PyDAG.insert_node_on_out_edges_multiple", "rustworkx.PyDAG.is_symmetric", "rustworkx.PyDAG.make_symmetric", "rustworkx.PyDAG.merge_nodes", "rustworkx.PyDAG.neighbors", "rustworkx.PyDAG.neighbors_undirected", "rustworkx.PyDAG.node_indexes", "rustworkx.PyDAG.node_indices", "rustworkx.PyDAG.nodes", "rustworkx.PyDAG.num_edges", "rustworkx.PyDAG.num_nodes", "rustworkx.PyDAG.out_degree", "rustworkx.PyDAG.out_edges", "rustworkx.PyDAG.predecessor_indices", "rustworkx.PyDAG.predecessors", "rustworkx.PyDAG.read_edge_list", "rustworkx.PyDAG.remove_edge", "rustworkx.PyDAG.remove_edge_from_index", "rustworkx.PyDAG.remove_edges_from", "rustworkx.PyDAG.remove_node", "rustworkx.PyDAG.remove_node_retain_edges", "rustworkx.PyDAG.remove_node_retain_edges_by_id", "rustworkx.PyDAG.remove_node_retain_edges_by_key", "rustworkx.PyDAG.remove_nodes_from", "rustworkx.PyDAG.reverse", "rustworkx.PyDAG.subgraph", "rustworkx.PyDAG.substitute_node_with_subgraph", "rustworkx.PyDAG.successor_indices", "rustworkx.PyDAG.successors", "rustworkx.PyDAG.to_dot", "rustworkx.PyDAG.to_undirected", "rustworkx.PyDAG.update_edge", "rustworkx.PyDAG.update_edge_by_index", "rustworkx.PyDAG.weighted_edge_list", "rustworkx.PyDAG.write_edge_list", "PyDiGraph", "rustworkx.PyDiGraph.add_child", "rustworkx.PyDiGraph.add_edge", "rustworkx.PyDiGraph.add_edges_from", "rustworkx.PyDiGraph.add_edges_from_no_data", "rustworkx.PyDiGraph.add_node", "rustworkx.PyDiGraph.add_nodes_from", "rustworkx.PyDiGraph.add_parent", "rustworkx.PyDiGraph.adj", "rustworkx.PyDiGraph.adj_direction", "rustworkx.PyDiGraph.clear", "rustworkx.PyDiGraph.clear_edges", "rustworkx.PyDiGraph.compose", "rustworkx.PyDiGraph.contract_nodes", "rustworkx.PyDiGraph.copy", "rustworkx.PyDiGraph.edge_index_map", "rustworkx.PyDiGraph.edge_indices", "rustworkx.PyDiGraph.edge_indices_from_endpoints", "rustworkx.PyDiGraph.edge_list", "rustworkx.PyDiGraph.edge_subgraph", "rustworkx.PyDiGraph.edges", "rustworkx.PyDiGraph.extend_from_edge_list", "rustworkx.PyDiGraph.extend_from_weighted_edge_list", "rustworkx.PyDiGraph.filter_edges", "rustworkx.PyDiGraph.filter_nodes", "rustworkx.PyDiGraph.find_adjacent_node_by_edge", "rustworkx.PyDiGraph.find_node_by_weight", "rustworkx.PyDiGraph.find_predecessor_node_by_edge", "rustworkx.PyDiGraph.find_predecessors_by_edge", "rustworkx.PyDiGraph.find_successors_by_edge", "rustworkx.PyDiGraph.from_adjacency_matrix", "rustworkx.PyDiGraph.from_complex_adjacency_matrix", "rustworkx.PyDiGraph.get_all_edge_data", "rustworkx.PyDiGraph.get_edge_data", "rustworkx.PyDiGraph.get_edge_data_by_index", "rustworkx.PyDiGraph.get_edge_endpoints_by_index", "rustworkx.PyDiGraph.get_node_data", "rustworkx.PyDiGraph.has_edge", "rustworkx.PyDiGraph.has_node", "rustworkx.PyDiGraph.has_parallel_edges", "rustworkx.PyDiGraph.in_degree", "rustworkx.PyDiGraph.in_edges", "rustworkx.PyDiGraph.incident_edge_index_map", "rustworkx.PyDiGraph.incident_edges", "rustworkx.PyDiGraph.insert_node_on_in_edges", "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple", "rustworkx.PyDiGraph.insert_node_on_out_edges", "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple", "rustworkx.PyDiGraph.is_symmetric", "rustworkx.PyDiGraph.make_symmetric", "rustworkx.PyDiGraph.merge_nodes", "rustworkx.PyDiGraph.neighbors", "rustworkx.PyDiGraph.neighbors_undirected", "rustworkx.PyDiGraph.node_indexes", "rustworkx.PyDiGraph.node_indices", "rustworkx.PyDiGraph.nodes", "rustworkx.PyDiGraph.num_edges", "rustworkx.PyDiGraph.num_nodes", "rustworkx.PyDiGraph.out_degree", "rustworkx.PyDiGraph.out_edges", "rustworkx.PyDiGraph.predecessor_indices", "rustworkx.PyDiGraph.predecessors", "rustworkx.PyDiGraph.read_edge_list", "rustworkx.PyDiGraph.remove_edge", "rustworkx.PyDiGraph.remove_edge_from_index", "rustworkx.PyDiGraph.remove_edges_from", "rustworkx.PyDiGraph.remove_node", "rustworkx.PyDiGraph.remove_node_retain_edges", "rustworkx.PyDiGraph.remove_node_retain_edges_by_id", "rustworkx.PyDiGraph.remove_node_retain_edges_by_key", "rustworkx.PyDiGraph.remove_nodes_from", "rustworkx.PyDiGraph.reverse", "rustworkx.PyDiGraph.subgraph", "rustworkx.PyDiGraph.substitute_node_with_subgraph", "rustworkx.PyDiGraph.successor_indices", "rustworkx.PyDiGraph.successors", "rustworkx.PyDiGraph.to_dot", "rustworkx.PyDiGraph.to_undirected", "rustworkx.PyDiGraph.update_edge", "rustworkx.PyDiGraph.update_edge_by_index", "rustworkx.PyDiGraph.weighted_edge_list", "rustworkx.PyDiGraph.write_edge_list", "PyGraph", "rustworkx.PyGraph.add_edge", "rustworkx.PyGraph.add_edges_from", "rustworkx.PyGraph.add_edges_from_no_data", "rustworkx.PyGraph.add_node", "rustworkx.PyGraph.add_nodes_from", "rustworkx.PyGraph.adj", "rustworkx.PyGraph.clear", "rustworkx.PyGraph.clear_edges", "rustworkx.PyGraph.compose", "rustworkx.PyGraph.contract_nodes", "rustworkx.PyGraph.copy", "rustworkx.PyGraph.degree", "rustworkx.PyGraph.edge_index_map", "rustworkx.PyGraph.edge_indices", "rustworkx.PyGraph.edge_indices_from_endpoints", "rustworkx.PyGraph.edge_list", "rustworkx.PyGraph.edge_subgraph", "rustworkx.PyGraph.edges", "rustworkx.PyGraph.extend_from_edge_list", "rustworkx.PyGraph.extend_from_weighted_edge_list", "rustworkx.PyGraph.filter_edges", "rustworkx.PyGraph.filter_nodes", "rustworkx.PyGraph.find_node_by_weight", "rustworkx.PyGraph.from_adjacency_matrix", "rustworkx.PyGraph.from_complex_adjacency_matrix", "rustworkx.PyGraph.get_all_edge_data", "rustworkx.PyGraph.get_edge_data", "rustworkx.PyGraph.get_edge_data_by_index", "rustworkx.PyGraph.get_edge_endpoints_by_index", "rustworkx.PyGraph.get_node_data", "rustworkx.PyGraph.has_edge", "rustworkx.PyGraph.has_node", "rustworkx.PyGraph.has_parallel_edges", "rustworkx.PyGraph.in_edges", "rustworkx.PyGraph.incident_edge_index_map", "rustworkx.PyGraph.incident_edges", "rustworkx.PyGraph.neighbors", "rustworkx.PyGraph.node_indexes", "rustworkx.PyGraph.node_indices", "rustworkx.PyGraph.nodes", "rustworkx.PyGraph.num_edges", "rustworkx.PyGraph.num_nodes", "rustworkx.PyGraph.out_edges", "rustworkx.PyGraph.read_edge_list", "rustworkx.PyGraph.remove_edge", "rustworkx.PyGraph.remove_edge_from_index", "rustworkx.PyGraph.remove_edges_from", "rustworkx.PyGraph.remove_node", "rustworkx.PyGraph.remove_nodes_from", "rustworkx.PyGraph.subgraph", "rustworkx.PyGraph.substitute_node_with_subgraph", "rustworkx.PyGraph.to_directed", "rustworkx.PyGraph.to_dot", "rustworkx.PyGraph.update_edge", "rustworkx.PyGraph.update_edge_by_index", "rustworkx.PyGraph.weighted_edge_list", "rustworkx.PyGraph.write_edge_list", "RelationalCoarsestPartition", "TopologicalSorter", "rustworkx.TopologicalSorter.done", "rustworkx.TopologicalSorter.get_ready", "rustworkx.TopologicalSorter.is_active", "WeightedEdgeList", "rustworkx.adjacency_matrix", "rustworkx.all_pairs_all_simple_paths", "rustworkx.all_pairs_bellman_ford_path_lengths", "rustworkx.all_pairs_bellman_ford_shortest_paths", "rustworkx.all_pairs_dijkstra_path_lengths", "rustworkx.all_pairs_dijkstra_shortest_paths", "rustworkx.all_shortest_paths", "rustworkx.all_simple_paths", "rustworkx.ancestors", "rustworkx.articulation_points", "rustworkx.astar_shortest_path", "rustworkx.barabasi_albert_graph", "rustworkx.bellman_ford_shortest_path_lengths", "rustworkx.bellman_ford_shortest_paths", "rustworkx.betweenness_centrality", "rustworkx.bfs_predecessors", "rustworkx.bfs_search", "rustworkx.bfs_successors", "rustworkx.biconnected_components", "rustworkx.bipartite_layout", "rustworkx.bridges", "rustworkx.cartesian_product", "rustworkx.chain_decomposition", "rustworkx.circular_layout", "rustworkx.closeness_centrality", "rustworkx.collect_bicolor_runs", "rustworkx.collect_runs", "rustworkx.complement", "rustworkx.connected_components", "rustworkx.connected_subgraphs", "rustworkx.core_number", "rustworkx.cycle_basis", "rustworkx.dag_longest_path", "rustworkx.dag_longest_path_length", "rustworkx.dag_weighted_longest_path", "rustworkx.dag_weighted_longest_path_length", "rustworkx.degree_centrality", "rustworkx.descendants", "rustworkx.dfs_edges", "rustworkx.dfs_search", "rustworkx.digraph_adjacency_matrix", "rustworkx.digraph_all_pairs_all_simple_paths", "rustworkx.digraph_all_pairs_bellman_ford_path_lengths", "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths", "rustworkx.digraph_all_pairs_dijkstra_path_lengths", "rustworkx.digraph_all_pairs_dijkstra_shortest_paths", "rustworkx.digraph_all_shortest_paths", "rustworkx.digraph_all_simple_paths", "rustworkx.digraph_astar_shortest_path", "rustworkx.digraph_bellman_ford_shortest_path_lengths", "rustworkx.digraph_betweenness_centrality", "rustworkx.digraph_bfs_search", "rustworkx.digraph_bipartite_layout", "rustworkx.digraph_cartesian_product", "rustworkx.digraph_circular_layout", "rustworkx.digraph_closeness_centrality", "rustworkx.digraph_complement", "rustworkx.digraph_core_number", "rustworkx.digraph_dfs_edges", "rustworkx.digraph_dfs_search", "rustworkx.digraph_dijkstra_search", "rustworkx.digraph_dijkstra_shortest_path_lengths", "rustworkx.digraph_dijkstra_shortest_paths", "rustworkx.digraph_distance_matrix", "rustworkx.digraph_edge_betweenness_centrality", "rustworkx.digraph_eigenvector_centrality", "rustworkx.digraph_find_cycle", "rustworkx.digraph_floyd_warshall", "rustworkx.digraph_floyd_warshall_numpy", "rustworkx.digraph_floyd_warshall_successor_and_distance", "rustworkx.digraph_is_isomorphic", "rustworkx.digraph_is_subgraph_isomorphic", "rustworkx.digraph_k_shortest_path_lengths", "rustworkx.digraph_katz_centrality", "rustworkx.digraph_longest_simple_path", "rustworkx.digraph_maximum_bisimulation", "rustworkx.digraph_node_link_json", "rustworkx.digraph_num_shortest_paths_unweighted", "rustworkx.digraph_random_layout", "rustworkx.digraph_shell_layout", "rustworkx.digraph_spiral_layout", "rustworkx.digraph_spring_layout", "rustworkx.digraph_tensor_product", "rustworkx.digraph_transitivity", "rustworkx.digraph_union", "rustworkx.digraph_unweighted_average_shortest_path_length", "rustworkx.digraph_vf2_mapping", "rustworkx.dijkstra_search", "rustworkx.dijkstra_shortest_path_lengths", "rustworkx.dijkstra_shortest_paths", "rustworkx.directed_barabasi_albert_graph", "rustworkx.directed_gnm_random_graph", "rustworkx.directed_gnp_random_graph", "rustworkx.directed_random_bipartite_graph", "rustworkx.directed_sbm_random_graph", "rustworkx.distance_matrix", "rustworkx.dominance_frontiers", "rustworkx.edge_betweenness_centrality", "rustworkx.eigenvector_centrality", "rustworkx.find_negative_cycle", "rustworkx.floyd_warshall", "rustworkx.floyd_warshall_numpy", "rustworkx.floyd_warshall_successor_and_distance", "rustworkx.from_node_link_json_file", "rustworkx.generators.barbell_graph", "rustworkx.generators.binomial_tree_graph", "rustworkx.generators.complete_graph", "rustworkx.generators.cycle_graph", "rustworkx.generators.directed_binomial_tree_graph", "rustworkx.generators.directed_complete_graph", "rustworkx.generators.directed_cycle_graph", "rustworkx.generators.directed_empty_graph", "rustworkx.generators.directed_grid_graph", "rustworkx.generators.directed_heavy_hex_graph", "rustworkx.generators.directed_heavy_square_graph", "rustworkx.generators.directed_hexagonal_lattice_graph", "rustworkx.generators.directed_mesh_graph", "rustworkx.generators.directed_path_graph", "rustworkx.generators.directed_star_graph", "rustworkx.generators.dorogovtsev_goltsev_mendes_graph", "rustworkx.generators.empty_graph", "rustworkx.generators.full_rary_tree", "rustworkx.generators.generalized_petersen_graph", "rustworkx.generators.grid_graph", "rustworkx.generators.heavy_hex_graph", "rustworkx.generators.heavy_square_graph", "rustworkx.generators.hexagonal_lattice_graph", "rustworkx.generators.lollipop_graph", "rustworkx.generators.mesh_graph", "rustworkx.generators.path_graph", "rustworkx.generators.star_graph", "rustworkx.graph_adjacency_matrix", "rustworkx.graph_all_pairs_all_simple_paths", "rustworkx.graph_all_pairs_bellman_ford_path_lengths", "rustworkx.graph_all_pairs_bellman_ford_shortest_paths", "rustworkx.graph_all_pairs_dijkstra_path_lengths", "rustworkx.graph_all_pairs_dijkstra_shortest_paths", "rustworkx.graph_all_shortest_paths", "rustworkx.graph_all_simple_paths", "rustworkx.graph_astar_shortest_path", "rustworkx.graph_bellman_ford_shortest_path_lengths", "rustworkx.graph_betweenness_centrality", "rustworkx.graph_bfs_search", "rustworkx.graph_bipartite_edge_color", "rustworkx.graph_bipartite_layout", "rustworkx.graph_cartesian_product", "rustworkx.graph_circular_layout", "rustworkx.graph_closeness_centrality", "rustworkx.graph_complement", "rustworkx.graph_core_number", "rustworkx.graph_dfs_edges", "rustworkx.graph_dfs_search", "rustworkx.graph_dijkstra_search", "rustworkx.graph_dijkstra_shortest_path_lengths", "rustworkx.graph_dijkstra_shortest_paths", "rustworkx.graph_distance_matrix", "rustworkx.graph_edge_betweenness_centrality", "rustworkx.graph_eigenvector_centrality", "rustworkx.graph_floyd_warshall", "rustworkx.graph_floyd_warshall_numpy", "rustworkx.graph_floyd_warshall_successor_and_distance", "rustworkx.graph_greedy_color", "rustworkx.graph_greedy_edge_color", "rustworkx.graph_is_isomorphic", "rustworkx.graph_is_subgraph_isomorphic", "rustworkx.graph_k_shortest_path_lengths", "rustworkx.graph_katz_centrality", "rustworkx.graph_line_graph", "rustworkx.graph_longest_simple_path", "rustworkx.graph_misra_gries_edge_color", "rustworkx.graph_node_link_json", "rustworkx.graph_num_shortest_paths_unweighted", "rustworkx.graph_random_layout", "rustworkx.graph_shell_layout", "rustworkx.graph_spiral_layout", "rustworkx.graph_spring_layout", "rustworkx.graph_tensor_product", "rustworkx.graph_token_swapper", "rustworkx.graph_transitivity", "rustworkx.graph_union", "rustworkx.graph_unweighted_average_shortest_path_length", "rustworkx.graph_vf2_mapping", "rustworkx.has_path", "rustworkx.hits", "rustworkx.hyperbolic_random_graph", "rustworkx.immediate_dominators", "rustworkx.in_degree_centrality", "rustworkx.is_bipartite", "rustworkx.is_connected", "rustworkx.is_directed_acyclic_graph", "rustworkx.is_isomorphic", "rustworkx.is_isomorphic_node_match", "rustworkx.is_matching", "rustworkx.is_maximal_matching", "rustworkx.is_planar", "rustworkx.is_subgraph_isomorphic", "rustworkx.is_weakly_connected", "rustworkx.isolates", "rustworkx.k_shortest_path_lengths", "rustworkx.katz_centrality", "rustworkx.layers", "rustworkx.lexicographical_topological_sort", "rustworkx.longest_simple_path", "rustworkx.max_weight_matching", "rustworkx.metric_closure", "rustworkx.minimum_spanning_edges", "rustworkx.minimum_spanning_tree", "rustworkx.negative_edge_cycle", "rustworkx.networkx_converter", "rustworkx.node_connected_component", "rustworkx.node_link_json", "rustworkx.num_shortest_paths_unweighted", "rustworkx.number_connected_components", "rustworkx.number_weakly_connected_components", "rustworkx.out_degree_centrality", "rustworkx.pagerank", "rustworkx.parse_node_link_json", "rustworkx.random_geometric_graph", "rustworkx.random_layout", "rustworkx.read_graphml", "rustworkx.shell_layout", "rustworkx.simple_cycles", "rustworkx.spiral_layout", "rustworkx.spring_layout", "rustworkx.steiner_tree", "rustworkx.stoer_wagner_min_cut", "rustworkx.strongly_connected_components", "rustworkx.topological_generations", "rustworkx.topological_sort", "rustworkx.transitive_reduction", "rustworkx.transitivity", "rustworkx.two_color", "rustworkx.undirected_gnm_random_graph", "rustworkx.undirected_gnp_random_graph", "rustworkx.undirected_random_bipartite_graph", "rustworkx.undirected_sbm_random_graph", "rustworkx.union", "rustworkx.unweighted_average_shortest_path_length", "rustworkx.vf2_mapping", "BFSVisitor", "rustworkx.visit.BFSVisitor.black_target_edge", "rustworkx.visit.BFSVisitor.discover_vertex", "rustworkx.visit.BFSVisitor.finish_vertex", "rustworkx.visit.BFSVisitor.gray_target_edge", "rustworkx.visit.BFSVisitor.non_tree_edge", "rustworkx.visit.BFSVisitor.tree_edge", "DFSVisitor", "rustworkx.visit.DFSVisitor.back_edge", "rustworkx.visit.DFSVisitor.discover_vertex", "rustworkx.visit.DFSVisitor.finish_vertex", "rustworkx.visit.DFSVisitor.forward_or_cross_edge", "rustworkx.visit.DFSVisitor.tree_edge", "DijkstraVisitor", "rustworkx.visit.DijkstraVisitor.discover_vertex", "rustworkx.visit.DijkstraVisitor.edge_not_relaxed", "rustworkx.visit.DijkstraVisitor.edge_relaxed", "rustworkx.visit.DijkstraVisitor.examine_edge", "rustworkx.visit.DijkstraVisitor.finish_vertex", "rustworkx.visit.PruneSearch", "rustworkx.visit.StopSearch", "rustworkx.visualization.graphviz_draw", "rustworkx.visualization.mpl_draw", "rustworkx.weakly_connected_components", "Rustworkx Comparison Benchmarks With Other Libraries", "rustworkx Documentation", "Getting Started", "rustworkx for NetworkX users", "Release Notes", "Working with Betweenness Centrality", "Directed Acyclic Graphs", "rustworkx Tutorials and Guides", "Introduction to rustworkx", "Visualization"], "terms": {"first": [0, 45, 101, 115, 121, 122, 151, 167, 183, 197, 203, 204, 233, 249, 262, 276, 279, 280, 284, 296, 297, 307, 312, 332, 333, 334, 338, 339, 355, 356, 368, 370, 375, 376, 383, 386, 387, 388, 399, 401, 403, 419, 424, 427, 434, 435, 446, 447, 459, 462, 467, 468, 477, 478, 479, 480, 481, 493, 496, 498, 500, 507, 508, 512, 517, 553, 555, 558, 565, 570, 580, 584, 585, 586, 588], "read": [0, 26, 30, 34, 35, 36, 40, 44, 48, 52, 56, 57, 59, 67, 73, 77, 85, 104, 151, 170, 186, 233, 252, 266, 297, 310, 311, 316, 319, 320, 321, 322, 329, 330, 338, 353, 359, 360, 361, 362, 366, 367, 370, 381, 382, 384, 390, 399, 414, 415, 417, 450, 451, 452, 453, 457, 458, 462, 473, 474, 475, 483, 493, 500, 503, 516, 531, 532, 536, 583, 584, 588], "overal": 0, "qiskit": [0, 581, 583, 584], "project": [0, 532, 583, 584], "guidelin": 0, "These": [0, 22, 23, 89, 171, 253, 582, 583, 584, 588], "ar": [0, 22, 23, 34, 35, 57, 77, 89, 92, 93, 97, 98, 101, 102, 107, 110, 111, 119, 120, 133, 134, 135, 136, 138, 151, 152, 154, 156, 157, 158, 161, 167, 169, 171, 174, 175, 179, 180, 183, 184, 189, 192, 193, 201, 202, 215, 216, 217, 218, 220, 233, 234, 236, 238, 239, 240, 243, 249, 251, 253, 255, 256, 259, 262, 263, 269, 272, 273, 277, 278, 280, 297, 298, 300, 303, 305, 307, 309, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 328, 330, 333, 335, 337, 338, 339, 341, 344, 347, 348, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 372, 373, 374, 375, 376, 377, 379, 381, 382, 384, 385, 386, 387, 388, 390, 391, 398, 399, 400, 401, 403, 404, 406, 407, 408, 411, 414, 415, 417, 418, 419, 421, 423, 424, 426, 427, 429, 432, 433, 434, 435, 439, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 462, 464, 465, 466, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 492, 493, 494, 495, 496, 498, 500, 501, 503, 506, 507, 508, 512, 514, 516, 517, 518, 519, 520, 522, 523, 531, 532, 534, 536, 540, 544, 547, 549, 552, 553, 555, 564, 577, 578, 580, 581, 582, 583, 584, 585, 586, 588], "all": [0, 26, 30, 97, 98, 99, 100, 103, 105, 106, 108, 109, 117, 118, 121, 130, 133, 134, 135, 136, 138, 139, 142, 143, 144, 148, 150, 156, 157, 158, 160, 164, 166, 167, 179, 180, 181, 182, 185, 187, 188, 190, 191, 199, 200, 203, 212, 215, 216, 217, 218, 220, 221, 224, 225, 226, 230, 232, 238, 239, 240, 242, 246, 248, 249, 259, 260, 261, 264, 267, 268, 270, 271, 279, 280, 287, 291, 292, 293, 296, 305, 307, 312, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 331, 333, 335, 339, 341, 342, 343, 346, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 372, 375, 376, 377, 381, 382, 384, 385, 386, 390, 391, 400, 401, 402, 403, 404, 407, 408, 409, 410, 413, 414, 415, 417, 418, 419, 429, 440, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 464, 467, 468, 469, 473, 474, 475, 476, 477, 483, 485, 496, 497, 498, 501, 502, 516, 518, 519, 520, 522, 523, 538, 541, 542, 546, 549, 550, 551, 553, 554, 555, 559, 566, 574, 577, 578, 581, 582, 584, 586, 588], "includ": [0, 117, 118, 161, 162, 199, 200, 243, 244, 303, 304, 318, 324, 331, 358, 364, 367, 393, 402, 449, 455, 458, 487, 497, 527, 554, 581, 582, 583, 584, 586, 588], "http": [0, 339, 382, 390, 409, 413, 415, 430, 431, 436, 439, 441, 442, 460, 474, 483, 486, 494, 500, 502, 511, 516, 532, 536, 538, 541, 550, 581, 583, 584], "github": [0, 409, 538, 550, 580, 581, 583, 584], "com": [0, 390, 409, 483, 516, 538, 541, 550, 581, 583, 584], "blob": [0, 409, 538, 550], "main": [0, 584], "md": 0, "while": [0, 119, 120, 201, 202, 277, 278, 312, 325, 333, 354, 355, 356, 368, 375, 376, 377, 386, 387, 388, 398, 402, 403, 404, 419, 459, 467, 468, 469, 477, 480, 481, 492, 498, 507, 512, 536, 540, 544, 545, 554, 555, 575, 577, 581, 583, 584, 586], "": [0, 89, 102, 112, 113, 162, 167, 168, 170, 171, 184, 194, 195, 244, 249, 250, 252, 253, 263, 274, 275, 304, 307, 308, 310, 312, 319, 320, 321, 322, 323, 327, 329, 330, 331, 332, 333, 334, 338, 341, 347, 349, 350, 351, 352, 355, 356, 359, 360, 361, 362, 363, 365, 366, 367, 368, 370, 372, 375, 376, 377, 378, 379, 381, 382, 384, 385, 386, 388, 390, 398, 401, 402, 404, 405, 406, 414, 415, 416, 417, 418, 419, 422, 425, 430, 431, 436, 441, 442, 450, 451, 452, 453, 454, 456, 457, 458, 459, 462, 464, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 481, 483, 486, 492, 494, 496, 497, 500, 504, 512, 516, 518, 521, 522, 523, 524, 532, 538, 540, 541, 542, 543, 547, 553, 554, 570, 577, 578, 581, 582, 583, 584, 585, 588], "directli": [0, 158, 240, 583, 584, 588], "applic": [0, 341, 439, 536, 581, 582, 584], "sinc": [0, 115, 197, 276, 388, 481, 512, 564, 581, 583, 584, 586, 588], "most": [0, 486, 534, 583, 584, 588], "about": [0, 580, 581, 582, 584], "itself": [0, 439, 583], "an": [0, 34, 35, 44, 52, 56, 57, 59, 67, 73, 77, 89, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 104, 107, 108, 110, 111, 112, 113, 114, 116, 119, 120, 122, 125, 126, 131, 132, 138, 141, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 183, 184, 186, 189, 190, 192, 193, 194, 195, 196, 198, 201, 202, 204, 207, 208, 213, 214, 220, 223, 233, 234, 235, 236, 238, 239, 240, 241, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 262, 263, 266, 269, 270, 272, 273, 274, 275, 277, 278, 283, 284, 288, 289, 297, 298, 299, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 316, 317, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 333, 335, 336, 337, 339, 340, 341, 345, 348, 349, 350, 351, 352, 355, 356, 357, 359, 360, 361, 362, 363, 365, 366, 368, 369, 371, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 387, 388, 389, 390, 392, 393, 395, 396, 397, 398, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 420, 421, 422, 423, 424, 425, 430, 431, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 456, 457, 459, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 478, 479, 480, 481, 482, 483, 484, 487, 489, 490, 491, 492, 494, 495, 498, 500, 501, 503, 505, 507, 511, 512, 513, 514, 515, 516, 518, 520, 521, 524, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 546, 548, 549, 550, 551, 552, 555, 564, 567, 577, 578, 580, 581, 582, 583, 584, 586, 588], "independ": [0, 409, 410, 478, 479, 525, 550, 551, 581, 584], "librari": [0, 532, 577, 581, 582, 583, 584, 588], "develop": [0, 582, 584], "tandem": 0, "advic": 0, "still": [0, 315, 408, 520, 549, 581, 582, 583, 584], "appli": [0, 494, 584, 588], "here": [0, 348, 541, 581, 583, 585, 586, 588], "In": [0, 108, 190, 270, 317, 333, 341, 342, 356, 357, 368, 372, 376, 382, 390, 391, 409, 415, 448, 459, 464, 468, 474, 483, 485, 500, 503, 516, 519, 532, 550, 567, 581, 583, 584, 586, 588], "addit": [0, 89, 171, 253, 342, 581, 582, 583, 584, 588], "detail": [0, 158, 240, 382, 390, 415, 439, 474, 483, 500, 516, 532, 577, 578, 581, 582, 583, 584, 588], "below": [0, 333, 355, 356, 368, 375, 376, 377, 398, 404, 421, 444, 459, 467, 468, 469, 492, 540, 583], "implement": [0, 26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 89, 158, 171, 240, 253, 311, 316, 332, 334, 382, 390, 409, 415, 431, 442, 460, 474, 483, 494, 516, 532, 536, 538, 541, 543, 550, 580, 581, 583, 584, 588], "primarili": [0, 583, 584], "thin": 0, "layer": [0, 7, 584], "becaus": [0, 165, 247, 306, 518, 583, 584, 585, 588], "your": [0, 156, 238, 422, 425, 582, 583, 584, 588], "involv": [0, 588], "modif": [0, 312], "src": 0, "To": [0, 280, 386, 419, 477, 582, 584, 585, 586, 588], "understand": 0, "which": [0, 89, 102, 112, 113, 114, 116, 117, 118, 138, 142, 157, 158, 162, 171, 184, 194, 195, 196, 198, 199, 200, 220, 224, 239, 240, 244, 253, 263, 274, 275, 291, 304, 312, 313, 317, 319, 320, 321, 322, 323, 327, 330, 333, 339, 348, 356, 357, 359, 360, 361, 362, 363, 365, 368, 376, 377, 379, 383, 384, 385, 386, 391, 392, 396, 398, 404, 406, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 456, 459, 468, 469, 471, 475, 476, 477, 478, 485, 490, 492, 494, 501, 509, 510, 518, 519, 520, 521, 522, 523, 534, 537, 540, 541, 542, 544, 581, 582, 583, 584, 585, 586, 588], "you": [0, 26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 68, 73, 77, 85, 89, 131, 132, 161, 165, 166, 167, 171, 213, 214, 243, 247, 248, 249, 253, 288, 289, 303, 306, 307, 311, 316, 318, 319, 320, 321, 322, 333, 356, 358, 359, 360, 361, 362, 368, 376, 377, 384, 385, 386, 391, 400, 404, 417, 418, 419, 449, 459, 468, 469, 475, 476, 477, 478, 479, 485, 494, 495, 519, 520, 521, 525, 541, 547, 577, 578, 581, 582, 583, 584, 585, 586, 588], "need": [0, 167, 171, 249, 253, 307, 429, 440, 577, 581, 582, 583, 584, 585, 586, 588], "we": [0, 312, 333, 356, 368, 376, 388, 459, 468, 481, 512, 565, 566, 570, 580, 583, 584, 585, 586, 588], "invit": 0, "overview": 0, "our": [0, 584, 586, 588], "simplifi": [0, 584, 586], "sourc": [0, 89, 102, 107, 108, 110, 111, 114, 116, 126, 131, 139, 162, 167, 169, 184, 189, 190, 192, 193, 196, 198, 208, 213, 221, 244, 249, 251, 269, 270, 272, 273, 288, 304, 307, 309, 317, 318, 319, 320, 321, 322, 323, 324, 327, 329, 330, 331, 332, 333, 334, 336, 338, 339, 340, 341, 344, 347, 349, 350, 351, 352, 353, 355, 356, 358, 359, 360, 361, 362, 363, 366, 368, 375, 376, 377, 378, 379, 383, 384, 386, 394, 404, 405, 406, 412, 414, 415, 417, 418, 419, 449, 450, 451, 452, 453, 454, 457, 459, 467, 468, 469, 470, 471, 475, 477, 488, 499, 500, 504, 507, 508, 512, 514, 515, 516, 519, 525, 527, 528, 535, 537, 539, 540, 541, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 584, 586], "tree": [0, 7, 20, 333, 339, 355, 356, 368, 375, 376, 377, 404, 422, 425, 438, 459, 467, 468, 469, 522, 523, 541, 557, 560, 562, 564, 566, 568, 575, 584], "tini": [0, 584], "larg": [0, 387, 388, 409, 480, 481, 507, 508, 550, 580, 583, 584, 586], "mod": 0, "pure_rust_cod": 0, "more_pure_rust_cod": 0, "add": [0, 89, 90, 91, 92, 93, 94, 95, 96, 101, 110, 111, 133, 134, 135, 136, 156, 157, 158, 171, 172, 173, 174, 175, 176, 177, 178, 183, 192, 193, 215, 216, 217, 218, 238, 239, 240, 253, 254, 255, 256, 257, 258, 262, 272, 273, 401, 427, 434, 435, 496, 520, 525, 536, 553, 582, 583, 584, 586, 588], "them": [0, 166, 248, 312, 387, 388, 480, 481, 507, 508, 512, 584, 588], "import": [0, 26, 30, 34, 35, 44, 56, 57, 59, 67, 73, 77, 89, 101, 112, 113, 141, 151, 160, 165, 170, 171, 183, 194, 195, 223, 233, 242, 247, 252, 253, 262, 274, 275, 297, 306, 310, 311, 312, 316, 333, 356, 368, 370, 376, 391, 399, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 459, 462, 468, 478, 479, 484, 485, 486, 493, 503, 519, 531, 577, 578, 582, 583, 584, 585, 586], "defin": [0, 319, 320, 329, 330, 341, 348, 359, 360, 366, 372, 400, 429, 440, 450, 451, 457, 464, 495, 542, 584, 585, 586], "see": [0, 339, 411, 439, 536, 552, 578, 580, 581, 584, 588], "next": [0, 34, 35, 44, 56, 57, 59, 67, 73, 77, 311, 316, 327, 355, 365, 375, 386, 403, 419, 456, 467, 477, 494, 498, 555, 584], "section": [0, 45, 587, 588], "us": [0, 34, 35, 44, 52, 56, 57, 59, 67, 73, 77, 81, 89, 91, 93, 97, 98, 101, 102, 114, 116, 117, 118, 119, 120, 130, 138, 148, 151, 156, 158, 161, 162, 165, 166, 167, 170, 171, 173, 175, 179, 180, 183, 184, 196, 198, 199, 200, 201, 202, 212, 220, 230, 233, 238, 240, 243, 244, 247, 248, 249, 252, 253, 255, 256, 262, 263, 273, 277, 278, 280, 287, 296, 297, 303, 304, 306, 307, 310, 311, 312, 316, 317, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 339, 341, 342, 343, 344, 349, 350, 351, 352, 355, 356, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 390, 391, 392, 393, 398, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 426, 427, 433, 434, 435, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 456, 457, 458, 459, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 485, 486, 487, 492, 494, 495, 497, 498, 499, 500, 501, 502, 507, 508, 511, 512, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 532, 533, 534, 536, 540, 541, 542, 543, 547, 549, 550, 551, 552, 554, 555, 556, 563, 569, 577, 578, 580, 581, 583, 584, 585, 586, 587], "m": [0, 328, 339, 407, 408, 409, 410, 438, 460, 549, 550, 551, 580, 584, 586], "add_wrap": 0, "wrap_pyfunct": 0, "your_new_funct": 0, "modifi": [0, 102, 160, 171, 184, 242, 253, 328, 407, 584], "contain": [0, 26, 30, 34, 35, 40, 44, 48, 56, 57, 59, 67, 73, 77, 89, 108, 171, 190, 253, 270, 311, 312, 316, 332, 334, 339, 347, 355, 374, 375, 390, 411, 429, 440, 466, 467, 483, 484, 500, 516, 518, 525, 526, 542, 546, 552, 583, 584, 586, 587, 588], "pyfunct": 0, "can": [0, 26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 89, 91, 119, 120, 130, 131, 132, 148, 156, 166, 171, 173, 201, 202, 212, 213, 214, 230, 238, 248, 253, 254, 277, 278, 287, 288, 289, 296, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 327, 329, 330, 331, 332, 333, 334, 336, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 366, 367, 368, 372, 376, 377, 380, 381, 384, 385, 386, 388, 391, 400, 402, 404, 405, 406, 408, 410, 411, 412, 414, 415, 417, 418, 419, 448, 449, 457, 458, 459, 464, 468, 469, 472, 473, 475, 476, 477, 478, 479, 481, 485, 494, 495, 497, 499, 507, 508, 511, 512, 515, 516, 519, 520, 521, 527, 537, 539, 540, 541, 544, 547, 549, 551, 552, 554, 577, 578, 581, 582, 583, 584, 585, 586, 588], "either": [0, 98, 162, 166, 180, 244, 248, 304, 315, 317, 319, 320, 321, 322, 324, 327, 329, 330, 336, 340, 341, 344, 347, 353, 355, 357, 372, 393, 403, 405, 406, 412, 415, 417, 418, 432, 439, 443, 448, 464, 478, 479, 487, 498, 499, 507, 508, 512, 515, 516, 525, 527, 537, 539, 540, 547, 554, 555, 578, 583, 584, 586], "The": [0, 34, 35, 44, 56, 57, 59, 77, 89, 90, 91, 94, 96, 97, 98, 101, 102, 104, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 176, 178, 179, 180, 183, 184, 186, 190, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 257, 259, 262, 263, 265, 266, 270, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 296, 297, 298, 299, 301, 304, 305, 306, 307, 308, 310, 311, 312, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 560, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588], "give": [0, 312, 342, 518, 584, 586], "power": [0, 382, 390, 415, 474, 483, 500, 516, 532, 588], "interact": [0, 578, 581, 583, 584], "both": [0, 22, 23, 131, 132, 213, 214, 387, 388, 421, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 441, 444, 445, 446, 447, 480, 481, 507, 508, 512, 514, 520, 525, 564, 583, 584, 586, 588], "interpret": [0, 584], "pure": [0, 581], "exist": [0, 89, 108, 142, 171, 190, 224, 253, 254, 255, 256, 270, 272, 273, 291, 328, 388, 403, 407, 416, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 481, 498, 499, 512, 524, 555, 583, 584, 588], "search": [0, 114, 115, 116, 196, 197, 198, 276, 312, 332, 333, 334, 339, 355, 356, 368, 375, 376, 377, 387, 388, 391, 403, 404, 459, 467, 468, 469, 480, 481, 485, 498, 507, 512, 519, 555, 562, 568, 575, 584], "its": [0, 123, 124, 132, 133, 135, 205, 206, 214, 215, 217, 281, 282, 289, 326, 331, 341, 372, 464, 478, 479, 520, 546, 559, 574, 580, 584, 585, 586, 588], "name": [0, 151, 233, 297, 581, 583, 584, 588], "edit": 0, "alreadi": [0, 138, 220, 254, 255, 256, 272, 273, 312, 313, 314, 478, 479, 564, 583, 584, 588], "If": [0, 34, 35, 44, 56, 57, 59, 67, 68, 73, 77, 89, 102, 110, 111, 115, 117, 118, 119, 120, 131, 132, 138, 139, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 165, 166, 167, 170, 171, 184, 192, 193, 197, 199, 200, 201, 202, 213, 214, 220, 221, 233, 234, 236, 237, 238, 239, 240, 241, 243, 244, 247, 248, 249, 252, 253, 254, 255, 256, 263, 272, 273, 276, 277, 278, 288, 289, 297, 298, 300, 301, 302, 303, 304, 306, 307, 310, 311, 312, 313, 316, 317, 323, 328, 330, 331, 333, 339, 341, 342, 343, 346, 349, 350, 351, 352, 355, 356, 357, 358, 363, 367, 368, 372, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 393, 394, 397, 398, 401, 402, 403, 404, 406, 407, 408, 409, 412, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 454, 458, 459, 460, 464, 467, 468, 469, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 483, 485, 487, 488, 491, 492, 494, 496, 497, 498, 499, 500, 501, 505, 507, 508, 512, 513, 516, 517, 518, 519, 520, 522, 523, 525, 527, 528, 532, 533, 534, 539, 540, 542, 548, 549, 550, 553, 554, 555, 566, 577, 578, 582, 583, 584, 585, 586, 588], "want": [0, 34, 35, 44, 56, 57, 59, 67, 73, 77, 311, 316, 584, 588], "find": [0, 98, 114, 115, 116, 129, 147, 180, 196, 197, 198, 211, 229, 265, 276, 318, 320, 322, 323, 324, 327, 329, 330, 342, 343, 345, 346, 348, 349, 350, 351, 352, 358, 360, 362, 363, 364, 365, 366, 378, 379, 383, 384, 385, 386, 389, 391, 392, 394, 402, 403, 405, 406, 416, 417, 418, 419, 449, 451, 453, 454, 455, 456, 457, 460, 470, 471, 475, 476, 477, 478, 479, 482, 485, 488, 498, 499, 514, 515, 519, 520, 521, 522, 523, 528, 529, 530, 538, 543, 548, 554, 555, 579, 581, 584, 586, 588], "d": [0, 101, 183, 262, 341, 372, 377, 402, 404, 430, 431, 441, 442, 464, 469, 484, 486, 497, 501, 554, 578, 580, 584, 586], "like": [0, 102, 131, 132, 184, 213, 214, 263, 318, 324, 353, 358, 364, 367, 380, 381, 382, 390, 391, 412, 414, 415, 449, 455, 458, 472, 473, 474, 483, 485, 500, 503, 516, 519, 531, 532, 578, 582, 583, 584, 586, 588], "insert": [0, 133, 134, 135, 136, 138, 215, 216, 217, 218, 220, 377, 404, 469, 584], "creat": [0, 89, 90, 91, 92, 93, 94, 95, 96, 102, 119, 120, 133, 134, 135, 136, 138, 151, 157, 158, 162, 166, 171, 172, 173, 174, 175, 176, 177, 178, 184, 201, 202, 215, 216, 217, 218, 220, 233, 239, 240, 244, 248, 253, 254, 255, 256, 257, 258, 263, 277, 278, 297, 304, 305, 312, 328, 344, 373, 407, 408, 409, 410, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 465, 534, 549, 550, 551, 578, 580, 581, 583, 584, 586], "one": [0, 97, 98, 101, 102, 115, 117, 118, 133, 134, 135, 136, 138, 152, 154, 156, 158, 167, 179, 180, 183, 184, 197, 199, 200, 215, 216, 217, 218, 220, 234, 236, 238, 240, 249, 262, 263, 276, 280, 298, 300, 307, 313, 335, 341, 342, 343, 372, 386, 387, 388, 391, 403, 419, 436, 464, 477, 478, 479, 480, 481, 485, 498, 507, 508, 512, 519, 532, 542, 555, 578, 581, 583, 584, 586, 588], "your_modul": 0, "Then": [0, 101, 183, 262, 584], "start": [0, 101, 106, 183, 188, 262, 268, 312, 313, 323, 328, 333, 348, 355, 356, 363, 368, 375, 376, 377, 389, 396, 404, 407, 413, 436, 454, 459, 467, 468, 469, 482, 490, 500, 502, 515, 518, 532, 537, 581, 584, 585, 586, 588], "boilerpl": 0, "bellow": 0, "docstr": [0, 583], "descript": 0, "pyo3": [0, 165, 247, 306, 584], "text_signatur": 0, "graph": [0, 7, 20, 22, 23, 26, 30, 34, 35, 44, 45, 52, 56, 57, 59, 67, 73, 77, 81, 89, 90, 92, 93, 94, 95, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 115, 119, 120, 127, 128, 131, 132, 137, 138, 139, 141, 142, 143, 144, 145, 146, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 170, 171, 172, 174, 175, 176, 177, 183, 184, 185, 187, 190, 191, 192, 193, 194, 195, 197, 201, 202, 209, 210, 213, 214, 219, 220, 221, 223, 224, 225, 226, 227, 228, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 252, 253, 255, 256, 257, 258, 262, 263, 264, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 286, 288, 289, 291, 292, 293, 294, 295, 297, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 561, 564, 567, 575, 576, 577, 578, 579, 581, 582, 584, 587], "pub": [0, 532], "fn": 0, "py": [0, 409, 538, 550], "pygraph": [0, 20, 89, 112, 161, 166, 171, 194, 243, 248, 317, 318, 319, 320, 321, 322, 324, 326, 327, 328, 329, 330, 333, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 353, 355, 356, 372, 376, 381, 389, 398, 399, 404, 405, 406, 412, 414, 415, 417, 418, 420, 421, 422, 423, 424, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 505, 507, 508, 511, 512, 515, 516, 519, 520, 521, 522, 523, 525, 526, 527, 529, 533, 534, 535, 536, 537, 539, 540, 541, 542, 546, 547, 549, 550, 551, 552, 553, 554, 577, 578, 581, 582, 583, 584, 588], "pyresult": 0, "goe": [0, 409, 550], "rememb": 0, "declar": [0, 584], "sometim": [0, 398, 438, 492, 540], "hard": [0, 478, 494, 584], "organ": 0, "those": [0, 108, 112, 113, 133, 134, 135, 136, 190, 194, 195, 215, 216, 217, 218, 270, 274, 275, 314, 331, 335, 338, 367, 370, 381, 399, 414, 458, 462, 473, 493, 541, 583, 584, 585, 586, 588], "case": [0, 97, 98, 108, 115, 157, 158, 179, 180, 190, 197, 239, 240, 254, 259, 270, 276, 317, 333, 341, 357, 368, 372, 377, 382, 390, 391, 404, 415, 448, 459, 464, 469, 474, 478, 479, 483, 485, 500, 516, 519, 532, 583, 584, 586, 588], "suggest": 0, "move": [0, 398, 492, 540, 584], "split": 0, "follow": [0, 89, 171, 253, 312, 333, 339, 356, 368, 376, 436, 459, 460, 468, 544, 584, 586, 588], "structur": [0, 341, 387, 388, 480, 481, 507, 508, 512, 536, 581, 583, 584, 588], "have": [0, 52, 68, 81, 89, 102, 103, 138, 139, 155, 156, 157, 158, 162, 166, 171, 184, 185, 220, 221, 237, 238, 239, 240, 244, 248, 253, 264, 301, 304, 305, 312, 314, 315, 325, 328, 329, 354, 366, 378, 388, 405, 407, 408, 411, 457, 470, 481, 484, 506, 512, 518, 520, 532, 542, 549, 552, 559, 566, 574, 582, 583, 584, 586, 588], "deleg": 0, "logic": [0, 312], "call": [0, 22, 23, 89, 130, 141, 148, 158, 171, 212, 223, 230, 240, 253, 287, 296, 312, 313, 314, 333, 339, 356, 368, 376, 377, 398, 404, 410, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 459, 460, 468, 469, 492, 501, 538, 540, 551, 566, 567, 581, 582, 583, 584, 586, 588], "from": [0, 22, 23, 26, 30, 34, 35, 89, 90, 96, 101, 102, 104, 108, 110, 111, 112, 113, 114, 116, 119, 120, 126, 131, 132, 133, 134, 135, 136, 138, 139, 151, 154, 155, 156, 157, 158, 159, 161, 162, 165, 166, 170, 171, 172, 178, 183, 184, 186, 190, 192, 193, 194, 195, 196, 198, 201, 202, 208, 213, 214, 215, 216, 217, 218, 220, 221, 233, 236, 237, 238, 239, 240, 241, 243, 244, 247, 248, 252, 253, 255, 262, 263, 266, 270, 272, 273, 274, 275, 277, 278, 288, 289, 297, 300, 301, 302, 303, 304, 305, 306, 310, 312, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 338, 339, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 368, 370, 375, 376, 377, 378, 379, 380, 383, 389, 390, 391, 394, 397, 399, 401, 402, 403, 405, 406, 407, 410, 411, 412, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 459, 462, 467, 468, 469, 470, 471, 472, 478, 482, 483, 485, 488, 491, 493, 496, 497, 498, 499, 501, 515, 516, 517, 518, 519, 521, 525, 528, 531, 536, 539, 544, 545, 546, 552, 553, 554, 555, 557, 570, 577, 578, 580, 581, 582, 584, 585, 586], "do": [0, 89, 166, 171, 248, 312, 388, 478, 479, 481, 512, 583, 584, 588], "question": 0, "contact": 0, "u": [0, 139, 221, 333, 341, 356, 368, 372, 376, 377, 404, 411, 459, 464, 468, 469, 485, 501, 518, 552, 564, 582, 584, 586], "channel": 0, "slack": 0, "re": [0, 89, 165, 171, 247, 306, 387, 388, 398, 480, 481, 492, 507, 508, 512, 540, 583, 584, 588], "work": [0, 22, 23, 330, 406, 479, 499, 525, 577, 581, 583, 584, 586, 587, 588], "write": [0, 151, 165, 170, 233, 247, 252, 297, 306, 310, 393, 487, 527, 577, 583, 584, 588], "made": [0, 89, 139, 171, 221, 253, 314, 315, 584, 586, 588], "ani": [0, 89, 91, 102, 108, 117, 118, 119, 120, 151, 157, 158, 165, 171, 173, 184, 190, 199, 200, 201, 202, 233, 239, 240, 247, 253, 254, 263, 270, 277, 278, 297, 306, 312, 313, 326, 337, 339, 348, 382, 390, 402, 409, 415, 422, 425, 474, 478, 479, 483, 497, 500, 510, 511, 514, 516, 518, 532, 544, 550, 554, 577, 581, 582, 583, 584, 586, 588], "petgraph": [0, 584], "ha": [0, 89, 114, 115, 116, 117, 118, 128, 156, 157, 158, 171, 196, 197, 198, 199, 200, 210, 238, 239, 240, 253, 276, 286, 312, 313, 326, 333, 335, 337, 339, 347, 348, 349, 350, 351, 352, 368, 374, 376, 377, 400, 408, 409, 411, 459, 466, 468, 469, 478, 479, 495, 501, 514, 517, 518, 534, 541, 547, 549, 550, 552, 557, 566, 581, 583, 584], "depend": [0, 157, 158, 239, 240, 411, 525, 552, 578, 582, 583, 584, 586], "probabl": [0, 409, 410, 411, 501, 550, 551, 552, 582, 584], "sens": 0, "standalon": [0, 581, 584], "provid": [0, 97, 98, 102, 114, 116, 123, 124, 125, 131, 132, 153, 162, 166, 168, 179, 180, 184, 196, 198, 205, 206, 207, 213, 214, 235, 244, 248, 250, 259, 280, 281, 282, 283, 288, 289, 299, 304, 308, 312, 323, 325, 329, 332, 334, 354, 361, 362, 363, 365, 366, 378, 379, 387, 388, 389, 390, 391, 405, 408, 416, 452, 453, 454, 456, 457, 460, 470, 471, 480, 481, 482, 483, 485, 507, 508, 509, 510, 511, 512, 516, 518, 519, 521, 525, 526, 534, 541, 545, 549, 581, 582, 583, 584, 588], "api": [0, 581, 584, 588], "other": [0, 7, 20, 101, 133, 134, 135, 136, 156, 158, 161, 162, 183, 215, 216, 217, 218, 238, 240, 243, 244, 262, 303, 304, 319, 320, 321, 322, 331, 359, 360, 361, 362, 367, 393, 397, 409, 433, 445, 450, 451, 452, 453, 458, 487, 491, 495, 501, 518, 527, 539, 550, 582, 583, 585, 586, 588], "unlik": [0, 68, 93, 175, 256, 583], "design": [0, 582, 583, 584], "top": [0, 336, 369, 461, 584], "algorithm": [0, 20, 22, 23, 115, 197, 276, 319, 320, 321, 322, 323, 327, 328, 329, 330, 331, 333, 335, 348, 355, 356, 359, 360, 361, 362, 363, 365, 366, 367, 368, 375, 376, 377, 378, 379, 381, 382, 384, 385, 386, 387, 388, 390, 392, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 486, 492, 494, 496, 498, 500, 501, 502, 507, 511, 512, 516, 517, 520, 522, 523, 524, 532, 538, 540, 541, 542, 543, 549, 550, 551, 552, 553, 555, 556, 563, 569, 580, 581, 583, 584, 588], "kei": [0, 97, 98, 101, 158, 165, 179, 180, 183, 240, 247, 259, 262, 306, 319, 320, 321, 322, 329, 330, 335, 338, 347, 353, 359, 360, 361, 362, 366, 367, 370, 374, 377, 378, 379, 381, 382, 384, 389, 390, 391, 393, 398, 399, 404, 405, 406, 414, 415, 417, 420, 450, 451, 452, 453, 457, 458, 460, 462, 466, 469, 470, 471, 473, 474, 475, 478, 479, 482, 483, 484, 485, 486, 487, 492, 493, 500, 503, 515, 516, 518, 519, 525, 527, 531, 532, 533, 540, 577, 578, 581, 584], "differ": [0, 68, 110, 111, 119, 120, 166, 192, 193, 201, 202, 248, 272, 273, 277, 278, 305, 325, 351, 352, 354, 380, 400, 411, 412, 472, 478, 479, 518, 523, 552, 577, 581, 582, 584, 586, 588], "keep": [0, 333, 356, 368, 376, 398, 459, 468, 492, 523, 540, 583, 584, 588], "mind": [0, 583], "public": [0, 583, 584], "interfac": [0, 581, 583, 584, 588], "treat": [0, 26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 119, 120, 151, 201, 202, 233, 277, 278, 297, 311, 316, 317, 330, 357, 379, 380, 384, 385, 386, 398, 402, 406, 407, 412, 419, 448, 471, 472, 492, 499, 518, 540, 554, 583, 584], "where": [0, 34, 35, 57, 77, 92, 93, 97, 98, 107, 110, 111, 156, 157, 158, 169, 174, 175, 179, 180, 189, 192, 193, 238, 239, 240, 251, 255, 256, 259, 269, 272, 273, 309, 312, 316, 317, 324, 329, 331, 338, 339, 341, 342, 343, 345, 357, 364, 366, 367, 370, 372, 378, 381, 384, 385, 386, 389, 398, 399, 402, 405, 409, 411, 414, 417, 418, 419, 421, 433, 444, 445, 448, 455, 457, 458, 460, 462, 464, 470, 473, 475, 476, 477, 478, 479, 482, 484, 486, 492, 493, 497, 501, 515, 518, 520, 522, 525, 538, 540, 541, 550, 552, 554, 579, 581, 583, 584, 585, 586, 588], "compat": [0, 89, 142, 224, 291, 368, 376, 377, 459, 468, 469, 582, 584], "doesn": [0, 108, 170, 190, 252, 270, 310, 431, 442, 506, 583, 584, 586, 588], "t": [0, 108, 139, 170, 190, 221, 252, 270, 310, 315, 323, 330, 331, 349, 350, 351, 352, 363, 367, 379, 381, 398, 402, 406, 407, 414, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 454, 458, 471, 473, 492, 497, 506, 522, 523, 532, 540, 541, 554, 565, 566, 583, 584, 585, 586, 588], "matter": 0, "onli": [0, 26, 30, 34, 35, 36, 40, 44, 48, 52, 56, 57, 59, 67, 73, 77, 85, 89, 97, 98, 104, 115, 131, 132, 152, 154, 156, 157, 158, 167, 171, 179, 180, 186, 197, 213, 214, 234, 236, 238, 239, 240, 249, 253, 259, 266, 276, 280, 298, 300, 307, 311, 312, 313, 316, 319, 320, 321, 322, 325, 329, 330, 338, 339, 342, 343, 349, 350, 351, 352, 353, 354, 355, 359, 360, 361, 362, 366, 367, 370, 375, 378, 381, 382, 384, 390, 391, 399, 402, 405, 406, 414, 415, 417, 450, 451, 452, 453, 457, 458, 462, 467, 470, 473, 474, 475, 483, 485, 493, 497, 499, 500, 503, 516, 518, 519, 520, 531, 532, 546, 554, 578, 582, 583, 584, 586, 588], "addition": [0, 89, 171, 253, 583, 584, 588], "should": [0, 68, 92, 93, 156, 158, 162, 167, 174, 175, 238, 240, 244, 249, 255, 256, 304, 307, 327, 333, 356, 365, 368, 376, 377, 404, 425, 429, 431, 432, 441, 456, 459, 468, 469, 500, 507, 508, 512, 556, 563, 569, 582, 583, 584], "done": [0, 312, 314, 315, 583, 584, 586], "via": [0, 577, 583, 584, 588], "cargo": [0, 582, 584], "doc": [0, 532, 581], "It": [0, 26, 30, 34, 35, 40, 44, 48, 52, 56, 57, 59, 67, 73, 77, 81, 89, 91, 117, 118, 119, 120, 158, 160, 161, 171, 173, 199, 200, 201, 202, 240, 242, 243, 253, 254, 277, 278, 303, 311, 312, 316, 319, 320, 321, 322, 323, 326, 327, 329, 330, 335, 337, 338, 339, 342, 343, 347, 348, 349, 350, 351, 352, 359, 360, 361, 362, 363, 365, 366, 370, 374, 377, 378, 379, 380, 384, 385, 386, 391, 398, 400, 401, 402, 404, 405, 406, 412, 417, 418, 419, 450, 451, 452, 453, 454, 456, 457, 462, 466, 469, 470, 471, 472, 475, 476, 477, 485, 492, 494, 495, 496, 497, 507, 508, 512, 518, 519, 520, 532, 536, 540, 541, 547, 553, 554, 577, 581, 582, 583, 584, 586, 588], "expect": [0, 151, 162, 170, 233, 244, 252, 297, 304, 310, 317, 349, 350, 351, 352, 357, 382, 384, 385, 386, 390, 393, 409, 415, 417, 418, 419, 420, 448, 474, 475, 476, 477, 478, 479, 483, 487, 500, 516, 518, 520, 521, 522, 523, 527, 532, 533, 541, 542, 550, 577, 582, 583, 584], "also": [0, 89, 161, 171, 243, 253, 303, 305, 317, 333, 338, 349, 350, 351, 352, 356, 357, 368, 370, 376, 377, 380, 384, 385, 386, 387, 388, 399, 402, 404, 408, 409, 412, 417, 418, 419, 429, 440, 448, 459, 462, 468, 469, 472, 475, 476, 477, 480, 481, 493, 497, 501, 507, 508, 512, 522, 523, 538, 549, 550, 554, 580, 581, 582, 583, 584, 586, 588], "being": [0, 89, 171, 253, 287, 296, 313, 391, 401, 485, 496, 519, 553, 581, 582, 583, 584, 588], "so": [0, 26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 89, 160, 161, 162, 171, 242, 243, 244, 253, 255, 273, 303, 304, 311, 316, 410, 432, 443, 460, 551, 582, 583, 584, 585, 586, 588], "coverag": 0, "onc": [0, 158, 240, 314, 520, 538, 582, 583, 584, 588], "ve": [0, 101, 183, 262, 585, 586], "verifi": 0, "doe": [0, 89, 160, 162, 171, 242, 244, 253, 263, 304, 518, 536, 581, 583, 584, 586], "break": [0, 584], "successfulli": 0, "befor": [0, 102, 171, 184, 253, 391, 485, 518, 519, 584, 586], "open": [0, 151, 165, 170, 233, 247, 252, 297, 306, 310, 583, 584], "ll": [0, 582, 584, 585, 586], "suit": 0, "easiest": 0, "wai": [0, 564, 583, 588], "nox": [0, 584], "instal": [0, 525, 577, 578, 581, 583, 584], "pip": [0, 577, 578, 582, 584, 588], "sever": [0, 478, 479, 583, 584, 588], "advantag": [0, 581, 582, 584], "biggest": [0, 583, 584], "isol": [0, 7, 584], "virtualenv": 0, "thi": [0, 26, 30, 34, 35, 36, 40, 44, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 85, 89, 90, 91, 96, 97, 98, 101, 102, 108, 110, 111, 112, 113, 114, 115, 116, 119, 120, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 148, 149, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 171, 172, 173, 178, 179, 180, 183, 184, 190, 192, 193, 194, 195, 196, 197, 198, 201, 202, 212, 213, 214, 215, 216, 217, 218, 220, 222, 223, 224, 230, 231, 237, 238, 239, 240, 242, 243, 244, 245, 247, 248, 253, 255, 259, 262, 263, 270, 272, 273, 274, 275, 276, 277, 278, 287, 288, 289, 290, 291, 296, 301, 303, 304, 305, 306, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 328, 330, 331, 332, 333, 334, 336, 338, 339, 340, 341, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 368, 369, 370, 371, 372, 375, 376, 377, 379, 380, 381, 382, 384, 385, 386, 387, 388, 390, 391, 393, 395, 396, 397, 398, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 421, 423, 424, 426, 427, 431, 432, 433, 434, 435, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 459, 461, 462, 463, 464, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 485, 487, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 507, 508, 510, 512, 514, 516, 517, 518, 519, 520, 522, 523, 524, 525, 527, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 549, 550, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588], "mean": [0, 89, 98, 171, 180, 253, 327, 365, 388, 407, 456, 481, 495, 512, 514, 548, 581, 583, 584, 588], "pollut": 0, "system": [0, 422, 425, 581, 582, 584], "howev": [0, 89, 171, 253, 577, 581, 582, 583, 584, 588], "default": [0, 89, 119, 120, 131, 132, 138, 151, 156, 158, 161, 166, 171, 201, 202, 213, 214, 220, 233, 238, 240, 243, 248, 253, 277, 278, 297, 303, 312, 317, 318, 319, 320, 321, 322, 324, 331, 341, 357, 358, 359, 360, 361, 362, 364, 367, 368, 372, 376, 377, 380, 381, 382, 384, 385, 386, 387, 388, 390, 391, 398, 400, 401, 402, 403, 404, 412, 414, 415, 417, 418, 419, 425, 427, 429, 431, 432, 434, 435, 441, 448, 449, 455, 458, 459, 464, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 485, 492, 494, 495, 496, 497, 498, 500, 507, 508, 512, 516, 518, 519, 520, 532, 534, 540, 542, 547, 553, 554, 555, 556, 563, 569, 577, 578, 583, 584, 588], "recompil": [0, 584], "everi": [0, 166, 248, 312, 382, 389, 390, 410, 415, 433, 445, 474, 482, 483, 484, 500, 515, 516, 518, 521, 532, 541, 551, 573, 577, 584, 585], "time": [0, 89, 91, 156, 157, 158, 162, 171, 173, 238, 239, 240, 244, 304, 356, 376, 389, 400, 408, 409, 411, 436, 460, 468, 482, 495, 501, 502, 515, 520, 549, 550, 552, 557, 558, 560, 565, 566, 570, 580, 582, 583, 584, 586, 588], "even": [0, 312, 313, 344, 373, 430, 431, 432, 441, 442, 443, 465, 518, 583, 584], "avoid": [0, 89, 171, 541, 586], "packag": [0, 581, 582, 584], "rerun": 0, "without": [0, 93, 107, 165, 175, 189, 247, 256, 269, 306, 326, 333, 349, 350, 351, 352, 368, 377, 404, 459, 469, 511, 514, 532, 584, 586, 588], "flag": [0, 520, 583, 588], "recent": 0, "ran": [0, 588], "repo": 0, "otherwis": [0, 128, 210, 286, 315, 387, 388, 392, 403, 480, 481, 498, 507, 508, 512, 524, 555, 584], "out": [0, 135, 136, 139, 217, 218, 221, 354, 408, 514, 531, 549, 559, 566, 573, 574, 584], "date": [0, 584], "miss": [0, 494, 583, 584], "outsid": [0, 582, 584, 586], "root": [0, 339, 348, 566, 582], "shim": 0, "conflict": 0, "compil": [0, 581, 582, 584], "extens": [0, 407, 536, 583, 584], "test_with_vers": 0, "target": [0, 26, 30, 40, 48, 73, 77, 102, 107, 108, 110, 111, 114, 131, 139, 162, 167, 169, 184, 189, 190, 192, 193, 196, 213, 221, 244, 249, 251, 269, 270, 272, 273, 288, 304, 307, 309, 318, 319, 320, 321, 322, 323, 330, 333, 349, 350, 351, 352, 355, 358, 359, 360, 361, 362, 363, 368, 375, 379, 384, 386, 394, 406, 417, 419, 449, 450, 451, 452, 453, 454, 459, 467, 471, 475, 477, 488, 499, 528, 557, 560, 572, 584, 586, 588], "For": [0, 26, 30, 34, 35, 44, 56, 57, 59, 67, 73, 77, 89, 101, 112, 113, 141, 151, 156, 160, 165, 166, 170, 171, 183, 194, 195, 223, 233, 238, 242, 247, 248, 252, 253, 262, 274, 275, 297, 306, 310, 311, 312, 316, 318, 319, 320, 321, 322, 327, 338, 339, 349, 350, 351, 352, 358, 359, 360, 361, 362, 365, 370, 374, 382, 384, 385, 386, 387, 388, 390, 391, 399, 400, 407, 408, 409, 410, 415, 417, 418, 419, 449, 450, 451, 452, 453, 456, 462, 474, 475, 476, 477, 480, 481, 483, 485, 493, 494, 495, 500, 507, 508, 514, 516, 519, 520, 521, 532, 536, 541, 542, 547, 549, 550, 551, 564, 578, 582, 583, 584, 585, 586, 588], "exampl": [0, 26, 30, 34, 35, 44, 56, 57, 59, 67, 73, 77, 89, 101, 112, 113, 141, 151, 156, 160, 165, 170, 171, 183, 194, 195, 223, 233, 238, 242, 247, 252, 253, 262, 274, 275, 297, 306, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 333, 338, 349, 350, 351, 352, 356, 357, 358, 359, 360, 361, 362, 368, 370, 376, 384, 385, 386, 387, 388, 391, 399, 400, 403, 417, 418, 419, 448, 449, 450, 451, 452, 453, 459, 462, 468, 475, 476, 477, 480, 481, 485, 493, 494, 495, 498, 507, 508, 512, 519, 520, 521, 522, 523, 541, 547, 555, 578, 582, 583, 584, 586, 588], "launch": [0, 318, 319, 320, 321, 322, 358, 359, 360, 361, 362, 384, 385, 386, 391, 400, 417, 418, 419, 449, 475, 476, 477, 485, 494, 495, 519, 547], "3": [0, 30, 52, 68, 81, 89, 104, 112, 113, 141, 151, 160, 162, 170, 171, 186, 194, 195, 223, 233, 242, 244, 252, 253, 266, 274, 275, 297, 304, 310, 312, 333, 349, 350, 351, 352, 356, 368, 370, 376, 399, 400, 403, 429, 430, 431, 432, 436, 439, 440, 441, 442, 459, 462, 468, 478, 479, 484, 486, 493, 495, 498, 520, 538, 555, 580, 583, 584, 585, 586, 588], "11": [0, 439, 581, 582], "command": [0, 577], "e": [0, 101, 140, 141, 183, 222, 223, 262, 263, 381, 389, 400, 409, 414, 436, 439, 473, 482, 494, 501, 515, 517, 532, 542, 546, 550, 557, 560, 561, 562, 564, 567, 568, 584, 586, 588], "just": [0, 89, 339, 349, 350, 351, 352, 387, 388, 480, 481, 507, 508, 512, 578, 581, 582, 583, 584, 588], "pass": [0, 112, 113, 138, 156, 158, 161, 166, 170, 194, 195, 220, 238, 240, 243, 248, 252, 274, 275, 303, 310, 317, 331, 338, 349, 350, 351, 352, 357, 367, 370, 381, 382, 384, 385, 386, 387, 388, 390, 393, 401, 403, 408, 413, 414, 415, 417, 418, 419, 420, 448, 458, 462, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 496, 498, 500, 502, 505, 507, 508, 512, 513, 516, 518, 520, 521, 522, 523, 527, 532, 533, 541, 542, 549, 553, 555, 577, 578, 583, 584, 585, 586], "select": [0, 383, 494, 532, 588], "regex": 0, "runner": [0, 584], "dag": [0, 7, 20, 89, 92, 93, 96, 141, 165, 171, 174, 175, 178, 223, 247, 306, 312, 317, 332, 334, 349, 350, 351, 352, 357, 517, 518, 544, 545, 546, 584], "id": [0, 89, 151, 171, 233, 253, 297, 348, 383, 387, 388, 398, 403, 480, 481, 492, 498, 507, 508, 512, 517, 540, 543, 555, 584], "argument": [0, 112, 113, 117, 118, 138, 158, 171, 194, 195, 199, 200, 220, 240, 253, 274, 275, 312, 319, 320, 321, 322, 323, 330, 341, 342, 343, 349, 350, 351, 352, 357, 359, 360, 361, 362, 363, 368, 372, 376, 377, 379, 388, 398, 403, 404, 406, 411, 448, 450, 451, 452, 453, 454, 459, 464, 468, 469, 471, 481, 492, 498, 512, 518, 520, 534, 540, 552, 555, 584, 588], "after": [0, 89, 101, 162, 171, 183, 244, 253, 262, 304, 559, 566, 573, 574, 583, 584, 586, 588], "bare": 0, "option": [0, 89, 101, 102, 119, 120, 138, 151, 162, 165, 166, 170, 171, 183, 184, 201, 202, 220, 233, 244, 247, 248, 252, 253, 262, 263, 277, 278, 297, 304, 306, 310, 317, 323, 328, 329, 330, 333, 336, 339, 340, 341, 348, 355, 356, 357, 363, 366, 368, 369, 371, 372, 375, 376, 377, 378, 379, 380, 382, 383, 387, 388, 389, 390, 393, 395, 396, 397, 398, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 417, 418, 420, 448, 454, 457, 459, 461, 463, 464, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 482, 483, 487, 489, 490, 491, 492, 498, 500, 501, 507, 512, 515, 516, 520, 522, 523, 527, 532, 533, 534, 535, 537, 539, 540, 542, 549, 550, 551, 552, 555, 577, 578, 583, 584], "refer": [0, 45, 103, 133, 134, 135, 136, 161, 162, 166, 185, 215, 216, 217, 218, 243, 244, 248, 264, 303, 304, 305, 338, 370, 382, 390, 401, 415, 462, 474, 483, 496, 500, 516, 532, 538, 553, 577, 582, 583, 584, 588], "stestr": 0, "readthedoc": 0, "io": [0, 581, 584], "en": [0, 532, 584], "html": [0, 538], "class": [0, 20, 26, 30, 34, 35, 36, 40, 44, 45, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 85, 89, 171, 253, 311, 312, 316, 324, 332, 333, 334, 356, 368, 376, 448, 459, 468, 556, 563, 569, 581, 582, 584, 588], "individu": [0, 584], "method": [0, 26, 30, 36, 40, 48, 52, 68, 73, 77, 81, 85, 89, 91, 102, 110, 111, 114, 116, 119, 120, 131, 132, 138, 142, 160, 165, 171, 173, 184, 192, 193, 196, 198, 201, 202, 213, 214, 220, 224, 242, 247, 253, 263, 272, 273, 277, 278, 288, 289, 291, 306, 312, 313, 325, 333, 341, 354, 356, 368, 376, 377, 382, 390, 404, 415, 459, 468, 469, 474, 483, 500, 516, 520, 525, 532, 556, 563, 567, 569, 577, 582, 583, 584, 585, 586, 588], "faster": [0, 331, 367, 458, 541, 583, 584], "n": [0, 115, 151, 197, 233, 276, 297, 328, 341, 372, 398, 402, 407, 408, 409, 410, 411, 422, 423, 425, 426, 428, 436, 437, 438, 439, 460, 464, 492, 497, 501, 520, 522, 540, 549, 550, 551, 552, 554, 584, 588], "discov": [0, 333, 355, 356, 368, 375, 376, 377, 404, 459, 467, 468, 469, 565, 573], "test_max_weight_match": 0, "same": [0, 68, 89, 91, 102, 115, 156, 157, 158, 160, 162, 171, 173, 184, 197, 238, 239, 240, 242, 244, 276, 304, 312, 386, 391, 401, 419, 477, 485, 496, 507, 508, 512, 519, 523, 532, 553, 564, 578, 581, 584, 586], "path": [0, 7, 20, 26, 30, 73, 77, 151, 160, 165, 170, 233, 242, 247, 252, 297, 306, 310, 318, 319, 320, 321, 322, 323, 324, 325, 327, 329, 330, 331, 339, 341, 343, 349, 350, 351, 352, 354, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 372, 378, 379, 380, 381, 384, 385, 386, 389, 391, 393, 394, 402, 405, 406, 414, 417, 418, 419, 420, 421, 434, 444, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 464, 470, 471, 472, 473, 475, 476, 477, 482, 485, 487, 488, 497, 499, 515, 519, 520, 521, 527, 528, 536, 538, 541, 546, 554, 577, 581, 582, 584, 585, 586, 588], "test_nod": 0, "testnod": 0, "test_no_nod": 0, "rel": [0, 396, 398, 490, 492, 537, 540], "each": [0, 89, 108, 117, 118, 138, 158, 160, 170, 171, 190, 199, 200, 220, 240, 242, 252, 253, 270, 305, 310, 312, 313, 319, 320, 321, 322, 323, 324, 328, 330, 331, 333, 335, 337, 339, 341, 342, 343, 345, 347, 348, 349, 350, 351, 352, 353, 356, 359, 360, 361, 362, 363, 364, 367, 368, 372, 374, 376, 377, 379, 380, 381, 384, 385, 386, 387, 388, 393, 396, 397, 398, 402, 403, 404, 406, 407, 409, 410, 411, 412, 414, 419, 420, 423, 426, 432, 438, 443, 450, 451, 452, 453, 454, 455, 458, 459, 464, 466, 468, 469, 471, 472, 473, 478, 479, 480, 481, 487, 490, 491, 492, 498, 500, 503, 507, 508, 509, 510, 512, 517, 520, 521, 522, 523, 527, 531, 532, 533, 534, 537, 539, 540, 541, 544, 550, 551, 552, 554, 555, 562, 568, 573, 577, 579, 582, 583, 584, 585, 586, 588], "fail": [0, 384, 385, 386, 417, 418, 419, 475, 476, 477, 584], "except": [0, 20, 46, 47, 58, 60, 61, 62, 63, 64, 65, 66, 72, 89, 171, 253, 333, 349, 350, 351, 352, 356, 368, 376, 377, 393, 403, 404, 459, 468, 469, 487, 498, 520, 527, 555, 575, 576, 581, 583, 584], "rais": [0, 89, 91, 102, 121, 122, 123, 124, 125, 139, 152, 154, 165, 167, 168, 170, 171, 173, 184, 203, 204, 205, 206, 207, 221, 234, 236, 247, 249, 250, 252, 253, 279, 280, 281, 282, 283, 298, 300, 306, 307, 308, 310, 312, 313, 319, 320, 323, 329, 330, 333, 346, 347, 349, 350, 351, 352, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 376, 377, 378, 379, 389, 393, 398, 404, 413, 416, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 456, 457, 459, 468, 469, 470, 471, 482, 487, 492, 502, 505, 513, 517, 520, 521, 526, 527, 536, 540, 541, 544, 545, 546, 547, 583, 584, 586], "save": [0, 577], "output": [0, 119, 120, 157, 158, 161, 165, 166, 170, 201, 202, 239, 240, 243, 247, 248, 252, 277, 278, 303, 305, 306, 310, 312, 317, 318, 324, 329, 355, 357, 358, 364, 366, 375, 378, 380, 389, 393, 394, 405, 412, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 455, 457, 467, 470, 482, 487, 488, 515, 517, 518, 520, 525, 527, 528, 533, 577, 584, 585, 586], "imag": [0, 165, 247, 262, 306, 430, 431, 441, 442, 577, 583, 584, 585, 586, 588], "current": [0, 89, 165, 247, 306, 357, 422, 425, 448, 520, 560, 584, 588], "ensur": [0, 89, 167, 171, 249, 288, 307, 582, 584], "usabl": [0, 584], "clutter": 0, "clean": 0, "up": [0, 312, 360, 362, 451, 453, 586, 588], "view": [0, 403, 498, 507, 512, 555, 583, 586], "inspect": [0, 586], "common": [0, 484, 509, 532, 584, 586], "set": [0, 89, 91, 102, 122, 125, 131, 132, 151, 156, 161, 166, 170, 171, 173, 184, 204, 207, 213, 214, 233, 238, 243, 248, 252, 253, 254, 263, 280, 283, 297, 303, 310, 312, 313, 318, 319, 320, 321, 322, 324, 325, 326, 330, 331, 336, 337, 339, 344, 345, 348, 349, 350, 354, 358, 359, 360, 361, 362, 364, 367, 369, 373, 379, 380, 381, 382, 384, 385, 386, 387, 388, 390, 391, 395, 398, 400, 401, 402, 403, 406, 410, 412, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 455, 458, 461, 465, 471, 473, 474, 475, 476, 477, 480, 481, 483, 485, 489, 492, 494, 495, 496, 497, 498, 499, 507, 508, 509, 510, 512, 516, 517, 518, 519, 520, 525, 526, 535, 540, 541, 547, 551, 553, 554, 555, 578, 579, 583, 584, 585, 586, 588], "rustworkx_test_preserve_imag": 0, "environ": [0, 318, 319, 320, 321, 322, 358, 359, 360, 361, 362, 384, 385, 386, 391, 400, 402, 417, 418, 419, 449, 475, 476, 477, 485, 494, 495, 497, 500, 519, 547, 554, 582, 584, 588], "variabl": [0, 318, 319, 320, 321, 322, 358, 359, 360, 361, 362, 384, 385, 386, 391, 400, 402, 417, 418, 419, 449, 475, 476, 477, 485, 494, 495, 497, 519, 547, 554, 584], "valu": [0, 97, 98, 101, 102, 112, 113, 119, 120, 138, 162, 165, 179, 180, 183, 184, 194, 195, 201, 202, 220, 244, 247, 259, 262, 274, 275, 277, 278, 304, 306, 312, 317, 319, 320, 321, 322, 323, 329, 330, 331, 335, 336, 338, 340, 353, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 389, 390, 391, 393, 395, 396, 397, 398, 399, 402, 404, 405, 406, 412, 414, 415, 417, 418, 419, 420, 422, 425, 427, 429, 434, 435, 440, 448, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 497, 500, 503, 515, 516, 519, 520, 521, 522, 523, 527, 531, 532, 533, 534, 535, 537, 539, 540, 541, 542, 554, 577, 578, 584, 585, 588], "skip": [0, 102, 162, 184, 244, 304, 342, 343, 584], "cleanup": 0, "enabl": [0, 89, 102, 165, 171, 184, 247, 306, 384, 385, 386, 417, 418, 419, 475, 476, 477, 581, 583, 584], "look": [0, 115, 197, 276, 583, 584, 586, 588], "correct": [0, 584], "1": [0, 26, 30, 36, 45, 52, 68, 73, 81, 85, 89, 101, 104, 112, 151, 160, 170, 171, 183, 186, 194, 233, 242, 252, 253, 262, 266, 274, 297, 310, 312, 317, 319, 320, 321, 322, 323, 327, 329, 330, 331, 333, 336, 338, 340, 341, 348, 356, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 378, 380, 382, 384, 385, 386, 390, 396, 397, 398, 399, 402, 404, 405, 406, 408, 409, 412, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 456, 457, 458, 459, 461, 462, 463, 464, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 483, 484, 486, 490, 491, 492, 493, 497, 500, 501, 511, 516, 517, 520, 522, 523, 524, 534, 537, 538, 539, 540, 541, 542, 546, 548, 549, 550, 553, 554, 578, 581, 583, 585, 586, 588], "preserv": [0, 102, 184, 263, 368, 376, 377, 459, 468, 469, 584], "finish": [0, 312, 327, 333, 356, 365, 368, 376, 377, 404, 456, 459, 468, 469, 566], "As": [0, 157, 158, 239, 240, 287, 296, 586], "crate": [0, 581, 584], "own": 0, "combin": [0, 101, 102, 166, 183, 184, 248, 262, 263, 584], "embed": 0, "book": 0, "how": [0, 317, 331, 335, 357, 367, 380, 381, 384, 385, 386, 402, 412, 414, 417, 418, 419, 448, 458, 472, 473, 475, 476, 477, 497, 522, 523, 554, 577, 583, 584, 586], "lang": [0, 532], "org": [0, 339, 382, 415, 430, 431, 436, 439, 441, 442, 474, 494, 536, 538, 541, 584], "ch11": 0, "01": [0, 339, 584], "primari": 0, "languag": [0, 536, 581, 584], "written": [0, 348, 577, 581, 582, 583, 584, 586], "rustfmt": 0, "enforc": [0, 586], "consist": [0, 68, 138, 162, 220, 244, 304, 536, 580, 584, 586], "job": [0, 584, 586], "configur": 0, "check": [0, 89, 102, 126, 127, 137, 158, 165, 171, 184, 208, 209, 219, 240, 247, 306, 312, 349, 350, 351, 352, 382, 387, 388, 390, 403, 415, 460, 474, 480, 481, 483, 498, 499, 500, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 520, 524, 532, 555, 584, 586], "luckili": 0, "adapt": [0, 348, 398, 492, 540, 583], "simpl": [0, 317, 318, 324, 339, 357, 358, 364, 384, 385, 386, 387, 388, 391, 403, 417, 418, 419, 423, 448, 449, 455, 460, 475, 476, 477, 480, 481, 485, 498, 507, 508, 512, 519, 522, 523, 538, 542, 555, 582, 584, 586], "fmt": 0, "automat": [0, 584], "restyl": 0, "match": [0, 7, 20, 112, 113, 114, 115, 116, 117, 118, 194, 195, 196, 197, 198, 199, 200, 274, 275, 276, 342, 343, 387, 388, 403, 480, 481, 498, 507, 508, 509, 510, 512, 520, 532, 555, 584], "what": [0, 583, 584], "step": [0, 312], "clippi": 0, "some": [0, 112, 113, 194, 195, 274, 275, 312, 317, 331, 357, 367, 384, 385, 386, 410, 417, 418, 419, 448, 458, 475, 476, 477, 522, 523, 551, 564, 581, 584, 585], "small": [0, 584], "piec": 0, "namespac": 0, "actual": [0, 327, 365, 456, 583, 586], "black": [0, 165, 247, 306, 333, 356, 368, 376, 430, 431, 441, 442, 459, 468, 557, 578, 584, 588], "flake8": 0, "repositori": 0, "mode": [0, 165, 247, 306, 430, 431, 441, 442, 577, 584, 585, 586, 588], "conform": 0, "rule": 0, "return": [0, 20, 26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 156, 158, 161, 162, 163, 164, 165, 166, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 240, 243, 244, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 577, 578, 579, 581, 582, 583, 584, 585, 586, 588], "format": [0, 151, 233, 297, 332, 334, 393, 420, 487, 527, 532, 533, 536, 577, 583, 584, 588], "error": [0, 131, 132, 139, 165, 213, 214, 221, 247, 288, 289, 306, 312, 349, 350, 351, 352, 382, 390, 398, 415, 474, 483, 492, 500, 516, 532, 536, 540, 582, 584, 586], "updat": [0, 89, 161, 167, 168, 171, 243, 249, 250, 253, 254, 255, 256, 272, 273, 303, 307, 308, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 584, 588], "handl": [0, 357, 413, 448, 502, 583, 584, 588], "venv": 0, "render": [0, 588], "web": [0, 436, 532], "browser": 0, "built": [0, 582, 584], "locat": [0, 584], "rustworkx_cor": [0, 581, 584], "off": [0, 582, 584, 588], "dir": [0, 486], "signatur": 0, "requir": [0, 68, 112, 113, 194, 195, 274, 275, 312, 351, 352, 368, 376, 377, 391, 432, 443, 459, 468, 469, 485, 519, 577, 582, 583, 584], "stub": 0, "tool": [0, 580, 583, 584, 588], "pyi": 0, "thei": [0, 101, 158, 165, 183, 240, 247, 262, 306, 387, 388, 401, 480, 481, 496, 507, 508, 512, 518, 544, 553, 578, 582, 583, 584, 588], "strip": 0, "more": [0, 89, 115, 151, 171, 197, 233, 253, 276, 297, 312, 314, 315, 335, 339, 341, 347, 372, 374, 391, 397, 439, 464, 466, 485, 491, 519, 520, 536, 538, 539, 577, 578, 580, 581, 582, 583, 584, 588], "mypi": [0, 584], "latest": [0, 584], "veri": [0, 583, 588], "help": 0, "end": [0, 106, 188, 268, 323, 329, 333, 355, 356, 363, 366, 368, 375, 376, 377, 378, 404, 405, 454, 457, 459, 467, 468, 469, 470, 584, 586], "user": [0, 89, 486, 525, 581, 584, 588], "let": [0, 355, 375, 467, 584, 585, 586], "bug": 0, "One": [0, 564, 588], "thing": [0, 583, 588], "necessari": [0, 584, 586], "line": [0, 151, 233, 297, 479, 484, 578, 584], "__init__": [0, 333, 356, 368, 376, 459, 468, 583, 584, 588], "form": [0, 26, 30, 34, 35, 36, 52, 57, 68, 73, 77, 81, 85, 92, 93, 104, 107, 110, 111, 130, 148, 169, 174, 175, 186, 189, 192, 193, 212, 230, 251, 255, 256, 266, 269, 272, 273, 287, 296, 309, 316, 338, 341, 348, 355, 370, 372, 375, 383, 399, 401, 432, 443, 462, 464, 467, 493, 496, 553, 562, 568, 584], "foo": 0, "abl": [0, 582, 584], "access": [0, 26, 30, 34, 35, 44, 56, 57, 59, 67, 73, 77, 89, 131, 132, 171, 213, 214, 253, 311, 316, 332, 334, 583, 584], "pattern": [0, 580, 584], "face": 0, "must": [0, 119, 120, 165, 201, 202, 247, 277, 278, 306, 327, 342, 349, 350, 351, 352, 365, 378, 390, 405, 430, 431, 441, 442, 456, 470, 483, 516, 532, 542, 577, 578, 583, 584, 586], "explain": 0, "wa": [0, 89, 377, 380, 384, 385, 386, 402, 404, 412, 417, 418, 419, 469, 475, 476, 477, 534, 554, 577, 581, 582, 583, 584, 586], "why": 0, "idea": 0, "behind": 0, "naiv": 0, "limit": [0, 165, 247, 306, 318, 319, 320, 321, 322, 358, 359, 360, 361, 362, 384, 385, 386, 387, 388, 391, 400, 403, 417, 418, 419, 449, 475, 476, 477, 480, 481, 485, 494, 495, 498, 507, 512, 519, 547, 555, 582, 583, 584], "intern": [0, 22, 23, 102, 184, 263, 439, 581, 584, 586], "knowledg": 0, "upgrad": [0, 582], "previou": [0, 313, 339, 396, 490, 537, 544, 584, 588], "program": [0, 581, 582, 584], "would": [0, 89, 102, 131, 132, 156, 171, 184, 213, 214, 238, 253, 318, 319, 320, 321, 322, 358, 359, 360, 361, 362, 384, 385, 386, 387, 388, 391, 400, 403, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 475, 476, 477, 480, 481, 485, 494, 495, 498, 507, 508, 510, 512, 518, 519, 547, 555, 582, 583, 584, 586, 588], "go": [0, 139, 221, 583], "ideal": 0, "too": [0, 119, 120, 201, 202, 277, 278, 582, 584, 585], "context": [0, 584], "sure": [0, 578, 584], "don": [0, 139, 221, 586, 588], "forget": 0, "over": [0, 68, 133, 134, 135, 136, 138, 160, 162, 215, 216, 217, 218, 220, 242, 244, 304, 312, 341, 372, 401, 403, 464, 494, 496, 498, 553, 555, 584, 586], "cycl": [0, 7, 20, 89, 91, 102, 171, 173, 184, 312, 319, 320, 329, 330, 339, 348, 349, 350, 351, 352, 359, 360, 366, 383, 416, 424, 427, 450, 451, 457, 506, 524, 538, 544, 545, 584, 586], "accomplish": [0, 583], "reno": 0, "git": 0, "base": [0, 22, 23, 26, 30, 34, 35, 36, 40, 44, 45, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 85, 89, 102, 171, 184, 253, 263, 311, 312, 316, 331, 332, 334, 357, 367, 381, 382, 387, 388, 390, 403, 409, 414, 415, 448, 458, 460, 473, 474, 480, 481, 483, 486, 494, 498, 503, 507, 508, 511, 512, 516, 520, 525, 531, 538, 550, 555, 556, 563, 569, 583, 584, 585, 586], "workflow": 0, "quit": [0, 588], "straightforward": [0, 583], "checkout": 0, "short": 0, "string": [0, 151, 165, 170, 233, 247, 252, 297, 306, 310, 357, 393, 420, 448, 487, 518, 527, 533, 577, 578, 584, 588], "brief": 0, "space": [0, 501, 534, 584], "describ": [0, 92, 93, 174, 175, 255, 256, 328, 383, 392, 407, 421, 444, 478, 479, 536, 583, 584], "becom": [0, 562, 568, 584], "prefix": [0, 583], "yaml": 0, "releasenot": 0, "text": [0, 400, 495, 501, 578], "editor": 0, "basic": [0, 583, 584], "restructur": 0, "list": [0, 34, 35, 44, 56, 57, 59, 67, 77, 89, 92, 93, 95, 102, 105, 106, 107, 108, 109, 110, 111, 113, 117, 118, 121, 130, 131, 132, 134, 136, 140, 141, 142, 143, 144, 148, 149, 150, 151, 159, 161, 163, 164, 169, 170, 171, 174, 175, 177, 184, 187, 188, 189, 190, 191, 192, 193, 195, 199, 200, 203, 212, 213, 214, 216, 218, 222, 223, 224, 225, 226, 230, 231, 232, 233, 241, 243, 245, 246, 251, 252, 253, 255, 256, 258, 263, 267, 268, 269, 270, 271, 272, 273, 275, 279, 287, 289, 290, 291, 292, 293, 296, 297, 302, 303, 309, 310, 311, 313, 314, 316, 318, 320, 322, 323, 324, 327, 330, 332, 333, 334, 339, 342, 343, 345, 346, 348, 355, 356, 358, 360, 362, 363, 364, 365, 368, 375, 376, 377, 379, 383, 396, 398, 404, 406, 411, 416, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 438, 440, 444, 445, 446, 447, 449, 451, 453, 454, 455, 456, 459, 467, 468, 469, 471, 490, 492, 494, 501, 514, 517, 518, 520, 534, 536, 537, 540, 541, 542, 543, 544, 545, 552, 577, 578, 579, 583, 584, 585, 588], "under": [0, 581, 584], "categori": 0, "item": [0, 585, 588], "group": [0, 341, 342, 372, 464], "A": [0, 26, 30, 34, 35, 36, 40, 44, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 85, 89, 92, 93, 95, 97, 98, 101, 102, 105, 106, 108, 109, 112, 114, 116, 117, 118, 119, 120, 121, 130, 131, 132, 140, 141, 142, 143, 144, 148, 149, 150, 156, 158, 161, 162, 163, 164, 165, 166, 171, 174, 175, 177, 179, 180, 183, 184, 187, 188, 190, 191, 194, 196, 198, 199, 200, 201, 202, 203, 212, 213, 214, 222, 223, 224, 225, 226, 230, 231, 232, 238, 240, 243, 244, 245, 246, 247, 248, 253, 255, 256, 258, 259, 262, 263, 267, 268, 270, 271, 274, 277, 278, 279, 287, 288, 289, 290, 291, 292, 293, 296, 303, 304, 305, 306, 311, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 394, 398, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 411, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 464, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 492, 493, 494, 495, 496, 498, 501, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 534, 536, 538, 540, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 555, 556, 563, 569, 577, 578, 579, 580, 581, 582, 584, 586, 588], "mani": [0, 171, 253, 312, 331, 335, 367, 380, 381, 402, 412, 414, 458, 472, 473, 497, 554, 582, 583, 584], "entri": [0, 255, 273, 329, 366, 378, 385, 386, 405, 418, 419, 457, 470, 476, 477, 532, 584], "potenti": [0, 171, 253, 586], "newli": [0, 90, 92, 93, 94, 95, 96, 102, 133, 134, 135, 136, 162, 172, 174, 175, 176, 177, 178, 184, 215, 216, 217, 218, 244, 254, 255, 256, 257, 258, 263, 304, 583], "full": [0, 157, 158, 239, 240, 438, 584], "templat": 0, "delet": [0, 89, 171, 253, 584], "aren": [0, 586], "content": [0, 68, 151, 165, 170, 233, 247, 252, 297, 306, 310, 390, 483, 516, 581, 584], "result": [0, 26, 30, 34, 35, 40, 44, 48, 56, 57, 59, 67, 73, 77, 89, 171, 253, 305, 311, 312, 316, 326, 335, 337, 339, 347, 348, 374, 397, 400, 408, 466, 491, 495, 532, 539, 546, 547, 549, 580, 584, 588], "someth": [0, 391, 485, 519, 578, 583, 584, 586], "featur": [0, 89, 171, 583], "func": [0, 578], "support": [0, 357, 431, 442, 448, 494, 536, 577, 581, 583, 584, 586, 588], "pydigraph": [0, 20, 89, 101, 102, 108, 113, 119, 120, 151, 160, 161, 162, 165, 170, 305, 312, 317, 318, 319, 320, 321, 322, 324, 325, 327, 329, 330, 331, 332, 333, 334, 336, 338, 340, 341, 342, 343, 344, 347, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 464, 499, 500, 502, 503, 506, 507, 508, 509, 510, 512, 513, 515, 516, 517, 518, 524, 525, 527, 528, 530, 531, 532, 533, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 553, 554, 577, 578, 579, 581, 583, 584, 586, 588], "object": [0, 22, 23, 26, 30, 34, 35, 36, 40, 44, 45, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 85, 89, 90, 91, 92, 94, 95, 96, 97, 98, 101, 102, 108, 109, 114, 116, 117, 118, 119, 120, 121, 122, 123, 125, 139, 144, 151, 156, 157, 158, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 190, 191, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 221, 226, 233, 238, 239, 240, 243, 244, 247, 248, 250, 252, 253, 254, 255, 257, 258, 259, 262, 263, 270, 271, 277, 278, 279, 280, 281, 283, 293, 297, 303, 304, 305, 306, 308, 310, 311, 312, 316, 317, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 333, 338, 341, 342, 343, 349, 350, 351, 352, 353, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 376, 377, 378, 379, 381, 382, 384, 385, 386, 387, 388, 390, 393, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 464, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 486, 487, 492, 493, 496, 498, 500, 501, 503, 507, 508, 512, 514, 516, 520, 521, 522, 523, 524, 525, 527, 531, 532, 533, 534, 540, 541, 542, 549, 550, 551, 552, 553, 555, 556, 563, 569, 577, 578, 583, 584, 586, 588], "meth": 0, "equival": [0, 52, 68, 81, 140, 141, 162, 222, 223, 244, 262, 304, 391, 421, 444, 485, 519, 546, 581, 584, 586], "conveni": [0, 525, 584], "nativ": [0, 583, 584, 586], "g": [0, 263, 333, 355, 356, 368, 375, 376, 377, 400, 404, 411, 439, 459, 467, 468, 469, 484, 546, 552, 578, 584, 586, 588], "deprec": 0, "bar": 0, "been": [0, 101, 166, 183, 248, 262, 305, 313, 315, 518, 557, 559, 566, 574, 581, 584], "remov": [0, 89, 102, 133, 134, 135, 136, 139, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 166, 171, 184, 215, 216, 217, 218, 221, 234, 235, 236, 237, 238, 239, 240, 241, 242, 247, 248, 253, 263, 298, 299, 300, 301, 302, 305, 306, 326, 335, 337, 557, 583, 584, 585], "futur": [0, 313, 584], "supersed": 0, "similar": [0, 357, 448, 583, 584, 588], "accur": 0, "better": [0, 91, 173, 387, 388, 480, 481, 507, 508, 584, 588], "perform": [0, 89, 91, 171, 173, 253, 312, 328, 387, 388, 391, 398, 407, 436, 480, 481, 485, 492, 494, 507, 508, 518, 519, 540, 556, 563, 569, 581, 582, 583, 584, 586], "instead": [0, 89, 151, 156, 158, 166, 167, 171, 233, 238, 240, 248, 249, 253, 297, 307, 339, 391, 393, 403, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 485, 487, 498, 519, 527, 555, 583, 584, 588], "sphinx": 0, "tabl": 0, "enumer": [0, 584], "bullet": 0, "etc": [0, 317, 357, 384, 385, 386, 417, 418, 419, 448, 475, 476, 477, 522, 523, 542, 588], "express": [0, 341, 372, 464, 584], "much": [0, 583, 584], "commit": [0, 584], "pr": 0, "artifact": [0, 368, 376, 377, 459, 468, 469], "part": [0, 333, 335, 356, 368, 376, 377, 404, 459, 468, 469, 542, 575, 581, 582, 584, 588], "inlin": 0, "number": [0, 36, 89, 145, 146, 156, 157, 158, 171, 227, 228, 238, 239, 240, 253, 294, 295, 315, 318, 319, 320, 321, 322, 326, 328, 331, 335, 336, 337, 341, 346, 347, 358, 359, 360, 361, 362, 367, 369, 372, 374, 380, 381, 382, 384, 385, 386, 387, 388, 390, 391, 394, 395, 398, 400, 401, 402, 403, 407, 408, 409, 410, 411, 412, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 458, 460, 461, 464, 466, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 485, 488, 489, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 507, 512, 516, 519, 520, 522, 528, 529, 530, 531, 532, 534, 535, 540, 541, 547, 549, 550, 551, 552, 553, 554, 555, 584, 585], "12345": 0, "fix": [0, 138, 220, 398, 492, 540], "race": 0, "condit": [0, 112, 113, 114, 116, 117, 118, 156, 194, 195, 196, 198, 199, 200, 238, 274, 275, 342, 343, 534, 584, 586], "__": [0, 349, 350, 351, 352, 584], "rst": 0, "restructuredtext": 0, "report": [0, 565, 566, 570, 580, 584], "dure": [0, 312, 383, 584], "0": [0, 26, 30, 34, 35, 36, 45, 52, 59, 68, 73, 77, 81, 85, 89, 104, 112, 119, 120, 151, 160, 165, 170, 171, 186, 194, 201, 202, 233, 242, 247, 252, 253, 266, 274, 277, 278, 297, 306, 310, 311, 312, 317, 318, 319, 320, 321, 322, 323, 324, 330, 331, 333, 338, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 376, 377, 380, 382, 384, 385, 386, 390, 397, 398, 399, 404, 406, 408, 409, 412, 415, 417, 418, 419, 423, 426, 439, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 462, 468, 469, 472, 474, 475, 476, 477, 478, 479, 483, 484, 486, 491, 492, 493, 500, 501, 514, 516, 520, 522, 523, 532, 534, 539, 540, 542, 548, 549, 550, 577, 578, 581, 582, 583, 585, 586, 588], "8": [0, 45, 400, 439, 478, 500, 538, 578, 580, 581, 583, 588], "tag": 0, "standard": [0, 581, 584], "state": [0, 112, 113, 194, 195, 274, 275, 387, 388, 403, 480, 481, 498, 507, 512, 555, 584, 586], "_build": 0, "particular": [0, 478, 479, 584], "release_not": 0, "submit": 0, "approv": 0, "team": 0, "get": [0, 97, 98, 104, 107, 117, 118, 123, 124, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 147, 148, 149, 150, 163, 164, 167, 169, 179, 180, 186, 189, 199, 200, 205, 206, 211, 212, 213, 214, 215, 216, 217, 218, 222, 223, 224, 229, 230, 231, 232, 245, 246, 249, 251, 259, 265, 266, 269, 280, 281, 282, 287, 288, 289, 290, 291, 296, 307, 309, 325, 327, 332, 334, 347, 354, 355, 365, 374, 375, 380, 394, 412, 456, 466, 467, 472, 488, 517, 518, 528, 544, 545, 581, 584, 588], "trigger": [0, 494], "subsequ": [0, 584, 588], "mai": [0, 158, 166, 240, 248, 305, 312, 326, 335, 337, 339, 347, 348, 374, 400, 466, 478, 495, 532, 547, 582, 584, 586], "take": [0, 101, 112, 113, 114, 116, 117, 118, 138, 162, 165, 166, 183, 194, 195, 196, 198, 199, 200, 220, 244, 247, 248, 262, 274, 275, 304, 306, 327, 329, 339, 342, 343, 365, 366, 378, 387, 388, 403, 405, 416, 456, 457, 470, 478, 479, 480, 481, 498, 507, 508, 512, 520, 524, 555, 582, 583, 584, 585, 588], "week": 0, "month": 0, "dai": [0, 583, 584, 588], "avail": [0, 45, 402, 497, 554, 577, 580, 582, 583, 584, 588], "propos": [0, 582, 584], "valuabl": 0, "everyth": [0, 583], "highest": 0, "prioriti": [0, 584], "process": [0, 312, 313, 314, 339, 460, 494, 582, 584, 585], "quickli": [0, 584, 588], "activ": 0, "member": [0, 562, 568], "permiss": 0, "final": [0, 101, 183, 262, 584], "mark": [0, 313, 314, 315, 439, 564, 584], "readi": [0, 312, 314, 315, 584], "everyon": 0, "welcom": 0, "extrem": 0, "reduc": [0, 409, 541, 550, 572, 584], "burden": 0, "bit": [0, 582, 586], "back": [0, 333, 356, 368, 376, 377, 404, 459, 468, 469, 561, 564, 583], "forth": [0, 583], "receiv": [0, 162, 244, 304, 389, 482, 515, 582, 584], "feedback": 0, "multipl": [0, 68, 89, 102, 152, 154, 158, 162, 166, 171, 184, 234, 236, 240, 244, 248, 253, 255, 273, 280, 298, 300, 304, 317, 357, 391, 448, 485, 519, 583, 584, 588], "round": [0, 578], "pleas": [0, 583, 584], "discourag": 0, "normal": [0, 331, 367, 381, 414, 458, 473, 500, 578, 582, 583, 584, 585], "qualiti": 0, "appear": [0, 157, 158, 239, 240, 312, 342, 343, 538, 586], "might": [0, 68, 312, 523], "larger": [0, 346, 584, 588], "implic": 0, "obviou": 0, "feel": 0, "free": [0, 436, 584], "adjust": [0, 89, 171, 253, 331, 367, 380, 381, 402, 412, 414, 458, 472, 473, 497, 554, 584], "comment": [0, 151, 233, 297], "anoth": [0, 101, 183, 262, 580, 584, 586, 588], "constrain": 0, "resourc": [0, 582], "infinit": [0, 584], "wait": 0, "period": [0, 432, 443, 584], "fine": 0, "regress": [0, 584], "codebas": 0, "often": [0, 586, 588], "needlessli": 0, "wast": 0, "starvat": 0, "slow": 0, "down": 0, "total": 0, "throughput": 0, "possibl": [0, 312, 323, 363, 400, 403, 408, 409, 410, 454, 498, 544, 548, 549, 550, 551, 555, 582, 584, 588], "try": [0, 403, 498, 555, 582, 584], "bundl": 0, "head": [0, 578, 586, 588], "automerg": 0, "signal": 0, "mergifi": 0, "bot": 0, "enqueu": 0, "onto": [0, 101, 183, 262], "At": [0, 532], "point": [0, 326, 328, 333, 335, 356, 368, 376, 377, 404, 407, 459, 468, 469, 518, 532, 556, 563, 564, 569, 584, 586, 588], "fulli": [0, 582, 584], "autom": [0, 584], "effort": [0, 582], "conserv": 0, "maxim": [0, 335, 347, 374, 466, 510, 520, 584], "idl": 0, "deep": 0, "backlog": 0, "unless": [0, 138, 220, 398, 492, 525, 540, 583, 584], "delai": [0, 584], "intend": [0, 578], "safe": 0, "high": [0, 328, 407, 581, 582, 584], "impact": [0, 584], "secur": 0, "balanc": 0, "risk": 0, "given": [0, 114, 115, 116, 123, 124, 125, 158, 196, 197, 198, 205, 206, 207, 240, 276, 281, 282, 283, 288, 312, 313, 333, 339, 342, 343, 348, 356, 357, 368, 376, 377, 383, 386, 401, 404, 410, 411, 419, 430, 431, 441, 442, 448, 459, 468, 469, 477, 479, 496, 501, 504, 518, 532, 551, 552, 553, 584, 585, 588], "patch": [0, 578, 584], "appropri": [0, 333, 356, 368, 376, 377, 404, 459, 468, 469, 583, 584], "inclus": 0, "riski": 0, "major": [0, 584], "trivial": 0, "fairli": [0, 588], "obscur": 0, "factor": [0, 336, 340, 369, 371, 390, 396, 397, 398, 438, 461, 463, 483, 490, 491, 492, 516, 537, 539, 540, 541, 584], "weigh": 0, "consid": [0, 156, 238, 339, 387, 388, 391, 407, 480, 481, 485, 507, 508, 519], "tiniest": 0, "carri": 0, "realli": 0, "visibl": 0, "benefit": 0, "notic": [0, 584, 586], "self": [0, 304, 326, 333, 335, 337, 339, 344, 347, 356, 368, 373, 374, 376, 400, 408, 459, 465, 466, 468, 495, 547, 549, 583, 584, 588], "signific": 0, "refactor": 0, "lot": [0, 583], "worth": [0, 161, 243, 303, 338, 349, 350, 351, 352, 370, 401, 462, 496, 553, 577, 584], "think": 0, "less": [0, 315, 331, 367, 381, 414, 422, 425, 429, 438, 440, 458, 473, 494, 542], "whether": [0, 89, 112, 113, 117, 118, 156, 171, 194, 195, 199, 200, 238, 253, 274, 275, 331, 342, 343, 367, 381, 411, 414, 458, 460, 473, 505, 509, 510, 511, 513, 525, 552, 583, 584], "simpli": [0, 584, 588], "non": [0, 327, 333, 339, 342, 365, 368, 378, 388, 405, 439, 456, 459, 470, 481, 512, 532, 538, 557, 560, 583, 586], "allow": [0, 89, 91, 166, 171, 173, 248, 253, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 583, 584, 586, 588], "accept": [0, 319, 320, 321, 322, 323, 330, 359, 360, 361, 362, 363, 377, 379, 398, 404, 406, 450, 451, 452, 453, 454, 469, 471, 492, 540, 583, 584], "least": [0, 117, 118, 199, 200, 532, 584, 585], "until": [0, 312, 333, 339, 355, 356, 368, 375, 376, 377, 398, 404, 459, 467, 468, 469, 492, 540, 584], "maintain": [0, 584], "minor": 0, "approach": [0, 479, 584, 588], "reason": 0, "cherri": 0, "pick": [0, 312], "x": [0, 317, 357, 384, 385, 386, 387, 388, 391, 411, 417, 418, 432, 439, 443, 448, 475, 476, 477, 480, 481, 485, 507, 508, 512, 519, 520, 522, 523, 541, 552, 583, 584, 585, 586], "main_commit_id": 0, "squash": 0, "track": [0, 312, 333, 356, 368, 376, 459, 468], "strict": [0, 584], "cleanli": 0, "resolv": [0, 518, 564, 584], "yourself": [0, 584], "messag": [0, 165, 247, 306, 584], "central": [7, 20, 40, 48, 331, 341, 353, 367, 372, 381, 382, 390, 414, 415, 458, 464, 473, 474, 483, 503, 516, 531, 581, 584, 587], "rustworkx": [7, 23, 26, 30, 34, 35, 44, 52, 56, 57, 59, 67, 73, 77, 81, 89, 171, 253, 311, 312, 316, 584, 585, 586], "betweenness_centr": [7, 414, 584, 585], "degree_centr": [7, 584], "edge_betweenness_centr": [7, 331, 584], "eigenvector_centr": [7, 382, 474, 584], "katz_centr": [7, 390, 483, 584], "closeness_centr": [7, 584], "in_degree_centr": [7, 584], "out_degree_centr": [7, 584], "color": [7, 20, 45, 165, 247, 306, 333, 342, 356, 368, 376, 430, 431, 439, 441, 442, 459, 460, 468, 478, 479, 486, 548, 557, 560, 577, 578, 584, 585, 588], "coloringstrategi": [7, 584], "graph_greedy_color": [7, 45, 584], "graph_bipartite_edge_color": [7, 584], "graph_greedy_edge_color": [7, 584], "graph_misra_gries_edge_color": [7, 584], "two_color": [7, 584], "connect": [7, 20, 106, 158, 166, 188, 240, 248, 268, 326, 337, 339, 341, 342, 345, 346, 355, 372, 400, 402, 410, 411, 421, 423, 426, 433, 444, 445, 464, 467, 495, 497, 501, 505, 513, 522, 523, 529, 530, 543, 551, 552, 554, 579, 584, 585, 586, 588], "number_connected_compon": [7, 584], "connected_compon": [7, 584, 588], "node_connected_compon": [7, 584], "is_connect": [7, 584], "strongly_connected_compon": [7, 584], "number_weakly_connected_compon": [7, 584], "weakly_connected_compon": [7, 584], "is_weakly_connect": [7, 584], "cycle_basi": [7, 584], "simple_cycl": [7, 584], "digraph_find_cycl": [7, 584], "articulation_point": [7, 584], "bridg": [7, 584], "biconnected_compon": [7, 584], "chain_decomposit": [7, 44, 584], "all_simple_path": [7, 584], "all_pairs_all_simple_path": [7, 391, 485, 519, 584], "stoer_wagner_min_cut": [7, 584], "longest_simple_path": [7, 584], "is_bipartit": [7, 584], "has_path": [7, 584], "connected_subgraph": [7, 584], "dag_longest_path": [7, 350, 351, 352, 584], "dag_longest_path_length": [7, 352, 584], "dag_weighted_longest_path": [7, 584], "dag_weighted_longest_path_length": [7, 584], "is_directed_acyclic_graph": 7, "transitive_reduct": [7, 584], "topological_gener": [7, 584], "domin": [7, 20, 312, 413, 502, 518, 584], "immediate_domin": [7, 584], "dominance_fronti": [7, 584], "oper": [7, 20, 401, 496, 553, 582, 583, 584, 586], "complement": [7, 373, 465, 584], "union": [7, 338, 401, 496, 536, 584], "cartesian_product": [7, 584, 588], "isomorph": [7, 20, 387, 388, 403, 480, 481, 498, 507, 508, 512, 555, 581, 584], "is_isomorph": [7, 387, 403, 480, 498, 555, 584], "is_subgraph_isomorph": [7, 388, 403, 481, 498, 555, 580, 584], "is_isomorphic_node_match": [7, 584], "vf2_map": [7, 584], "link": [7, 20, 390, 393, 420, 483, 487, 516, 527, 533, 541, 583, 584, 588], "analysi": [7, 20, 341, 584, 586], "pagerank": [7, 584], "hit": [7, 584], "max_weight_match": [7, 584], "is_match": [7, 584], "is_maximal_match": 7, "adjacency_matrix": [7, 583, 584], "transit": [7, 400, 495, 532, 546, 584, 588], "core_numb": [7, 584], "graph_line_graph": [7, 584], "metric_closur": [7, 584], "is_planar": [7, 584], "digraph_maximum_bisimul": [7, 59, 311, 584], "shortest": [7, 20, 319, 320, 321, 322, 323, 327, 329, 330, 331, 341, 359, 360, 361, 362, 363, 365, 366, 367, 372, 378, 379, 381, 384, 385, 386, 389, 394, 402, 405, 406, 414, 417, 418, 419, 450, 451, 452, 453, 454, 456, 457, 458, 464, 470, 471, 473, 475, 476, 477, 482, 488, 497, 515, 521, 528, 541, 554, 581, 582, 584, 585], "dijkstra_shortest_path": [7, 77, 582, 584], "dijkstra_shortest_path_length": [7, 73, 580, 584], "all_pairs_dijkstra_shortest_path": [7, 30, 584], "all_pairs_dijkstra_path_length": [7, 580, 584], "bellman_ford_shortest_path": [7, 584], "bellman_ford_shortest_path_length": [7, 584], "all_pairs_bellman_ford_shortest_path": [7, 584], "all_pairs_bellman_ford_path_length": [7, 584], "negative_edge_cycl": [7, 584], "find_negative_cycl": [7, 584], "distance_matrix": [7, 584], "floyd_warshal": [7, 584], "floyd_warshall_numpi": [7, 412, 583, 584], "floyd_warshall_successor_and_dist": [7, 584], "astar_shortest_path": [7, 584], "k_shortest_path_length": [7, 584], "num_shortest_paths_unweight": [7, 584], "unweighted_average_shortest_path_length": [7, 584], "all_shortest_path": [7, 584], "digraph_all_shortest_path": [7, 584], "travers": [7, 20, 333, 349, 350, 351, 352, 355, 356, 368, 375, 376, 377, 378, 404, 405, 459, 467, 468, 469, 470, 575, 576, 584], "dfs_edg": [7, 584], "dfs_search": [7, 376, 468, 563, 584], "bfs_successor": [7, 35, 584], "bfs_predecessor": [7, 34, 584], "bfs_search": [7, 368, 459, 556, 584], "dijkstra_search": [7, 569, 584], "topological_sort": [7, 518, 584, 586], "lexicographical_topological_sort": [7, 584], "descend": [7, 544, 584], "ancestor": [7, 544, 584], "collect_run": [7, 584, 586], "collect_bicolor_run": [7, 584], "dfsvisitor": [7, 356, 376, 468, 584], "bfsvisitor": [7, 333, 368, 459, 584], "dijkstravisitor": [7, 377, 404, 469, 584], "topologicalsort": [7, 584], "minimum_spanning_edg": [7, 584], "minimum_spanning_tre": [7, 584], "steiner_tre": [7, 584], "pydag": [20, 22, 183, 262, 506, 508, 584], "function": [20, 26, 30, 34, 35, 40, 44, 48, 56, 57, 59, 67, 73, 77, 112, 113, 117, 118, 138, 140, 141, 155, 156, 157, 158, 165, 166, 170, 194, 195, 199, 200, 220, 222, 223, 237, 238, 239, 240, 247, 248, 252, 274, 275, 301, 306, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 328, 330, 331, 333, 335, 337, 339, 342, 343, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 368, 374, 376, 377, 379, 380, 381, 382, 384, 385, 386, 387, 388, 390, 391, 393, 398, 400, 401, 402, 403, 404, 406, 407, 409, 412, 414, 415, 416, 417, 418, 419, 431, 442, 448, 449, 450, 451, 452, 453, 454, 458, 459, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 485, 487, 492, 494, 495, 496, 497, 498, 500, 501, 507, 508, 512, 516, 518, 519, 520, 522, 523, 524, 525, 527, 532, 534, 538, 540, 542, 543, 547, 550, 553, 554, 555, 564, 566, 577, 578, 580, 581, 582, 584, 585, 586, 588], "gener": [20, 26, 30, 34, 35, 44, 56, 57, 59, 67, 73, 77, 81, 108, 112, 119, 120, 141, 158, 160, 161, 165, 166, 170, 190, 194, 201, 202, 223, 240, 242, 243, 247, 248, 252, 270, 274, 277, 278, 303, 305, 306, 310, 311, 312, 316, 317, 319, 320, 321, 322, 323, 328, 330, 336, 340, 341, 357, 360, 362, 363, 369, 370, 371, 372, 379, 381, 393, 395, 396, 397, 398, 399, 403, 406, 407, 408, 409, 410, 411, 414, 420, 448, 450, 451, 452, 453, 454, 461, 462, 463, 464, 471, 473, 478, 479, 486, 487, 489, 490, 491, 492, 493, 498, 501, 527, 533, 534, 535, 537, 538, 539, 540, 544, 549, 550, 551, 552, 555, 556, 563, 569, 577, 578, 581, 582, 583, 584, 586], "random": [20, 328, 395, 398, 407, 408, 409, 410, 411, 489, 492, 494, 501, 534, 535, 540, 549, 550, 551, 552, 581, 584, 588], "layout": [20, 81, 336, 340, 369, 371, 395, 396, 397, 398, 439, 461, 463, 478, 489, 490, 491, 492, 535, 537, 539, 540, 577, 578, 581, 583, 584, 588], "serial": [20, 581, 583, 584], "convert": [20, 141, 223, 525, 581, 584], "custom": [20, 26, 30, 34, 35, 40, 44, 48, 56, 57, 59, 67, 73, 77, 311, 316, 332, 334, 581, 583, 584, 585, 588], "type": [20, 22, 23, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 104, 105, 106, 107, 108, 109, 112, 113, 115, 117, 118, 119, 120, 121, 124, 126, 127, 128, 129, 130, 131, 132, 137, 140, 141, 142, 143, 144, 147, 148, 149, 150, 161, 162, 163, 164, 165, 166, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 186, 187, 188, 189, 190, 191, 194, 195, 197, 199, 200, 201, 202, 203, 206, 208, 209, 210, 211, 212, 213, 214, 219, 222, 223, 224, 225, 226, 229, 230, 231, 232, 243, 244, 245, 246, 247, 248, 251, 254, 255, 256, 257, 258, 259, 262, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 303, 304, 305, 306, 309, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 577, 578, 579, 581, 583, 584, 585, 588], "specif": [22, 23, 114, 115, 116, 119, 120, 167, 196, 197, 198, 201, 202, 249, 276, 277, 278, 307, 536, 578, 582, 583, 584, 586], "univers": [22, 23, 341, 584], "retworkx": [22, 581, 584], "explicitli": [22, 23, 478, 479, 583, 584], "data": [22, 23, 34, 35, 52, 89, 91, 92, 93, 97, 98, 101, 102, 103, 109, 112, 113, 117, 118, 119, 120, 121, 122, 123, 125, 130, 131, 132, 138, 144, 148, 150, 156, 161, 162, 164, 165, 166, 168, 170, 171, 173, 174, 175, 179, 180, 183, 184, 185, 191, 194, 195, 199, 200, 201, 202, 203, 204, 205, 207, 212, 213, 214, 220, 226, 230, 232, 238, 243, 244, 246, 247, 248, 250, 252, 253, 254, 255, 256, 259, 262, 263, 264, 271, 274, 275, 277, 278, 279, 280, 281, 283, 287, 288, 289, 293, 296, 303, 304, 305, 306, 308, 310, 316, 327, 329, 332, 334, 338, 342, 343, 365, 366, 370, 378, 380, 387, 388, 393, 401, 403, 405, 412, 416, 420, 456, 457, 462, 470, 472, 480, 481, 487, 496, 498, 507, 508, 512, 517, 518, 521, 524, 525, 527, 533, 536, 541, 553, 555, 577, 578, 581, 584, 585, 586], "length": [26, 73, 319, 321, 329, 331, 350, 352, 359, 361, 366, 378, 384, 385, 386, 389, 391, 402, 405, 417, 418, 419, 422, 425, 429, 432, 438, 440, 443, 450, 452, 457, 470, 475, 476, 477, 482, 485, 497, 515, 519, 546, 554, 578, 584], "node": [26, 30, 34, 35, 40, 52, 57, 59, 67, 68, 73, 77, 81, 85, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 280, 283, 284, 285, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 507, 508, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 531, 532, 533, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 570, 577, 578, 580, 582, 584, 585, 586], "i": [26, 30, 34, 35, 40, 44, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 89, 91, 92, 93, 97, 98, 101, 102, 104, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 137, 138, 139, 140, 141, 142, 151, 155, 156, 157, 158, 159, 161, 162, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 179, 180, 183, 184, 186, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 219, 220, 221, 222, 223, 224, 233, 237, 238, 239, 240, 241, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 259, 262, 263, 266, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 291, 296, 297, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 504, 505, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588], "map": [26, 30, 36, 40, 48, 52, 68, 73, 77, 81, 85, 89, 101, 104, 131, 162, 171, 183, 186, 213, 244, 253, 262, 266, 288, 304, 318, 331, 338, 341, 358, 370, 372, 394, 399, 403, 413, 449, 462, 464, 488, 493, 494, 498, 502, 528, 546, 555, 578, 583, 584, 585, 588], "integ": [26, 30, 34, 35, 40, 44, 48, 56, 57, 59, 67, 73, 77, 89, 92, 93, 110, 111, 171, 174, 175, 192, 193, 253, 255, 256, 272, 273, 311, 316, 335, 342, 349, 350, 439, 478, 479, 517, 520, 548, 583, 584, 588], "indic": [26, 30, 40, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 85, 89, 92, 93, 95, 97, 98, 101, 104, 105, 106, 107, 110, 111, 112, 113, 115, 131, 132, 136, 138, 140, 141, 142, 143, 149, 151, 159, 161, 162, 163, 166, 169, 171, 174, 175, 177, 179, 180, 183, 186, 187, 188, 189, 192, 193, 194, 195, 197, 213, 214, 218, 220, 222, 223, 224, 225, 231, 233, 241, 243, 244, 245, 248, 251, 253, 255, 256, 258, 259, 262, 266, 267, 268, 269, 272, 273, 274, 275, 276, 287, 288, 289, 290, 291, 292, 296, 297, 302, 303, 304, 305, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 333, 336, 338, 339, 346, 349, 351, 354, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 376, 377, 379, 382, 384, 390, 391, 394, 396, 399, 403, 404, 406, 412, 413, 415, 417, 425, 429, 431, 432, 441, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 468, 469, 471, 473, 474, 475, 478, 479, 483, 484, 485, 486, 488, 490, 493, 498, 500, 502, 503, 514, 516, 517, 518, 519, 523, 528, 531, 532, 537, 541, 545, 548, 555, 557, 560, 578, 582, 583, 584, 585, 588], "pathlengthmap": [26, 329, 366, 378, 389, 457, 470, 482, 584], "234": 26, "2": [26, 30, 34, 35, 44, 45, 52, 56, 57, 59, 67, 73, 77, 81, 89, 91, 101, 104, 108, 112, 113, 119, 120, 121, 122, 133, 134, 135, 136, 151, 152, 156, 160, 170, 171, 173, 183, 186, 190, 194, 195, 201, 202, 203, 204, 215, 216, 217, 218, 233, 234, 238, 242, 252, 253, 254, 262, 266, 270, 274, 275, 277, 278, 279, 280, 297, 298, 310, 311, 312, 316, 317, 319, 320, 321, 322, 324, 331, 333, 336, 339, 340, 356, 357, 358, 359, 360, 361, 362, 364, 367, 368, 369, 370, 371, 376, 381, 384, 387, 388, 395, 396, 397, 398, 399, 400, 403, 409, 411, 412, 414, 417, 421, 422, 423, 425, 429, 430, 432, 436, 439, 440, 441, 443, 444, 448, 449, 450, 451, 452, 453, 455, 458, 459, 461, 462, 463, 468, 473, 475, 478, 479, 480, 481, 484, 486, 489, 490, 491, 492, 493, 498, 501, 507, 508, 512, 534, 535, 537, 538, 539, 540, 541, 549, 550, 552, 553, 555, 577, 578, 581, 583, 585, 586, 588], "34": 26, "python": [26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 89, 90, 91, 92, 93, 94, 95, 96, 101, 102, 114, 116, 157, 158, 166, 171, 172, 173, 174, 175, 176, 177, 178, 183, 184, 196, 198, 239, 240, 248, 253, 254, 255, 256, 257, 258, 262, 263, 311, 316, 327, 329, 332, 334, 349, 350, 351, 352, 365, 366, 378, 387, 388, 389, 391, 403, 405, 416, 420, 456, 457, 470, 480, 481, 482, 485, 498, 507, 508, 512, 515, 518, 519, 524, 533, 555, 580, 581, 582, 583, 584, 588], "protocol": [26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 89, 171, 253, 311, 316, 332, 334, 583, 584, 588], "dict": [26, 30, 36, 40, 48, 52, 68, 73, 77, 81, 85, 97, 98, 101, 165, 171, 179, 180, 183, 247, 253, 259, 262, 306, 319, 320, 321, 322, 330, 331, 335, 341, 347, 353, 359, 360, 361, 362, 367, 374, 379, 381, 382, 384, 389, 390, 398, 405, 406, 413, 414, 415, 417, 430, 431, 441, 442, 450, 451, 452, 453, 458, 460, 466, 471, 473, 474, 475, 478, 479, 482, 483, 484, 486, 492, 494, 500, 502, 503, 515, 516, 531, 532, 540, 546, 548, 577, 578, 583, 584, 588], "rx": [26, 30, 34, 35, 44, 56, 57, 59, 67, 73, 77, 89, 101, 151, 160, 165, 170, 171, 183, 233, 242, 247, 252, 253, 262, 297, 306, 310, 311, 312, 316, 333, 356, 368, 376, 459, 468, 478, 479, 484, 485, 486, 577, 578, 582, 583, 584, 585, 586, 588], "directed_path_graph": [26, 30, 34, 35, 56, 57, 59, 67, 73, 77, 170, 252, 311, 312, 316, 370, 399, 403, 578, 584, 586, 588], "5": [26, 30, 34, 35, 56, 57, 67, 73, 77, 81, 89, 113, 160, 170, 171, 195, 242, 252, 253, 275, 310, 312, 316, 382, 415, 423, 424, 426, 427, 428, 437, 438, 439, 474, 478, 479, 486, 500, 501, 581, 582, 585, 586, 588], "edg": [26, 30, 36, 44, 48, 52, 56, 57, 73, 77, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 145, 147, 148, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 227, 229, 230, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 273, 274, 277, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 294, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 312, 316, 317, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 333, 335, 337, 339, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 366, 368, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 393, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 456, 457, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 486, 487, 492, 495, 496, 497, 498, 500, 503, 507, 509, 510, 511, 512, 515, 516, 518, 520, 521, 522, 523, 524, 527, 531, 532, 533, 534, 536, 540, 541, 542, 546, 547, 549, 550, 551, 553, 554, 555, 557, 559, 560, 561, 562, 564, 566, 567, 568, 571, 572, 573, 574, 577, 578, 580, 582, 584, 585, 586], "all_pairs_dijkstra_shortest_path_length": 26, "third_node_shortest_path_length": 26, "pathmap": [30, 330, 584], "third_node_shortest_path": 30, "sequenc": [34, 35, 44, 56, 57, 59, 67, 311, 316, 332, 334, 391, 485, 519, 578, 583, 584, 585, 586, 588], "tupl": [34, 35, 52, 57, 85, 92, 93, 101, 104, 107, 108, 110, 111, 124, 130, 131, 148, 169, 174, 175, 183, 186, 189, 190, 192, 193, 206, 212, 213, 230, 251, 255, 256, 262, 263, 266, 269, 270, 272, 273, 282, 287, 288, 296, 309, 316, 336, 338, 340, 355, 369, 370, 371, 375, 386, 395, 396, 397, 399, 419, 461, 462, 463, 467, 477, 484, 489, 490, 491, 493, 494, 500, 509, 510, 520, 535, 537, 539, 542, 546, 578, 582, 583, 584], "predecessor_a": 34, "predecessor_b": 34, "payload": [34, 35, 52, 89, 93, 103, 112, 113, 117, 118, 132, 133, 134, 135, 136, 138, 156, 161, 162, 166, 167, 168, 169, 170, 171, 175, 185, 194, 195, 199, 200, 214, 215, 216, 217, 218, 220, 238, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255, 256, 264, 272, 273, 274, 275, 289, 303, 304, 305, 307, 308, 309, 310, 316, 338, 342, 343, 370, 380, 382, 389, 390, 393, 401, 412, 415, 420, 432, 462, 472, 474, 482, 483, 487, 496, 500, 515, 516, 521, 525, 527, 532, 533, 541, 553, 577, 578, 583, 584, 585, 586], "index": [34, 35, 44, 52, 56, 57, 59, 67, 89, 90, 91, 94, 96, 97, 98, 101, 102, 104, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 171, 172, 173, 176, 178, 179, 180, 183, 184, 186, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 222, 223, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 253, 254, 257, 259, 262, 263, 265, 266, 272, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 296, 298, 299, 300, 301, 302, 303, 304, 307, 308, 311, 313, 316, 323, 324, 325, 327, 329, 330, 331, 332, 334, 337, 339, 341, 347, 348, 354, 355, 363, 364, 365, 366, 372, 374, 375, 378, 379, 383, 389, 390, 405, 406, 454, 455, 456, 457, 464, 466, 467, 470, 471, 478, 479, 482, 483, 499, 509, 510, 515, 516, 517, 526, 542, 546, 582, 583, 584, 585, 586, 588], "iter": [34, 35, 44, 56, 57, 59, 67, 68, 73, 77, 92, 93, 95, 102, 110, 111, 133, 134, 135, 136, 138, 154, 159, 160, 162, 174, 175, 177, 184, 192, 193, 215, 216, 217, 218, 220, 236, 241, 242, 244, 255, 256, 258, 263, 272, 273, 300, 302, 304, 311, 312, 316, 355, 375, 382, 390, 392, 398, 403, 415, 436, 467, 474, 483, 492, 498, 500, 516, 518, 532, 540, 555, 583, 584, 586], "wrap": [34, 35, 44, 56, 57, 59, 67, 73, 77, 311, 316, 584], "yield": [34, 35, 44, 56, 57, 59, 67, 68, 73, 77, 311, 316, 584], "order": [34, 35, 44, 56, 57, 59, 67, 68, 73, 77, 102, 115, 162, 184, 197, 244, 255, 263, 273, 276, 304, 311, 312, 313, 316, 332, 334, 349, 350, 351, 352, 355, 368, 375, 376, 377, 387, 388, 391, 403, 422, 425, 459, 467, 468, 469, 480, 481, 485, 498, 507, 508, 512, 518, 519, 532, 555, 556, 563, 569, 584, 586, 588], "bfs_succ": [34, 35], "third_el": [34, 35, 56, 57, 67, 73, 77, 316], "bfs_iter": [34, 35], "first_el": [34, 35, 56, 57, 59, 67, 316], "second_el": [34, 35, 56, 57, 67, 316], "successor_a": 35, "successor_b": 35, "repres": [36, 52, 57, 68, 77, 81, 85, 89, 161, 162, 171, 243, 244, 303, 304, 316, 319, 320, 321, 322, 323, 327, 329, 330, 337, 339, 346, 359, 360, 361, 362, 363, 365, 366, 377, 378, 379, 380, 391, 393, 396, 398, 403, 404, 405, 406, 416, 420, 450, 451, 452, 453, 454, 456, 457, 469, 470, 471, 472, 478, 479, 484, 485, 487, 490, 492, 494, 498, 519, 524, 527, 532, 533, 537, 540, 546, 555, 580, 584, 586], "endpoint": [36, 57, 124, 132, 206, 214, 263, 282, 287, 288, 289, 296, 316, 331, 335, 367, 458, 509, 584, 588], "biconnect": [36, 326, 335, 584], "compon": [36, 326, 333, 335, 337, 339, 341, 345, 355, 356, 368, 372, 375, 376, 377, 404, 459, 464, 467, 468, 469, 522, 526, 529, 530, 543, 579, 584], "belong": [36, 335, 544, 584], "float": [40, 48, 73, 119, 120, 201, 202, 277, 278, 317, 319, 320, 321, 322, 323, 327, 329, 330, 336, 340, 351, 352, 357, 359, 360, 361, 362, 363, 365, 366, 369, 371, 377, 378, 379, 380, 382, 384, 385, 386, 389, 390, 395, 396, 397, 398, 400, 402, 404, 405, 406, 409, 410, 412, 415, 416, 417, 418, 419, 448, 450, 451, 452, 453, 454, 456, 457, 461, 463, 469, 470, 471, 472, 474, 475, 476, 477, 482, 483, 489, 490, 491, 492, 495, 497, 500, 501, 515, 516, 521, 522, 523, 524, 532, 534, 535, 537, 539, 540, 541, 542, 547, 550, 551, 554, 578, 582, 583, 584, 585], "between": [40, 48, 89, 91, 97, 98, 106, 108, 121, 122, 133, 134, 135, 136, 138, 152, 154, 156, 157, 158, 162, 166, 167, 171, 173, 179, 180, 188, 190, 203, 204, 215, 216, 217, 218, 220, 234, 236, 238, 239, 240, 244, 248, 249, 253, 254, 255, 256, 259, 263, 268, 270, 272, 273, 279, 280, 284, 298, 300, 304, 307, 312, 317, 318, 323, 324, 327, 331, 341, 357, 358, 363, 364, 365, 367, 372, 381, 382, 385, 386, 390, 398, 401, 402, 403, 409, 410, 411, 412, 414, 415, 418, 419, 425, 427, 429, 431, 432, 434, 435, 441, 448, 449, 454, 455, 456, 458, 464, 473, 474, 476, 477, 483, 484, 492, 496, 497, 498, 499, 500, 501, 516, 518, 521, 532, 534, 540, 541, 550, 551, 552, 553, 554, 555, 564, 580, 581, 582, 583, 584, 586, 587, 588], "score": [40, 48, 331, 353, 367, 381, 382, 390, 414, 415, 458, 473, 474, 483, 500, 503, 516, 531, 532, 570, 584], "edgelist": [44, 107, 189, 269, 339, 355, 375, 383, 467, 494, 583, 584], "instanc": [44, 59, 102, 160, 171, 184, 242, 253, 263, 311, 312, 584, 586], "hexagonal_lattice_graph": [44, 584, 585], "third_chain": 44, "chains_it": 44, "first_chain": 44, "second_chain": 44, "greedi": [45, 478, 479, 517, 584], "degre": [45, 129, 147, 211, 229, 312, 328, 347, 353, 374, 407, 466, 478, 479, 486, 503, 514, 518, 531, 583, 584, 588], "largest": [45, 166, 248, 478, 479, 584], "satur": [45, 478, 479, 584], "dsatur": [45, 478, 479], "independentset": [45, 478, 479, 584], "gi": 45, "9": [45, 348, 439, 478, 581, 588], "adrian": [45, 478, 479], "kosowski": [45, 478, 479], "krzysztof": [45, 478, 479], "manuszewski": [45, 478, 479], "classic": [45, 478, 479, 586], "19": [45, 478, 479, 582, 584], "2004": [45, 478, 479], "isbn": [45, 478, 479], "8218": [45, 478, 479], "3458": [45, 478, 479], "4": [45, 89, 101, 113, 170, 171, 183, 195, 252, 253, 262, 275, 310, 312, 318, 319, 320, 321, 322, 358, 359, 360, 361, 362, 384, 385, 386, 391, 400, 409, 417, 418, 419, 421, 422, 425, 433, 439, 444, 445, 449, 475, 476, 477, 478, 479, 485, 486, 494, 495, 519, 538, 542, 547, 550, 581, 583, 585, 588], "attribut": [45, 89, 91, 161, 165, 171, 173, 243, 247, 253, 303, 306, 373, 393, 420, 465, 487, 525, 527, 533, 534, 536, 577, 578, 581, 584, 586], "weight": [52, 89, 101, 102, 103, 104, 107, 110, 111, 115, 117, 118, 119, 120, 139, 151, 156, 157, 158, 160, 161, 162, 166, 167, 168, 169, 170, 171, 183, 184, 185, 186, 189, 192, 193, 197, 199, 200, 201, 202, 221, 233, 238, 239, 240, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255, 256, 262, 263, 264, 266, 269, 272, 273, 276, 277, 278, 297, 303, 304, 305, 307, 308, 309, 310, 316, 317, 319, 320, 321, 322, 323, 328, 329, 330, 338, 342, 343, 349, 350, 351, 352, 357, 359, 360, 361, 362, 363, 365, 366, 370, 377, 378, 379, 380, 382, 384, 385, 386, 389, 390, 398, 401, 404, 405, 406, 407, 412, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 438, 440, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 456, 457, 462, 469, 470, 471, 472, 474, 475, 476, 477, 482, 483, 492, 496, 500, 516, 520, 521, 522, 523, 532, 540, 541, 542, 553, 577, 578, 580, 582, 583, 584, 586, 588], "effici": [52, 81, 391, 409, 485, 519, 520, 550, 584], "behav": [52, 81, 89, 102, 184, 263, 318, 324, 358, 364, 449, 455, 588], "drop": [52, 81, 581, 584], "replac": [52, 81, 102, 161, 162, 184, 243, 244, 263, 303, 304, 581, 584, 586, 588], "readonli": [52, 81], "edge_indic": [56, 584, 588], "edges_it": [56, 57, 73, 77, 316], "node_index_a": [57, 316], "node_index_b": [57, 316], "edge_list": [57, 108, 110, 111, 170, 190, 192, 193, 252, 263, 270, 272, 273, 310, 484, 578, 583, 584], "block": [59, 312, 411, 552, 584], "partit": [59, 311, 392, 542, 584], "a_partition_block": [59, 311], "block_it": 59, "another_el": 59, "the_second_el": 59, "node_indic": [67, 89, 142, 171, 224, 253, 291, 478, 484, 584, 585, 588], "nodes_it": 67, "though": [68, 312], "unord": [68, 162, 244, 304, 495, 588], "when": [68, 89, 91, 93, 101, 102, 121, 122, 123, 124, 125, 138, 162, 166, 167, 168, 171, 173, 175, 183, 184, 203, 204, 205, 206, 207, 220, 244, 248, 249, 250, 253, 256, 262, 263, 279, 280, 281, 282, 283, 304, 307, 308, 312, 319, 320, 323, 329, 330, 359, 360, 361, 362, 363, 365, 366, 378, 379, 382, 389, 390, 405, 408, 409, 415, 416, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 456, 457, 470, 471, 474, 478, 479, 482, 483, 500, 501, 516, 517, 518, 521, 525, 526, 532, 536, 541, 549, 550, 558, 565, 570, 577, 581, 583, 584, 588], "sort": [68, 141, 223, 312, 518, 544, 545, 584, 586], "24": [73, 580, 584], "first_target": [73, 77], "first_path": [73, 77], "second_target": [73, 77], "second_path": [73, 77], "node_c": [77, 101, 183, 262, 484, 584], "node_a": [77, 101, 106, 121, 122, 126, 183, 188, 203, 204, 208, 254, 255, 256, 262, 268, 272, 273, 279, 280, 284, 298, 484, 583, 584], "node_b": [77, 101, 106, 121, 122, 126, 183, 188, 203, 204, 208, 254, 255, 256, 262, 268, 272, 273, 279, 280, 284, 298, 484, 583, 584], "2d": 81, "posit": [81, 138, 162, 220, 244, 304, 319, 320, 321, 322, 336, 340, 349, 350, 351, 352, 359, 360, 361, 362, 369, 371, 387, 388, 395, 396, 397, 398, 403, 450, 451, 452, 453, 461, 463, 480, 481, 489, 490, 491, 492, 498, 507, 508, 512, 534, 535, 537, 539, 540, 555, 578, 584], "check_cycl": [89, 102, 171, 184, 312, 584, 586], "fals": [89, 98, 102, 112, 126, 127, 128, 131, 132, 141, 151, 156, 158, 161, 166, 171, 180, 184, 194, 208, 209, 210, 213, 214, 223, 233, 238, 240, 243, 248, 253, 254, 255, 256, 272, 273, 274, 284, 285, 286, 297, 303, 312, 315, 323, 330, 331, 336, 342, 343, 363, 367, 369, 380, 384, 385, 386, 387, 388, 397, 398, 401, 402, 403, 406, 412, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 461, 480, 481, 491, 492, 496, 497, 498, 499, 504, 506, 507, 508, 512, 517, 518, 520, 524, 525, 539, 540, 553, 554, 555, 578, 583, 584, 586, 588], "multigraph": [89, 91, 97, 98, 102, 108, 166, 171, 173, 179, 180, 184, 190, 248, 253, 254, 255, 256, 259, 263, 270, 272, 273, 344, 373, 382, 390, 408, 415, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 460, 465, 474, 483, 500, 516, 520, 532, 549, 581, 583, 584], "true": [89, 91, 98, 101, 102, 117, 118, 126, 127, 128, 131, 132, 137, 151, 156, 158, 161, 162, 166, 171, 173, 180, 183, 184, 199, 200, 208, 209, 210, 213, 214, 219, 233, 238, 240, 243, 244, 248, 253, 262, 284, 285, 286, 297, 303, 304, 312, 315, 327, 330, 331, 336, 341, 342, 344, 365, 367, 369, 372, 373, 379, 380, 381, 384, 385, 386, 387, 388, 397, 398, 401, 402, 403, 406, 412, 414, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 456, 458, 461, 464, 465, 471, 473, 480, 481, 491, 492, 496, 497, 498, 499, 500, 504, 506, 507, 508, 512, 517, 518, 520, 524, 525, 539, 540, 553, 554, 555, 578, 583, 584, 585, 586, 588], "attr": [89, 161, 171, 243, 253, 303, 393, 420, 487, 527, 533, 536, 583, 584, 588], "none": [89, 93, 101, 102, 110, 111, 115, 138, 151, 156, 158, 161, 162, 165, 166, 170, 171, 175, 183, 184, 192, 193, 197, 220, 233, 238, 240, 243, 244, 247, 248, 252, 253, 256, 262, 263, 272, 273, 276, 297, 303, 304, 306, 310, 312, 317, 318, 323, 324, 328, 329, 330, 333, 336, 339, 340, 342, 348, 349, 350, 355, 356, 357, 358, 363, 364, 366, 368, 369, 371, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 396, 397, 398, 403, 405, 406, 407, 408, 409, 410, 411, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 438, 440, 444, 445, 446, 447, 448, 449, 454, 455, 457, 459, 460, 461, 463, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 487, 490, 491, 492, 494, 498, 500, 501, 507, 512, 515, 516, 518, 519, 520, 522, 523, 527, 532, 533, 534, 535, 536, 537, 539, 540, 542, 548, 549, 550, 551, 552, 555, 577, 578, 583, 584, 586, 588], "node_count_hint": [89, 171, 253, 584], "edge_count_hint": [89, 171, 253, 584], "direct": [89, 98, 106, 141, 160, 166, 171, 180, 188, 223, 242, 248, 312, 313, 325, 333, 354, 356, 357, 368, 373, 374, 376, 377, 380, 384, 385, 386, 387, 388, 398, 400, 401, 402, 408, 409, 410, 411, 412, 413, 419, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 441, 492, 502, 514, 518, 520, 525, 530, 536, 540, 543, 546, 548, 554, 561, 578, 579, 581, 583, 584, 587], "acycl": [89, 171, 546, 581, 584, 587], "alia": [89, 584], "ident": [89, 138, 142, 156, 157, 220, 224, 238, 239, 291, 421, 583, 584, 588], "interchang": 89, "sole": [89, 584], "backward": [89, 142, 224, 291, 368, 376, 377, 459, 468, 469, 584], "prior": [89, 582, 583, 584], "releas": [89, 142, 224, 291, 581, 582, 583], "although": [89, 162, 171, 244, 253, 304, 584], "rare": [89, 171, 253], "stabl": [89, 171, 253, 391, 485, 519, 538, 584, 588], "lifetim": [89, 171, 253, 588], "hole": [89, 171, 253, 584, 588], "reus": [89, 171, 253, 588], "add_nodes_from": [89, 112, 113, 171, 194, 195, 253, 262, 274, 275, 583, 584, 586, 588], "rang": [89, 112, 113, 171, 194, 195, 253, 274, 275, 577, 584, 585, 586, 588], "remove_nod": [89, 171, 253, 588], "print": [89, 170, 171, 252, 253, 310, 312, 333, 356, 368, 376, 459, 468, 584, 585, 586, 588], "res_manu": [89, 171, 253], "add_par": [89, 91, 171, 173, 586], "6": [89, 171, 253, 382, 390, 398, 415, 431, 439, 442, 460, 474, 478, 479, 483, 486, 492, 516, 532, 540, 581, 586, 588], "ad": [89, 91, 92, 93, 101, 110, 111, 138, 139, 157, 158, 160, 166, 171, 173, 174, 175, 183, 192, 193, 220, 221, 239, 240, 242, 248, 253, 255, 256, 262, 272, 273, 328, 407, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 510, 583, 584, 586, 588], "new": [89, 90, 91, 92, 93, 94, 95, 96, 101, 102, 108, 119, 120, 138, 139, 151, 157, 158, 160, 161, 166, 171, 172, 173, 174, 175, 176, 177, 178, 183, 184, 190, 201, 202, 220, 221, 233, 239, 240, 242, 243, 248, 253, 255, 256, 257, 258, 262, 263, 270, 277, 278, 297, 303, 305, 314, 328, 338, 370, 390, 399, 401, 407, 462, 483, 484, 493, 496, 516, 523, 553, 582, 583, 586, 588], "nodeindic": [89, 95, 113, 140, 141, 142, 143, 149, 163, 171, 177, 195, 222, 223, 224, 225, 231, 245, 253, 258, 275, 290, 291, 292, 311, 327, 349, 351, 365, 391, 392, 416, 456, 485, 514, 519, 542, 545, 584, 588], "arbitrari": [89, 171, 253, 383, 416, 584], "data_payload": [89, 171, 253], "node_index": [89, 130, 148, 171, 212, 230, 253, 287, 296, 584], "add_nod": [89, 101, 102, 171, 183, 184, 253, 263, 484, 582, 583, 584, 586, 588], "real": [89, 171, 583, 586], "introduc": [89, 102, 171, 184, 263, 584, 586, 588], "By": [89, 119, 120, 131, 132, 156, 161, 171, 201, 202, 213, 214, 238, 243, 253, 277, 278, 303, 312, 317, 318, 324, 357, 358, 364, 380, 388, 402, 412, 448, 449, 455, 472, 481, 497, 512, 532, 554, 556, 563, 569, 577, 578, 584, 588], "disabl": [89, 171, 253, 312, 584], "creation": [89, 171, 253, 581, 588], "With": [89, 171, 583, 584, 586], "add_edg": [89, 130, 148, 171, 212, 230, 262, 287, 296, 484, 583, 584, 586, 588], "truli": [89, 171], "note": [89, 97, 98, 138, 152, 154, 161, 166, 171, 179, 180, 220, 234, 236, 243, 248, 259, 280, 298, 300, 303, 335, 338, 349, 350, 351, 352, 370, 388, 401, 442, 462, 478, 479, 481, 496, 512, 520, 553, 577, 578, 581, 582, 583, 588], "add_edges_from": [89, 93, 111, 112, 171, 175, 193, 194, 256, 262, 273, 274, 582, 583, 584, 588], "add_edges_from_no_data": [89, 110, 171, 192, 272, 583, 584], "extend_from_edge_list": [89, 171, 333, 356, 368, 376, 459, 468, 583, 584, 588], "extend_from_weighted_edge_list": [89, 160, 171, 242, 583, 584], "come": [89, 171, 518, 580, 586], "penalti": [89, 171], "grow": [89, 171, 253], "leverag": [89, 165, 171, 247, 306, 581, 584, 585, 588], "add_child": [89, 91, 101, 171, 173, 183, 586], "overhead": [89, 171, 586], "parallel": [89, 102, 108, 128, 138, 166, 167, 171, 184, 190, 210, 220, 248, 249, 253, 255, 263, 270, 273, 286, 307, 326, 331, 335, 337, 339, 344, 347, 348, 357, 367, 373, 374, 380, 381, 382, 384, 385, 386, 390, 391, 400, 402, 412, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 458, 465, 466, 472, 473, 474, 475, 476, 477, 483, 485, 494, 495, 497, 500, 516, 519, 520, 532, 547, 554, 584, 588], "kwarg": [89, 131, 132, 156, 171, 213, 214, 238, 253, 577, 578, 583, 584], "constructor": [89, 171, 253, 578, 584, 586, 588], "initi": [89, 171, 253, 312, 313, 314, 328, 339, 356, 376, 398, 407, 468, 492, 518, 540, 583, 584], "maximum": [89, 171, 253, 318, 324, 346, 357, 358, 364, 382, 390, 391, 392, 398, 408, 415, 422, 425, 448, 449, 455, 474, 483, 485, 486, 492, 500, 510, 516, 519, 520, 532, 540, 549, 578, 584], "32": [89, 171, 253, 577, 582, 584], "294": [89, 171, 253], "967": [89, 171, 253], "attempt": [89, 171, 253, 584, 586, 588], "than": [89, 115, 151, 171, 197, 233, 253, 276, 297, 315, 331, 335, 341, 346, 367, 372, 381, 382, 388, 390, 391, 393, 408, 414, 415, 422, 425, 429, 438, 440, 458, 464, 473, 474, 481, 483, 485, 487, 494, 500, 501, 512, 516, 519, 520, 527, 532, 538, 542, 546, 549, 583, 584, 585], "paramet": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 265, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 310, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 577, 578, 579, 583, 584], "bool": [89, 98, 102, 126, 127, 128, 131, 132, 137, 151, 156, 158, 166, 171, 180, 184, 208, 209, 210, 213, 214, 219, 233, 238, 240, 248, 253, 284, 285, 286, 297, 312, 330, 331, 336, 341, 367, 369, 372, 379, 380, 381, 387, 388, 397, 398, 401, 402, 403, 406, 411, 412, 414, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 458, 461, 464, 471, 473, 480, 481, 491, 492, 496, 497, 498, 499, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 517, 518, 520, 524, 525, 539, 540, 552, 553, 554, 555, 578], "runtim": [89, 171, 391, 485, 519, 584, 586], "detect": [89, 128, 171, 210, 286, 312, 584], "multgraph": 89, "place": [89, 160, 171, 242, 253, 307, 308, 328, 407, 534, 584, 588], "digraph": [89, 171, 357, 583], "dagwouldcycl": [89, 102, 171, 184], "parent": [90, 91, 92, 93, 96, 98, 117, 130, 150, 152, 172, 173, 174, 175, 178, 180, 199, 212, 232, 234, 254, 256, 287, 298, 332, 334, 584], "obj": [90, 92, 94, 96, 102, 115, 172, 174, 176, 178, 184, 197, 255, 257, 263, 276], "child": [90, 91, 92, 93, 96, 118, 148, 152, 164, 172, 173, 174, 175, 178, 200, 230, 234, 246, 254, 256, 296, 298], "int": [90, 91, 92, 93, 94, 95, 96, 97, 98, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 147, 148, 149, 150, 152, 153, 155, 156, 157, 158, 162, 163, 164, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 244, 245, 246, 249, 250, 253, 254, 255, 256, 257, 258, 259, 265, 276, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 296, 298, 299, 301, 304, 307, 308, 312, 313, 318, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 339, 346, 348, 350, 351, 352, 354, 355, 356, 358, 363, 364, 365, 366, 367, 368, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 394, 395, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 454, 455, 456, 457, 458, 459, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 488, 489, 492, 494, 497, 498, 499, 500, 501, 502, 507, 512, 515, 516, 518, 520, 526, 528, 529, 530, 532, 534, 535, 540, 549, 550, 551, 552, 554, 555, 578, 584], "attach": [90, 92, 93, 94, 95, 96, 172, 174, 175, 176, 177, 178, 255, 256, 257, 258, 328, 407, 583, 584], "duplic": [91, 173, 584], "obj_list": [92, 93, 95, 174, 175, 177, 255, 256, 258, 273], "neighbor": [97, 98, 117, 118, 141, 149, 150, 163, 164, 179, 180, 199, 200, 223, 231, 232, 245, 246, 259, 288, 355, 375, 467, 478, 479, 514, 583, 584], "dictionari": [97, 98, 101, 165, 179, 180, 183, 247, 259, 262, 306, 319, 320, 321, 322, 329, 330, 331, 335, 338, 341, 347, 359, 360, 361, 362, 366, 370, 372, 374, 378, 379, 384, 389, 390, 393, 398, 399, 403, 405, 406, 417, 420, 450, 451, 452, 453, 457, 460, 462, 464, 466, 470, 471, 475, 478, 479, 482, 483, 484, 486, 487, 492, 493, 498, 515, 516, 525, 527, 532, 533, 540, 548, 555, 577, 578, 583, 584], "adjac": [97, 98, 114, 119, 120, 179, 180, 196, 201, 202, 259, 277, 278, 317, 357, 448, 484, 583, 584], "inbound": [97, 98, 129, 179, 180, 211, 259, 265], "outbound": [97, 98, 147, 179, 180, 229, 259, 584], "dat": [97, 179], "two": [97, 98, 139, 151, 156, 166, 179, 180, 221, 233, 238, 248, 263, 297, 323, 336, 338, 340, 342, 363, 369, 370, 371, 382, 385, 386, 390, 395, 396, 397, 399, 401, 403, 409, 410, 415, 418, 419, 421, 427, 434, 435, 436, 454, 461, 462, 463, 474, 476, 477, 483, 484, 489, 490, 491, 493, 496, 498, 500, 509, 516, 532, 534, 535, 537, 539, 542, 548, 550, 551, 553, 555, 580, 584, 588], "share": [97, 98, 103, 179, 180, 185, 259, 263, 264, 401, 496, 509, 553, 584], "specifi": [97, 98, 102, 106, 108, 129, 133, 134, 135, 136, 138, 147, 152, 154, 162, 165, 166, 170, 171, 179, 180, 184, 188, 190, 211, 215, 216, 217, 218, 220, 229, 234, 236, 244, 247, 248, 252, 253, 259, 263, 265, 268, 270, 298, 300, 304, 306, 310, 317, 323, 328, 329, 330, 333, 336, 339, 355, 356, 357, 363, 366, 368, 369, 375, 376, 377, 378, 379, 382, 383, 387, 388, 389, 390, 393, 398, 402, 403, 404, 405, 406, 407, 415, 417, 418, 420, 421, 423, 424, 426, 427, 429, 432, 433, 434, 435, 440, 443, 444, 445, 446, 447, 448, 454, 457, 459, 461, 467, 468, 469, 470, 471, 474, 478, 479, 480, 481, 482, 483, 487, 492, 497, 498, 500, 507, 508, 512, 515, 516, 520, 522, 523, 527, 532, 533, 534, 540, 542, 554, 555, 577, 578, 584, 588], "children": [98, 148, 180, 230, 332, 334, 438], "clear": [100, 182, 261, 584], "leav": [100, 102, 182, 184, 261, 263, 588], "intact": [100, 182, 261], "node_map": [101, 183, 262, 584], "node_map_func": [101, 183, 262], "edge_map_func": [101, 183, 262], "weight2": [101, 183, 262], "callabl": [101, 102, 114, 116, 138, 156, 158, 162, 165, 166, 170, 183, 184, 196, 198, 220, 238, 240, 244, 247, 248, 252, 262, 263, 304, 306, 310, 317, 319, 320, 321, 322, 327, 329, 349, 350, 351, 352, 357, 359, 360, 361, 362, 365, 366, 378, 382, 384, 385, 386, 387, 388, 389, 390, 393, 403, 405, 415, 416, 417, 418, 419, 420, 448, 450, 451, 452, 453, 456, 457, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 487, 498, 500, 507, 508, 512, 515, 516, 518, 520, 521, 522, 523, 524, 527, 532, 533, 541, 542, 555, 577, 584], "singl": [101, 102, 114, 116, 138, 166, 183, 184, 196, 198, 220, 248, 259, 262, 263, 319, 320, 321, 322, 323, 329, 330, 331, 342, 343, 355, 359, 360, 361, 362, 363, 366, 367, 377, 378, 379, 381, 398, 404, 405, 406, 414, 430, 431, 441, 442, 450, 451, 452, 453, 454, 457, 458, 467, 469, 470, 471, 473, 492, 494, 495, 518, 520, 540, 541, 578, 581, 584, 585, 586, 588], "new_node_id": [101, 183, 262], "correspond": [101, 183, 385, 386, 418, 419, 476, 477, 484, 584, 588], "build": [101, 183, 262, 581, 582, 583, 584, 588], "visual": [101, 151, 165, 183, 233, 247, 262, 297, 306, 370, 399, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 462, 478, 493, 581, 584, 586, 588], "mpl_draw": [101, 151, 183, 233, 262, 297, 370, 399, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 444, 445, 446, 447, 462, 478, 493, 583, 584, 585, 586, 588], "b": [101, 112, 183, 194, 262, 274, 411, 431, 442, 484, 552, 582, 584, 586, 588], "c": [101, 112, 183, 194, 262, 274, 341, 372, 400, 464, 484, 486, 495, 500, 522, 580, 582, 583, 584, 586, 588], "with_label": [101, 183, 262, 578, 584, 588], "label": [101, 151, 183, 233, 262, 297, 335, 355, 375, 467, 578, 583, 584, 585, 586, 588], "str": [101, 151, 165, 170, 183, 233, 247, 252, 262, 297, 306, 310, 393, 420, 487, 527, 533, 536, 577, 578, 584, 586, 588], "edge_label": [101, 183, 262, 578, 583, 584, 588], "figur": [101, 151, 183, 233, 262, 297, 370, 399, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 444, 445, 446, 447, 462, 478, 493, 578, 584, 585, 586, 588], "size": [101, 151, 165, 171, 183, 233, 247, 253, 262, 297, 306, 370, 399, 411, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 462, 478, 493, 541, 552, 577, 578, 584, 585, 586, 588], "640x480": [101, 151, 183, 233, 262, 297, 370, 399, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 444, 445, 446, 447, 462, 478, 493, 578, 584, 585, 586, 588], "ax": [101, 151, 183, 233, 262, 297, 370, 399, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 444, 445, 446, 447, 462, 478, 493, 578, 584, 585, 586, 588], "second": [101, 121, 122, 167, 183, 203, 204, 249, 262, 279, 280, 284, 287, 288, 307, 338, 370, 386, 387, 388, 399, 401, 403, 419, 462, 477, 480, 481, 493, 496, 498, 500, 507, 508, 512, 553, 555, 580, 584, 588], "other_graph": [101, 183, 262, 584], "node_d": [101, 183, 262, 484, 584], "weight_combo_fn": [102, 166, 184, 248, 263, 584], "substitut": [102, 162, 184, 244, 263, 304], "ignor": [102, 108, 155, 156, 157, 158, 159, 161, 184, 190, 237, 238, 239, 240, 241, 243, 263, 270, 301, 302, 303, 342, 421, 423, 424, 426, 427, 429, 433, 434, 435, 440, 444, 445, 446, 447, 542, 584, 586], "empti": [102, 131, 132, 184, 213, 214, 263, 288, 289, 314, 383, 391, 403, 408, 409, 413, 428, 437, 485, 498, 502, 505, 513, 519, 549, 550, 555, 584, 586, 588], "slower": [102, 184, 263], "associ": [102, 165, 184, 247, 263, 306, 577, 583, 584], "valid": [102, 184, 312, 313, 439, 478, 479, 509, 510, 578, 584], "contract": [102, 184, 263, 584], "inherit": [102, 184], "merg": [102, 139, 184, 221, 263, 401, 496, 553, 584], "occur": [102, 184, 255, 263, 273, 349, 350, 351, 352, 520, 584], "incom": [102, 131, 132, 156, 157, 158, 184, 213, 214, 238, 239, 240, 312, 349, 350, 351, 352, 503, 584], "outgo": [102, 131, 132, 156, 157, 158, 184, 213, 214, 238, 239, 240, 531, 584], "unspecifi": [102, 184, 263], "choos": [102, 184, 263, 478, 479, 578, 583, 584], "arbitrarili": [102, 184, 263, 333, 339, 355, 356, 368, 375, 376, 377, 404, 459, 467, 468, 469], "subject": [102, 184, 263], "chang": [102, 139, 158, 184, 221, 240, 263, 398, 439, 492, 540, 582, 584, 588], "shallow": [103, 185, 264, 584], "origin": [103, 133, 134, 135, 136, 166, 185, 215, 216, 217, 218, 248, 264, 364, 377, 404, 455, 469, 546, 581, 583, 584, 586], "edgeindexmap": [104, 131, 186, 213, 266, 288, 584, 588], "edgeindic": [105, 106, 112, 132, 187, 188, 194, 214, 267, 268, 274, 289, 584, 588], "induc": [108, 190, 270, 388, 403, 481, 498, 512, 541, 555, 584], "subgraph": [108, 190, 270, 335, 346, 347, 374, 388, 403, 466, 481, 498, 507, 512, 517, 541, 555, 581, 584], "incid": [108, 131, 132, 190, 213, 214, 270, 288, 289, 326, 335, 584, 588], "silent": [108, 161, 190, 243, 270, 303], "extend": [110, 111, 192, 193, 272, 273, 328, 407, 584], "present": [110, 111, 123, 124, 131, 132, 138, 155, 156, 157, 158, 159, 161, 168, 192, 193, 205, 206, 213, 214, 220, 237, 238, 239, 240, 241, 243, 250, 272, 273, 281, 282, 288, 289, 301, 302, 303, 308, 391, 485, 519], "filter_funct": [112, 113, 194, 195, 274, 275], "filter": [112, 113, 117, 118, 194, 195, 199, 200, 274, 275, 342, 343, 584], "criteria": [112, 113, 194, 195, 274, 275, 584], "boolean": [112, 113, 114, 116, 117, 118, 194, 195, 196, 198, 199, 200, 274, 275, 327, 342, 343, 365, 403, 456, 498, 500, 520, 555, 584], "fit": [112, 113, 194, 195, 274, 275, 584], "complete_graph": [112, 194, 274, 444, 584], "def": [112, 113, 194, 195, 274, 275, 333, 356, 368, 376, 386, 419, 459, 468, 477, 577, 583, 584, 585, 586, 588], "my_filter_funct": [112, 113, 194, 195, 274, 275, 584], "assert": [112, 113, 141, 160, 194, 195, 223, 242, 274, 275, 479, 484, 486, 583, 584], "predic": [114, 116, 196, 198], "within": [115, 197, 276, 541, 584], "worst": [115, 197, 276], "o": [115, 156, 157, 158, 165, 170, 197, 238, 239, 240, 247, 252, 262, 276, 306, 310, 389, 401, 408, 409, 411, 460, 482, 496, 501, 515, 520, 549, 550, 552, 553, 578, 584], "equal": [115, 139, 156, 158, 197, 221, 238, 240, 276, 318, 319, 320, 321, 322, 358, 359, 360, 361, 362, 384, 385, 386, 387, 388, 391, 400, 401, 417, 418, 419, 449, 475, 476, 477, 480, 481, 485, 494, 495, 496, 507, 508, 512, 519, 547, 553, 584], "found": [115, 197, 276, 349, 350, 351, 352, 355, 375, 383, 391, 403, 467, 485, 498, 518, 519, 520, 538, 555, 582, 584, 585, 586], "predecessor": [116, 117, 133, 134, 141, 149, 156, 157, 158, 198, 199, 215, 216, 223, 231, 238, 239, 240, 314, 325, 332, 564, 584], "filter_fn": [117, 118, 199, 200, 342, 343, 586], "whose": [117, 118, 199, 200, 326, 337, 353, 367, 381, 382, 390, 410, 414, 415, 458, 473, 474, 483, 500, 503, 516, 517, 531, 532, 541, 551, 557, 560, 584], "successor": [118, 135, 136, 140, 141, 156, 157, 158, 163, 200, 217, 218, 222, 223, 238, 239, 240, 245, 313, 334, 343, 354, 386, 419, 477, 584], "static": [119, 120, 151, 201, 202, 233, 277, 278, 297, 583, 584], "matrix": [119, 120, 201, 202, 277, 278, 317, 357, 380, 385, 386, 402, 412, 418, 419, 448, 472, 476, 477, 497, 532, 554, 584, 586], "null_valu": [119, 120, 201, 202, 277, 278, 317, 357, 380, 412, 448, 472, 584], "element": [119, 120, 151, 201, 202, 233, 277, 278, 288, 297, 338, 370, 380, 399, 424, 427, 434, 435, 446, 447, 462, 472, 493, 584], "construct": [119, 120, 171, 201, 202, 253, 277, 278, 484, 486, 517, 584, 588], "input": [119, 120, 156, 201, 202, 238, 277, 278, 313, 317, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 335, 337, 338, 339, 341, 347, 348, 349, 350, 351, 352, 353, 355, 357, 359, 360, 361, 362, 365, 366, 367, 370, 372, 374, 378, 380, 381, 382, 383, 390, 399, 400, 401, 402, 405, 406, 407, 412, 414, 415, 416, 422, 425, 448, 450, 451, 452, 453, 456, 457, 458, 460, 462, 464, 466, 467, 470, 473, 474, 478, 479, 483, 484, 486, 493, 494, 495, 496, 499, 500, 503, 506, 514, 516, 521, 524, 525, 531, 532, 536, 542, 543, 547, 548, 553, 554, 583, 584, 586, 588], "from_complex_adjacency_matrix": [119, 201, 277, 584], "numpi": [119, 120, 201, 202, 277, 278, 317, 357, 380, 385, 386, 412, 418, 419, 448, 472, 476, 477, 582, 583, 584], "float64": [119, 120, 201, 202, 277, 278, 583, 584], "complex": [119, 120, 156, 157, 158, 201, 202, 238, 239, 240, 277, 278, 400, 408, 411, 501, 502, 549, 552, 581, 584], "complex128": [119, 120, 201, 202, 277, 278], "ndarrai": [119, 120, 201, 202, 277, 278, 317, 357, 380, 385, 386, 411, 412, 418, 419, 448, 472, 476, 477, 552], "arrai": [119, 120, 201, 202, 277, 278, 317, 357, 411, 448, 552, 578, 583, 584], "dimension": [119, 120, 201, 202, 277, 278, 583, 584], "np": [119, 120, 201, 202, 277, 278, 385, 386, 409, 411, 418, 419, 476, 477, 478, 550, 552, 583, 584], "null": [119, 120, 201, 202, 277, 278, 317, 357, 380, 412, 448, 472, 584], "0j": [120, 202, 278, 584], "from_adjacency_matrix": [120, 202, 278, 583, 584, 588], "noedgebetweennod": [121, 122, 152, 154, 167, 203, 204, 234, 236, 249, 279, 280, 298, 300, 307], "edge_index": [123, 124, 168, 205, 206, 250, 281, 282, 308, 584, 588], "indexerror": [123, 124, 125, 168, 205, 206, 207, 250, 281, 282, 283, 308, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 438, 439, 440, 441, 442, 444, 445, 446, 447, 584], "invalid": [125, 207, 283, 312, 347, 478, 479, 526, 547, 584], "destin": [126, 208, 330, 379, 389, 406, 451, 453, 471, 482, 515, 584], "recreat": [130, 148, 212, 230, 287, 296, 584], "param": [130, 212, 331, 367, 381, 414, 458, 473], "parent_index": [130, 212, 287], "edge_data": [130, 148, 212, 230, 287, 296], "weightededgelist": [130, 148, 169, 212, 230, 251, 287, 296, 309, 522, 584], "all_edg": [131, 132, 213, 214], "later": [132, 214, 289], "retriev": [132, 214, 289, 403, 498, 555, 584], "get_edge_data_by_index": [132, 214, 289, 584, 588], "get_edge_endpoints_by_index": [132, 214, 289, 584, 588], "ref_nod": [133, 134, 135, 136, 215, 216, 217, 218], "essenti": [133, 134, 135, 136, 215, 216, 217, 218], "copi": [133, 134, 135, 136, 138, 161, 162, 215, 216, 217, 218, 220, 243, 244, 303, 304, 305, 583, 584], "symmetr": [137, 138, 219, 220, 552, 584], "edge_payload_fn": [138, 220], "make": [138, 220, 320, 322, 330, 360, 362, 379, 406, 451, 453, 471, 578, 582, 584, 586, 588], "revers": [138, 220, 312, 518, 583, 584], "guarante": [138, 158, 220, 240, 382, 390, 391, 415, 474, 483, 485, 500, 516, 519, 532, 544, 583, 584, 585, 588], "execut": [138, 220, 384, 385, 386, 391, 417, 418, 419, 475, 476, 477, 485, 519, 584, 586], "edge_payload": [138, 220], "typic": [138, 220, 583, 588], "lower": [138, 220, 397, 409, 491, 539, 550, 584], "v": [139, 221, 331, 333, 341, 355, 356, 367, 368, 372, 375, 376, 377, 381, 389, 402, 404, 411, 414, 436, 458, 459, 464, 467, 468, 469, 473, 482, 497, 501, 515, 518, 546, 552, 554, 558, 559, 564, 565, 566, 570, 574, 578, 584, 585, 586], "successor_indic": [140, 222, 584], "agnost": [141, 223], "undirect": [141, 166, 223, 248, 253, 287, 296, 326, 330, 333, 335, 337, 339, 345, 355, 356, 370, 379, 380, 384, 385, 386, 399, 402, 406, 412, 419, 421, 422, 423, 424, 437, 440, 441, 442, 443, 444, 445, 446, 447, 459, 462, 465, 467, 468, 469, 471, 472, 480, 481, 493, 495, 496, 499, 501, 511, 520, 522, 523, 529, 549, 550, 551, 552, 554, 561, 564, 567, 584, 586, 588], "thereon": [141, 223], "directed_cycle_graph": [141, 223, 584, 586], "num_nod": [141, 223, 408, 409, 423, 424, 426, 427, 433, 434, 435, 438, 445, 446, 447, 534, 549, 550, 584], "10": [141, 223, 339, 341, 382, 390, 415, 431, 434, 435, 439, 442, 446, 447, 474, 483, 511, 516, 538, 541, 578, 581, 582, 585], "bidirect": [141, 166, 223, 248, 305, 380, 384, 385, 386, 402, 412, 419, 425, 427, 429, 430, 431, 432, 434, 435, 441, 554, 584], "same_neighbor": [141, 223], "to_undirect": [141, 223, 584], "prefer": [142, 224, 291], "earlier": [142, 224, 291, 368, 376, 377, 459, 468, 469, 584, 586], "child_index": [148, 230, 296], "delimin": [151, 170, 233, 252, 297, 310], "file": [151, 165, 170, 233, 247, 252, 297, 306, 310, 393, 420, 487, 527, 536, 577, 583, 584, 588], "separ": [151, 233, 297, 577, 583, 584], "delimit": [151, 233, 297], "3rd": [151, 233, 297], "charact": [151, 170, 233, 252, 297, 310, 584], "whitespac": [151, 233, 297, 584], "field": [151, 233, 297, 393, 487, 527, 536], "uniqu": [151, 233, 297, 423, 426, 583, 584, 588], "identifi": [151, 153, 233, 235, 288, 297, 299, 584, 588], "tempfil": [151, 165, 170, 233, 247, 252, 262, 297, 306, 310, 584, 588], "namedtemporaryfil": [151, 233, 297, 584, 588], "wt": [151, 233, 297, 584, 588], "fd": [151, 233, 297, 584, 588], "flush": [151, 233, 297, 584, 588], "index_list": [154, 159, 236, 241, 300, 302], "pair": [154, 157, 158, 236, 239, 240, 300, 305, 318, 331, 337, 358, 367, 381, 384, 385, 386, 391, 398, 402, 414, 417, 418, 419, 423, 426, 432, 443, 449, 458, 473, 475, 476, 477, 485, 492, 495, 497, 501, 519, 540, 541, 554, 581, 584, 585, 588], "effect": [155, 156, 157, 158, 237, 238, 239, 240, 301, 408, 549], "use_outgo": [156, 158, 238, 240], "retain": [156, 238, 584], "minimum": [156, 157, 158, 238, 239, 240, 318, 324, 357, 358, 364, 448, 449, 455, 522, 523, 541, 542, 578, 584], "mathcal": [156, 157, 158, 238, 239, 240, 401, 496, 553, 584], "e_i": [156, 157, 158, 238, 239, 240], "e_o": [156, 157, 158, 238, 239, 240], "respect": [156, 238, 339, 401, 408, 409, 496, 549, 550, 553, 580, 583, 584, 586], "cast": [156, 238, 317, 357, 384, 385, 386, 417, 418, 419, 448, 475, 476, 477, 521, 522, 523, 541, 578, 584], "hashabl": [156, 158, 238, 240, 583, 584, 588], "quantiti": [156, 238], "remove_node_retain_edges_by_kei": [156, 238, 584], "referenti": [156, 238, 584], "remove_node_retain_edges_by_id": [156, 238, 584], "lambda": [156, 165, 238, 247, 306, 317, 349, 350, 351, 352, 357, 384, 385, 386, 387, 388, 391, 417, 418, 419, 430, 431, 441, 442, 448, 475, 476, 477, 480, 481, 485, 507, 508, 512, 519, 520, 522, 523, 542, 578, 583, 584, 586], "in_edg": [156, 238, 584], "out_edg": [156, 238, 584, 586], "had": [156, 238, 312, 313, 584], "consequ": [157, 158, 239, 240], "exact": [158, 240, 584], "determinist": [158, 162, 240, 244, 304, 584], "drawn": [158, 240, 511, 578], "exactli": [158, 240, 342, 346, 584], "position": [158, 240], "relev": [158, 240, 584, 585], "opposit": [160, 242, 518], "weighted_edge_list": [160, 242, 316, 583, 584], "preserve_attr": [161, 243, 303], "edge_map_fn": [162, 244, 304, 584], "node_filt": [162, 244, 304], "edge_weight_map": [162, 244, 304], "nodemap": [162, 244, 304, 403, 498, 555, 584], "node_attr": [165, 247, 306, 393, 420, 487, 527, 533, 577, 584], "edge_attr": [165, 247, 306, 393, 420, 487, 527, 533, 584], "graph_attr": [165, 247, 306, 393, 420, 487, 527, 533, 577], "filenam": [165, 247, 306, 577], "dot": [165, 247, 306, 577, 584], "typeerror": [165, 170, 247, 252, 306, 310, 347, 368, 376, 377, 432, 439, 443, 459, 468, 469, 547, 584], "unfortun": [165, 247, 306], "graphviz": [165, 247, 306, 577, 583, 584, 585, 588], "pydot": [165, 247, 262, 306, 577, 583, 584], "pil": [165, 247, 262, 306, 430, 431, 441, 442, 577, 584, 585, 586, 588], "directed_gnp_random_graph": [165, 247, 411, 584], "15": [165, 247, 306, 438, 439, 541, 581, 585], "25": [165, 247, 306, 331, 367, 458, 578, 584], "dot_str": [165, 247, 306, 584], "fillcolor": [165, 247, 306, 430, 431, 441, 442, 577, 584, 585], "lightblu": [165, 247, 306, 430, 431, 441, 442, 584], "style": [165, 247, 306, 430, 431, 441, 442, 577, 578, 584, 585, 588], "fill": [165, 247, 306, 429, 430, 431, 440, 441, 442, 577, 584, 585, 588], "graph_from_dot_data": [165, 247, 306, 584], "temporarydirectori": [165, 247, 306, 584], "tmpdirnam": [165, 247, 306, 584], "tmp_path": [165, 247, 306, 584], "join": [165, 170, 247, 252, 306, 310, 421, 432, 443, 534, 584], "png": [165, 247, 306, 577, 584], "write_png": [165, 247, 306, 584], "pngimageplugin": [165, 247, 306, 430, 431, 441, 442, 577, 584, 585, 586, 588], "pngimagefil": [165, 247, 306, 430, 431, 441, 442, 577, 584, 585, 586, 588], "rgba": [165, 247, 306, 430, 431, 441, 442, 578, 584, 585, 586, 588], "1365x1115": 165, "condens": [166, 248, 584], "kept": [166, 248], "inplac": [167, 249, 584], "update_edge_by_index": [167, 249, 307, 584, 588], "weight_fn": [170, 252, 310, 317, 323, 330, 349, 350, 351, 352, 357, 363, 377, 379, 382, 384, 385, 386, 390, 398, 404, 406, 415, 417, 418, 419, 448, 454, 469, 471, 474, 475, 476, 477, 483, 492, 500, 516, 520, 521, 522, 523, 532, 540, 541, 542, 582, 583, 584], "callback": [170, 252, 310, 333, 356, 368, 376, 377, 404, 459, 468, 469, 478, 479, 578, 583, 584], "gettempdir": [170, 252, 310], "rt": [170, 252, 310], "edge_fil": [170, 252, 310], "metadata": [171, 253, 588], "keyword": [171, 253, 534, 584], "source_path": [171, 253], "tmp": [171, 253], "csv": [171, 253], "new_path": [171, 253], "old_path": [171, 253], "assign": [171, 253, 335, 357, 432, 443, 448, 478, 479, 503, 531, 532, 583, 584, 585, 588], "hint": [171, 253, 584], "alloc": [171, 253, 584], "enough": [171, 253], "capac": [171, 253], "store": [171, 253, 534, 536, 586, 588], "prepopul": [171, 253], "optim": [171, 253, 398, 478, 492, 494, 510, 540, 541, 570, 584, 586], "complet": [171, 253, 408, 409, 421, 423, 426, 433, 444, 445, 521, 541, 549, 550, 584, 586], "known": [171, 253, 392, 408, 409, 549, 550, 584, 586], "advanc": [171, 253], "1189x1019": 247, "last": [255, 273, 355, 375, 467, 580, 584, 586], "callabbl": 262, "node_": 262, "represent": [263, 398, 492, 540, 584, 586], "rest": [263, 584], "get_all_edge_data": 280, "alwai": [287, 288, 296, 408, 409, 549, 550, 583, 584], "easili": [288, 584, 588], "undirected_gnp_random_graph": [306, 552, 584], "732x443": 306, "path_graph": [310, 462, 493, 498, 555, 584, 586, 588], "partition_it": 311, "another_block": 311, "parititon_it": 311, "the_second_block": 311, "check_arg": [312, 584], "topolog": [312, 313, 349, 350, 351, 352, 518, 544, 545, 584, 586], "is_act": 312, "get_readi": [312, 313, 315], "sorter": [312, 584], "underli": 312, "mutat": [312, 333, 356, 368, 376, 377, 404, 459, 468, 469, 584, 588], "recommend": 312, "daghascycl": [312, 349, 350, 351, 352, 544, 545], "progress": [312, 314, 315], "regular": [312, 432, 439, 443, 518], "flip": 312, "ones": 312, "certainli": [312, 518], "notabl": [312, 518], "natur": [312, 518], "zero": [312, 409, 518, 532, 542, 550, 584], "valueerror": [312, 313, 323, 346, 358, 361, 362, 363, 365, 378, 379, 389, 416, 449, 452, 453, 454, 456, 470, 471, 482, 518, 521, 541, 584], "partial": [312, 313, 494, 518, 584], "themselv": [312, 313, 518], "were": [312, 518, 584, 586, 588], "circuit": [312, 538, 586], "meaning": [312, 584], "memori": [312, 584], "improv": [312, 341, 372, 391, 464, 485, 507, 519, 581, 584], "undefin": [312, 584], "unblock": 313, "yet": [313, 315, 584], "happen": 313, "amongst": 313, "further": [314, 584], "haven": 315, "default_weight": [317, 323, 330, 357, 363, 379, 382, 384, 385, 386, 390, 398, 406, 415, 417, 418, 419, 448, 454, 471, 474, 475, 476, 477, 483, 492, 516, 520, 522, 523, 532, 540], "sum": [317, 329, 331, 348, 357, 366, 367, 378, 381, 382, 390, 405, 414, 415, 448, 457, 458, 470, 473, 474, 483, 500, 516, 520, 532, 541, 584], "tell": [317, 357, 384, 385, 386, 417, 418, 419, 448, 475, 476, 477, 522, 523], "rust": [317, 357, 384, 385, 386, 417, 418, 419, 448, 475, 476, 477, 522, 523, 581, 582, 583, 584], "extract": [317, 357, 377, 384, 385, 386, 404, 417, 418, 419, 448, 469, 475, 476, 477, 522, 523], "numer": [317, 357, 384, 385, 386, 417, 418, 419, 448, 475, 476, 477, 522, 523, 578, 581, 583, 588], "absenc": [317, 357, 380, 412, 448, 472, 584], "rtype": [317, 331, 357, 367, 381, 414, 458, 473], "min_depth": [318, 324, 358, 364, 449, 455, 584], "cutoff": [318, 324, 358, 364, 449, 455, 584], "multithread": [318, 319, 320, 321, 322, 331, 358, 359, 360, 361, 362, 367, 380, 381, 384, 385, 386, 391, 400, 402, 412, 414, 417, 418, 419, 449, 458, 472, 473, 475, 476, 477, 485, 494, 495, 497, 519, 547, 554, 584], "thread": [318, 319, 320, 321, 322, 331, 358, 359, 360, 361, 362, 367, 380, 381, 384, 385, 386, 391, 400, 402, 412, 414, 417, 418, 419, 449, 458, 472, 473, 475, 476, 477, 485, 494, 495, 497, 519, 547, 554, 580, 584], "pool": [318, 319, 320, 321, 322, 358, 359, 360, 361, 362, 384, 385, 386, 391, 400, 417, 418, 419, 449, 475, 476, 477, 485, 494, 495, 519, 547], "cpu": [318, 319, 320, 321, 322, 358, 359, 360, 361, 362, 384, 385, 386, 391, 400, 402, 417, 418, 419, 449, 475, 476, 477, 485, 494, 495, 497, 519, 547, 554, 580, 582, 584], "tune": [318, 319, 320, 321, 322, 358, 359, 360, 361, 362, 380, 384, 385, 386, 391, 400, 402, 412, 417, 418, 419, 449, 472, 475, 476, 477, 485, 494, 495, 497, 519, 547, 554], "rayon_num_thread": [318, 319, 320, 321, 322, 331, 358, 359, 360, 361, 362, 367, 380, 381, 384, 385, 386, 391, 400, 402, 412, 414, 417, 418, 419, 449, 458, 472, 473, 475, 476, 477, 485, 494, 495, 497, 519, 547, 554, 584], "depth": [318, 324, 339, 355, 356, 358, 364, 375, 376, 449, 455, 467, 468, 517, 584], "regardless": [318, 324, 358, 364, 449, 455], "allpairsmultiplepathmap": [318, 358, 449], "edge_cost_fn": [319, 320, 321, 322, 327, 329, 359, 360, 361, 362, 365, 366, 378, 405, 416, 450, 451, 452, 453, 456, 457, 470, 524], "calcul": [319, 321, 331, 341, 359, 361, 367, 372, 374, 380, 381, 392, 402, 412, 414, 450, 452, 458, 464, 472, 473, 497, 554, 580, 582, 584], "bellman": [319, 320, 329, 330, 359, 360, 366, 416, 450, 451, 457, 524, 584], "ford": [319, 320, 329, 330, 359, 360, 366, 416, 450, 451, 457, 524, 584], "act": [319, 320, 321, 322, 359, 360, 361, 362, 450, 451, 452, 453, 583], "cost": [319, 320, 321, 322, 323, 327, 329, 330, 359, 360, 361, 362, 363, 365, 366, 377, 378, 379, 389, 398, 404, 405, 406, 416, 450, 451, 452, 453, 454, 456, 457, 469, 470, 471, 482, 492, 515, 522, 523, 524, 540, 584], "allpairspathlengthmap": [319, 321, 359, 361, 384, 417, 450, 452, 475, 584], "negativecycl": [319, 320, 329, 330, 359, 360, 366, 450, 451, 457], "neg": [319, 320, 323, 327, 329, 330, 342, 359, 360, 361, 362, 363, 365, 366, 378, 379, 384, 385, 386, 389, 405, 416, 417, 418, 419, 439, 450, 451, 452, 453, 454, 456, 457, 470, 471, 475, 476, 477, 482, 521, 524, 541, 584], "run": [320, 322, 331, 342, 343, 360, 362, 367, 380, 381, 382, 384, 385, 386, 390, 391, 400, 402, 403, 409, 412, 414, 417, 418, 419, 422, 425, 458, 460, 472, 473, 474, 475, 476, 477, 483, 485, 494, 495, 497, 498, 500, 519, 520, 532, 547, 550, 554, 555, 578, 581, 582, 584, 586, 588], "allpairspathmap": [320, 322, 360, 362, 451, 453], "dijkstra": [321, 322, 323, 361, 362, 363, 377, 378, 379, 384, 385, 386, 404, 405, 406, 417, 418, 419, 452, 453, 454, 469, 470, 471, 475, 476, 477, 584], "as_undirect": [323, 330, 363, 379, 380, 384, 385, 386, 402, 406, 412, 419, 471, 499, 554, 584], "isn": [323, 330, 363, 379, 398, 406, 407, 454, 471, 492, 522, 523, 540, 583], "nan": [323, 361, 362, 363, 365, 378, 379, 389, 402, 452, 453, 454, 456, 470, 471, 482, 497, 521, 541, 542, 554, 584], "from_": 324, "repeat": [324, 333, 339, 355, 356, 364, 368, 375, 376, 377, 404, 455, 459, 467, 468, 469], "inner": [324, 339, 364, 455, 584], "articul": [326, 335, 584], "cut": [326, 335, 542, 584], "vertex": [326, 333, 339, 356, 368, 376, 377, 402, 404, 459, 468, 469, 478, 479, 484, 495, 497, 554, 557, 558, 559, 560, 565, 566, 570, 573, 574, 584], "along": [326, 584], "increas": [326, 337, 398, 492, 501, 540, 584], "implicitli": [326, 335, 337, 339, 347, 348, 374, 400, 466, 495, 547], "assum": [326, 335, 337, 339, 347, 348, 374, 400, 466, 495, 547, 584], "loop": [326, 335, 337, 339, 344, 347, 348, 373, 374, 383, 400, 408, 411, 465, 466, 495, 547, 549, 552, 584], "produc": [326, 335, 337, 339, 347, 348, 374, 400, 466, 486, 494, 495, 541, 547, 584], "incorrect": [326, 335, 337, 339, 347, 348, 374, 400, 466, 495, 547, 584], "unexpect": [326, 335, 337, 339, 347, 348, 349, 350, 351, 352, 374, 400, 466, 495, 547, 584], "goal_fn": [327, 365, 456], "estimate_cost_fn": [327, 365, 456], "comput": [327, 329, 331, 335, 341, 344, 353, 365, 366, 367, 372, 373, 378, 381, 382, 389, 390, 391, 400, 402, 405, 413, 414, 415, 456, 457, 458, 464, 465, 470, 473, 474, 482, 483, 485, 495, 497, 500, 502, 503, 515, 516, 519, 520, 531, 532, 541, 542, 543, 547, 548, 554, 578, 584, 586], "estim": [327, 365, 456], "admiss": [327, 365, 456], "never": [327, 344, 365, 373, 456, 465, 567, 584], "overestim": [327, 365, 456], "nearest": [327, 365, 456], "goal": [327, 329, 365, 366, 378, 389, 405, 456, 457, 470, 482, 515, 583, 584], "seed": [328, 395, 398, 407, 408, 409, 410, 411, 489, 492, 494, 501, 534, 535, 540, 549, 550, 551, 552, 584], "initial_graph": [328, 407, 584], "barab\u00e1si": [328, 407, 584], "albert": [328, 407, 584], "preferenti": [328, 407, 584], "grown": [328, 407, 581, 588], "l": [328, 407, 484, 532, 534, 584], "r": [328, 407, 438, 501, 532, 580, 581, 584], "emerg": [328, 407], "scale": [328, 336, 340, 341, 369, 371, 372, 396, 397, 398, 407, 436, 461, 463, 464, 490, 491, 492, 537, 539, 540, 578, 584], "network": [328, 341, 381, 398, 400, 407, 409, 414, 473, 492, 540, 550, 580, 581, 584, 588], "scienc": [328, 341, 407], "286": [328, 407], "pp": [328, 407], "509": [328, 407], "512": [328, 407], "1999": [328, 407, 500, 532], "star_graph": [328, 407, 584], "star": [328, 407, 435, 439, 447, 584], "spfa": [329, 330, 366, 416, 457, 524, 584], "heurist": [329, 330, 366, 387, 388, 403, 416, 457, 478, 480, 481, 498, 507, 508, 512, 524, 555, 584], "wit": 330, "parallel_threshold": [331, 367, 380, 381, 384, 385, 386, 402, 412, 414, 417, 418, 419, 458, 472, 473, 475, 476, 477, 494, 497, 554, 584], "50": [331, 367, 381, 398, 414, 458, 473, 492, 494, 540, 584], "fraction": [331, 341, 367, 372, 381, 414, 458, 464, 473, 584], "through": [331, 367, 381, 414, 458, 473, 584, 585, 586], "math": [331, 367, 381, 414, 458, 473, 584], "c_b": [331, 367, 381, 414, 458, 473, 584, 585], "sum_": [331, 341, 367, 372, 381, 402, 414, 458, 464, 473, 497, 501, 554, 584, 585], "frac": [331, 341, 367, 372, 381, 398, 400, 402, 414, 458, 464, 473, 492, 495, 497, 501, 540, 554, 584, 585], "sigma": [331, 367, 381, 414, 458, 473, 584, 585], "ulrik": [331, 367, 381, 409, 414, 458, 473, 511, 550, 584], "brand": [331, 367, 381, 409, 414, 458, 473, 511, 550, 584], "journal": [331, 367, 382, 415, 439, 458, 474, 500, 542, 584], "mathemat": [331, 367, 458, 584], "sociologi": [331, 367, 382, 415, 458, 474, 584], "163": [331, 367, 458, 584], "177": [331, 367, 458, 584], "2001": [331, 367, 458, 584], "abov": [331, 367, 380, 381, 384, 385, 386, 391, 402, 409, 412, 414, 417, 418, 419, 422, 425, 458, 472, 473, 475, 476, 477, 485, 497, 519, 550, 554, 583, 584, 586, 588], "env": [331, 367, 380, 381, 402, 412, 414, 458, 472, 473, 497, 554], "var": [331, 367, 380, 381, 402, 412, 414, 458, 472, 473, 497, 554], "distinct": [331, 367, 381, 414, 423, 426, 458, 473, 509, 586], "breadth": [332, 333, 334, 368, 459, 584], "bf": [332, 333, 334, 368, 459], "bfspredecessor": 332, "visitor": [333, 356, 368, 376, 377, 404, 459, 468, 469, 556, 563, 569, 584], "pseudo": [333, 355, 356, 368, 375, 376, 377, 404, 459, 467, 468, 469], "code": [333, 355, 356, 368, 375, 376, 377, 404, 430, 431, 441, 442, 459, 467, 468, 469, 581, 584, 586, 588], "annot": [333, 356, 368, 376, 377, 404, 459, 468, 469, 584], "event": [333, 356, 368, 376, 377, 404, 459, 468, 469, 556, 563, 564, 569, 571, 572, 584], "white": [333, 356, 368, 376, 459, 468, 588], "grai": [333, 356, 368, 376, 459, 468, 560], "equeu": [333, 368, 459], "q": [333, 368, 377, 404, 459, 469], "\u00f8": [333, 355, 368, 375, 377, 404, 459, 467, 469], "dequeu": [333, 368, 459], "adj": [333, 356, 368, 376, 377, 404, 459, 468, 469, 583, 584], "els": [333, 355, 356, 368, 375, 376, 377, 404, 459, 467, 468, 469, 577, 583, 584, 586, 588], "insid": [333, 356, 368, 376, 377, 404, 459, 468, 469, 556, 563, 569], "stop": [333, 342, 356, 368, 376, 377, 378, 382, 387, 388, 390, 398, 403, 404, 405, 415, 459, 468, 469, 470, 474, 480, 481, 483, 492, 498, 500, 507, 512, 516, 532, 540, 555, 576, 584], "immedi": [333, 356, 368, 376, 377, 390, 404, 459, 468, 469, 483, 502, 516, 584], "exploit": [333, 356, 368, 376, 377, 404, 459, 468, 469], "exit": [333, 356, 368, 376, 377, 404, 459, 468, 469, 584], "earli": [333, 356, 368, 376, 377, 404, 459, 468, 469], "stopsearch": [333, 356, 368, 376, 377, 404, 459, 468, 469], "prune": [333, 356, 368, 376, 377, 404, 459, 468, 469, 575], "prunesearch": [333, 356, 368, 376, 377, 404, 459, 468, 469], "visit": [333, 356, 368, 376, 387, 388, 403, 459, 468, 480, 481, 498, 507, 512, 555, 584], "treeedgesrecord": [333, 356, 368, 376, 459, 468, 584], "tree_edg": [333, 356, 368, 376, 459, 468, 564, 584], "append": [333, 356, 368, 376, 386, 419, 422, 425, 429, 438, 440, 459, 468, 477, 584, 585], "vi": [333, 356, 368, 376, 459, 468, 584], "chosen": [333, 339, 355, 356, 368, 375, 376, 377, 404, 459, 467, 468, 469], "invok": [333, 356, 368, 376, 377, 404, 459, 468, 469, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 574], "subclass": [333, 356, 368, 376, 377, 404, 459, 468, 469, 584], "bfssuccessor": [334, 584], "disconnect": [335, 402, 497, 542, 554, 584], "vertic": [335, 422, 423, 425, 426, 460, 484, 502, 518, 566, 584, 588], "first_nod": [336, 369, 461], "horizont": [336, 369, 461], "center": [336, 340, 369, 371, 395, 396, 397, 398, 424, 427, 434, 435, 446, 447, 461, 463, 489, 490, 491, 492, 535, 537, 539, 540], "aspect_ratio": [336, 369, 461], "3333333333333333": 336, "bipartit": [336, 369, 410, 460, 461, 504, 548, 551, 584], "left": [336, 369, 410, 431, 442, 461, 501, 511, 551], "orient": [336, 339, 369, 400, 461], "ratio": [336, 341, 369, 372, 461, 464, 584], "width": [336, 369, 461, 578], "height": [336, 369, 461], "pos2dmap": [336, 340, 369, 371, 395, 396, 397, 461, 463, 489, 490, 491, 535, 537, 539, 578, 583, 584], "cartesian": [338, 370, 462, 584], "product": [338, 370, 399, 462, 493, 584], "productnodemap": [338, 370, 399, 462, 493], "chain": [339, 342, 584], "decomposit": [339, 584], "deriv": [339, 390, 483, 516, 584], "fundament": [339, 348, 584], "manner": [339, 584, 588], "begin": [339, 586], "nontre": 339, "awai": 339, "overlap": [339, 584], "segment": 339, "inform": [339, 410, 536, 551, 580, 584, 588], "schmidt": 339, "jen": 339, "2013": [339, 584], "test": [339, 511, 520, 582, 584], "letter": [339, 580], "113": 339, "241": 339, "244": 339, "elsevi": 339, "doi": [339, 341, 382, 415, 439, 474, 511, 538, 541, 584], "1016": [339, 439, 541, 584], "j": [339, 423, 426, 436, 500, 501, 584], "ipl": [339, 584], "016": [339, 584], "circular": [340, 371, 463], "wf_improv": [341, 372, 464], "close": [341, 372, 398, 464, 492, 538, 540, 584], "reciproc": [341, 372, 464, 584], "averag": [341, 357, 372, 389, 402, 448, 464, 482, 497, 515, 554, 584], "distanc": [341, 372, 380, 385, 386, 398, 402, 412, 418, 419, 430, 431, 441, 442, 464, 472, 476, 477, 492, 497, 501, 521, 534, 540, 541, 554, 570, 572, 580, 584], "reachabl": [341, 355, 372, 375, 389, 464, 467, 482, 515, 584], "reach": [341, 372, 378, 382, 390, 405, 415, 464, 470, 474, 483, 500, 516, 532, 584], "altern": [341, 372, 464, 583, 585, 588], "formula": [341, 372, 464], "actor": [341, 372, 464], "who": [341, 372, 464, 584, 588], "wf": [341, 372, 464], "c_": [341, 372, 464], "wasserman": 341, "faust": 341, "k": [341, 346, 347, 348, 374, 389, 398, 438, 439, 466, 482, 492, 515, 540, 578, 584], "1994": 341, "social": [341, 381, 414, 473, 584], "cambridg": 341, "press": 341, "1017": 341, "cbo9780511815478": 341, "color_fn": 342, "collect": [342, 343, 348, 544, 586], "bicolor": 342, "continu": [342, 398, 492, 540, 583, 584], "core": [347, 374, 466, 536, 580, 584], "basi": [348, 584], "minim": [348, 494, 541, 585], "summat": 348, "exclus": 348, "cacm": 348, "491": 348, "paton": 348, "comm": 348, "acm": [348, 500, 520, 542], "12": [348, 439, 578, 581, 582], "sept": 348, "1969": [348, 439], "514": 348, "518": 348, "longest": [349, 350, 351, 352, 391, 485, 519, 584], "unsign": [349, 350, 584], "_": [349, 350, 351, 352, 370, 399, 419, 462, 493, 584], "could": [349, 350, 351, 352, 578, 583, 584, 586, 588], "centralitymap": [353, 367, 372, 382, 390, 415, 458, 464, 474, 483, 500, 503, 516, 531, 532, 585], "df": [355, 356, 375, 376, 383, 467, 468, 566], "procedur": [355, 375, 436, 467, 584], "stack": [355, 375, 467], "push": [355, 375, 467], "hasnext": [355, 375, 467], "w": [355, 375, 467, 546], "pop": [355, 375, 467, 570], "span": [355, 467, 522, 523, 541, 584], "examin": [356, 376, 377, 404, 468, 469, 557, 559, 560, 566, 571, 572, 574, 584, 586], "cross": [356, 376, 468, 561, 567, 582], "forward": [356, 376, 468, 567], "parallel_edg": [357, 448, 584], "dag_adjacency_matrix": 357, "determin": [357, 387, 388, 391, 411, 448, 480, 481, 485, 502, 504, 507, 508, 512, 518, 519, 542, 552, 584], "min": [357, 377, 404, 448, 469, 542, 584, 585], "caus": [357, 448, 510, 584], "behavior": [357, 448, 584], "max": [357, 391, 422, 425, 448, 485, 519, 520, 584, 585], "avg": [357, 448, 584], "digraph_edge_betweenness_centr": 367, "pathlength": [367, 458], "version": [368, 376, 377, 459, 468, 469, 582, 583, 584], "33333333333333": [369, 461], "graph_1": [370, 399, 462, 493, 584], "graph_2": [370, 399, 462, 493, 584], "graph_product": [370, 399, 462, 493, 584], "in_degre": [374, 584], "out_degre": [374, 584], "infin": [377, 402, 404, 469, 497, 534, 554], "p": [377, 404, 409, 410, 411, 469, 501, 534, 550, 551, 552, 577, 578, 580, 584], "relax": [377, 404, 469, 571], "decreas": [377, 404, 469, 501], "300": [380, 384, 385, 386, 402, 412, 417, 418, 419, 472, 475, 476, 477, 497, 554, 578], "digraph_floyd_warshall_numpi": [380, 472, 583, 584], "definit": [381, 414, 473], "On": [381, 414, 473, 584], "variant": [381, 414, 431, 442, 473, 583, 584], "30": [381, 414, 473, 584], "136": [381, 414, 473, 584], "145": [381, 414, 473, 541, 584], "2008": [381, 414, 473, 584], "digraph_betweenness_centr": [381, 584], "edgecentralitymap": [381, 414, 473], "max_it": [382, 390, 415, 474, 483, 500, 516, 532], "100": [382, 415, 474, 500, 516, 532, 584], "tol": [382, 390, 398, 415, 474, 483, 492, 500, 516, 532, 540], "1e": [382, 390, 398, 415, 474, 483, 492, 500, 516, 532, 540], "06": [382, 390, 398, 415, 474, 483, 492, 516, 532, 540], "eigenvector": [382, 390, 415, 474, 483, 516, 584], "phillip": [382, 415, 474], "bonacich": [382, 415, 474], "famili": [382, 415, 474, 578], "measur": [382, 415, 474, 541, 584, 585, 586], "american": [382, 415, 474], "92": [382, 415, 474], "1170": [382, 415, 474], "1182": [382, 415, 474], "1986": [382, 415, 474, 520], "1086": [382, 415, 474], "228631": [382, 415, 474], "converg": [382, 390, 415, 474, 483, 500, 516, 532], "vector": [382, 390, 415, 474, 483, 500, 516, 532], "smaller": [382, 390, 415, 474, 483, 500, 501, 516, 532, 588], "toler": [382, 390, 415, 474, 483, 500, 516, 532], "multipli": [382, 390, 415, 474, 483, 500, 516, 532], "networkx": [382, 390, 409, 415, 474, 483, 516, 525, 532, 538, 550, 581, 584, 588], "encount": [383, 536, 544, 545, 558, 565, 570, 583, 584], "floyd": [384, 385, 386, 417, 418, 419, 475, 476, 477, 584], "dens": [384, 385, 386, 417, 418, 419, 475, 476, 477], "graph_floyd_warshall_numpi": [385, 386, 477, 584], "inf": [385, 386, 418, 419, 460, 476, 477, 584], "matric": [386, 419, 477, 583, 584], "reconstruct": [386, 419, 477], "among": [386, 419, 477, 520, 541, 580], "reconstruct_path": [386, 419, 477], "curr": [386, 419, 477], "node_match": [387, 388, 403, 480, 481, 498, 507, 512, 555, 584], "edge_match": [387, 388, 403, 480, 481, 498, 507, 512, 555, 584], "id_ord": [387, 388, 403, 480, 481, 498, 507, 508, 512, 555, 584], "call_limit": [387, 388, 403, 480, 481, 498, 507, 512, 555, 584], "compar": [387, 388, 480, 481, 507, 508, 512, 580, 584], "matcher": [387, 388, 480, 481, 507, 508, 512], "graph_a": [387, 388, 403, 480, 481, 498, 507, 508, 512, 555], "graph_b": [387, 388, 403, 480, 481, 498, 507, 508, 512, 555], "y": [387, 388, 391, 432, 443, 480, 481, 485, 507, 508, 512, 519, 584], "evalu": [387, 388, 391, 403, 480, 481, 485, 498, 507, 508, 512, 519, 555, 584], "vied": [387, 388, 480, 481, 508], "vf2": [387, 388, 403, 480, 481, 498, 507, 508, 512, 555, 584], "paper": [387, 388, 403, 431, 442, 460, 480, 481, 486, 494, 498, 507, 508, 512, 555, 584], "bound": [387, 388, 403, 409, 480, 481, 498, 507, 512, 550, 555, 584], "solut": [387, 388, 403, 478, 480, 481, 498, 507, 512, 520, 555, 584], "exce": [387, 388, 403, 422, 425, 438, 480, 481, 498, 507, 512, 555, 584], "ambigu": [388, 481, 512, 564], "term": [388, 481, 512], "fewer": [388, 481, 512], "edge_cost": [389, 482, 515], "kth": [389, 482, 515], "log": [389, 460, 482, 515, 584], "eedg": [389, 482, 515], "alpha": [390, 483, 516, 532, 578, 584], "beta": [390, 483, 501, 516], "1000": [390, 483], "katz": [390, 483, 516, 584], "leo": [390, 483, 516], "statu": [390, 483, 516, 586], "sociometr": [390, 483, 516], "psychometrika": [390, 483, 516], "18": [390, 483, 516, 584], "39": [390, 483, 516, 584], "43": [390, 483, 516], "1953": [390, 483, 516], "springer": [390, 483, 516, 541, 584], "pdf": [390, 460, 483, 486, 500, 516, 532, 577], "1007": [390, 483, 516, 541, 584], "bf02289026": [390, 483, 516], "attenu": [390, 483, 516], "neighbourhood": [390, 483, 516], "roughli": [391, 485, 519], "len": [391, 485, 519, 584, 586], "There": [391, 485, 519, 583, 584, 588], "tradeoff": [391, 485, 519], "relat": [392, 584], "coarsest": [392, 584], "bisimul": [392, 584], "paig": [392, 584], "tarjan": [392, 584], "three": [392, 401, 496, 553, 584], "refin": [392, 584], "relationalcoarsestpartit": [392, 584], "json": [393, 420, 487, 527, 533, 584], "anyth": [393, 487, 527], "unweight": [394, 402, 488, 497, 528, 554, 584], "preset": [394, 478, 479, 488, 528, 584], "nodescountmap": [394, 528], "nlist": [396, 439, 478, 490, 537, 584, 588], "rotat": [396, 490, 537], "shell": [396, 490, 537], "angl": [396, 490, 537], "radian": [396, 490, 537], "resolut": [397, 491, 539], "35": [397, 491, 539], "equidist": [397, 491, 539], "spiral": [397, 491, 539], "compact": [397, 491, 539], "compress": [397, 491, 536, 539, 584], "plot": [397, 491, 539, 584], "po": [398, 439, 478, 492, 501, 534, 540, 578, 583, 584, 588], "repulsive_expon": [398, 492, 540], "adaptive_cool": [398, 492, 540, 584], "num_it": [398, 492, 540], "fruchterman": [398, 492, 540, 584], "reingold": [398, 492, 540, 584], "forc": [398, 492, 540, 584], "simul": [398, 492, 540], "spring": [398, 492, 540, 578], "hold": [398, 492, 540], "repel": [398, 492, 540], "anti": [398, 492, 540], "graviti": [398, 492, 540], "equilibrium": [398, 492, 540], "coordin": [398, 432, 443, 492, 501, 540, 588], "sqrt": [398, 492, 540], "farther": [398, 492, 540], "apart": [398, 492, 540], "repuls": [398, 492, 540], "expon": [398, 492, 540], "cool": [398, 492, 540], "scheme": [398, 492, 540], "linear": [398, 429, 440, 484, 492, 518, 540, 584, 586], "threshold": [398, 492, 501, 534, 540], "Not": [398, 492, 540], "around": [398, 492, 540, 584], "tensor": [399, 493, 584], "fag": 400, "eq": 400, "triangl": [400, 495], "tripl": [400, 495], "count": [400, 584, 586], "cluster": 400, "fagiolo": 400, "physic": [400, 436], "review": [400, 436, 586], "76": 400, "026107": 400, "2007": 400, "merge_nod": [401, 496, 553, 584], "merge_edg": [401, 496, 553, 584], "phase": [401, 496, 553], "n_2": [401, 496, 553], "n_1": [401, 496, 553], "togeth": [401, 421, 496, 536, 553, 565, 566, 570], "ne": [402, 497, 554], "taken": [402, 497, 554, 584], "direccted_path_graph": 403, "stopiter": [403, 498, 555, 584], "purpos": [407, 581, 582], "weak": 407, "direction": [407, 584, 586, 588], "num_edg": [408, 549, 584], "g_": [408, 409, 549, 550, 584], "nm": [408, 549], "erd\u0151": [408, 409, 549, 550], "r\u00e9nyi": [408, 409, 549, 550], "higher": [408, 478, 479, 549, 584], "reproduc": [408, 549, 580, 584], "binomi": [409, 422, 425, 550, 584], "mention": [409, 550], "upper": [409, 550, 584], "fast_gnp_random_graph": [409, 550], "vladimir": [409, 550], "batagelj": [409, 550], "phy": [409, 550], "rev": [409, 550], "71": [409, 550], "036113": [409, 550], "2005": [409, 550], "random_graph": [409, 550, 584], "l49": [409, 550], "l120": [409, 550], "num_l_nod": [410, 551], "num_r_nod": [410, 551], "divid": [410, 551], "disjoint": [410, 517, 551, 584], "right": [410, 425, 429, 431, 432, 442, 501, 511, 551], "stochast": [411, 552, 584], "model": [411, 501, 534, 552, 584, 586], "commun": [411, 552], "membership": [411, 552], "infer": [411, 501, 552], "start_nod": [413, 502], "frontier": [413, 584], "publish": [413, 502, 581, 582, 584], "2006": [413, 502], "cooper": [413, 502], "harvei": [413, 502], "kennedi": [413, 502], "hdl": [413, 502], "net": [413, 502], "1911": [413, 502], "96345": [413, 502], "nullgraph": [413, 502, 505, 513], "invalidnod": [413, 502, 517, 526], "pars": [420, 533, 536, 584], "load": 420, "num_mesh_nod": [421, 444], "num_path_nod": [421, 444], "mesh_weight": [421, 444], "path_weight": [421, 444], "barbel": [421, 584], "mesh": [421, 433, 444, 445, 584], "won": [421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447], "recurs": [422, 425, 436, 538, 584], "platform": [422, 425, 581, 584, 588], "64bit": [422, 425, 581, 582], "60": [422, 425, 584], "32bit": [422, 425, 581, 582], "29": [422, 425, 584], "overflowerror": [422, 425, 584], "extra": [422, 425, 429, 438, 440, 584], "greater": [422, 425, 429, 438, 440, 546], "neither": [423, 424, 426, 427, 429, 433, 434, 435, 440, 444, 445, 446, 447, 586], "propag": [425, 429, 432], "toward": [425, 429, 432, 435], "bottom": [425, 429, 432], "row": [429, 432, 440, 443], "col": [429, 432, 440, 443, 584], "grid": [429, 432, 440, 443, 584], "wise": [429, 440], "trail": [429, 440, 586], "heavi": [430, 431, 441, 442, 584], "hex": [430, 441, 584], "fig": [430, 431, 441, 442, 577], "arxiv": [430, 431, 436, 441, 442, 494, 584], "ab": [430, 431, 436, 441, 442, 494, 584], "1907": [430, 431, 441, 442], "09528": [430, 431, 441, 442], "ascii": [430, 431, 441, 442], "diagram": [430, 431, 441, 442], "f": [430, 431, 436, 441, 442, 585, 586, 588], "odd": [430, 431, 441, 442, 584], "graphviz_draw": [430, 431, 441, 442, 583, 584, 585, 586, 588], "1043x155": [430, 441], "squar": [431, 442, 584], "four": [431, 442, 580, 584], "frequenc": [431, 442], "467x539": [431, 442], "with_posit": [432, 443, 584], "hexagon": [432, 443, 584, 585], "lattic": [432, 443, 584, 585], "boundari": [432, 443, 583, 584], "emb": [432, 443], "plane": [432, 443, 511], "side": [432, 443], "inward": 435, "dorogovtsev": [436, 584], "goltsev": [436, 584], "mend": [436, 584], "pseudofract": 436, "65": 436, "066122": 436, "2002": 436, "cond": 436, "mat": 436, "0112143": 436, "branching_factor": 438, "ari": [438, 584], "branch": 438, "cannot": [438, 520, 584], "petersen": [439, 584], "2n": 439, "3n": 439, "watkin": 439, "denot": [439, 586], "extern": [439, 583], "polygon": 439, "shift": 439, "shell_layout": [439, 478, 584, 588], "7": [439, 478, 479, 486, 581, 588], "m\u00f6biu": 439, "kantor": 439, "13": [439, 581], "14": [439, 581], "theorem": [439, 486, 584], "tait": 439, "combinatori": 439, "theori": [439, 588], "152": 439, "164": 439, "s0021": 439, "9800": 439, "69": 439, "80116": 439, "column": [443, 584], "lollipop": [444, 584], "nor": 444, "graph_edge_betweenness_centr": 458, "noga": [460, 584], "alon": [460, 584], "lett": 460, "85": [460, 532], "2003": [460, 580, 584], "www": [460, 486, 500], "tau": 460, "ac": 460, "il": 460, "nogaa": 460, "lex2": 460, "graph_betweenness_centr": [473, 584], "strategi": [478, 479, 584], "aka": [478, 479], "slf": [478, 479], "dynam": [478, 479, 583, 584], "tie": [478, 479, 584], "uncolor": [478, 479, 584], "subset": [478, 479, 520, 532, 557, 560, 584], "problem": [478, 541, 580], "preset_color_fn": [478, 479, 584], "manual": [478, 479, 582, 584], "generalized_petersen_graph": [478, 584, 588], "draw": [478, 577, 578, 584], "node_color": [478, 578, 584, 585], "greedili": [479, 584], "cycle_graph": [479, 486, 584, 586], "edge_color": [479, 486, 578, 584], "edge_ab": [484, 584], "edge_ac": [484, 584], "edge_bc": [484, 584], "edge_ad": [484, 584], "out_graph": [484, 584], "out_edge_map": [484, 584], "simple_path_pair": 485, "longest_path": [485, 584], "z": 485, "misra": [486, 584], "gri": [486, 584], "proof": [486, 584], "vize": [486, 584], "1992": [486, 584], "utexa": 486, "edu": [486, 500, 511, 532], "psp": 486, "numpathsmap": 488, "trial": 494, "modul": [494, 584], "approxim": [494, 541, 584], "token": [494, 584], "swap": [494, 584], "permut": [494, 584], "miltzow": [494, 584], "et": [494, 580, 584], "al": [494, 580, 584], "2016": [494, 584], "1602": [494, 584], "05150": [494, 584], "rearrang": 494, "nstart": [500, 532], "08": 500, "hub": [500, 584], "author": [500, 584], "kleinberg": 500, "authorit": 500, "hyperlink": 500, "46": 500, "cornel": 500, "home": 500, "kleinber": 500, "auth": 500, "hyperbol": [501, 584], "geometr": [501, 534, 584], "usual": 501, "exp": 501, "sigmoid": 501, "arccosh": 501, "x_0": 501, "x_j": 501, "dimens": [501, 534], "x_d": 501, "th": 501, "hyperboloid": 501, "x_1": 501, "sharp": 501, "nonneg": [501, 542], "probabilist": 501, "quadrat": [502, 584], "alp\u00e1r": 507, "j\u00fcttner": 507, "p\u00e9ter": 507, "madarasi": 507, "longer": [510, 581, 584], "global": 510, "local": [510, 582, 584], "planar": [511, 584], "iff": 511, "intersect": 511, "2009": [511, 580], "citeseerx": 511, "ist": 511, "psu": 511, "viewdoc": 511, "summari": 511, "217": 511, "9208": 511, "weakli": [513, 530, 579, 584], "first_lay": [517, 584], "index_output": [517, 584], "lexicograph": 518, "ti": 518, "affect": 518, "comparison": [518, 583, 584, 588], "max_cardin": 520, "verify_optimum": 520, "cardin": 520, "blossom": 520, "augment": 520, "primal": 520, "dual": [520, 584], "invent": 520, "jack": 520, "edmond": 520, "untest": 520, "optimum": 520, "mostli": [520, 584, 588], "ofth": 520, "zvi": 520, "galil": 520, "survei": 520, "metric": [521, 534, 541, 584], "closur": [521, 541, 584], "forest": [522, 523], "kruskal": [522, 523], "keep_attribut": [525, 584], "__networkx_node__": [525, 584], "person": 532, "dangl": 532, "page": [532, 584], "brin": 532, "motwani": 532, "winograd": 532, "citat": 532, "rank": [532, 584], "bring": 532, "stanford": 532, "digit": 532, "technologi": 532, "1998": 532, "dbpub": 532, "8090": 532, "showdoc": 532, "fulltext": 532, "66": 532, "tri": [532, 584], "damp": 532, "uniform": 532, "distribut": [532, 582, 584], "outedg": 532, "accord": 532, "irreduc": 532, "radiu": [534, 578, 584], "dim": 534, "unit": 534, "cube": [534, 584], "uniformli": 534, "euclidean": 534, "minkowski": 534, "meet": 534, "graphml": [536, 584], "comprehens": 536, "easi": [536, 564], "properti": [536, 583, 586], "flexibl": [536, 588], "mechan": 536, "graphdraw": 536, "mix": 536, "unidirect": 536, "hyperedg": 536, "nest": 536, "port": 536, "domain": 536, "runtimeerror": [536, 584], "elementari": [538, 584], "johnson": [538, 580, 584], "1137": 538, "0204007": 538, "document": [538, 577, 584, 588], "l98": 538, "l222": 538, "terminal_nod": 541, "steiner": [541, 584], "regard": 541, "termin": [541, 584], "due": [541, 582, 584], "rather": [541, 584], "kou": [541, 584], "markowski": [541, 584], "berman": [541, 584], "fast": [541, 584], "acta": 541, "informatica": 541, "141": 541, "1981": [541, 584], "articl": [541, 584], "bf00288961": [541, 584], "kurt": 541, "mehlhorn": 541, "0020": [541, 584], "0190": [541, 584], "88": [541, 584], "90066": [541, 584], "stoer": [542, 584], "wagner": [542, 584], "stoer_simple_1997": 542, "conid": 542, "usiz": [542, 584], "mechthild": 542, "frank": [542, 584], "44": 542, "585": [542, 584], "591": 542, "1997": 542, "strongli": [543, 584], "kosaraju": 543, "earliest": 544, "reduct": [546, 584], "prime": 546, "pyvalueerror": 546, "_t": [556, 563, 569], "action": [556, 563, 569, 584], "queue": [557, 560, 570, 584], "record": 564, "disregard": 564, "leaf": 566, "upon": [571, 572, 584], "emit": [571, 572, 584], "node_attr_fn": [577, 584, 585, 586, 588], "edge_attr_fn": [577, 586], "image_typ": 577, "pillow": [577, 584], "instruct": [577, 586], "disk": 577, "canon": 577, "cmap": [577, 578], "cmapx": 577, "cmapx_np": 577, "dia": 577, "gd": 577, "gd2": 577, "gif": 577, "hpgl": 577, "imap": 577, "imap_np": 577, "ismap": 577, "jpe": 577, "jpeg": 577, "jpg": 577, "mif": 577, "mp": 577, "pcl": 577, "pic": 577, "plain": 577, "ext": 577, "ps2": 577, "svg": 577, "svgz": 577, "vml": 577, "vmlz": 577, "vrml": 577, "vtx": 577, "wbmp": 577, "xdot": 577, "xlib": 577, "twopi": 577, "neato": [577, 585, 588], "circo": 577, "fdp": [577, 584], "sfdp": [577, 584], "yellow": [577, 584, 588], "blue": [577, 584, 588], "red": [577, 584], "directed_star_graph": [577, 584], "rgb": [577, 578, 584], "766x747": [577, 584], "arrow": [578, 584, 586, 588], "kwd": 578, "matplotlib": [578, 584, 585, 588], "mpl": [578, 584], "layout_funct": 578, "arrowhead": 578, "arrowstyl": 578, "arrowshead": 578, "arrow_s": [578, 583], "fancyarrowpatch": 578, "mutation_scal": 578, "info": 578, "node_list": [578, 583], "node_s": [578, 584], "vmin": [578, 584, 585], "vmax": [578, 584, 585], "scatter": 578, "1f78b4": [578, 584], "node_shap": 578, "shape": [578, 584, 585, 588], "pyplot": [578, 584, 585, 588], "marker": 578, "h": [578, 586], "transpar": 578, "colormap": [578, 585], "intens": 578, "linewidth": 578, "symbol": 578, "border": 578, "edge_cmap": 578, "edge_vmin": 578, "edge_vmax": 578, "word": 578, "solid": 578, "dash": 578, "linestyl": 578, "Or": [578, 584, 588], "font_siz": 578, "fontsiz": 578, "font_color": 578, "font": 578, "ie": 578, "font_weight": 578, "font_famili": 578, "san": 578, "serif": 578, "legend": 578, "connectionstyl": [578, 584], "curv": 578, "arc": [578, 586, 588], "rad": 578, "arc3": 578, "backend": [578, 583], "jupyt": 578, "plt": [578, 584, 585, 588], "competit": 580, "against": [580, 584], "popular": 580, "igraph": 580, "networkit": 580, "task": 580, "machin": 580, "intel": 580, "i9": 580, "9900k": 580, "60ghz": 580, "eight": 580, "16": [580, 581], "32gb": 580, "ram": 580, "usa": 580, "road": 580, "9th": 580, "dimac": 580, "challeng": 580, "dataset": 580, "demetrescu": 580, "datta": 580, "third": 580, "citi": 580, "rome": 580, "lastli": 580, "fourth": 580, "answer": 580, "arg": 580, "databas": 580, "de": 580, "santo": 580, "goldberg": 580, "ninth": 580, "foggia": 580, "sanson": 580, "vento": 580, "recognit": 580, "1067": 580, "1079": 580, "studi": 581, "variou": [581, 583, 584], "licens": 581, "apach": 581, "host": 581, "inher": 581, "safeti": [581, 582], "significantli": [581, 584], "oppos": [581, 584], "pre": [581, 582, 584], "binari": [581, 584, 588], "linux": [581, 582, 584], "x86": 581, "x86_64": [581, 582, 584], "aarch64": [581, 582, 584], "s390x": [581, 582, 584], "ppc64le": [581, 582, 584], "maco": [581, 582, 584], "arm64": [581, 582, 584], "window": [581, 582], "wish": 581, "expos": [581, 583, 584], "renam": [581, 584], "legaci": [581, 584], "now": [581, 584, 585, 586, 588], "usag": [581, 588], "came": 581, "tutori": [581, 585, 586], "guid": [581, 583, 588], "introduct": [581, 582, 584, 587], "contribut": [581, 584], "gap": [581, 584], "benchmark": 581, "pypi": [582, 584], "i686": 582, "64": [582, 584], "rustup": 582, "simpler": 582, "reli": [582, 584, 588], "properli": [582, 584], "prebuilt": 582, "pep": [582, 584], "517": [582, 584], "setuptool": 582, "again": [582, 584, 588], "strive": 582, "broken": 582, "level": [582, 583], "architectur": 582, "manylinux": 582, "2014": 582, "pp64le": 582, "musl": [582, 584], "newer": [582, 584], "ci": [582, 584], "upstream": [582, 584], "correctli": [582, 584], "best": [582, 586], "introductori": 583, "impli": [583, 586], "inspir": 583, "util": 583, "offer": 583, "decis": 583, "aspect": 583, "put": 583, "nx": [583, 584], "multidigraph": 583, "my_node_a": 583, "my_node_b": 583, "constraint": [583, 584, 588], "That": [583, 584], "migrat": 583, "similarli": [583, 588], "dist_matrix": 583, "extend_from": 583, "concis": 583, "graph_": 583, "digraph_": 583, "pretti": 583, "referenc": 583, "concept": [583, 584, 586], "dedic": [583, 588], "fridai": [583, 584, 588], "mondai": [583, 584, 588], "But": [583, 584, 586], "analog": [583, 584], "5pm": 583, "2pm": 583, "room": 583, "714": 583, "accessor": 583, "dtype": [583, 584], "astyp": 583, "to_numpy_matrix": 583, "to_numpy_arrai": 583, "to_numpy_recarrai": 583, "to_scipy_sparse_matrix": 583, "to_pandas_adjac": 583, "scipi": 583, "csr": 583, "spars": [583, 584], "per": [583, 584], "digraph_adjacency_matrix": [583, 584], "graph_adjacency_matrix": [583, 584], "networkx_draw": 583, "pygraphviz": 583, "varieti": 583, "strictli": [583, 584, 586], "retwork": [583, 584], "draw_networkx": 583, "fork": 583, "nodelist": 583, "arrows": 583, "mpl_drawer": [583, 584], "draw_networkx_edge_label": 583, "networkx_convert": [583, 584], "respons": 583, "accordingli": 583, "unwant": 583, "convert_rustworkx_to_networkx": 583, "isinst": 583, "matur": 583, "wide": [583, 588], "younger": 583, "enhanc": [583, 584], "request": [583, 584], "issu": [583, 584], "priorit": 583, "highlight": 584, "pyright": 584, "abi": 584, "onward": 584, "thank": 584, "contributor": 584, "johnson_simple_cycl": 584, "trait": 584, "edgefind": 584, "edgeindex": 584, "edgeremov": 584, "centrality_scor": 584, "650": 584, "2f": [584, 585], "special": 584, "mirror": 584, "560": 584, "snippet": 584, "previous": 584, "post": 584, "pone": 584, "563": 584, "1345": 584, "karate_club_graph": 584, "zachari": 584, "karat": 584, "club": 584, "commonli": 584, "circular_layout": 584, "neighbors_undirect": 584, "obtain": 584, "irrespect": 584, "abil": 584, "gzip": 584, "read_graphml": 584, "graphmlz": 584, "gz": 584, "recognis": 584, "decompress": 584, "life": 584, "shuffl": 584, "restor": 584, "find_node_by_weight": 584, "1243": 584, "1340": 584, "node_link_json": 584, "typo": 584, "spell": 584, "checker": 584, "invoc": 584, "lint": 584, "session": 584, "discover": 584, "1352": 584, "1242": 584, "bugfix": 584, "inadvert": 584, "to_dot": 584, "incorrectli": 584, "escap": 584, "quot": 584, "color_nod": [584, 585], "_node": 584, "422952": 584, "directed_hexagonal_lattice_graph": 584, "irregular": 584, "expans": 584, "expand": 584, "offici": 584, "importantli": 584, "70": 584, "promot": 584, "tier": 584, "has_nod": 584, "dag_algo": 584, "from_node_link_json_fil": 584, "parse_node_link_json": 584, "polynomi": 584, "brute": 584, "magnitud": 584, "address": 584, "experiment": 584, "christian": 584, "komusiewicz": 584, "sommer": 584, "gain": 584, "discuss": [584, 588], "lemma": 584, "thu": 584, "intermedi": 584, "speedup": 584, "40": 584, "nameabl": 584, "dorogovtsev_goltsev_mendes_graph": 584, "stablegraph": 584, "graphmap": 584, "contractnod": 584, "graph_ext": 584, "contract_nod": [584, 586], "hasparalleledgesdirect": 584, "hasparalleledgesundirect": 584, "has_parallel_edg": 584, "noderemov": 584, "matrixgraph": 584, "hyperbolic_random_graph": 584, "sampl": 584, "sinh": 584, "14159": 584, "55": 584, "particularli": 584, "is_semi_connect": 584, "semi": 584, "indexpartitionblock": 584, "hexagonal_lattice_graph_weight": 584, "remove_node_retain_edg": 584, "suppli": 584, "greedy_node_color_with_coloring_strategi": 584, "greedy_edge_color_with_coloring_strategi": 584, "preset_color": 584, "directed_sbm_random_graph": 584, "undirected_sbm_random_graph": 584, "sbm_random_graph": 584, "wheel": 584, "storag": 584, "onlin": 584, "meaningless": 584, "sizeabl": 584, "condition": 584, "temporari": 584, "find_cycl": 584, "bondari": 584, "didn": [584, 586], "smartli": 584, "scenario": 584, "nlabel": 584, "tooltip": 584, "ntooltip": 584, "107x202": 584, "750": 584, "draw_edg": 584, "offset": 584, "draw_edge_label": 584, "align": 584, "774": 584, "panicexcept": 584, "1117": 584, "1130": 584, "long": [584, 588], "1140": 584, "blog": 584, "changelog": 584, "2024": 584, "m1": 584, "switch": 584, "tox": 584, "downgrad": 584, "directed_barabasi_albert_graph": 584, "barabasi_albert_graph": 584, "starting_graph": 584, "20": 584, "graph_all_shortest_path": 584, "shortest_path": 584, "heavy_square_graph": 584, "bridges_set": 584, "clear_edg": 584, "edge_indices_from_endpoint": 584, "filter_nod": 584, "abstract": 584, "filter_edg": 584, "substitute_node_with_subgraph": [584, 586], "sub_graph": 584, "___": 584, "stratifi": 584, "graphnotbipartit": 584, "directed_random_bipartite_graph": 584, "undirected_random_bipartite_graph": 584, "bipartite_layout": 584, "66666667": 584, "entir": 584, "invalidmap": 584, "graph_token_swapp": 584, "feasibl": 584, "path_exist": 584, "greedy_node_color_with_preset_color": 584, "greedy_node_color": 584, "tr": 584, "ref": 584, "wikipedia": 584, "wiki": 584, "msrv": 584, "56": 584, "adopt": [584, 588], "difficult": 584, "catch": 584, "unhandl": 584, "token_swapp": 584, "vec": 584, "nodeindex": 584, "mapnotposs": 584, "ungraph": 584, "from_edg": 584, "hashmap": 584, "err": 584, "panick": 584, "pllatform": 584, "infrastructur": 584, "hopefulli": 584, "shouldn": 584, "likelihood": 584, "precompil": [584, 588], "polici": 584, "74": 584, "deprecationwarn": 584, "graph_all_simple_path": 584, "digraph_all_simple_path": 584, "955": 584, "gnp_random_graph": 584, "pin": 584, "seri": [584, 586], "unreleas": 584, "soon": 584, "prevent": [584, 588], "manag": 584, "older": 584, "incompat": 584, "forcibli": 584, "alongsid": 584, "make_symmetr": 584, "83x443": 584, "5x5": 584, "grid_graph": 584, "btw": [584, 585], "hub_scor": 584, "binomial_tree_graph": 584, "31": 584, "28": 584, "path_set": 584, "longest_simple_path_multiple_target": 584, "hashset": 584, "pagerank_scor": 584, "gnm_random_graph": 584, "random_geometric_graph": 584, "bread": 584, "find_predecessor_node_by_edg": 584, "colorbar": [584, 585], "rcparam": [584, 585], "figsiz": [584, 585], "gca": [584, 585], "sm": [584, 585], "cm": [584, 585], "scalarmapp": [584, 585], "norm": [584, 585], "titl": [584, 585], "1500x1000": [584, 585], "empty_graph": 584, "directed_empty_graph": 584, "directed_complete_graph": 584, "mesh_graph": [584, 588], "directed_mesh_graph": 584, "gnp_directed_random_graph": 584, "gnp_undirected_random_graph": 584, "situat": 584, "48": 584, "well": 584, "facilit": 584, "deepcopi": 584, "836": 584, "flatten": 584, "744": 584, "node_remov": 584, "reflect": 584, "certain": 584, "696": 584, "formerli": 584, "notif": 584, "manylinux2014": 584, "parser": 584, "cut_val": 584, "orang": 584, "graph_tensor_product": 584, "digraph_tensor_product": 584, "all_simple_paths_multiple_target": 584, "algo": 584, "dictmap": 584, "preserve_attribut": 584, "k_5": 584, "bfs_undirect": 584, "xml": [584, 588], "manylinux2010": 584, "glibc": 584, "sdist": 584, "41": 584, "rustc": 584, "bfsssuccessor": 584, "slice": 584, "__getitem__": 584, "did": 584, "590": 584, "amd": 584, "digraph_cartesian_product": 584, "graph_cartesian_product": 584, "throughout": 584, "eventu": 584, "account": 584, "barbell_graph": 584, "graph_bfs_search": 584, "digraph_bfs_search": 584, "remain": [584, 588], "comp": 584, "150": 584, "color_edg": 584, "edges_in_chain": 584, "idx": 584, "adj_matrix": 584, "1j": 584, "2j": 584, "5j": 584, "multi": 584, "guard": 584, "abc": 584, "graph_dfs_search": 584, "digraph_dfs_search": 584, "graph_dijkstra_search": 584, "digraph_dijkstra_search": 584, "dijkstratreeedgesrecord": 584, "discover_vertex": 584, "edge_relax": 584, "incident_edg": [584, 588], "incident_edge_index_map": 584, "achiev": 584, "full_rary_tre": 584, "lollipop_graph": [584, 588], "freed": 584, "workspac": 584, "downstream": 584, "stabil": 584, "necessarili": 584, "turquois": 584, "fuchsia": 584, "rx_graph": 584, "arguabl": 584, "desir": 584, "undirected_gnm_random_graph": 584, "42": [584, 588], "d_mat": 584, "avg_shortest_path": 584, "directed_binomial_tree_graph": 584, "overflow": 584, "panic": 584, "exceed": 584, "457": 584, "increment": 584, "515": 584, "oversight": 584, "525": 584, "heavy_hex_graph": [584, 588], "directed_heavy_hex_graph": 584, "directed_heavy_square_graph": 584, "pyo3_runtim": 584, "452": 584, "graph_union": 584, "digraph_union": 584, "unifi": 584, "a_0": 584, "a_1": 584, "b_0": 584, "b_1": 584, "432": 584, "429": 584, "hash": 584, "367": 584, "slew": 584, "1080": 584, "0022250x": 584, "9990249": 584, "secondli": 584, "edge_subgraph": 584, "ap": 584, "prx": 584, "1103": 584, "physrevx": 584, "011022": 584, "read_edge_list": [584, 588], "first_edg": 584, "second_edg": 584, "original_graph": 584, "_sourc": 584, "_target": 584, "_weight": 584, "17": 584, "21": 584, "22": 584, "23": 584, "26": 584, "27": 584, "to_direct": 584, "rework": 584, "graph_floyd_warshal": 584, "digraph_floyd_warshal": 584, "control": 584, "undirected_graph": 584, "digraph_num_shortest_paths_unweight": 584, "graph_num_shortest_paths_unweight": 584, "directed_grid_graph": 584, "33": 584, "path_length": 584, "lambda_": 584, "fashion": 584, "explicit": 584, "408": 584, "digraph_dijkstra_shortest_path": 584, "graph_dijkstra_shortest_path": 584, "digraph_all_pairs_dijkstra_shortest_path": 584, "graph_all_pairs_dijkstra_shortest_path": 584, "387": 584, "consecut": 584, "373": 584, "347": 584, "plethora": 584, "drawer": 584, "spring_layout": [584, 588], "preclud": 584, "95": 584, "random_layout": 584, "graph_random_layout": 584, "diraph_random_layout": 584, "circl": [584, 585, 588], "fixeds": 584, "520x456": 584, "immut": 584, "coeffici": 584, "digraph_all_pairs_dijkstra_path_length": 584, "graph_all_pairs_dijkstra_path_length": 584, "edge_index_map": [584, 588], "source_node_index": 584, "target_node_index": 584, "find_successors_by_edg": 584, "find_predecessors_by_edg": 584, "mst": 584, "tweak": 584, "00ffff": 584, "spiral_layout": 584, "795x1031": 584, "333x321": 584, "write_edge_list": 584, "digraph_k_shortest_path_length": 584, "graph_k_shortest_path_length": 584, "digraph_dijkstra_shortest_path_length": 584, "graph_dijkstra_shortest_path_length": 584, "predecessor_indic": 584, "dispatch": 584, "mistakenli": 584, "appl": 584, "arm": 584, "outward": 584, "371x155": 584, "is_maxmimal_match": 584, "disallow": 584, "145x291": 584, "143x291": 584, "queri": 584, "__str__": [584, 588], "human": 584, "readabl": [584, 588], "__hash__": 584, "unhash": 584, "update_edg": [584, 588], "garbag": 584, "collector": 584, "know": 584, "integr": [584, 588], "250": 584, "pickl": 584, "multiprocess": 584, "lookup": 584, "graph_astar_shortest_path": 584, "digraph_astar_shortest_path": 584, "digraph_dfs_edg": 584, "graph_dfs_edg": 584, "lock": 584, "meant": 584, "focu": 584, "is_symmetr": 584, "directed_gnm_random_graph": 584, "remove_edges_from": [584, 588], "removed_edges_from": 584, "graph_distance_matrix": 584, "digraph_distance_matrix": 584, "insert_node_on_in_edg": 584, "insert_node_on_out_edg": 584, "insert_node_on_in_edges_multipl": 584, "insert_node_on_out_edges_multipl": 584, "contigu": [584, 585, 588], "fortran": 584, "easier": 584, "defer": 584, "convers": 584, "bottleneck": 584, "especi": [584, 588], "across": 584, "172": 584, "eas": 584, "graphivz": 584, "compos": 584, "warshal": 584, "segfault": 584, "backtrac": 584, "problemat": 584, "find_adjacent_node_by_edg": 584, "remove_nodes_from": [584, 588], "No": 584, "export": 584, "pprint": 585, "007277212457600987": 585, "02047046385621779": 585, "07491079688119466": 585, "04242324126690451": 585, "09205321351482312": 585, "magma": 585, "to_hex": 585, "keep_alpha": 585, "1076x910": 585, "explor": 586, "primer": 586, "broader": 586, "restrict": 586, "simultan": 586, "walk": 586, "imposs": 586, "dependency_dag": 586, "job_a": 586, "job_b": 586, "job_c": 586, "job_d": 586, "job_": 586, "job_f": 586, "330x347": 586, "relationship": 586, "topo_sort": 586, "job_index": 586, "sdk": 586, "quantum": 586, "acceler": 586, "routin": 586, "coher": 586, "gate": 586, "reset": 586, "graphic": 586, "q_0": 586, "q_1": 586, "mea": 586, "beyond": 586, "fact": 586, "qubit": 586, "c_0": 586, "c_1": 586, "in_nod": 586, "out_nod": 586, "h_gate": 586, "cx": 586, "cx_gate": 586, "meas_q0": 586, "meas_q1": 586, "q0": 586, "q1": 586, "401x523": 586, "flow": 586, "transform": 586, "hardwar": 586, "translat": 586, "devic": 586, "qpu": 586, "translation_matrix": 586, "rz": 586, "pi": 586, "sx": 586, "insruct": 586, "hardware_instruct": 586, "subcircuit": 586, "gate_index": 586, "edge_v": 586, "equivalent_subcircuit": 586, "map_fn": 586, "401x755": 586, "analyz": 586, "shorter": 586, "bit_nod": 586, "unitari": 586, "simplif": 586, "newest": 586, "nod": 586, "_node_id": 586, "wouldn": 586, "serv": 588, "past": 588, "shorten": 588, "convent": 588, "compris": 588, "green": 588, "first_index_data": 588, "first_index_edgepoint": 588, "helper": 588, "remove_edg": 588, "remove_edge_from_index": 588, "absent": 588, "last_index": 588, "simplic": 588, "graphnod": 588, "graphedg": 588, "edgenod": 588, "popul": 588, "notion": 588, "show": 588, "lolipop_graph": 588, "combined_graph": 588, "new_nod": 588, "spam": 588, "375": 588, "subax1": 588, "subplot": 588, "121": 588, "subax2": 588, "122": 588, "attr_dict": 588, "fill_color": 588, "syndrom": 588, "elif": 588, "fontcolor": 588, "2132x2297": 588, "decid": 588, "few": 588, "consider": 588, "choic": 588}, "objects": {"rustworkx": [[26, 0, 1, "", "AllPairsPathLengthMapping"], [30, 0, 1, "", "AllPairsPathMapping"], [34, 0, 1, "", "BFSPredecessors"], [35, 0, 1, "", "BFSSuccessors"], [36, 0, 1, "", "BiconnectedComponents"], [40, 0, 1, "", "CentralityMapping"], [44, 0, 1, "", "Chains"], [45, 0, 1, "", "ColoringStrategy"], [46, 3, 1, "", "DAGHasCycle"], [47, 3, 1, "", "DAGWouldCycle"], [48, 0, 1, "", "EdgeCentralityMapping"], [52, 0, 1, "", "EdgeIndexMap"], [56, 0, 1, "", "EdgeIndices"], [57, 0, 1, "", "EdgeList"], [58, 3, 1, "", "GraphNotBipartite"], [59, 0, 1, "", "IndexPartitionBlock"], [60, 3, 1, "", "InvalidMapping"], [61, 3, 1, "", "InvalidNode"], [62, 3, 1, "", "JSONSerializationError"], [63, 3, 1, "", "NegativeCycle"], [64, 3, 1, "", "NoEdgeBetweenNodes"], [65, 3, 1, "", "NoPathFound"], [66, 3, 1, "", "NoSuitableNeighbors"], [67, 0, 1, "", "NodeIndices"], [68, 0, 1, "", "NodeMap"], [72, 3, 1, "", "NullGraph"], [73, 0, 1, "", "PathLengthMapping"], [77, 0, 1, "", "PathMapping"], [81, 0, 1, "", "Pos2DMapping"], [85, 0, 1, "", "ProductNodeMap"], [89, 0, 1, "", "PyDAG"], [171, 0, 1, "", "PyDiGraph"], [253, 0, 1, "", "PyGraph"], [311, 0, 1, "", "RelationalCoarsestPartition"], [312, 0, 1, "", "TopologicalSorter"], [316, 0, 1, "", "WeightedEdgeList"], [317, 4, 1, "", "adjacency_matrix"], [318, 4, 1, "", "all_pairs_all_simple_paths"], [319, 4, 1, "", "all_pairs_bellman_ford_path_lengths"], [320, 4, 1, "", "all_pairs_bellman_ford_shortest_paths"], [321, 4, 1, "", "all_pairs_dijkstra_path_lengths"], [322, 4, 1, "", "all_pairs_dijkstra_shortest_paths"], [323, 4, 1, "", "all_shortest_paths"], [324, 4, 1, "", "all_simple_paths"], [325, 4, 1, "", "ancestors"], [326, 4, 1, "", "articulation_points"], [327, 4, 1, "", "astar_shortest_path"], [328, 4, 1, "", "barabasi_albert_graph"], [329, 4, 1, "", "bellman_ford_shortest_path_lengths"], [330, 4, 1, "", "bellman_ford_shortest_paths"], [331, 4, 1, "", "betweenness_centrality"], [332, 4, 1, "", "bfs_predecessors"], [333, 4, 1, "", "bfs_search"], [334, 4, 1, "", "bfs_successors"], [335, 4, 1, "", "biconnected_components"], [336, 4, 1, "", "bipartite_layout"], [337, 4, 1, "", "bridges"], [338, 4, 1, "", "cartesian_product"], [339, 4, 1, "", "chain_decomposition"], [340, 4, 1, "", "circular_layout"], [341, 4, 1, "", "closeness_centrality"], [342, 4, 1, "", "collect_bicolor_runs"], [343, 4, 1, "", "collect_runs"], [344, 4, 1, "", "complement"], [345, 4, 1, "", "connected_components"], [346, 4, 1, "", "connected_subgraphs"], [347, 4, 1, "", "core_number"], [348, 4, 1, "", "cycle_basis"], [349, 4, 1, "", "dag_longest_path"], [350, 4, 1, "", "dag_longest_path_length"], [351, 4, 1, "", "dag_weighted_longest_path"], [352, 4, 1, "", "dag_weighted_longest_path_length"], [353, 4, 1, "", "degree_centrality"], [354, 4, 1, "", "descendants"], [355, 4, 1, "", "dfs_edges"], [356, 4, 1, "", "dfs_search"], [357, 4, 1, "", "digraph_adjacency_matrix"], [358, 4, 1, "", "digraph_all_pairs_all_simple_paths"], [359, 4, 1, "", "digraph_all_pairs_bellman_ford_path_lengths"], [360, 4, 1, "", "digraph_all_pairs_bellman_ford_shortest_paths"], [361, 4, 1, "", "digraph_all_pairs_dijkstra_path_lengths"], [362, 4, 1, "", "digraph_all_pairs_dijkstra_shortest_paths"], [363, 4, 1, "", "digraph_all_shortest_paths"], [364, 4, 1, "", "digraph_all_simple_paths"], [365, 4, 1, "", "digraph_astar_shortest_path"], [366, 4, 1, "", "digraph_bellman_ford_shortest_path_lengths"], [367, 4, 1, "", "digraph_betweenness_centrality"], [368, 4, 1, "", "digraph_bfs_search"], [369, 4, 1, "", "digraph_bipartite_layout"], [370, 4, 1, "", "digraph_cartesian_product"], [371, 4, 1, "", "digraph_circular_layout"], [372, 4, 1, "", "digraph_closeness_centrality"], [373, 4, 1, "", "digraph_complement"], [374, 4, 1, "", "digraph_core_number"], [375, 4, 1, "", "digraph_dfs_edges"], [376, 4, 1, "", "digraph_dfs_search"], [377, 4, 1, "", "digraph_dijkstra_search"], [378, 4, 1, "", "digraph_dijkstra_shortest_path_lengths"], [379, 4, 1, "", "digraph_dijkstra_shortest_paths"], [380, 4, 1, "", "digraph_distance_matrix"], [381, 4, 1, "", "digraph_edge_betweenness_centrality"], [382, 4, 1, "", "digraph_eigenvector_centrality"], [383, 4, 1, "", "digraph_find_cycle"], [384, 4, 1, "", "digraph_floyd_warshall"], [385, 4, 1, "", "digraph_floyd_warshall_numpy"], [386, 4, 1, "", "digraph_floyd_warshall_successor_and_distance"], [387, 4, 1, "", "digraph_is_isomorphic"], [388, 4, 1, "", "digraph_is_subgraph_isomorphic"], [389, 4, 1, "", "digraph_k_shortest_path_lengths"], [390, 4, 1, "", "digraph_katz_centrality"], [391, 4, 1, "", "digraph_longest_simple_path"], [392, 4, 1, "", "digraph_maximum_bisimulation"], [393, 4, 1, "", "digraph_node_link_json"], [394, 4, 1, "", "digraph_num_shortest_paths_unweighted"], [395, 4, 1, "", "digraph_random_layout"], [396, 4, 1, "", "digraph_shell_layout"], [397, 4, 1, "", "digraph_spiral_layout"], [398, 4, 1, "", "digraph_spring_layout"], [399, 4, 1, "", "digraph_tensor_product"], [400, 4, 1, "", "digraph_transitivity"], [401, 4, 1, "", "digraph_union"], [402, 4, 1, "", "digraph_unweighted_average_shortest_path_length"], [403, 4, 1, "", "digraph_vf2_mapping"], [404, 4, 1, "", "dijkstra_search"], [405, 4, 1, "", "dijkstra_shortest_path_lengths"], [406, 4, 1, "", "dijkstra_shortest_paths"], [407, 4, 1, "", "directed_barabasi_albert_graph"], [408, 4, 1, "", "directed_gnm_random_graph"], [409, 4, 1, "", "directed_gnp_random_graph"], [410, 4, 1, "", "directed_random_bipartite_graph"], [411, 4, 1, "", "directed_sbm_random_graph"], [412, 4, 1, "", "distance_matrix"], [413, 4, 1, "", "dominance_frontiers"], [414, 4, 1, "", "edge_betweenness_centrality"], [415, 4, 1, "", "eigenvector_centrality"], [416, 4, 1, "", "find_negative_cycle"], [417, 4, 1, "", "floyd_warshall"], [418, 4, 1, "", "floyd_warshall_numpy"], [419, 4, 1, "", "floyd_warshall_successor_and_distance"], [420, 4, 1, "", "from_node_link_json_file"], [448, 4, 1, "", "graph_adjacency_matrix"], [449, 4, 1, "", "graph_all_pairs_all_simple_paths"], [450, 4, 1, "", "graph_all_pairs_bellman_ford_path_lengths"], [451, 4, 1, "", "graph_all_pairs_bellman_ford_shortest_paths"], [452, 4, 1, "", "graph_all_pairs_dijkstra_path_lengths"], [453, 4, 1, "", "graph_all_pairs_dijkstra_shortest_paths"], [454, 4, 1, "", "graph_all_shortest_paths"], [455, 4, 1, "", "graph_all_simple_paths"], [456, 4, 1, "", "graph_astar_shortest_path"], [457, 4, 1, "", "graph_bellman_ford_shortest_path_lengths"], [458, 4, 1, "", "graph_betweenness_centrality"], [459, 4, 1, "", "graph_bfs_search"], [460, 4, 1, "", "graph_bipartite_edge_color"], [461, 4, 1, "", "graph_bipartite_layout"], [462, 4, 1, "", "graph_cartesian_product"], [463, 4, 1, "", "graph_circular_layout"], [464, 4, 1, "", "graph_closeness_centrality"], [465, 4, 1, "", "graph_complement"], [466, 4, 1, "", "graph_core_number"], [467, 4, 1, "", "graph_dfs_edges"], [468, 4, 1, "", "graph_dfs_search"], [469, 4, 1, "", "graph_dijkstra_search"], [470, 4, 1, "", "graph_dijkstra_shortest_path_lengths"], [471, 4, 1, "", "graph_dijkstra_shortest_paths"], [472, 4, 1, "", "graph_distance_matrix"], [473, 4, 1, "", "graph_edge_betweenness_centrality"], [474, 4, 1, "", "graph_eigenvector_centrality"], [475, 4, 1, "", "graph_floyd_warshall"], [476, 4, 1, "", "graph_floyd_warshall_numpy"], [477, 4, 1, "", "graph_floyd_warshall_successor_and_distance"], [478, 4, 1, "", "graph_greedy_color"], [479, 4, 1, "", "graph_greedy_edge_color"], [480, 4, 1, "", "graph_is_isomorphic"], [481, 4, 1, "", "graph_is_subgraph_isomorphic"], [482, 4, 1, "", "graph_k_shortest_path_lengths"], [483, 4, 1, "", "graph_katz_centrality"], [484, 4, 1, "", "graph_line_graph"], [485, 4, 1, "", "graph_longest_simple_path"], [486, 4, 1, "", "graph_misra_gries_edge_color"], [487, 4, 1, "", "graph_node_link_json"], [488, 4, 1, "", "graph_num_shortest_paths_unweighted"], [489, 4, 1, "", "graph_random_layout"], [490, 4, 1, "", "graph_shell_layout"], [491, 4, 1, "", "graph_spiral_layout"], [492, 4, 1, "", "graph_spring_layout"], [493, 4, 1, "", "graph_tensor_product"], [494, 4, 1, "", "graph_token_swapper"], [495, 4, 1, "", "graph_transitivity"], [496, 4, 1, "", "graph_union"], [497, 4, 1, "", "graph_unweighted_average_shortest_path_length"], [498, 4, 1, "", "graph_vf2_mapping"], [499, 4, 1, "", "has_path"], [500, 4, 1, "", "hits"], [501, 4, 1, "", "hyperbolic_random_graph"], [502, 4, 1, "", "immediate_dominators"], [503, 4, 1, "", "in_degree_centrality"], [504, 4, 1, "", "is_bipartite"], [505, 4, 1, "", "is_connected"], [506, 4, 1, "", "is_directed_acyclic_graph"], [507, 4, 1, "", "is_isomorphic"], [508, 4, 1, "", "is_isomorphic_node_match"], [509, 4, 1, "", "is_matching"], [510, 4, 1, "", "is_maximal_matching"], [511, 4, 1, "", "is_planar"], [512, 4, 1, "", "is_subgraph_isomorphic"], [513, 4, 1, "", "is_weakly_connected"], [514, 4, 1, "", "isolates"], [515, 4, 1, "", "k_shortest_path_lengths"], [516, 4, 1, "", "katz_centrality"], [517, 4, 1, "", "layers"], [518, 4, 1, "", "lexicographical_topological_sort"], [519, 4, 1, "", "longest_simple_path"], [520, 4, 1, "", "max_weight_matching"], [521, 4, 1, "", "metric_closure"], [522, 4, 1, "", "minimum_spanning_edges"], [523, 4, 1, "", "minimum_spanning_tree"], [524, 4, 1, "", "negative_edge_cycle"], [525, 4, 1, "", "networkx_converter"], [526, 4, 1, "", "node_connected_component"], [527, 4, 1, "", "node_link_json"], [528, 4, 1, "", "num_shortest_paths_unweighted"], [529, 4, 1, "", "number_connected_components"], [530, 4, 1, "", "number_weakly_connected_components"], [531, 4, 1, "", "out_degree_centrality"], [532, 4, 1, "", "pagerank"], [533, 4, 1, "", "parse_node_link_json"], [534, 4, 1, "", "random_geometric_graph"], [535, 4, 1, "", "random_layout"], [536, 4, 1, "", "read_graphml"], [537, 4, 1, "", "shell_layout"], [538, 4, 1, "", "simple_cycles"], [539, 4, 1, "", "spiral_layout"], [540, 4, 1, "", "spring_layout"], [541, 4, 1, "", "steiner_tree"], [542, 4, 1, "", "stoer_wagner_min_cut"], [543, 4, 1, "", "strongly_connected_components"], [544, 4, 1, "", "topological_generations"], [545, 4, 1, "", "topological_sort"], [546, 4, 1, "", "transitive_reduction"], [547, 4, 1, "", "transitivity"], [548, 4, 1, "", "two_color"], [549, 4, 1, "", "undirected_gnm_random_graph"], [550, 4, 1, "", "undirected_gnp_random_graph"], [551, 4, 1, "", "undirected_random_bipartite_graph"], [552, 4, 1, "", "undirected_sbm_random_graph"], [553, 4, 1, "", "union"], [554, 4, 1, "", "unweighted_average_shortest_path_length"], [555, 4, 1, "", "vf2_mapping"], [579, 4, 1, "", "weakly_connected_components"]], "rustworkx.AllPairsPathLengthMapping": [[27, 1, 1, "", "items"], [28, 1, 1, "", "keys"], [29, 1, 1, "", "values"]], "rustworkx.AllPairsPathMapping": [[31, 1, 1, "", "items"], [32, 1, 1, "", "keys"], [33, 1, 1, "", "values"]], "rustworkx.BiconnectedComponents": [[37, 1, 1, "", "items"], [38, 1, 1, "", "keys"], [39, 1, 1, "", "values"]], "rustworkx.CentralityMapping": [[41, 1, 1, "", "items"], [42, 1, 1, "", "keys"], [43, 1, 1, "", "values"]], "rustworkx.ColoringStrategy": [[45, 2, 1, "", "Degree"], [45, 2, 1, "", "IndependentSet"], [45, 2, 1, "", "Saturation"]], "rustworkx.EdgeCentralityMapping": [[49, 1, 1, "", "items"], [50, 1, 1, "", "keys"], [51, 1, 1, "", "values"]], "rustworkx.EdgeIndexMap": [[53, 1, 1, "", "items"], [54, 1, 1, "", "keys"], [55, 1, 1, "", "values"]], "rustworkx.NodeMap": [[69, 1, 1, "", "items"], [70, 1, 1, "", "keys"], [71, 1, 1, "", "values"]], "rustworkx.PathLengthMapping": [[74, 1, 1, "", "items"], [75, 1, 1, "", "keys"], [76, 1, 1, "", "values"]], "rustworkx.PathMapping": [[78, 1, 1, "", "items"], [79, 1, 1, "", "keys"], [80, 1, 1, "", "values"]], "rustworkx.Pos2DMapping": [[82, 1, 1, "", "items"], [83, 1, 1, "", "keys"], [84, 1, 1, "", "values"]], "rustworkx.ProductNodeMap": [[86, 1, 1, "", "items"], [87, 1, 1, "", "keys"], [88, 1, 1, "", "values"]], "rustworkx.PyDAG": [[90, 1, 1, "", "add_child"], [91, 1, 1, "", "add_edge"], [92, 1, 1, "", "add_edges_from"], [93, 1, 1, "", "add_edges_from_no_data"], [94, 1, 1, "", "add_node"], [95, 1, 1, "", "add_nodes_from"], [96, 1, 1, "", "add_parent"], [97, 1, 1, "", "adj"], [98, 1, 1, "", "adj_direction"], [89, 2, 1, "", "attrs"], [89, 2, 1, "", "check_cycle"], [99, 1, 1, "", "clear"], [100, 1, 1, "", "clear_edges"], [101, 1, 1, "", "compose"], [102, 1, 1, "", "contract_nodes"], [103, 1, 1, "", "copy"], [104, 1, 1, "", "edge_index_map"], [105, 1, 1, "", "edge_indices"], [106, 1, 1, "", "edge_indices_from_endpoints"], [107, 1, 1, "", "edge_list"], [108, 1, 1, "", "edge_subgraph"], [109, 1, 1, "", "edges"], [110, 1, 1, "", "extend_from_edge_list"], [111, 1, 1, "", "extend_from_weighted_edge_list"], [112, 1, 1, "", "filter_edges"], [113, 1, 1, "", "filter_nodes"], [114, 1, 1, "", "find_adjacent_node_by_edge"], [115, 1, 1, "", "find_node_by_weight"], [116, 1, 1, "", "find_predecessor_node_by_edge"], [117, 1, 1, "", "find_predecessors_by_edge"], [118, 1, 1, "", "find_successors_by_edge"], [119, 1, 1, "", "from_adjacency_matrix"], [120, 1, 1, "", "from_complex_adjacency_matrix"], [121, 1, 1, "", "get_all_edge_data"], [122, 1, 1, "", "get_edge_data"], [123, 1, 1, "", "get_edge_data_by_index"], [124, 1, 1, "", "get_edge_endpoints_by_index"], [125, 1, 1, "", "get_node_data"], [126, 1, 1, "", "has_edge"], [127, 1, 1, "", "has_node"], [128, 1, 1, "", "has_parallel_edges"], [129, 1, 1, "", "in_degree"], [130, 1, 1, "", "in_edges"], [131, 1, 1, "", "incident_edge_index_map"], [132, 1, 1, "", "incident_edges"], [133, 1, 1, "", "insert_node_on_in_edges"], [134, 1, 1, "", "insert_node_on_in_edges_multiple"], [135, 1, 1, "", "insert_node_on_out_edges"], [136, 1, 1, "", "insert_node_on_out_edges_multiple"], [137, 1, 1, "", "is_symmetric"], [138, 1, 1, "", "make_symmetric"], [139, 1, 1, "", "merge_nodes"], [89, 2, 1, "", "multigraph"], [140, 1, 1, "", "neighbors"], [141, 1, 1, "", "neighbors_undirected"], [142, 1, 1, "", "node_indexes"], [143, 1, 1, "", "node_indices"], [144, 1, 1, "", "nodes"], [145, 1, 1, "", "num_edges"], [146, 1, 1, "", "num_nodes"], [147, 1, 1, "", "out_degree"], [148, 1, 1, "", "out_edges"], [149, 1, 1, "", "predecessor_indices"], [150, 1, 1, "", "predecessors"], [151, 1, 1, "", "read_edge_list"], [152, 1, 1, "", "remove_edge"], [153, 1, 1, "", "remove_edge_from_index"], [154, 1, 1, "", "remove_edges_from"], [155, 1, 1, "", "remove_node"], [156, 1, 1, "", "remove_node_retain_edges"], [157, 1, 1, "", "remove_node_retain_edges_by_id"], [158, 1, 1, "", "remove_node_retain_edges_by_key"], [159, 1, 1, "", "remove_nodes_from"], [160, 1, 1, "", "reverse"], [161, 1, 1, "", "subgraph"], [162, 1, 1, "", "substitute_node_with_subgraph"], [163, 1, 1, "", "successor_indices"], [164, 1, 1, "", "successors"], [165, 1, 1, "", "to_dot"], [166, 1, 1, "", "to_undirected"], [167, 1, 1, "", "update_edge"], [168, 1, 1, "", "update_edge_by_index"], [169, 1, 1, "", "weighted_edge_list"], [170, 1, 1, "", "write_edge_list"]], "rustworkx.PyDiGraph": [[172, 1, 1, "", "add_child"], [173, 1, 1, "", "add_edge"], [174, 1, 1, "", "add_edges_from"], [175, 1, 1, "", "add_edges_from_no_data"], [176, 1, 1, "", "add_node"], [177, 1, 1, "", "add_nodes_from"], [178, 1, 1, "", "add_parent"], [179, 1, 1, "", "adj"], [180, 1, 1, "", "adj_direction"], [171, 2, 1, "", "attrs"], [171, 2, 1, "", "check_cycle"], [181, 1, 1, "", "clear"], [182, 1, 1, "", "clear_edges"], [183, 1, 1, "", "compose"], [184, 1, 1, "", "contract_nodes"], [185, 1, 1, "", "copy"], [186, 1, 1, "", "edge_index_map"], [187, 1, 1, "", "edge_indices"], [188, 1, 1, "", "edge_indices_from_endpoints"], [189, 1, 1, "", "edge_list"], [190, 1, 1, "", "edge_subgraph"], [191, 1, 1, "", "edges"], [192, 1, 1, "", "extend_from_edge_list"], [193, 1, 1, "", "extend_from_weighted_edge_list"], [194, 1, 1, "", "filter_edges"], [195, 1, 1, "", "filter_nodes"], [196, 1, 1, "", "find_adjacent_node_by_edge"], [197, 1, 1, "", "find_node_by_weight"], [198, 1, 1, "", "find_predecessor_node_by_edge"], [199, 1, 1, "", "find_predecessors_by_edge"], [200, 1, 1, "", "find_successors_by_edge"], [201, 1, 1, "", "from_adjacency_matrix"], [202, 1, 1, "", "from_complex_adjacency_matrix"], [203, 1, 1, "", "get_all_edge_data"], [204, 1, 1, "", "get_edge_data"], [205, 1, 1, "", "get_edge_data_by_index"], [206, 1, 1, "", "get_edge_endpoints_by_index"], [207, 1, 1, "", "get_node_data"], [208, 1, 1, "", "has_edge"], [209, 1, 1, "", "has_node"], [210, 1, 1, "", "has_parallel_edges"], [211, 1, 1, "", "in_degree"], [212, 1, 1, "", "in_edges"], [213, 1, 1, "", "incident_edge_index_map"], [214, 1, 1, "", "incident_edges"], [215, 1, 1, "", "insert_node_on_in_edges"], [216, 1, 1, "", "insert_node_on_in_edges_multiple"], [217, 1, 1, "", "insert_node_on_out_edges"], [218, 1, 1, "", "insert_node_on_out_edges_multiple"], [219, 1, 1, "", "is_symmetric"], [220, 1, 1, "", "make_symmetric"], [221, 1, 1, "", "merge_nodes"], [171, 2, 1, "", "multigraph"], [222, 1, 1, "", "neighbors"], [223, 1, 1, "", "neighbors_undirected"], [224, 1, 1, "", "node_indexes"], [225, 1, 1, "", "node_indices"], [226, 1, 1, "", "nodes"], [227, 1, 1, "", "num_edges"], [228, 1, 1, "", "num_nodes"], [229, 1, 1, "", "out_degree"], [230, 1, 1, "", "out_edges"], [231, 1, 1, "", "predecessor_indices"], [232, 1, 1, "", "predecessors"], [233, 1, 1, "", "read_edge_list"], [234, 1, 1, "", "remove_edge"], [235, 1, 1, "", "remove_edge_from_index"], [236, 1, 1, "", "remove_edges_from"], [237, 1, 1, "", "remove_node"], [238, 1, 1, "", "remove_node_retain_edges"], [239, 1, 1, "", "remove_node_retain_edges_by_id"], [240, 1, 1, "", "remove_node_retain_edges_by_key"], [241, 1, 1, "", "remove_nodes_from"], [242, 1, 1, "", "reverse"], [243, 1, 1, "", "subgraph"], [244, 1, 1, "", "substitute_node_with_subgraph"], [245, 1, 1, "", "successor_indices"], [246, 1, 1, "", "successors"], [247, 1, 1, "", "to_dot"], [248, 1, 1, "", "to_undirected"], [249, 1, 1, "", "update_edge"], [250, 1, 1, "", "update_edge_by_index"], [251, 1, 1, "", "weighted_edge_list"], [252, 1, 1, "", "write_edge_list"]], "rustworkx.PyGraph": [[254, 1, 1, "", "add_edge"], [255, 1, 1, "", "add_edges_from"], [256, 1, 1, "", "add_edges_from_no_data"], [257, 1, 1, "", "add_node"], [258, 1, 1, "", "add_nodes_from"], [259, 1, 1, "", "adj"], [253, 2, 1, "", "attrs"], [260, 1, 1, "", "clear"], [261, 1, 1, "", "clear_edges"], [262, 1, 1, "", "compose"], [263, 1, 1, "", "contract_nodes"], [264, 1, 1, "", "copy"], [265, 1, 1, "", "degree"], [266, 1, 1, "", "edge_index_map"], [267, 1, 1, "", "edge_indices"], [268, 1, 1, "", "edge_indices_from_endpoints"], [269, 1, 1, "", "edge_list"], [270, 1, 1, "", "edge_subgraph"], [271, 1, 1, "", "edges"], [272, 1, 1, "", "extend_from_edge_list"], [273, 1, 1, "", "extend_from_weighted_edge_list"], [274, 1, 1, "", "filter_edges"], [275, 1, 1, "", "filter_nodes"], [276, 1, 1, "", "find_node_by_weight"], [277, 1, 1, "", "from_adjacency_matrix"], [278, 1, 1, "", "from_complex_adjacency_matrix"], [279, 1, 1, "", "get_all_edge_data"], [280, 1, 1, "", "get_edge_data"], [281, 1, 1, "", "get_edge_data_by_index"], [282, 1, 1, "", "get_edge_endpoints_by_index"], [283, 1, 1, "", "get_node_data"], [284, 1, 1, "", "has_edge"], [285, 1, 1, "", "has_node"], [286, 1, 1, "", "has_parallel_edges"], [287, 1, 1, "", "in_edges"], [288, 1, 1, "", "incident_edge_index_map"], [289, 1, 1, "", "incident_edges"], [253, 2, 1, "", "multigraph"], [290, 1, 1, "", "neighbors"], [291, 1, 1, "", "node_indexes"], [292, 1, 1, "", "node_indices"], [293, 1, 1, "", "nodes"], [294, 1, 1, "", "num_edges"], [295, 1, 1, "", "num_nodes"], [296, 1, 1, "", "out_edges"], [297, 1, 1, "", "read_edge_list"], [298, 1, 1, "", "remove_edge"], [299, 1, 1, "", "remove_edge_from_index"], [300, 1, 1, "", "remove_edges_from"], [301, 1, 1, "", "remove_node"], [302, 1, 1, "", "remove_nodes_from"], [303, 1, 1, "", "subgraph"], [304, 1, 1, "", "substitute_node_with_subgraph"], [305, 1, 1, "", "to_directed"], [306, 1, 1, "", "to_dot"], [307, 1, 1, "", "update_edge"], [308, 1, 1, "", "update_edge_by_index"], [309, 1, 1, "", "weighted_edge_list"], [310, 1, 1, "", "write_edge_list"]], "rustworkx.TopologicalSorter": [[313, 1, 1, "", "done"], [314, 1, 1, "", "get_ready"], [315, 1, 1, "", "is_active"]], "rustworkx.generators": [[421, 4, 1, "", "barbell_graph"], [422, 4, 1, "", "binomial_tree_graph"], [423, 4, 1, "", "complete_graph"], [424, 4, 1, "", "cycle_graph"], [425, 4, 1, "", "directed_binomial_tree_graph"], [426, 4, 1, "", "directed_complete_graph"], [427, 4, 1, "", "directed_cycle_graph"], [428, 4, 1, "", "directed_empty_graph"], [429, 4, 1, "", "directed_grid_graph"], [430, 4, 1, "", "directed_heavy_hex_graph"], [431, 4, 1, "", "directed_heavy_square_graph"], [432, 4, 1, "", "directed_hexagonal_lattice_graph"], [433, 4, 1, "", "directed_mesh_graph"], [434, 4, 1, "", "directed_path_graph"], [435, 4, 1, "", "directed_star_graph"], [436, 4, 1, "", "dorogovtsev_goltsev_mendes_graph"], [437, 4, 1, "", "empty_graph"], [438, 4, 1, "", "full_rary_tree"], [439, 4, 1, "", "generalized_petersen_graph"], [440, 4, 1, "", "grid_graph"], [441, 4, 1, "", "heavy_hex_graph"], [442, 4, 1, "", "heavy_square_graph"], [443, 4, 1, "", "hexagonal_lattice_graph"], [444, 4, 1, "", "lollipop_graph"], [445, 4, 1, "", "mesh_graph"], [446, 4, 1, "", "path_graph"], [447, 4, 1, "", "star_graph"]], "rustworkx.visit": [[556, 0, 1, "", "BFSVisitor"], [563, 0, 1, "", "DFSVisitor"], [569, 0, 1, "", "DijkstraVisitor"], [575, 3, 1, "", "PruneSearch"], [576, 3, 1, "", "StopSearch"]], "rustworkx.visit.BFSVisitor": [[557, 1, 1, "", "black_target_edge"], [558, 1, 1, "", "discover_vertex"], [559, 1, 1, "", "finish_vertex"], [560, 1, 1, "", "gray_target_edge"], [561, 1, 1, "", "non_tree_edge"], [562, 1, 1, "", "tree_edge"]], "rustworkx.visit.DFSVisitor": [[564, 1, 1, "", "back_edge"], [565, 1, 1, "", "discover_vertex"], [566, 1, 1, "", "finish_vertex"], [567, 1, 1, "", "forward_or_cross_edge"], [568, 1, 1, "", "tree_edge"]], "rustworkx.visit.DijkstraVisitor": [[570, 1, 1, "", "discover_vertex"], [571, 1, 1, "", "edge_not_relaxed"], [572, 1, 1, "", "edge_relaxed"], [573, 1, 1, "", "examine_edge"], [574, 1, 1, "", "finish_vertex"]], "rustworkx.visualization": [[577, 4, 1, "", "graphviz_draw"], [578, 4, 1, "", "mpl_draw"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:exception", "4": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "exception", "Python exception"], "4": ["py", "function", "Python function"]}, "titleterms": {"contribut": 0, "rustworkx": [0, 20, 27, 28, 29, 31, 32, 33, 37, 38, 39, 41, 42, 43, 46, 47, 49, 50, 51, 53, 54, 55, 58, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 587, 588], "make": 0, "chang": 0, "code": 0, "modul": 0, "export": 0, "lib": 0, "r": 0, "ad": 0, "function": [0, 7, 11, 21, 22, 23, 24, 583], "directori": 0, "when": 0, "singl": [0, 580], "file": 0, "i": 0, "enough": 0, "core": [0, 581], "test": 0, "run": 0, "specif": 0, "python": 0, "version": 0, "subset": 0, "visual": [0, 577, 578, 583, 585, 589], "style": 0, "rust": 0, "lint": 0, "build": 0, "document": [0, 581], "type": [0, 16], "annot": 0, "releas": [0, 584], "note": [0, 584], "new": [0, 584], "link": [0, 9], "issu": 0, "gener": [0, 18, 24, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 585, 588], "local": 0, "pull": 0, "request": 0, "review": 0, "ci": 0, "merg": 0, "queue": 0, "stabl": 0, "branch": 0, "polici": 0, "backport": 0, "procedur": 0, "manual": 0, "central": [1, 585], "color": 2, "connect": 3, "cycl": 3, "dag": [4, 586], "algorithm": [4, 7, 11], "domin": 5, "graph": [6, 19, 24, 580, 583, 585, 586, 588], "oper": [6, 588], "isomorph": [8, 580], "analysi": 9, "match": 10, "other": [11, 580, 584], "shortest": [12, 580], "path": [12, 580], "travers": 13, "tree": 14, "convert": [15, 583], "custom": 16, "return": 16, "except": 17, "class": [19, 583], "api": [20, 22, 23, 583, 589], "refer": 20, "layout": 21, "pydigraph": [22, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252], "pygraph": [23, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "random": 24, "serial": 25, "allpairspathlengthmap": [26, 27, 28, 29], "item": [27, 31, 37, 41, 49, 53, 69, 74, 78, 82, 86], "kei": [28, 32, 38, 42, 50, 54, 70, 75, 79, 83, 87, 583], "valu": [29, 33, 39, 43, 51, 55, 71, 76, 80, 84, 88], "allpairspathmap": [30, 31, 32, 33], "bfspredecessor": 34, "bfssuccessor": 35, "biconnectedcompon": [36, 37, 38, 39], "centralitymap": [40, 41, 42, 43], "chain": 44, "coloringstrategi": 45, "strategi": 45, "descript": 45, "daghascycl": 46, "dagwouldcycl": 47, "edgecentralitymap": [48, 49, 50, 51], "edgeindexmap": [52, 53, 54, 55], "edgeindic": 56, "edgelist": 57, "graphnotbipartit": 58, "indexpartitionblock": 59, "invalidmap": 60, "invalidnod": 61, "jsonserializationerror": 62, "negativecycl": 63, "noedgebetweennod": 64, "nopathfound": 65, "nosuitableneighbor": 66, "nodeindic": 67, "nodemap": [68, 69, 70, 71], "nullgraph": 72, "pathlengthmap": [73, 74, 75, 76], "pathmap": [77, 78, 79, 80], "pos2dmap": [81, 82, 83, 84], "productnodemap": [85, 86, 87, 88], "pydag": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "add_child": [90, 172], "add_edg": [91, 173, 254], "add_edges_from": [92, 174, 255], "add_edges_from_no_data": [93, 175, 256], "add_nod": [94, 176, 257], "add_nodes_from": [95, 177, 258], "add_par": [96, 178], "adj": [97, 179, 259], "adj_direct": [98, 180], "clear": [99, 181, 260], "clear_edg": [100, 182, 261], "compos": [101, 183, 262], "contract_nod": [102, 184, 263], "copi": [103, 185, 264], "edge_index_map": [104, 186, 266], "edge_indic": [105, 187, 267], "edge_indices_from_endpoint": [106, 188, 268], "edge_list": [107, 189, 269], "edge_subgraph": [108, 190, 270], "edg": [109, 191, 271, 583, 588], "extend_from_edge_list": [110, 192, 272], "extend_from_weighted_edge_list": [111, 193, 273], "filter_edg": [112, 194, 274], "filter_nod": [113, 195, 275], "find_adjacent_node_by_edg": [114, 196], "find_node_by_weight": [115, 197, 276], "find_predecessor_node_by_edg": [116, 198], "find_predecessors_by_edg": [117, 199], "find_successors_by_edg": [118, 200], "from_adjacency_matrix": [119, 201, 277], "from_complex_adjacency_matrix": [120, 202, 278], "get_all_edge_data": [121, 203, 279], "get_edge_data": [122, 204, 280], "get_edge_data_by_index": [123, 205, 281], "get_edge_endpoints_by_index": [124, 206, 282], "get_node_data": [125, 207, 283], "has_edg": [126, 208, 284], "has_nod": [127, 209, 285], "has_parallel_edg": [128, 210, 286], "in_degre": [129, 211], "in_edg": [130, 212, 287], "incident_edge_index_map": [131, 213, 288], "incident_edg": [132, 214, 289], "insert_node_on_in_edg": [133, 215], "insert_node_on_in_edges_multipl": [134, 216], "insert_node_on_out_edg": [135, 217], "insert_node_on_out_edges_multipl": [136, 218], "is_symmetr": [137, 219], "make_symmetr": [138, 220], "merge_nod": [139, 221], "neighbor": [140, 222, 290, 588], "neighbors_undirect": [141, 223], "node_index": [142, 224, 291], "node_indic": [143, 225, 292], "node": [144, 226, 293, 583, 588], "num_edg": [145, 227, 294], "num_nod": [146, 228, 295], "out_degre": [147, 229], "out_edg": [148, 230, 296], "predecessor_indic": [149, 231], "predecessor": [150, 232], "read_edge_list": [151, 233, 297], "remove_edg": [152, 234, 298], "remove_edge_from_index": [153, 235, 299], "remove_edges_from": [154, 236, 300], "remove_nod": [155, 237, 301], "remove_node_retain_edg": [156, 238], "remove_node_retain_edges_by_id": [157, 239], "remove_node_retain_edges_by_kei": [158, 240], "remove_nodes_from": [159, 241, 302], "revers": [160, 242], "subgraph": [161, 243, 303, 580], "substitute_node_with_subgraph": [162, 244, 304], "successor_indic": [163, 245], "successor": [164, 246], "to_dot": [165, 247, 306], "to_undirect": [166, 248], "update_edg": [167, 249, 307], "update_edge_by_index": [168, 250, 308], "weighted_edge_list": [169, 251, 309], "write_edge_list": [170, 252, 310], "degre": 265, "to_direct": 305, "relationalcoarsestpartit": 311, "topologicalsort": [312, 313, 314, 315], "done": 313, "get_readi": 314, "is_act": 315, "weightededgelist": 316, "adjacency_matrix": 317, "all_pairs_all_simple_path": 318, "all_pairs_bellman_ford_path_length": 319, "all_pairs_bellman_ford_shortest_path": 320, "all_pairs_dijkstra_path_length": 321, "all_pairs_dijkstra_shortest_path": 322, "all_shortest_path": 323, "all_simple_path": 324, "ancestor": 325, "articulation_point": 326, "astar_shortest_path": 327, "barabasi_albert_graph": 328, "bellman_ford_shortest_path_length": 329, "bellman_ford_shortest_path": 330, "betweenness_centr": 331, "see": [331, 367, 381, 414, 458, 473], "also": [331, 367, 381, 414, 458, 473], "bfs_predecessor": 332, "bfs_search": 333, "bfs_successor": 334, "biconnected_compon": 335, "bipartite_layout": 336, "bridg": 337, "cartesian_product": 338, "chain_decomposit": 339, "circular_layout": 340, "closeness_centr": 341, "collect_bicolor_run": 342, "collect_run": 343, "complement": 344, "connected_compon": 345, "connected_subgraph": 346, "core_numb": 347, "cycle_basi": 348, "dag_longest_path": 349, "dag_longest_path_length": 350, "dag_weighted_longest_path": 351, "dag_weighted_longest_path_length": 352, "degree_centr": 353, "descend": 354, "dfs_edg": 355, "dfs_search": 356, "digraph_adjacency_matrix": 357, "digraph_all_pairs_all_simple_path": 358, "digraph_all_pairs_bellman_ford_path_length": 359, "digraph_all_pairs_bellman_ford_shortest_path": 360, "digraph_all_pairs_dijkstra_path_length": 361, "digraph_all_pairs_dijkstra_shortest_path": 362, "digraph_all_shortest_path": 363, "digraph_all_simple_path": 364, "digraph_astar_shortest_path": 365, "digraph_bellman_ford_shortest_path_length": 366, "digraph_betweenness_centr": 367, "digraph_bfs_search": 368, "digraph_bipartite_layout": 369, "digraph_cartesian_product": 370, "digraph_circular_layout": 371, "digraph_closeness_centr": 372, "digraph_compl": 373, "digraph_core_numb": 374, "digraph_dfs_edg": 375, "digraph_dfs_search": 376, "digraph_dijkstra_search": 377, "digraph_dijkstra_shortest_path_length": 378, "digraph_dijkstra_shortest_path": 379, "digraph_distance_matrix": 380, "digraph_edge_betweenness_centr": 381, "digraph_eigenvector_centr": 382, "digraph_find_cycl": 383, "digraph_floyd_warshal": 384, "digraph_floyd_warshall_numpi": 385, "digraph_floyd_warshall_successor_and_dist": 386, "digraph_is_isomorph": 387, "digraph_is_subgraph_isomorph": 388, "digraph_k_shortest_path_length": 389, "digraph_katz_centr": 390, "digraph_longest_simple_path": 391, "digraph_maximum_bisimul": 392, "digraph_node_link_json": 393, "digraph_num_shortest_paths_unweight": 394, "digraph_random_layout": 395, "digraph_shell_layout": 396, "digraph_spiral_layout": 397, "digraph_spring_layout": 398, "digraph_tensor_product": 399, "digraph_transit": 400, "digraph_union": 401, "digraph_unweighted_average_shortest_path_length": 402, "digraph_vf2_map": 403, "dijkstra_search": 404, "dijkstra_shortest_path_length": 405, "dijkstra_shortest_path": 406, "directed_barabasi_albert_graph": 407, "directed_gnm_random_graph": 408, "directed_gnp_random_graph": 409, "directed_random_bipartite_graph": 410, "directed_sbm_random_graph": 411, "distance_matrix": 412, "dominance_fronti": 413, "edge_betweenness_centr": 414, "eigenvector_centr": 415, "find_negative_cycl": 416, "floyd_warshal": 417, "floyd_warshall_numpi": 418, "floyd_warshall_successor_and_dist": 419, "from_node_link_json_fil": 420, "barbell_graph": 421, "binomial_tree_graph": 422, "complete_graph": 423, "cycle_graph": 424, "directed_binomial_tree_graph": 425, "directed_complete_graph": 426, "directed_cycle_graph": 427, "directed_empty_graph": 428, "directed_grid_graph": 429, "directed_heavy_hex_graph": 430, "directed_heavy_square_graph": 431, "directed_hexagonal_lattice_graph": 432, "directed_mesh_graph": 433, "directed_path_graph": 434, "directed_star_graph": 435, "dorogovtsev_goltsev_mendes_graph": 436, "empty_graph": 437, "full_rary_tre": 438, "generalized_petersen_graph": 439, "grid_graph": 440, "heavy_hex_graph": 441, "heavy_square_graph": 442, "hexagonal_lattice_graph": 443, "lollipop_graph": 444, "mesh_graph": 445, "path_graph": 446, "star_graph": 447, "graph_adjacency_matrix": 448, "graph_all_pairs_all_simple_path": 449, "graph_all_pairs_bellman_ford_path_length": 450, "graph_all_pairs_bellman_ford_shortest_path": 451, "graph_all_pairs_dijkstra_path_length": 452, "graph_all_pairs_dijkstra_shortest_path": 453, "graph_all_shortest_path": 454, "graph_all_simple_path": 455, "graph_astar_shortest_path": 456, "graph_bellman_ford_shortest_path_length": 457, "graph_betweenness_centr": 458, "graph_bfs_search": 459, "graph_bipartite_edge_color": 460, "graph_bipartite_layout": 461, "graph_cartesian_product": 462, "graph_circular_layout": 463, "graph_closeness_centr": 464, "graph_compl": 465, "graph_core_numb": 466, "graph_dfs_edg": 467, "graph_dfs_search": 468, "graph_dijkstra_search": 469, "graph_dijkstra_shortest_path_length": 470, "graph_dijkstra_shortest_path": 471, "graph_distance_matrix": 472, "graph_edge_betweenness_centr": 473, "graph_eigenvector_centr": 474, "graph_floyd_warshal": 475, "graph_floyd_warshall_numpi": 476, "graph_floyd_warshall_successor_and_dist": 477, "graph_greedy_color": 478, "graph_greedy_edge_color": 479, "graph_is_isomorph": 480, "graph_is_subgraph_isomorph": 481, "graph_k_shortest_path_length": 482, "graph_katz_centr": 483, "graph_line_graph": 484, "graph_longest_simple_path": 485, "graph_misra_gries_edge_color": 486, "graph_node_link_json": 487, "graph_num_shortest_paths_unweight": 488, "graph_random_layout": 489, "graph_shell_layout": 490, "graph_spiral_layout": 491, "graph_spring_layout": 492, "graph_tensor_product": 493, "graph_token_swapp": 494, "graph_transit": 495, "graph_union": 496, "graph_unweighted_average_shortest_path_length": 497, "graph_vf2_map": 498, "has_path": 499, "hit": 500, "hyperbolic_random_graph": 501, "immediate_domin": 502, "in_degree_centr": 503, "is_bipartit": 504, "is_connect": 505, "is_directed_acyclic_graph": 506, "is_isomorph": 507, "is_isomorphic_node_match": 508, "is_match": 509, "is_maximal_match": 510, "is_planar": 511, "is_subgraph_isomorph": 512, "is_weakly_connect": 513, "isol": 514, "k_shortest_path_length": 515, "katz_centr": 516, "layer": 517, "lexicographical_topological_sort": 518, "longest_simple_path": 519, "max_weight_match": 520, "metric_closur": 521, "minimum_spanning_edg": 522, "minimum_spanning_tre": 523, "negative_edge_cycl": 524, "networkx_convert": 525, "node_connected_compon": 526, "node_link_json": 527, "num_shortest_paths_unweight": 528, "number_connected_compon": 529, "number_weakly_connected_compon": 530, "out_degree_centr": 531, "pagerank": 532, "parse_node_link_json": 533, "random_geometric_graph": 534, "random_layout": 535, "read_graphml": 536, "shell_layout": 537, "simple_cycl": 538, "spiral_layout": 539, "spring_layout": 540, "steiner_tre": 541, "stoer_wagner_min_cut": 542, "strongly_connected_compon": 543, "topological_gener": 544, "topological_sort": 545, "transitive_reduct": 546, "transit": 547, "two_color": 548, "undirected_gnm_random_graph": 549, "undirected_gnp_random_graph": 550, "undirected_random_bipartite_graph": 551, "undirected_sbm_random_graph": 552, "union": 553, "unweighted_average_shortest_path_length": 554, "vf2_map": 555, "bfsvisitor": [556, 557, 558, 559, 560, 561, 562], "visit": [557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576], "black_target_edg": 557, "discover_vertex": [558, 565, 570], "finish_vertex": [559, 566, 574], "gray_target_edg": 560, "non_tree_edg": 561, "tree_edg": [562, 568], "dfsvisitor": [563, 564, 565, 566, 567, 568], "back_edg": 564, "forward_or_cross_edg": 567, "dijkstravisitor": [569, 570, 571, 572, 573, 574], "edge_not_relax": 571, "edge_relax": 572, "examine_edg": 573, "prunesearch": 575, "stopsearch": 576, "graphviz_draw": 577, "mpl_draw": 578, "weakly_connected_compon": 579, "comparison": 580, "benchmark": 580, "With": 580, "librari": 580, "creation": 580, "sourc": 580, "all": 580, "pair": 580, "citat": 580, "project": 581, "histori": 581, "get": 582, "start": 582, "instal": [582, 588], "platform": 582, "without": 582, "precompil": 582, "binari": 582, "support": 582, "tier": 582, "1": [582, 584], "2": [582, 584], "3": 582, "4": [582, 584], "us": [582, 588], "networkx": 583, "user": 583, "some": 583, "differ": 583, "data": [583, 588], "attribut": [583, 588], "examin": [583, 588], "element": [583, 588], "equival": 583, "constructor": 583, "modifi": [583, 588], "matrix": 583, "matplotlib": 583, "drawer": 583, "from": [583, 588], "gap": 583, "0": 584, "16": 584, "prelud": 584, "featur": 584, "upgrad": 584, "bug": 584, "fix": 584, "15": 584, "14": 584, "deprec": 584, "13": 584, "12": 584, "11": 584, "10": 584, "9": 584, "8": 584, "7": 584, "6": 584, "5": 584, "work": 585, "between": 585, "calcul": 585, "direct": [586, 588], "acycl": 586, "applic": 586, "task": 586, "schedul": 586, "qiskit": 586, "": 586, "compil": 586, "tutori": 587, "guid": 587, "introduct": 588, "how": 588, "import": 588, "creat": 588, "remov": 588, "what": 588, "payload": 588, "access": 588, "multigraph": 588, "analyz": 588, "draw": 588}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"Contributing": [[0, "contributing"]], "Contributing to rustworkx": [[0, "contributing-to-rustworkx"]], "Making changes to the code": [[0, "making-changes-to-the-code"]], "Module exports in lib.rs": [[0, "module-exports-in-lib-rs"]], "Adding and changing functions in modules": [[0, "adding-and-changing-functions-in-modules"]], "Module directories: when a single file is not enough": [[0, "module-directories-when-a-single-file-is-not-enough"]], "rustworkx-core": [[0, "rustworkx-core"], [581, "rustworkx-core"]], "Tests": [[0, "tests"]], "Running tests with a specific Python version": [[0, "running-tests-with-a-specific-python-version"]], "Running subsets of tests": [[0, "running-subsets-of-tests"]], "Visualization Tests": [[0, "visualization-tests"]], "rustworkx-core tests": [[0, "rustworkx-core-tests"]], "Style": [[0, "style"]], "Rust": [[0, "rust"]], "Lint": [[0, "lint"]], "Python": [[0, "python"]], "Building documentation": [[0, "building-documentation"]], "rustworkx-core documentation": [[0, "rustworkx-core-documentation"]], "Type Annotations": [[0, "type-annotations"]], "Release Notes": [[0, "release-notes"], [584, "release-notes"]], "Adding a new release note": [[0, "adding-a-new-release-note"]], "Linking to issues": [[0, "linking-to-issues"]], "Generating the release notes": [[0, "generating-the-release-notes"]], "Building release notes locally": [[0, "building-release-notes-locally"]], "Pull request review, CI, and merge queue": [[0, "pull-request-review-ci-and-merge-queue"]], "Stable Branch Policy and Backporting": [[0, "stable-branch-policy-and-backporting"]], "Backporting procedure": [[0, "backporting-procedure"]], "Manual backport procedure": [[0, "manual-backport-procedure"]], "Centrality": [[1, "centrality"]], "Coloring": [[2, "coloring"]], "Connectivity and Cycles": [[3, "connectivity-and-cycles"]], "DAG Algorithms": [[4, "dag-algorithms"]], "Dominance": [[5, "dominance"]], "Graph Operations": [[6, "graph-operations"]], "Algorithm Functions": [[7, "algorithm-functions"]], "Isomorphism": [[8, "isomorphism"]], "Link Analysis": [[9, "link-analysis"]], "Matching": [[10, "matching"]], "Other Algorithm Functions": [[11, "other-algorithm-functions"]], "Shortest Paths": [[12, "shortest-paths"]], "Traversal": [[13, "traversal"]], "Tree": [[14, "tree"]], "Converters": [[15, "converters"]], "Custom Return Types": [[16, "custom-return-types"]], "Exceptions": [[17, "exceptions"]], "Generators": [[18, "generators"]], "Graph Classes": [[19, "graph-classes"]], "Rustworkx API Reference": [[20, "rustworkx-api-reference"]], "Layout Functions": [[21, "layout-functions"]], "API functions for PyDigraph": [[22, "api-functions-for-pydigraph"]], "API functions for PyGraph": [[23, "api-functions-for-pygraph"]], "Random Graph Generator Functions": [[24, "random-graph-generator-functions"]], "Serialization": [[25, "serialization"]], "AllPairsPathLengthMapping": [[26, "allpairspathlengthmapping"]], "rustworkx.AllPairsPathLengthMapping.items": [[27, "rustworkx-allpairspathlengthmapping-items"]], "rustworkx.AllPairsPathLengthMapping.keys": [[28, "rustworkx-allpairspathlengthmapping-keys"]], "rustworkx.AllPairsPathLengthMapping.values": [[29, "rustworkx-allpairspathlengthmapping-values"]], "AllPairsPathMapping": [[30, "allpairspathmapping"]], "rustworkx.AllPairsPathMapping.items": [[31, "rustworkx-allpairspathmapping-items"]], "rustworkx.AllPairsPathMapping.keys": [[32, "rustworkx-allpairspathmapping-keys"]], "rustworkx.AllPairsPathMapping.values": [[33, "rustworkx-allpairspathmapping-values"]], "BFSPredecessors": [[34, "bfspredecessors"]], "BFSSuccessors": [[35, "bfssuccessors"]], "BiconnectedComponents": [[36, "biconnectedcomponents"]], "rustworkx.BiconnectedComponents.items": [[37, "rustworkx-biconnectedcomponents-items"]], "rustworkx.BiconnectedComponents.keys": [[38, "rustworkx-biconnectedcomponents-keys"]], "rustworkx.BiconnectedComponents.values": [[39, "rustworkx-biconnectedcomponents-values"]], "CentralityMapping": [[40, "centralitymapping"]], "rustworkx.CentralityMapping.items": [[41, "rustworkx-centralitymapping-items"]], "rustworkx.CentralityMapping.keys": [[42, "rustworkx-centralitymapping-keys"]], "rustworkx.CentralityMapping.values": [[43, "rustworkx-centralitymapping-values"]], "Chains": [[44, "chains"]], "ColoringStrategy": [[45, "coloringstrategy"]], "Strategy description": [[45, "id1"]], "rustworkx.DAGHasCycle": [[46, "rustworkx-daghascycle"]], "rustworkx.DAGWouldCycle": [[47, "rustworkx-dagwouldcycle"]], "EdgeCentralityMapping": [[48, "edgecentralitymapping"]], "rustworkx.EdgeCentralityMapping.items": [[49, "rustworkx-edgecentralitymapping-items"]], "rustworkx.EdgeCentralityMapping.keys": [[50, "rustworkx-edgecentralitymapping-keys"]], "rustworkx.EdgeCentralityMapping.values": [[51, "rustworkx-edgecentralitymapping-values"]], "EdgeIndexMap": [[52, "edgeindexmap"]], "rustworkx.EdgeIndexMap.items": [[53, "rustworkx-edgeindexmap-items"]], "rustworkx.EdgeIndexMap.keys": [[54, "rustworkx-edgeindexmap-keys"]], "rustworkx.EdgeIndexMap.values": [[55, "rustworkx-edgeindexmap-values"]], "EdgeIndices": [[56, "edgeindices"]], "EdgeList": [[57, "edgelist"]], "rustworkx.GraphNotBipartite": [[58, "rustworkx-graphnotbipartite"]], "IndexPartitionBlock": [[59, "indexpartitionblock"]], "rustworkx.InvalidMapping": [[60, "rustworkx-invalidmapping"]], "rustworkx.InvalidNode": [[61, "rustworkx-invalidnode"]], "rustworkx.JSONSerializationError": [[62, "rustworkx-jsonserializationerror"]], "rustworkx.NegativeCycle": [[63, "rustworkx-negativecycle"]], "rustworkx.NoEdgeBetweenNodes": [[64, "rustworkx-noedgebetweennodes"]], "rustworkx.NoPathFound": [[65, "rustworkx-nopathfound"]], "rustworkx.NoSuitableNeighbors": [[66, "rustworkx-nosuitableneighbors"]], "NodeIndices": [[67, "nodeindices"]], "NodeMap": [[68, "nodemap"]], "rustworkx.NodeMap.items": [[69, "rustworkx-nodemap-items"]], "rustworkx.NodeMap.keys": [[70, "rustworkx-nodemap-keys"]], "rustworkx.NodeMap.values": [[71, "rustworkx-nodemap-values"]], "rustworkx.NullGraph": [[72, "rustworkx-nullgraph"]], "PathLengthMapping": [[73, "pathlengthmapping"]], "rustworkx.PathLengthMapping.items": [[74, "rustworkx-pathlengthmapping-items"]], "rustworkx.PathLengthMapping.keys": [[75, "rustworkx-pathlengthmapping-keys"]], "rustworkx.PathLengthMapping.values": [[76, "rustworkx-pathlengthmapping-values"]], "PathMapping": [[77, "pathmapping"]], "rustworkx.PathMapping.items": [[78, "rustworkx-pathmapping-items"]], "rustworkx.PathMapping.keys": [[79, "rustworkx-pathmapping-keys"]], "rustworkx.PathMapping.values": [[80, "rustworkx-pathmapping-values"]], "Pos2DMapping": [[81, "pos2dmapping"]], "rustworkx.Pos2DMapping.items": [[82, "rustworkx-pos2dmapping-items"]], "rustworkx.Pos2DMapping.keys": [[83, "rustworkx-pos2dmapping-keys"]], "rustworkx.Pos2DMapping.values": [[84, "rustworkx-pos2dmapping-values"]], "ProductNodeMap": [[85, "productnodemap"]], "rustworkx.ProductNodeMap.items": [[86, "rustworkx-productnodemap-items"]], "rustworkx.ProductNodeMap.keys": [[87, "rustworkx-productnodemap-keys"]], "rustworkx.ProductNodeMap.values": [[88, "rustworkx-productnodemap-values"]], "PyDAG": [[89, "pydag"]], "rustworkx.PyDAG.add_child": [[90, "rustworkx-pydag-add-child"]], "rustworkx.PyDAG.add_edge": [[91, "rustworkx-pydag-add-edge"]], "rustworkx.PyDAG.add_edges_from": [[92, "rustworkx-pydag-add-edges-from"]], "rustworkx.PyDAG.add_edges_from_no_data": [[93, "rustworkx-pydag-add-edges-from-no-data"]], "rustworkx.PyDAG.add_node": [[94, "rustworkx-pydag-add-node"]], "rustworkx.PyDAG.add_nodes_from": [[95, "rustworkx-pydag-add-nodes-from"]], "rustworkx.PyDAG.add_parent": [[96, "rustworkx-pydag-add-parent"]], "rustworkx.PyDAG.adj": [[97, "rustworkx-pydag-adj"]], "rustworkx.PyDAG.adj_direction": [[98, "rustworkx-pydag-adj-direction"]], "rustworkx.PyDAG.clear": [[99, "rustworkx-pydag-clear"]], "rustworkx.PyDAG.clear_edges": [[100, "rustworkx-pydag-clear-edges"]], "rustworkx.PyDAG.compose": [[101, "rustworkx-pydag-compose"]], "rustworkx.PyDAG.contract_nodes": [[102, "rustworkx-pydag-contract-nodes"]], "rustworkx.PyDAG.copy": [[103, "rustworkx-pydag-copy"]], "rustworkx.PyDAG.edge_index_map": [[104, "rustworkx-pydag-edge-index-map"]], "rustworkx.PyDAG.edge_indices": [[105, "rustworkx-pydag-edge-indices"]], "rustworkx.PyDAG.edge_indices_from_endpoints": [[106, "rustworkx-pydag-edge-indices-from-endpoints"]], "rustworkx.PyDAG.edge_list": [[107, "rustworkx-pydag-edge-list"]], "rustworkx.PyDAG.edge_subgraph": [[108, "rustworkx-pydag-edge-subgraph"]], "rustworkx.PyDAG.edges": [[109, "rustworkx-pydag-edges"]], "rustworkx.PyDAG.extend_from_edge_list": [[110, "rustworkx-pydag-extend-from-edge-list"]], "rustworkx.PyDAG.extend_from_weighted_edge_list": [[111, "rustworkx-pydag-extend-from-weighted-edge-list"]], "rustworkx.PyDAG.filter_edges": [[112, "rustworkx-pydag-filter-edges"]], "rustworkx.PyDAG.filter_nodes": [[113, "rustworkx-pydag-filter-nodes"]], "rustworkx.PyDAG.find_adjacent_node_by_edge": [[114, "rustworkx-pydag-find-adjacent-node-by-edge"]], "rustworkx.PyDAG.find_node_by_weight": [[115, "rustworkx-pydag-find-node-by-weight"]], "rustworkx.PyDAG.find_predecessor_node_by_edge": [[116, "rustworkx-pydag-find-predecessor-node-by-edge"]], "rustworkx.PyDAG.find_predecessors_by_edge": [[117, "rustworkx-pydag-find-predecessors-by-edge"]], "rustworkx.PyDAG.find_successors_by_edge": [[118, "rustworkx-pydag-find-successors-by-edge"]], "rustworkx.PyDAG.from_adjacency_matrix": [[119, "rustworkx-pydag-from-adjacency-matrix"]], "rustworkx.PyDAG.from_complex_adjacency_matrix": [[120, "rustworkx-pydag-from-complex-adjacency-matrix"]], "rustworkx.PyDAG.get_all_edge_data": [[121, "rustworkx-pydag-get-all-edge-data"]], "rustworkx.PyDAG.get_edge_data": [[122, "rustworkx-pydag-get-edge-data"]], "rustworkx.PyDAG.get_edge_data_by_index": [[123, "rustworkx-pydag-get-edge-data-by-index"]], "rustworkx.PyDAG.get_edge_endpoints_by_index": [[124, "rustworkx-pydag-get-edge-endpoints-by-index"]], "rustworkx.PyDAG.get_node_data": [[125, "rustworkx-pydag-get-node-data"]], "rustworkx.PyDAG.has_edge": [[126, "rustworkx-pydag-has-edge"]], "rustworkx.PyDAG.has_node": [[127, "rustworkx-pydag-has-node"]], "rustworkx.PyDAG.has_parallel_edges": [[128, "rustworkx-pydag-has-parallel-edges"]], "rustworkx.PyDAG.in_degree": [[129, "rustworkx-pydag-in-degree"]], "rustworkx.PyDAG.in_edges": [[130, "rustworkx-pydag-in-edges"]], "rustworkx.PyDAG.incident_edge_index_map": [[131, "rustworkx-pydag-incident-edge-index-map"]], "rustworkx.PyDAG.incident_edges": [[132, "rustworkx-pydag-incident-edges"]], "rustworkx.PyDAG.insert_node_on_in_edges": [[133, "rustworkx-pydag-insert-node-on-in-edges"]], "rustworkx.PyDAG.insert_node_on_in_edges_multiple": [[134, "rustworkx-pydag-insert-node-on-in-edges-multiple"]], "rustworkx.PyDAG.insert_node_on_out_edges": [[135, "rustworkx-pydag-insert-node-on-out-edges"]], "rustworkx.PyDAG.insert_node_on_out_edges_multiple": [[136, "rustworkx-pydag-insert-node-on-out-edges-multiple"]], "rustworkx.PyDAG.is_symmetric": [[137, "rustworkx-pydag-is-symmetric"]], "rustworkx.PyDAG.make_symmetric": [[138, "rustworkx-pydag-make-symmetric"]], "rustworkx.PyDAG.merge_nodes": [[139, "rustworkx-pydag-merge-nodes"]], "rustworkx.PyDAG.neighbors": [[140, "rustworkx-pydag-neighbors"]], "rustworkx.PyDAG.neighbors_undirected": [[141, "rustworkx-pydag-neighbors-undirected"]], "rustworkx.PyDAG.node_indexes": [[142, "rustworkx-pydag-node-indexes"]], "rustworkx.PyDAG.node_indices": [[143, "rustworkx-pydag-node-indices"]], "rustworkx.PyDAG.nodes": [[144, "rustworkx-pydag-nodes"]], "rustworkx.PyDAG.num_edges": [[145, "rustworkx-pydag-num-edges"]], "rustworkx.PyDAG.num_nodes": [[146, "rustworkx-pydag-num-nodes"]], "rustworkx.PyDAG.out_degree": [[147, "rustworkx-pydag-out-degree"]], "rustworkx.PyDAG.out_edges": [[148, "rustworkx-pydag-out-edges"]], "rustworkx.PyDAG.predecessor_indices": [[149, "rustworkx-pydag-predecessor-indices"]], "rustworkx.PyDAG.predecessors": [[150, "rustworkx-pydag-predecessors"]], "rustworkx.PyDAG.read_edge_list": [[151, "rustworkx-pydag-read-edge-list"]], "rustworkx.PyDAG.remove_edge": [[152, "rustworkx-pydag-remove-edge"]], "rustworkx.PyDAG.remove_edge_from_index": [[153, "rustworkx-pydag-remove-edge-from-index"]], "rustworkx.PyDAG.remove_edges_from": [[154, "rustworkx-pydag-remove-edges-from"]], "rustworkx.PyDAG.remove_node": [[155, "rustworkx-pydag-remove-node"]], "rustworkx.PyDAG.remove_node_retain_edges": [[156, "rustworkx-pydag-remove-node-retain-edges"]], "rustworkx.PyDAG.remove_node_retain_edges_by_id": [[157, "rustworkx-pydag-remove-node-retain-edges-by-id"]], "rustworkx.PyDAG.remove_node_retain_edges_by_key": [[158, "rustworkx-pydag-remove-node-retain-edges-by-key"]], "rustworkx.PyDAG.remove_nodes_from": [[159, "rustworkx-pydag-remove-nodes-from"]], "rustworkx.PyDAG.reverse": [[160, "rustworkx-pydag-reverse"]], "rustworkx.PyDAG.subgraph": [[161, "rustworkx-pydag-subgraph"]], "rustworkx.PyDAG.substitute_node_with_subgraph": [[162, "rustworkx-pydag-substitute-node-with-subgraph"]], "rustworkx.PyDAG.successor_indices": [[163, "rustworkx-pydag-successor-indices"]], "rustworkx.PyDAG.successors": [[164, "rustworkx-pydag-successors"]], "rustworkx.PyDAG.to_dot": [[165, "rustworkx-pydag-to-dot"]], "rustworkx.PyDAG.to_undirected": [[166, "rustworkx-pydag-to-undirected"]], "rustworkx.PyDAG.update_edge": [[167, "rustworkx-pydag-update-edge"]], "rustworkx.PyDAG.update_edge_by_index": [[168, "rustworkx-pydag-update-edge-by-index"]], "rustworkx.PyDAG.weighted_edge_list": [[169, "rustworkx-pydag-weighted-edge-list"]], "rustworkx.PyDAG.write_edge_list": [[170, "rustworkx-pydag-write-edge-list"]], "PyDiGraph": [[171, "pydigraph"]], "rustworkx.PyDiGraph.add_child": [[172, "rustworkx-pydigraph-add-child"]], "rustworkx.PyDiGraph.add_edge": [[173, "rustworkx-pydigraph-add-edge"]], "rustworkx.PyDiGraph.add_edges_from": [[174, "rustworkx-pydigraph-add-edges-from"]], "rustworkx.PyDiGraph.add_edges_from_no_data": [[175, "rustworkx-pydigraph-add-edges-from-no-data"]], "rustworkx.PyDiGraph.add_node": [[176, "rustworkx-pydigraph-add-node"]], "rustworkx.PyDiGraph.add_nodes_from": [[177, "rustworkx-pydigraph-add-nodes-from"]], "rustworkx.PyDiGraph.add_parent": [[178, "rustworkx-pydigraph-add-parent"]], "rustworkx.PyDiGraph.adj": [[179, "rustworkx-pydigraph-adj"]], "rustworkx.PyDiGraph.adj_direction": [[180, "rustworkx-pydigraph-adj-direction"]], "rustworkx.PyDiGraph.clear": [[181, "rustworkx-pydigraph-clear"]], "rustworkx.PyDiGraph.clear_edges": [[182, "rustworkx-pydigraph-clear-edges"]], "rustworkx.PyDiGraph.compose": [[183, "rustworkx-pydigraph-compose"]], "rustworkx.PyDiGraph.contract_nodes": [[184, "rustworkx-pydigraph-contract-nodes"]], "rustworkx.PyDiGraph.copy": [[185, "rustworkx-pydigraph-copy"]], "rustworkx.PyDiGraph.edge_index_map": [[186, "rustworkx-pydigraph-edge-index-map"]], "rustworkx.PyDiGraph.edge_indices": [[187, "rustworkx-pydigraph-edge-indices"]], "rustworkx.PyDiGraph.edge_indices_from_endpoints": [[188, "rustworkx-pydigraph-edge-indices-from-endpoints"]], "rustworkx.PyDiGraph.edge_list": [[189, "rustworkx-pydigraph-edge-list"]], "rustworkx.PyDiGraph.edge_subgraph": [[190, "rustworkx-pydigraph-edge-subgraph"]], "rustworkx.PyDiGraph.edges": [[191, "rustworkx-pydigraph-edges"]], "rustworkx.PyDiGraph.extend_from_edge_list": [[192, "rustworkx-pydigraph-extend-from-edge-list"]], "rustworkx.PyDiGraph.extend_from_weighted_edge_list": [[193, "rustworkx-pydigraph-extend-from-weighted-edge-list"]], "rustworkx.PyDiGraph.filter_edges": [[194, "rustworkx-pydigraph-filter-edges"]], "rustworkx.PyDiGraph.filter_nodes": [[195, "rustworkx-pydigraph-filter-nodes"]], "rustworkx.PyDiGraph.find_adjacent_node_by_edge": [[196, "rustworkx-pydigraph-find-adjacent-node-by-edge"]], "rustworkx.PyDiGraph.find_node_by_weight": [[197, "rustworkx-pydigraph-find-node-by-weight"]], "rustworkx.PyDiGraph.find_predecessor_node_by_edge": [[198, "rustworkx-pydigraph-find-predecessor-node-by-edge"]], "rustworkx.PyDiGraph.find_predecessors_by_edge": [[199, "rustworkx-pydigraph-find-predecessors-by-edge"]], "rustworkx.PyDiGraph.find_successors_by_edge": [[200, "rustworkx-pydigraph-find-successors-by-edge"]], "rustworkx.PyDiGraph.from_adjacency_matrix": [[201, "rustworkx-pydigraph-from-adjacency-matrix"]], "rustworkx.PyDiGraph.from_complex_adjacency_matrix": [[202, "rustworkx-pydigraph-from-complex-adjacency-matrix"]], "rustworkx.PyDiGraph.get_all_edge_data": [[203, "rustworkx-pydigraph-get-all-edge-data"]], "rustworkx.PyDiGraph.get_edge_data": [[204, "rustworkx-pydigraph-get-edge-data"]], "rustworkx.PyDiGraph.get_edge_data_by_index": [[205, "rustworkx-pydigraph-get-edge-data-by-index"]], "rustworkx.PyDiGraph.get_edge_endpoints_by_index": [[206, "rustworkx-pydigraph-get-edge-endpoints-by-index"]], "rustworkx.PyDiGraph.get_node_data": [[207, "rustworkx-pydigraph-get-node-data"]], "rustworkx.PyDiGraph.has_edge": [[208, "rustworkx-pydigraph-has-edge"]], "rustworkx.PyDiGraph.has_node": [[209, "rustworkx-pydigraph-has-node"]], "rustworkx.PyDiGraph.has_parallel_edges": [[210, "rustworkx-pydigraph-has-parallel-edges"]], "rustworkx.PyDiGraph.in_degree": [[211, "rustworkx-pydigraph-in-degree"]], "rustworkx.PyDiGraph.in_edges": [[212, "rustworkx-pydigraph-in-edges"]], "rustworkx.PyDiGraph.incident_edge_index_map": [[213, "rustworkx-pydigraph-incident-edge-index-map"]], "rustworkx.PyDiGraph.incident_edges": [[214, "rustworkx-pydigraph-incident-edges"]], "rustworkx.PyDiGraph.insert_node_on_in_edges": [[215, "rustworkx-pydigraph-insert-node-on-in-edges"]], "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple": [[216, "rustworkx-pydigraph-insert-node-on-in-edges-multiple"]], "rustworkx.PyDiGraph.insert_node_on_out_edges": [[217, "rustworkx-pydigraph-insert-node-on-out-edges"]], "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple": [[218, "rustworkx-pydigraph-insert-node-on-out-edges-multiple"]], "rustworkx.PyDiGraph.is_symmetric": [[219, "rustworkx-pydigraph-is-symmetric"]], "rustworkx.PyDiGraph.make_symmetric": [[220, "rustworkx-pydigraph-make-symmetric"]], "rustworkx.PyDiGraph.merge_nodes": [[221, "rustworkx-pydigraph-merge-nodes"]], "rustworkx.PyDiGraph.neighbors": [[222, "rustworkx-pydigraph-neighbors"]], "rustworkx.PyDiGraph.neighbors_undirected": [[223, "rustworkx-pydigraph-neighbors-undirected"]], "rustworkx.PyDiGraph.node_indexes": [[224, "rustworkx-pydigraph-node-indexes"]], "rustworkx.PyDiGraph.node_indices": [[225, "rustworkx-pydigraph-node-indices"]], "rustworkx.PyDiGraph.nodes": [[226, "rustworkx-pydigraph-nodes"]], "rustworkx.PyDiGraph.num_edges": [[227, "rustworkx-pydigraph-num-edges"]], "rustworkx.PyDiGraph.num_nodes": [[228, "rustworkx-pydigraph-num-nodes"]], "rustworkx.PyDiGraph.out_degree": [[229, "rustworkx-pydigraph-out-degree"]], "rustworkx.PyDiGraph.out_edges": [[230, "rustworkx-pydigraph-out-edges"]], "rustworkx.PyDiGraph.predecessor_indices": [[231, "rustworkx-pydigraph-predecessor-indices"]], "rustworkx.PyDiGraph.predecessors": [[232, "rustworkx-pydigraph-predecessors"]], "rustworkx.PyDiGraph.read_edge_list": [[233, "rustworkx-pydigraph-read-edge-list"]], "rustworkx.PyDiGraph.remove_edge": [[234, "rustworkx-pydigraph-remove-edge"]], "rustworkx.PyDiGraph.remove_edge_from_index": [[235, "rustworkx-pydigraph-remove-edge-from-index"]], "rustworkx.PyDiGraph.remove_edges_from": [[236, "rustworkx-pydigraph-remove-edges-from"]], "rustworkx.PyDiGraph.remove_node": [[237, "rustworkx-pydigraph-remove-node"]], "rustworkx.PyDiGraph.remove_node_retain_edges": [[238, "rustworkx-pydigraph-remove-node-retain-edges"]], "rustworkx.PyDiGraph.remove_node_retain_edges_by_id": [[239, "rustworkx-pydigraph-remove-node-retain-edges-by-id"]], "rustworkx.PyDiGraph.remove_node_retain_edges_by_key": [[240, "rustworkx-pydigraph-remove-node-retain-edges-by-key"]], "rustworkx.PyDiGraph.remove_nodes_from": [[241, "rustworkx-pydigraph-remove-nodes-from"]], "rustworkx.PyDiGraph.reverse": [[242, "rustworkx-pydigraph-reverse"]], "rustworkx.PyDiGraph.subgraph": [[243, "rustworkx-pydigraph-subgraph"]], "rustworkx.PyDiGraph.substitute_node_with_subgraph": [[244, "rustworkx-pydigraph-substitute-node-with-subgraph"]], "rustworkx.PyDiGraph.successor_indices": [[245, "rustworkx-pydigraph-successor-indices"]], "rustworkx.PyDiGraph.successors": [[246, "rustworkx-pydigraph-successors"]], "rustworkx.PyDiGraph.to_dot": [[247, "rustworkx-pydigraph-to-dot"]], "rustworkx.PyDiGraph.to_undirected": [[248, "rustworkx-pydigraph-to-undirected"]], "rustworkx.PyDiGraph.update_edge": [[249, "rustworkx-pydigraph-update-edge"]], "rustworkx.PyDiGraph.update_edge_by_index": [[250, "rustworkx-pydigraph-update-edge-by-index"]], "rustworkx.PyDiGraph.weighted_edge_list": [[251, "rustworkx-pydigraph-weighted-edge-list"]], "rustworkx.PyDiGraph.write_edge_list": [[252, "rustworkx-pydigraph-write-edge-list"]], "PyGraph": [[253, "pygraph"]], "rustworkx.PyGraph.add_edge": [[254, "rustworkx-pygraph-add-edge"]], "rustworkx.PyGraph.add_edges_from": [[255, "rustworkx-pygraph-add-edges-from"]], "rustworkx.PyGraph.add_edges_from_no_data": [[256, "rustworkx-pygraph-add-edges-from-no-data"]], "rustworkx.PyGraph.add_node": [[257, "rustworkx-pygraph-add-node"]], "rustworkx.PyGraph.add_nodes_from": [[258, "rustworkx-pygraph-add-nodes-from"]], "rustworkx.PyGraph.adj": [[259, "rustworkx-pygraph-adj"]], "rustworkx.PyGraph.clear": [[260, "rustworkx-pygraph-clear"]], "rustworkx.PyGraph.clear_edges": [[261, "rustworkx-pygraph-clear-edges"]], "rustworkx.PyGraph.compose": [[262, "rustworkx-pygraph-compose"]], "rustworkx.PyGraph.contract_nodes": [[263, "rustworkx-pygraph-contract-nodes"]], "rustworkx.PyGraph.copy": [[264, "rustworkx-pygraph-copy"]], "rustworkx.PyGraph.degree": [[265, "rustworkx-pygraph-degree"]], "rustworkx.PyGraph.edge_index_map": [[266, "rustworkx-pygraph-edge-index-map"]], "rustworkx.PyGraph.edge_indices": [[267, "rustworkx-pygraph-edge-indices"]], "rustworkx.PyGraph.edge_indices_from_endpoints": [[268, "rustworkx-pygraph-edge-indices-from-endpoints"]], "rustworkx.PyGraph.edge_list": [[269, "rustworkx-pygraph-edge-list"]], "rustworkx.PyGraph.edge_subgraph": [[270, "rustworkx-pygraph-edge-subgraph"]], "rustworkx.PyGraph.edges": [[271, "rustworkx-pygraph-edges"]], "rustworkx.PyGraph.extend_from_edge_list": [[272, "rustworkx-pygraph-extend-from-edge-list"]], "rustworkx.PyGraph.extend_from_weighted_edge_list": [[273, "rustworkx-pygraph-extend-from-weighted-edge-list"]], "rustworkx.PyGraph.filter_edges": [[274, "rustworkx-pygraph-filter-edges"]], "rustworkx.PyGraph.filter_nodes": [[275, "rustworkx-pygraph-filter-nodes"]], "rustworkx.PyGraph.find_node_by_weight": [[276, "rustworkx-pygraph-find-node-by-weight"]], "rustworkx.PyGraph.from_adjacency_matrix": [[277, "rustworkx-pygraph-from-adjacency-matrix"]], "rustworkx.PyGraph.from_complex_adjacency_matrix": [[278, "rustworkx-pygraph-from-complex-adjacency-matrix"]], "rustworkx.PyGraph.get_all_edge_data": [[279, "rustworkx-pygraph-get-all-edge-data"]], "rustworkx.PyGraph.get_edge_data": [[280, "rustworkx-pygraph-get-edge-data"]], "rustworkx.PyGraph.get_edge_data_by_index": [[281, "rustworkx-pygraph-get-edge-data-by-index"]], "rustworkx.PyGraph.get_edge_endpoints_by_index": [[282, "rustworkx-pygraph-get-edge-endpoints-by-index"]], "rustworkx.PyGraph.get_node_data": [[283, "rustworkx-pygraph-get-node-data"]], "rustworkx.PyGraph.has_edge": [[284, "rustworkx-pygraph-has-edge"]], "rustworkx.PyGraph.has_node": [[285, "rustworkx-pygraph-has-node"]], "rustworkx.PyGraph.has_parallel_edges": [[286, "rustworkx-pygraph-has-parallel-edges"]], "rustworkx.PyGraph.in_edges": [[287, "rustworkx-pygraph-in-edges"]], "rustworkx.PyGraph.incident_edge_index_map": [[288, "rustworkx-pygraph-incident-edge-index-map"]], "rustworkx.PyGraph.incident_edges": [[289, "rustworkx-pygraph-incident-edges"]], "rustworkx.PyGraph.neighbors": [[290, "rustworkx-pygraph-neighbors"]], "rustworkx.PyGraph.node_indexes": [[291, "rustworkx-pygraph-node-indexes"]], "rustworkx.PyGraph.node_indices": [[292, "rustworkx-pygraph-node-indices"]], "rustworkx.PyGraph.nodes": [[293, "rustworkx-pygraph-nodes"]], "rustworkx.PyGraph.num_edges": [[294, "rustworkx-pygraph-num-edges"]], "rustworkx.PyGraph.num_nodes": [[295, "rustworkx-pygraph-num-nodes"]], "rustworkx.PyGraph.out_edges": [[296, "rustworkx-pygraph-out-edges"]], "rustworkx.PyGraph.read_edge_list": [[297, "rustworkx-pygraph-read-edge-list"]], "rustworkx.PyGraph.remove_edge": [[298, "rustworkx-pygraph-remove-edge"]], "rustworkx.PyGraph.remove_edge_from_index": [[299, "rustworkx-pygraph-remove-edge-from-index"]], "rustworkx.PyGraph.remove_edges_from": [[300, "rustworkx-pygraph-remove-edges-from"]], "rustworkx.PyGraph.remove_node": [[301, "rustworkx-pygraph-remove-node"]], "rustworkx.PyGraph.remove_nodes_from": [[302, "rustworkx-pygraph-remove-nodes-from"]], "rustworkx.PyGraph.subgraph": [[303, "rustworkx-pygraph-subgraph"]], "rustworkx.PyGraph.substitute_node_with_subgraph": [[304, "rustworkx-pygraph-substitute-node-with-subgraph"]], "rustworkx.PyGraph.to_directed": [[305, "rustworkx-pygraph-to-directed"]], "rustworkx.PyGraph.to_dot": [[306, "rustworkx-pygraph-to-dot"]], "rustworkx.PyGraph.update_edge": [[307, "rustworkx-pygraph-update-edge"]], "rustworkx.PyGraph.update_edge_by_index": [[308, "rustworkx-pygraph-update-edge-by-index"]], "rustworkx.PyGraph.weighted_edge_list": [[309, "rustworkx-pygraph-weighted-edge-list"]], "rustworkx.PyGraph.write_edge_list": [[310, "rustworkx-pygraph-write-edge-list"]], "RelationalCoarsestPartition": [[311, "relationalcoarsestpartition"]], "TopologicalSorter": [[312, "topologicalsorter"]], "rustworkx.TopologicalSorter.done": [[313, "rustworkx-topologicalsorter-done"]], "rustworkx.TopologicalSorter.get_ready": [[314, "rustworkx-topologicalsorter-get-ready"]], "rustworkx.TopologicalSorter.is_active": [[315, "rustworkx-topologicalsorter-is-active"]], "WeightedEdgeList": [[316, "weightededgelist"]], "rustworkx.adjacency_matrix": [[317, "rustworkx-adjacency-matrix"]], "rustworkx.all_pairs_all_simple_paths": [[318, "rustworkx-all-pairs-all-simple-paths"]], "rustworkx.all_pairs_bellman_ford_path_lengths": [[319, "rustworkx-all-pairs-bellman-ford-path-lengths"]], "rustworkx.all_pairs_bellman_ford_shortest_paths": [[320, "rustworkx-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.all_pairs_dijkstra_path_lengths": [[321, "rustworkx-all-pairs-dijkstra-path-lengths"]], "rustworkx.all_pairs_dijkstra_shortest_paths": [[322, "rustworkx-all-pairs-dijkstra-shortest-paths"]], "rustworkx.all_shortest_paths": [[323, "rustworkx-all-shortest-paths"]], "rustworkx.all_simple_paths": [[324, "rustworkx-all-simple-paths"]], "rustworkx.ancestors": [[325, "rustworkx-ancestors"]], "rustworkx.articulation_points": [[326, "rustworkx-articulation-points"]], "rustworkx.astar_shortest_path": [[327, "rustworkx-astar-shortest-path"]], "rustworkx.barabasi_albert_graph": [[328, "rustworkx-barabasi-albert-graph"]], "rustworkx.bellman_ford_shortest_path_lengths": [[329, "rustworkx-bellman-ford-shortest-path-lengths"]], "rustworkx.bellman_ford_shortest_paths": [[330, "rustworkx-bellman-ford-shortest-paths"]], "rustworkx.betweenness_centrality": [[331, "rustworkx-betweenness-centrality"]], "See Also": [[331, "see-also"], [367, "see-also"], [381, "see-also"], [414, "see-also"], [458, "see-also"], [473, "see-also"]], "rustworkx.bfs_predecessors": [[332, "rustworkx-bfs-predecessors"]], "rustworkx.bfs_search": [[333, "rustworkx-bfs-search"]], "rustworkx.bfs_successors": [[334, "rustworkx-bfs-successors"]], "rustworkx.biconnected_components": [[335, "rustworkx-biconnected-components"]], "rustworkx.bipartite_layout": [[336, "rustworkx-bipartite-layout"]], "rustworkx.bridges": [[337, "rustworkx-bridges"]], "rustworkx.cartesian_product": [[338, "rustworkx-cartesian-product"]], "rustworkx.chain_decomposition": [[339, "rustworkx-chain-decomposition"]], "rustworkx.circular_layout": [[340, "rustworkx-circular-layout"]], "rustworkx.closeness_centrality": [[341, "rustworkx-closeness-centrality"]], "rustworkx.collect_bicolor_runs": [[342, "rustworkx-collect-bicolor-runs"]], "rustworkx.collect_runs": [[343, "rustworkx-collect-runs"]], "rustworkx.complement": [[344, "rustworkx-complement"]], "rustworkx.connected_components": [[345, "rustworkx-connected-components"]], "rustworkx.connected_subgraphs": [[346, "rustworkx-connected-subgraphs"]], "rustworkx.core_number": [[347, "rustworkx-core-number"]], "rustworkx.cycle_basis": [[348, "rustworkx-cycle-basis"]], "rustworkx.dag_longest_path": [[349, "rustworkx-dag-longest-path"]], "rustworkx.dag_longest_path_length": [[350, "rustworkx-dag-longest-path-length"]], "rustworkx.dag_weighted_longest_path": [[351, "rustworkx-dag-weighted-longest-path"]], "rustworkx.dag_weighted_longest_path_length": [[352, "rustworkx-dag-weighted-longest-path-length"]], "rustworkx.degree_centrality": [[353, "rustworkx-degree-centrality"]], "rustworkx.descendants": [[354, "rustworkx-descendants"]], "rustworkx.dfs_edges": [[355, "rustworkx-dfs-edges"]], "rustworkx.dfs_search": [[356, "rustworkx-dfs-search"]], "rustworkx.digraph_adjacency_matrix": [[357, "rustworkx-digraph-adjacency-matrix"]], "rustworkx.digraph_all_pairs_all_simple_paths": [[358, "rustworkx-digraph-all-pairs-all-simple-paths"]], "rustworkx.digraph_all_pairs_bellman_ford_path_lengths": [[359, "rustworkx-digraph-all-pairs-bellman-ford-path-lengths"]], "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths": [[360, "rustworkx-digraph-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.digraph_all_pairs_dijkstra_path_lengths": [[361, "rustworkx-digraph-all-pairs-dijkstra-path-lengths"]], "rustworkx.digraph_all_pairs_dijkstra_shortest_paths": [[362, "rustworkx-digraph-all-pairs-dijkstra-shortest-paths"]], "rustworkx.digraph_all_shortest_paths": [[363, "rustworkx-digraph-all-shortest-paths"]], "rustworkx.digraph_all_simple_paths": [[364, "rustworkx-digraph-all-simple-paths"]], "rustworkx.digraph_astar_shortest_path": [[365, "rustworkx-digraph-astar-shortest-path"]], "rustworkx.digraph_bellman_ford_shortest_path_lengths": [[366, "rustworkx-digraph-bellman-ford-shortest-path-lengths"]], "rustworkx.digraph_betweenness_centrality": [[367, "rustworkx-digraph-betweenness-centrality"]], "rustworkx.digraph_bfs_search": [[368, "rustworkx-digraph-bfs-search"]], "rustworkx.digraph_bipartite_layout": [[369, "rustworkx-digraph-bipartite-layout"]], "rustworkx.digraph_cartesian_product": [[370, "rustworkx-digraph-cartesian-product"]], "rustworkx.digraph_circular_layout": [[371, "rustworkx-digraph-circular-layout"]], "rustworkx.digraph_closeness_centrality": [[372, "rustworkx-digraph-closeness-centrality"]], "rustworkx.digraph_complement": [[373, "rustworkx-digraph-complement"]], "rustworkx.digraph_core_number": [[374, "rustworkx-digraph-core-number"]], "rustworkx.digraph_dfs_edges": [[375, "rustworkx-digraph-dfs-edges"]], "rustworkx.digraph_dfs_search": [[376, "rustworkx-digraph-dfs-search"]], "rustworkx.digraph_dijkstra_search": [[377, "rustworkx-digraph-dijkstra-search"]], "rustworkx.digraph_dijkstra_shortest_path_lengths": [[378, "rustworkx-digraph-dijkstra-shortest-path-lengths"]], "rustworkx.digraph_dijkstra_shortest_paths": [[379, "rustworkx-digraph-dijkstra-shortest-paths"]], "rustworkx.digraph_distance_matrix": [[380, "rustworkx-digraph-distance-matrix"]], "rustworkx.digraph_edge_betweenness_centrality": [[381, "rustworkx-digraph-edge-betweenness-centrality"]], "rustworkx.digraph_eigenvector_centrality": [[382, "rustworkx-digraph-eigenvector-centrality"]], "rustworkx.digraph_find_cycle": [[383, "rustworkx-digraph-find-cycle"]], "rustworkx.digraph_floyd_warshall": [[384, "rustworkx-digraph-floyd-warshall"]], "rustworkx.digraph_floyd_warshall_numpy": [[385, "rustworkx-digraph-floyd-warshall-numpy"]], "rustworkx.digraph_floyd_warshall_successor_and_distance": [[386, "rustworkx-digraph-floyd-warshall-successor-and-distance"]], "rustworkx.digraph_is_isomorphic": [[387, "rustworkx-digraph-is-isomorphic"]], "rustworkx.digraph_is_subgraph_isomorphic": [[388, "rustworkx-digraph-is-subgraph-isomorphic"]], "rustworkx.digraph_k_shortest_path_lengths": [[389, "rustworkx-digraph-k-shortest-path-lengths"]], "rustworkx.digraph_katz_centrality": [[390, "rustworkx-digraph-katz-centrality"]], "rustworkx.digraph_longest_simple_path": [[391, "rustworkx-digraph-longest-simple-path"]], "rustworkx.digraph_maximum_bisimulation": [[392, "rustworkx-digraph-maximum-bisimulation"]], "rustworkx.digraph_node_link_json": [[393, "rustworkx-digraph-node-link-json"]], "rustworkx.digraph_num_shortest_paths_unweighted": [[394, "rustworkx-digraph-num-shortest-paths-unweighted"]], "rustworkx.digraph_random_layout": [[395, "rustworkx-digraph-random-layout"]], "rustworkx.digraph_shell_layout": [[396, "rustworkx-digraph-shell-layout"]], "rustworkx.digraph_spiral_layout": [[397, "rustworkx-digraph-spiral-layout"]], "rustworkx.digraph_spring_layout": [[398, "rustworkx-digraph-spring-layout"]], "rustworkx.digraph_tensor_product": [[399, "rustworkx-digraph-tensor-product"]], "rustworkx.digraph_transitivity": [[400, "rustworkx-digraph-transitivity"]], "rustworkx.digraph_union": [[401, "rustworkx-digraph-union"]], "rustworkx.digraph_unweighted_average_shortest_path_length": [[402, "rustworkx-digraph-unweighted-average-shortest-path-length"]], "rustworkx.digraph_vf2_mapping": [[403, "rustworkx-digraph-vf2-mapping"]], "rustworkx.dijkstra_search": [[404, "rustworkx-dijkstra-search"]], "rustworkx.dijkstra_shortest_path_lengths": [[405, "rustworkx-dijkstra-shortest-path-lengths"]], "rustworkx.dijkstra_shortest_paths": [[406, "rustworkx-dijkstra-shortest-paths"]], "rustworkx.directed_barabasi_albert_graph": [[407, "rustworkx-directed-barabasi-albert-graph"]], "rustworkx.directed_gnm_random_graph": [[408, "rustworkx-directed-gnm-random-graph"]], "rustworkx.directed_gnp_random_graph": [[409, "rustworkx-directed-gnp-random-graph"]], "rustworkx.directed_random_bipartite_graph": [[410, "rustworkx-directed-random-bipartite-graph"]], "rustworkx.directed_sbm_random_graph": [[411, "rustworkx-directed-sbm-random-graph"]], "rustworkx.distance_matrix": [[412, "rustworkx-distance-matrix"]], "rustworkx.dominance_frontiers": [[413, "rustworkx-dominance-frontiers"]], "rustworkx.edge_betweenness_centrality": [[414, "rustworkx-edge-betweenness-centrality"]], "rustworkx.eigenvector_centrality": [[415, "rustworkx-eigenvector-centrality"]], "rustworkx.find_negative_cycle": [[416, "rustworkx-find-negative-cycle"]], "rustworkx.floyd_warshall": [[417, "rustworkx-floyd-warshall"]], "rustworkx.floyd_warshall_numpy": [[418, "rustworkx-floyd-warshall-numpy"]], "rustworkx.floyd_warshall_successor_and_distance": [[419, "rustworkx-floyd-warshall-successor-and-distance"]], "rustworkx.from_node_link_json_file": [[420, "rustworkx-from-node-link-json-file"]], "rustworkx.generators.barbell_graph": [[421, "rustworkx-generators-barbell-graph"]], "rustworkx.generators.binomial_tree_graph": [[422, "rustworkx-generators-binomial-tree-graph"]], "rustworkx.generators.complete_graph": [[423, "rustworkx-generators-complete-graph"]], "rustworkx.generators.cycle_graph": [[424, "rustworkx-generators-cycle-graph"]], "rustworkx.generators.directed_binomial_tree_graph": [[425, "rustworkx-generators-directed-binomial-tree-graph"]], "rustworkx.generators.directed_complete_graph": [[426, "rustworkx-generators-directed-complete-graph"]], "rustworkx.generators.directed_cycle_graph": [[427, "rustworkx-generators-directed-cycle-graph"]], "rustworkx.generators.directed_empty_graph": [[428, "rustworkx-generators-directed-empty-graph"]], "rustworkx.generators.directed_grid_graph": [[429, "rustworkx-generators-directed-grid-graph"]], "rustworkx.generators.directed_heavy_hex_graph": [[430, "rustworkx-generators-directed-heavy-hex-graph"]], "rustworkx.generators.directed_heavy_square_graph": [[431, "rustworkx-generators-directed-heavy-square-graph"]], "rustworkx.generators.directed_hexagonal_lattice_graph": [[432, "rustworkx-generators-directed-hexagonal-lattice-graph"]], "rustworkx.generators.directed_mesh_graph": [[433, "rustworkx-generators-directed-mesh-graph"]], "rustworkx.generators.directed_path_graph": [[434, "rustworkx-generators-directed-path-graph"]], "rustworkx.generators.directed_star_graph": [[435, "rustworkx-generators-directed-star-graph"]], "rustworkx.generators.dorogovtsev_goltsev_mendes_graph": [[436, "rustworkx-generators-dorogovtsev-goltsev-mendes-graph"]], "rustworkx.generators.empty_graph": [[437, "rustworkx-generators-empty-graph"]], "rustworkx.generators.full_rary_tree": [[438, "rustworkx-generators-full-rary-tree"]], "rustworkx.generators.generalized_petersen_graph": [[439, "rustworkx-generators-generalized-petersen-graph"]], "rustworkx.generators.grid_graph": [[440, "rustworkx-generators-grid-graph"]], "rustworkx.generators.heavy_hex_graph": [[441, "rustworkx-generators-heavy-hex-graph"]], "rustworkx.generators.heavy_square_graph": [[442, "rustworkx-generators-heavy-square-graph"]], "rustworkx.generators.hexagonal_lattice_graph": [[443, "rustworkx-generators-hexagonal-lattice-graph"]], "rustworkx.generators.lollipop_graph": [[444, "rustworkx-generators-lollipop-graph"]], "rustworkx.generators.mesh_graph": [[445, "rustworkx-generators-mesh-graph"]], "rustworkx.generators.path_graph": [[446, "rustworkx-generators-path-graph"]], "rustworkx.generators.star_graph": [[447, "rustworkx-generators-star-graph"]], "rustworkx.graph_adjacency_matrix": [[448, "rustworkx-graph-adjacency-matrix"]], "rustworkx.graph_all_pairs_all_simple_paths": [[449, "rustworkx-graph-all-pairs-all-simple-paths"]], "rustworkx.graph_all_pairs_bellman_ford_path_lengths": [[450, "rustworkx-graph-all-pairs-bellman-ford-path-lengths"]], "rustworkx.graph_all_pairs_bellman_ford_shortest_paths": [[451, "rustworkx-graph-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.graph_all_pairs_dijkstra_path_lengths": [[452, "rustworkx-graph-all-pairs-dijkstra-path-lengths"]], "rustworkx.graph_all_pairs_dijkstra_shortest_paths": [[453, "rustworkx-graph-all-pairs-dijkstra-shortest-paths"]], "rustworkx.graph_all_shortest_paths": [[454, "rustworkx-graph-all-shortest-paths"]], "rustworkx.graph_all_simple_paths": [[455, "rustworkx-graph-all-simple-paths"]], "rustworkx.graph_astar_shortest_path": [[456, "rustworkx-graph-astar-shortest-path"]], "rustworkx.graph_bellman_ford_shortest_path_lengths": [[457, "rustworkx-graph-bellman-ford-shortest-path-lengths"]], "rustworkx.graph_betweenness_centrality": [[458, "rustworkx-graph-betweenness-centrality"]], "rustworkx.graph_bfs_search": [[459, "rustworkx-graph-bfs-search"]], "rustworkx.graph_bipartite_edge_color": [[460, "rustworkx-graph-bipartite-edge-color"]], "rustworkx.graph_bipartite_layout": [[461, "rustworkx-graph-bipartite-layout"]], "rustworkx.graph_cartesian_product": [[462, "rustworkx-graph-cartesian-product"]], "rustworkx.graph_circular_layout": [[463, "rustworkx-graph-circular-layout"]], "rustworkx.graph_closeness_centrality": [[464, "rustworkx-graph-closeness-centrality"]], "rustworkx.graph_complement": [[465, "rustworkx-graph-complement"]], "rustworkx.graph_core_number": [[466, "rustworkx-graph-core-number"]], "rustworkx.graph_dfs_edges": [[467, "rustworkx-graph-dfs-edges"]], "rustworkx.graph_dfs_search": [[468, "rustworkx-graph-dfs-search"]], "rustworkx.graph_dijkstra_search": [[469, "rustworkx-graph-dijkstra-search"]], "rustworkx.graph_dijkstra_shortest_path_lengths": [[470, "rustworkx-graph-dijkstra-shortest-path-lengths"]], "rustworkx.graph_dijkstra_shortest_paths": [[471, "rustworkx-graph-dijkstra-shortest-paths"]], "rustworkx.graph_distance_matrix": [[472, "rustworkx-graph-distance-matrix"]], "rustworkx.graph_edge_betweenness_centrality": [[473, "rustworkx-graph-edge-betweenness-centrality"]], "rustworkx.graph_eigenvector_centrality": [[474, "rustworkx-graph-eigenvector-centrality"]], "rustworkx.graph_floyd_warshall": [[475, "rustworkx-graph-floyd-warshall"]], "rustworkx.graph_floyd_warshall_numpy": [[476, "rustworkx-graph-floyd-warshall-numpy"]], "rustworkx.graph_floyd_warshall_successor_and_distance": [[477, "rustworkx-graph-floyd-warshall-successor-and-distance"]], "rustworkx.graph_greedy_color": [[478, "rustworkx-graph-greedy-color"]], "rustworkx.graph_greedy_edge_color": [[479, "rustworkx-graph-greedy-edge-color"]], "rustworkx.graph_is_isomorphic": [[480, "rustworkx-graph-is-isomorphic"]], "rustworkx.graph_is_subgraph_isomorphic": [[481, "rustworkx-graph-is-subgraph-isomorphic"]], "rustworkx.graph_k_shortest_path_lengths": [[482, "rustworkx-graph-k-shortest-path-lengths"]], "rustworkx.graph_katz_centrality": [[483, "rustworkx-graph-katz-centrality"]], "rustworkx.graph_line_graph": [[484, "rustworkx-graph-line-graph"]], "rustworkx.graph_longest_simple_path": [[485, "rustworkx-graph-longest-simple-path"]], "rustworkx.graph_misra_gries_edge_color": [[486, "rustworkx-graph-misra-gries-edge-color"]], "rustworkx.graph_node_link_json": [[487, "rustworkx-graph-node-link-json"]], "rustworkx.graph_num_shortest_paths_unweighted": [[488, "rustworkx-graph-num-shortest-paths-unweighted"]], "rustworkx.graph_random_layout": [[489, "rustworkx-graph-random-layout"]], "rustworkx.graph_shell_layout": [[490, "rustworkx-graph-shell-layout"]], "rustworkx.graph_spiral_layout": [[491, "rustworkx-graph-spiral-layout"]], "rustworkx.graph_spring_layout": [[492, "rustworkx-graph-spring-layout"]], "rustworkx.graph_tensor_product": [[493, "rustworkx-graph-tensor-product"]], "rustworkx.graph_token_swapper": [[494, "rustworkx-graph-token-swapper"]], "rustworkx.graph_transitivity": [[495, "rustworkx-graph-transitivity"]], "rustworkx.graph_union": [[496, "rustworkx-graph-union"]], "rustworkx.graph_unweighted_average_shortest_path_length": [[497, "rustworkx-graph-unweighted-average-shortest-path-length"]], "rustworkx.graph_vf2_mapping": [[498, "rustworkx-graph-vf2-mapping"]], "rustworkx.has_path": [[499, "rustworkx-has-path"]], "rustworkx.hits": [[500, "rustworkx-hits"]], "rustworkx.hyperbolic_random_graph": [[501, "rustworkx-hyperbolic-random-graph"]], "rustworkx.immediate_dominators": [[502, "rustworkx-immediate-dominators"]], "rustworkx.in_degree_centrality": [[503, "rustworkx-in-degree-centrality"]], "rustworkx.is_bipartite": [[504, "rustworkx-is-bipartite"]], "rustworkx.is_connected": [[505, "rustworkx-is-connected"]], "rustworkx.is_directed_acyclic_graph": [[506, "rustworkx-is-directed-acyclic-graph"]], "rustworkx.is_isomorphic": [[507, "rustworkx-is-isomorphic"]], "rustworkx.is_isomorphic_node_match": [[508, "rustworkx-is-isomorphic-node-match"]], "rustworkx.is_matching": [[509, "rustworkx-is-matching"]], "rustworkx.is_maximal_matching": [[510, "rustworkx-is-maximal-matching"]], "rustworkx.is_planar": [[511, "rustworkx-is-planar"]], "rustworkx.is_subgraph_isomorphic": [[512, "rustworkx-is-subgraph-isomorphic"]], "rustworkx.is_weakly_connected": [[513, "rustworkx-is-weakly-connected"]], "rustworkx.isolates": [[514, "rustworkx-isolates"]], "rustworkx.k_shortest_path_lengths": [[515, "rustworkx-k-shortest-path-lengths"]], "rustworkx.katz_centrality": [[516, "rustworkx-katz-centrality"]], "rustworkx.layers": [[517, "rustworkx-layers"]], "rustworkx.lexicographical_topological_sort": [[518, "rustworkx-lexicographical-topological-sort"]], "rustworkx.longest_simple_path": [[519, "rustworkx-longest-simple-path"]], "rustworkx.max_weight_matching": [[520, "rustworkx-max-weight-matching"]], "rustworkx.metric_closure": [[521, "rustworkx-metric-closure"]], "rustworkx.minimum_spanning_edges": [[522, "rustworkx-minimum-spanning-edges"]], "rustworkx.minimum_spanning_tree": [[523, "rustworkx-minimum-spanning-tree"]], "rustworkx.negative_edge_cycle": [[524, "rustworkx-negative-edge-cycle"]], "rustworkx.networkx_converter": [[525, "rustworkx-networkx-converter"]], "rustworkx.node_connected_component": [[526, "rustworkx-node-connected-component"]], "rustworkx.node_link_json": [[527, "rustworkx-node-link-json"]], "rustworkx.num_shortest_paths_unweighted": [[528, "rustworkx-num-shortest-paths-unweighted"]], "rustworkx.number_connected_components": [[529, "rustworkx-number-connected-components"]], "rustworkx.number_weakly_connected_components": [[530, "rustworkx-number-weakly-connected-components"]], "rustworkx.out_degree_centrality": [[531, "rustworkx-out-degree-centrality"]], "rustworkx.pagerank": [[532, "rustworkx-pagerank"]], "rustworkx.parse_node_link_json": [[533, "rustworkx-parse-node-link-json"]], "rustworkx.random_geometric_graph": [[534, "rustworkx-random-geometric-graph"]], "rustworkx.random_layout": [[535, "rustworkx-random-layout"]], "rustworkx.read_graphml": [[536, "rustworkx-read-graphml"]], "rustworkx.shell_layout": [[537, "rustworkx-shell-layout"]], "rustworkx.simple_cycles": [[538, "rustworkx-simple-cycles"]], "rustworkx.spiral_layout": [[539, "rustworkx-spiral-layout"]], "rustworkx.spring_layout": [[540, "rustworkx-spring-layout"]], "rustworkx.steiner_tree": [[541, "rustworkx-steiner-tree"]], "rustworkx.stoer_wagner_min_cut": [[542, "rustworkx-stoer-wagner-min-cut"]], "rustworkx.strongly_connected_components": [[543, "rustworkx-strongly-connected-components"]], "rustworkx.topological_generations": [[544, "rustworkx-topological-generations"]], "rustworkx.topological_sort": [[545, "rustworkx-topological-sort"]], "rustworkx.transitive_reduction": [[546, "rustworkx-transitive-reduction"]], "rustworkx.transitivity": [[547, "rustworkx-transitivity"]], "rustworkx.two_color": [[548, "rustworkx-two-color"]], "rustworkx.undirected_gnm_random_graph": [[549, "rustworkx-undirected-gnm-random-graph"]], "rustworkx.undirected_gnp_random_graph": [[550, "rustworkx-undirected-gnp-random-graph"]], "rustworkx.undirected_random_bipartite_graph": [[551, "rustworkx-undirected-random-bipartite-graph"]], "rustworkx.undirected_sbm_random_graph": [[552, "rustworkx-undirected-sbm-random-graph"]], "rustworkx.union": [[553, "rustworkx-union"]], "rustworkx.unweighted_average_shortest_path_length": [[554, "rustworkx-unweighted-average-shortest-path-length"]], "rustworkx.vf2_mapping": [[555, "rustworkx-vf2-mapping"]], "BFSVisitor": [[556, "bfsvisitor"]], "rustworkx.visit.BFSVisitor.black_target_edge": [[557, "rustworkx-visit-bfsvisitor-black-target-edge"]], "rustworkx.visit.BFSVisitor.discover_vertex": [[558, "rustworkx-visit-bfsvisitor-discover-vertex"]], "rustworkx.visit.BFSVisitor.finish_vertex": [[559, "rustworkx-visit-bfsvisitor-finish-vertex"]], "rustworkx.visit.BFSVisitor.gray_target_edge": [[560, "rustworkx-visit-bfsvisitor-gray-target-edge"]], "rustworkx.visit.BFSVisitor.non_tree_edge": [[561, "rustworkx-visit-bfsvisitor-non-tree-edge"]], "rustworkx.visit.BFSVisitor.tree_edge": [[562, "rustworkx-visit-bfsvisitor-tree-edge"]], "DFSVisitor": [[563, "dfsvisitor"]], "rustworkx.visit.DFSVisitor.back_edge": [[564, "rustworkx-visit-dfsvisitor-back-edge"]], "rustworkx.visit.DFSVisitor.discover_vertex": [[565, "rustworkx-visit-dfsvisitor-discover-vertex"]], "rustworkx.visit.DFSVisitor.finish_vertex": [[566, "rustworkx-visit-dfsvisitor-finish-vertex"]], "rustworkx.visit.DFSVisitor.forward_or_cross_edge": [[567, "rustworkx-visit-dfsvisitor-forward-or-cross-edge"]], "rustworkx.visit.DFSVisitor.tree_edge": [[568, "rustworkx-visit-dfsvisitor-tree-edge"]], "DijkstraVisitor": [[569, "dijkstravisitor"]], "rustworkx.visit.DijkstraVisitor.discover_vertex": [[570, "rustworkx-visit-dijkstravisitor-discover-vertex"]], "rustworkx.visit.DijkstraVisitor.edge_not_relaxed": [[571, "rustworkx-visit-dijkstravisitor-edge-not-relaxed"]], "rustworkx.visit.DijkstraVisitor.edge_relaxed": [[572, "rustworkx-visit-dijkstravisitor-edge-relaxed"]], "rustworkx.visit.DijkstraVisitor.examine_edge": [[573, "rustworkx-visit-dijkstravisitor-examine-edge"]], "rustworkx.visit.DijkstraVisitor.finish_vertex": [[574, "rustworkx-visit-dijkstravisitor-finish-vertex"]], "rustworkx.visit.PruneSearch": [[575, "rustworkx-visit-prunesearch"]], "rustworkx.visit.StopSearch": [[576, "rustworkx-visit-stopsearch"]], "rustworkx.visualization.graphviz_draw": [[577, "rustworkx-visualization-graphviz-draw"]], "rustworkx.visualization.mpl_draw": [[578, "rustworkx-visualization-mpl-draw"]], "rustworkx.weakly_connected_components": [[579, "rustworkx-weakly-connected-components"]], "Rustworkx Comparison Benchmarks With Other Libraries": [[580, "rustworkx-comparison-benchmarks-with-other-libraries"]], "Graph Creation": [[580, "graph-creation"]], "Single Source Shortest Path": [[580, "single-source-shortest-path"]], "All-Pairs Shortest Path": [[580, "all-pairs-shortest-path"]], "Subgraph Isomorphism": [[580, "subgraph-isomorphism"]], "Citation": [[580, "citation"]], "rustworkx Documentation": [[581, "rustworkx-documentation"]], "Project history": [[581, "project-history"]], "Getting Started": [[582, "getting-started"]], "Installing Rustworkx": [[582, "installing-rustworkx"]], "Installing on a platform without precompiled binaries": [[582, "installing-on-a-platform-without-precompiled-binaries"]], "Platform Support": [[582, "platform-support"], [582, "id7"]], "Tier 1": [[582, "tier-1"]], "Tier 2": [[582, "tier-2"]], "Tier 3": [[582, "tier-3"]], "Tier 4": [[582, "tier-4"]], "Using rustworkx": [[582, "using-rustworkx"]], "rustworkx for NetworkX users": [[583, "rustworkx-for-networkx-users"]], "Some Key Differences": [[583, "some-key-differences"]], "Graph Data and Attributes": [[583, "graph-data-and-attributes"]], "Nodes": [[583, "nodes"], [588, "nodes"]], "Edges": [[583, "edges"], [588, "edges"]], "Attributes": [[583, "attributes"]], "Examining elements of a graph": [[583, "examining-elements-of-a-graph"], [588, "examining-elements-of-a-graph"]], "API Equivalents": [[583, "api-equivalents"]], "Class Constructors": [[583, "class-constructors"]], "Graph Modifiers": [[583, "graph-modifiers"]], "Matrix Converter Functions": [[583, "matrix-converter-functions"]], "Visualization Functions": [[583, "visualization-functions"]], "Matplotlib Drawers": [[583, "matplotlib-drawers"]], "Converting from a networkx graph": [[583, "converting-from-a-networkx-graph"]], "Functionality Gaps": [[583, "functionality-gaps"]], "0.16.0": [[584, "relnotes-0-16-0"]], "Prelude": [[584, "prelude"], [584, "relnotes-0-15-1-prelude"], [584, "relnotes-0-15-0-prelude"], [584, "relnotes-0-14-0-prelude"], [584, "relnotes-0-13-0-prelude"], [584, "relnotes-0-12-0-prelude"], [584, "relnotes-0-11-0-prelude"], [584, "relnotes-0-10-2-prelude"], [584, "relnotes-0-10-1-prelude"], [584, "relnotes-0-10-0-prelude"], [584, "relnotes-0-9-0-prelude"], [584, "relnotes-0-8-0-prelude"]], "New Features": [[584, "new-features"], [584, "relnotes-0-15-0-new-features"], [584, "relnotes-0-14-0-new-features"], [584, "relnotes-0-13-0-new-features"], [584, "relnotes-0-12-0-new-features"], [584, "relnotes-0-11-0-new-features"], [584, "relnotes-0-10-2-new-features"], [584, "relnotes-0-10-0-new-features"], [584, "relnotes-0-9-0-new-features"], [584, "relnotes-0-8-0-new-features"], [584, "id56"], [584, "id59"], [584, "id63"], [584, "id66"]], "Upgrade Notes": [[584, "upgrade-notes"], [584, "relnotes-0-15-0-upgrade-notes"], [584, "relnotes-0-14-0-upgrade-notes"], [584, "relnotes-0-13-0-upgrade-notes"], [584, "relnotes-0-12-0-upgrade-notes"], [584, "relnotes-0-11-0-upgrade-notes"], [584, "relnotes-0-10-0-upgrade-notes"], [584, "relnotes-0-9-0-upgrade-notes"], [584, "relnotes-0-8-0-upgrade-notes"], [584, "id57"], [584, "id60"], [584, "id67"]], "Bug Fixes": [[584, "bug-fixes"], [584, "relnotes-0-15-1-bug-fixes"], [584, "relnotes-0-15-0-bug-fixes"], [584, "relnotes-0-14-0-bug-fixes"], [584, "relnotes-0-13-0-bug-fixes"], [584, "relnotes-0-12-0-bug-fixes"], [584, "relnotes-0-11-0-bug-fixes"], [584, "relnotes-0-10-2-bug-fixes"], [584, "relnotes-0-10-0-bug-fixes"], [584, "relnotes-0-9-0-bug-fixes"], [584, "relnotes-0-8-0-bug-fixes"]], "0.15.1": [[584, "relnotes-0-15-1"]], "0.15.0": [[584, "relnotes-0-15-0"]], "Other Notes": [[584, "other-notes"], [584, "relnotes-0-14-0-other-notes"]], "0.14.0": [[584, "relnotes-0-14-0"]], "Deprecation Notes": [[584, "deprecation-notes"]], "0.13.0": [[584, "relnotes-0-13-0"]], "0.12.0": [[584, "relnotes-0-12-0"]], "0.11.0": [[584, "relnotes-0-11-0"]], "0.10.2": [[584, "relnotes-0-10-2"]], "0.10.1": [[584, "relnotes-0-10-1"]], "0.10.0": [[584, "relnotes-0-10-0"]], "0.9.0": [[584, "relnotes-0-9-0"]], "0.8.0": [[584, "relnotes-0-8-0"]], "0.7.1": [[584, "id54"]], "0.7.0": [[584, "id55"]], "Fixes": [[584, "fixes"], [584, "id61"], [584, "id64"], [584, "id68"]], "0.6.0": [[584, "id58"]], "0.5.0": [[584, "id62"]], "0.4.0": [[584, "id65"]], "Working with Betweenness Centrality": [[585, "working-with-betweenness-centrality"]], "Generate a Graph": [[585, "generate-a-graph"]], "Calculate the Betweenness Centrality": [[585, "calculate-the-betweenness-centrality"]], "Visualize the Betweenness Centrality": [[585, "visualize-the-betweenness-centrality"]], "Directed Acyclic Graphs": [[586, "directed-acyclic-graphs"], [586, "id1"]], "Directed Graph": [[586, "directed-graph"]], "Applications of DAGs": [[586, "applications-of-dags"]], "Task Scheduling": [[586, "task-scheduling"]], "Qiskit\u2019s Compiler": [[586, "qiskit-s-compiler"]], "rustworkx Tutorials and Guides": [[587, "rustworkx-tutorials-and-guides"]], "Introduction to rustworkx": [[588, "introduction-to-rustworkx"]], "Installing rustworkx": [[588, "installing-rustworkx"]], "How to import rustworkx": [[588, "how-to-import-rustworkx"]], "Creating a Graph": [[588, "creating-a-graph"]], "Removing elements from a graph": [[588, "removing-elements-from-a-graph"]], "Modifying elements of a graph": [[588, "modifying-elements-of-a-graph"]], "What to use for node and edge data payload": [[588, "what-to-use-for-node-and-edge-data-payload"]], "Accessing edges and neighbors": [[588, "accessing-edges-and-neighbors"]], "Graph Attributes": [[588, "graph-attributes"]], "Directed Graphs": [[588, "directed-graphs"]], "Multigraphs": [[588, "multigraphs"]], "Graph Generators and operations": [[588, "graph-generators-and-operations"]], "Analyzing graphs": [[588, "analyzing-graphs"]], "Drawing graphs": [[588, "drawing-graphs"]], "Visualization": [[589, "visualization"]], "Visualization API": [[589, "visualization-api"]]}, "indexentries": {"allpairspathlengthmapping (class in rustworkx)": [[26, "rustworkx.AllPairsPathLengthMapping"]], "items() (allpairspathlengthmapping method)": [[27, "rustworkx.AllPairsPathLengthMapping.items"]], "keys() (allpairspathlengthmapping method)": [[28, "rustworkx.AllPairsPathLengthMapping.keys"]], "values() (allpairspathlengthmapping method)": [[29, "rustworkx.AllPairsPathLengthMapping.values"]], "allpairspathmapping (class in rustworkx)": [[30, "rustworkx.AllPairsPathMapping"]], "items() (allpairspathmapping method)": [[31, "rustworkx.AllPairsPathMapping.items"]], "keys() (allpairspathmapping method)": [[32, "rustworkx.AllPairsPathMapping.keys"]], "values() (allpairspathmapping method)": [[33, "rustworkx.AllPairsPathMapping.values"]], "bfspredecessors (class in rustworkx)": [[34, "rustworkx.BFSPredecessors"]], "bfssuccessors (class in rustworkx)": [[35, "rustworkx.BFSSuccessors"]], "biconnectedcomponents (class in rustworkx)": [[36, "rustworkx.BiconnectedComponents"]], "items() (biconnectedcomponents method)": [[37, "rustworkx.BiconnectedComponents.items"]], "keys() (biconnectedcomponents method)": [[38, "rustworkx.BiconnectedComponents.keys"]], "values() (biconnectedcomponents method)": [[39, "rustworkx.BiconnectedComponents.values"]], "centralitymapping (class in rustworkx)": [[40, "rustworkx.CentralityMapping"]], "items() (centralitymapping method)": [[41, "rustworkx.CentralityMapping.items"]], "keys() (centralitymapping method)": [[42, "rustworkx.CentralityMapping.keys"]], "values() (centralitymapping method)": [[43, "rustworkx.CentralityMapping.values"]], "chains (class in rustworkx)": [[44, "rustworkx.Chains"]], "coloringstrategy (class in rustworkx)": [[45, "rustworkx.ColoringStrategy"]], "degree (coloringstrategy attribute)": [[45, "rustworkx.ColoringStrategy.Degree"]], "independentset (coloringstrategy attribute)": [[45, "rustworkx.ColoringStrategy.IndependentSet"]], "saturation (coloringstrategy attribute)": [[45, "rustworkx.ColoringStrategy.Saturation"]], "daghascycle": [[46, "rustworkx.DAGHasCycle"]], "dagwouldcycle": [[47, "rustworkx.DAGWouldCycle"]], "edgecentralitymapping (class in rustworkx)": [[48, "rustworkx.EdgeCentralityMapping"]], "items() (edgecentralitymapping method)": [[49, "rustworkx.EdgeCentralityMapping.items"]], "keys() (edgecentralitymapping method)": [[50, "rustworkx.EdgeCentralityMapping.keys"]], "values() (edgecentralitymapping method)": [[51, "rustworkx.EdgeCentralityMapping.values"]], "edgeindexmap (class in rustworkx)": [[52, "rustworkx.EdgeIndexMap"]], "items() (edgeindexmap method)": [[53, "rustworkx.EdgeIndexMap.items"]], "keys() (edgeindexmap method)": [[54, "rustworkx.EdgeIndexMap.keys"]], "values() (edgeindexmap method)": [[55, "rustworkx.EdgeIndexMap.values"]], "edgeindices (class in rustworkx)": [[56, "rustworkx.EdgeIndices"]], "edgelist (class in rustworkx)": [[57, "rustworkx.EdgeList"]], "graphnotbipartite": [[58, "rustworkx.GraphNotBipartite"]], "indexpartitionblock (class in rustworkx)": [[59, "rustworkx.IndexPartitionBlock"]], "invalidmapping": [[60, "rustworkx.InvalidMapping"]], "invalidnode": [[61, "rustworkx.InvalidNode"]], "jsonserializationerror": [[62, "rustworkx.JSONSerializationError"]], "negativecycle": [[63, "rustworkx.NegativeCycle"]], "noedgebetweennodes": [[64, "rustworkx.NoEdgeBetweenNodes"]], "nopathfound": [[65, "rustworkx.NoPathFound"]], "nosuitableneighbors": [[66, "rustworkx.NoSuitableNeighbors"]], "nodeindices (class in rustworkx)": [[67, "rustworkx.NodeIndices"]], "nodemap (class in rustworkx)": [[68, "rustworkx.NodeMap"]], "items() (nodemap method)": [[69, "rustworkx.NodeMap.items"]], "keys() (nodemap method)": [[70, "rustworkx.NodeMap.keys"]], "values() (nodemap method)": [[71, "rustworkx.NodeMap.values"]], "nullgraph": [[72, "rustworkx.NullGraph"]], "pathlengthmapping (class in rustworkx)": [[73, "rustworkx.PathLengthMapping"]], "items() (pathlengthmapping method)": [[74, "rustworkx.PathLengthMapping.items"]], "keys() (pathlengthmapping method)": [[75, "rustworkx.PathLengthMapping.keys"]], "values() (pathlengthmapping method)": [[76, "rustworkx.PathLengthMapping.values"]], "pathmapping (class in rustworkx)": [[77, "rustworkx.PathMapping"]], "items() (pathmapping method)": [[78, "rustworkx.PathMapping.items"]], "keys() (pathmapping method)": [[79, "rustworkx.PathMapping.keys"]], "values() (pathmapping method)": [[80, "rustworkx.PathMapping.values"]], "pos2dmapping (class in rustworkx)": [[81, "rustworkx.Pos2DMapping"]], "items() (pos2dmapping method)": [[82, "rustworkx.Pos2DMapping.items"]], "keys() (pos2dmapping method)": [[83, "rustworkx.Pos2DMapping.keys"]], "values() (pos2dmapping method)": [[84, "rustworkx.Pos2DMapping.values"]], "productnodemap (class in rustworkx)": [[85, "rustworkx.ProductNodeMap"]], "items() (productnodemap method)": [[86, "rustworkx.ProductNodeMap.items"]], "keys() (productnodemap method)": [[87, "rustworkx.ProductNodeMap.keys"]], "values() (productnodemap method)": [[88, "rustworkx.ProductNodeMap.values"]], "pydag (class in rustworkx)": [[89, "rustworkx.PyDAG"]], "attrs (pydag attribute)": [[89, "rustworkx.PyDAG.attrs"]], "check_cycle (pydag attribute)": [[89, "rustworkx.PyDAG.check_cycle"]], "multigraph (pydag attribute)": [[89, "rustworkx.PyDAG.multigraph"]], "add_child() (pydag method)": [[90, "rustworkx.PyDAG.add_child"]], "add_edge() (pydag method)": [[91, "rustworkx.PyDAG.add_edge"]], "add_edges_from() (pydag method)": [[92, "rustworkx.PyDAG.add_edges_from"]], "add_edges_from_no_data() (pydag method)": [[93, "rustworkx.PyDAG.add_edges_from_no_data"]], "add_node() (pydag method)": [[94, "rustworkx.PyDAG.add_node"]], "add_nodes_from() (pydag method)": [[95, "rustworkx.PyDAG.add_nodes_from"]], "add_parent() (pydag method)": [[96, "rustworkx.PyDAG.add_parent"]], "adj() (pydag method)": [[97, "rustworkx.PyDAG.adj"]], "adj_direction() (pydag method)": [[98, "rustworkx.PyDAG.adj_direction"]], "clear() (pydag method)": [[99, "rustworkx.PyDAG.clear"]], "clear_edges() (pydag method)": [[100, "rustworkx.PyDAG.clear_edges"]], "compose() (pydag method)": [[101, "rustworkx.PyDAG.compose"]], "contract_nodes() (pydag method)": [[102, "rustworkx.PyDAG.contract_nodes"]], "copy() (pydag method)": [[103, "rustworkx.PyDAG.copy"]], "edge_index_map() (pydag method)": [[104, "rustworkx.PyDAG.edge_index_map"]], "edge_indices() (pydag method)": [[105, "rustworkx.PyDAG.edge_indices"]], "edge_indices_from_endpoints() (pydag method)": [[106, "rustworkx.PyDAG.edge_indices_from_endpoints"]], "edge_list() (pydag method)": [[107, "rustworkx.PyDAG.edge_list"]], "edge_subgraph() (pydag method)": [[108, "rustworkx.PyDAG.edge_subgraph"]], "edges() (pydag method)": [[109, "rustworkx.PyDAG.edges"]], "extend_from_edge_list() (pydag method)": [[110, "rustworkx.PyDAG.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pydag method)": [[111, "rustworkx.PyDAG.extend_from_weighted_edge_list"]], "filter_edges() (pydag method)": [[112, "rustworkx.PyDAG.filter_edges"]], "filter_nodes() (pydag method)": [[113, "rustworkx.PyDAG.filter_nodes"]], "find_adjacent_node_by_edge() (pydag method)": [[114, "rustworkx.PyDAG.find_adjacent_node_by_edge"]], "find_node_by_weight() (pydag method)": [[115, "rustworkx.PyDAG.find_node_by_weight"]], "find_predecessor_node_by_edge() (pydag method)": [[116, "rustworkx.PyDAG.find_predecessor_node_by_edge"]], "find_predecessors_by_edge() (pydag method)": [[117, "rustworkx.PyDAG.find_predecessors_by_edge"]], "find_successors_by_edge() (pydag method)": [[118, "rustworkx.PyDAG.find_successors_by_edge"]], "from_adjacency_matrix() (pydag static method)": [[119, "rustworkx.PyDAG.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pydag static method)": [[120, "rustworkx.PyDAG.from_complex_adjacency_matrix"]], "get_all_edge_data() (pydag method)": [[121, "rustworkx.PyDAG.get_all_edge_data"]], "get_edge_data() (pydag method)": [[122, "rustworkx.PyDAG.get_edge_data"]], "get_edge_data_by_index() (pydag method)": [[123, "rustworkx.PyDAG.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pydag method)": [[124, "rustworkx.PyDAG.get_edge_endpoints_by_index"]], "get_node_data() (pydag method)": [[125, "rustworkx.PyDAG.get_node_data"]], "has_edge() (pydag method)": [[126, "rustworkx.PyDAG.has_edge"]], "has_node() (pydag method)": [[127, "rustworkx.PyDAG.has_node"]], "has_parallel_edges() (pydag method)": [[128, "rustworkx.PyDAG.has_parallel_edges"]], "in_degree() (pydag method)": [[129, "rustworkx.PyDAG.in_degree"]], "in_edges() (pydag method)": [[130, "rustworkx.PyDAG.in_edges"]], "incident_edge_index_map() (pydag method)": [[131, "rustworkx.PyDAG.incident_edge_index_map"]], "incident_edges() (pydag method)": [[132, "rustworkx.PyDAG.incident_edges"]], "insert_node_on_in_edges() (pydag method)": [[133, "rustworkx.PyDAG.insert_node_on_in_edges"]], "insert_node_on_in_edges_multiple() (pydag method)": [[134, "rustworkx.PyDAG.insert_node_on_in_edges_multiple"]], "insert_node_on_out_edges() (pydag method)": [[135, "rustworkx.PyDAG.insert_node_on_out_edges"]], "insert_node_on_out_edges_multiple() (pydag method)": [[136, "rustworkx.PyDAG.insert_node_on_out_edges_multiple"]], "is_symmetric() (pydag method)": [[137, "rustworkx.PyDAG.is_symmetric"]], "make_symmetric() (pydag method)": [[138, "rustworkx.PyDAG.make_symmetric"]], "merge_nodes() (pydag method)": [[139, "rustworkx.PyDAG.merge_nodes"]], "neighbors() (pydag method)": [[140, "rustworkx.PyDAG.neighbors"]], "neighbors_undirected() (pydag method)": [[141, "rustworkx.PyDAG.neighbors_undirected"]], "node_indexes() (pydag method)": [[142, "rustworkx.PyDAG.node_indexes"]], "node_indices() (pydag method)": [[143, "rustworkx.PyDAG.node_indices"]], "nodes() (pydag method)": [[144, "rustworkx.PyDAG.nodes"]], "num_edges() (pydag method)": [[145, "rustworkx.PyDAG.num_edges"]], "num_nodes() (pydag method)": [[146, "rustworkx.PyDAG.num_nodes"]], "out_degree() (pydag method)": [[147, "rustworkx.PyDAG.out_degree"]], "out_edges() (pydag method)": [[148, "rustworkx.PyDAG.out_edges"]], "predecessor_indices() (pydag method)": [[149, "rustworkx.PyDAG.predecessor_indices"]], "predecessors() (pydag method)": [[150, "rustworkx.PyDAG.predecessors"]], "read_edge_list() (pydag static method)": [[151, "rustworkx.PyDAG.read_edge_list"]], "remove_edge() (pydag method)": [[152, "rustworkx.PyDAG.remove_edge"]], "remove_edge_from_index() (pydag method)": [[153, "rustworkx.PyDAG.remove_edge_from_index"]], "remove_edges_from() (pydag method)": [[154, "rustworkx.PyDAG.remove_edges_from"]], "remove_node() (pydag method)": [[155, "rustworkx.PyDAG.remove_node"]], "remove_node_retain_edges() (pydag method)": [[156, "rustworkx.PyDAG.remove_node_retain_edges"]], "remove_node_retain_edges_by_id() (pydag method)": [[157, "rustworkx.PyDAG.remove_node_retain_edges_by_id"]], "remove_node_retain_edges_by_key() (pydag method)": [[158, "rustworkx.PyDAG.remove_node_retain_edges_by_key"]], "remove_nodes_from() (pydag method)": [[159, "rustworkx.PyDAG.remove_nodes_from"]], "reverse() (pydag method)": [[160, "rustworkx.PyDAG.reverse"]], "subgraph() (pydag method)": [[161, "rustworkx.PyDAG.subgraph"]], "substitute_node_with_subgraph() (pydag method)": [[162, "rustworkx.PyDAG.substitute_node_with_subgraph"]], "successor_indices() (pydag method)": [[163, "rustworkx.PyDAG.successor_indices"]], "successors() (pydag method)": [[164, "rustworkx.PyDAG.successors"]], "to_dot() (pydag method)": [[165, "rustworkx.PyDAG.to_dot"]], "to_undirected() (pydag method)": [[166, "rustworkx.PyDAG.to_undirected"]], "update_edge() (pydag method)": [[167, "rustworkx.PyDAG.update_edge"]], "update_edge_by_index() (pydag method)": [[168, "rustworkx.PyDAG.update_edge_by_index"]], "weighted_edge_list() (pydag method)": [[169, "rustworkx.PyDAG.weighted_edge_list"]], "write_edge_list() (pydag method)": [[170, "rustworkx.PyDAG.write_edge_list"]], "pydigraph (class in rustworkx)": [[171, "rustworkx.PyDiGraph"]], "attrs (pydigraph attribute)": [[171, "rustworkx.PyDiGraph.attrs"]], "check_cycle (pydigraph attribute)": [[171, "rustworkx.PyDiGraph.check_cycle"]], "multigraph (pydigraph attribute)": [[171, "rustworkx.PyDiGraph.multigraph"]], "add_child() (pydigraph method)": [[172, "rustworkx.PyDiGraph.add_child"]], "add_edge() (pydigraph method)": [[173, "rustworkx.PyDiGraph.add_edge"]], "add_edges_from() (pydigraph method)": [[174, "rustworkx.PyDiGraph.add_edges_from"]], "add_edges_from_no_data() (pydigraph method)": [[175, "rustworkx.PyDiGraph.add_edges_from_no_data"]], "add_node() (pydigraph method)": [[176, "rustworkx.PyDiGraph.add_node"]], "add_nodes_from() (pydigraph method)": [[177, "rustworkx.PyDiGraph.add_nodes_from"]], "add_parent() (pydigraph method)": [[178, "rustworkx.PyDiGraph.add_parent"]], "adj() (pydigraph method)": [[179, "rustworkx.PyDiGraph.adj"]], "adj_direction() (pydigraph method)": [[180, "rustworkx.PyDiGraph.adj_direction"]], "clear() (pydigraph method)": [[181, "rustworkx.PyDiGraph.clear"]], "clear_edges() (pydigraph method)": [[182, "rustworkx.PyDiGraph.clear_edges"]], "compose() (pydigraph method)": [[183, "rustworkx.PyDiGraph.compose"]], "contract_nodes() (pydigraph method)": [[184, "rustworkx.PyDiGraph.contract_nodes"]], "copy() (pydigraph method)": [[185, "rustworkx.PyDiGraph.copy"]], "edge_index_map() (pydigraph method)": [[186, "rustworkx.PyDiGraph.edge_index_map"]], "edge_indices() (pydigraph method)": [[187, "rustworkx.PyDiGraph.edge_indices"]], "edge_indices_from_endpoints() (pydigraph method)": [[188, "rustworkx.PyDiGraph.edge_indices_from_endpoints"]], "edge_list() (pydigraph method)": [[189, "rustworkx.PyDiGraph.edge_list"]], "edge_subgraph() (pydigraph method)": [[190, "rustworkx.PyDiGraph.edge_subgraph"]], "edges() (pydigraph method)": [[191, "rustworkx.PyDiGraph.edges"]], "extend_from_edge_list() (pydigraph method)": [[192, "rustworkx.PyDiGraph.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pydigraph method)": [[193, "rustworkx.PyDiGraph.extend_from_weighted_edge_list"]], "filter_edges() (pydigraph method)": [[194, "rustworkx.PyDiGraph.filter_edges"]], "filter_nodes() (pydigraph method)": [[195, "rustworkx.PyDiGraph.filter_nodes"]], "find_adjacent_node_by_edge() (pydigraph method)": [[196, "rustworkx.PyDiGraph.find_adjacent_node_by_edge"]], "find_node_by_weight() (pydigraph method)": [[197, "rustworkx.PyDiGraph.find_node_by_weight"]], "find_predecessor_node_by_edge() (pydigraph method)": [[198, "rustworkx.PyDiGraph.find_predecessor_node_by_edge"]], "find_predecessors_by_edge() (pydigraph method)": [[199, "rustworkx.PyDiGraph.find_predecessors_by_edge"]], "find_successors_by_edge() (pydigraph method)": [[200, "rustworkx.PyDiGraph.find_successors_by_edge"]], "from_adjacency_matrix() (pydigraph static method)": [[201, "rustworkx.PyDiGraph.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pydigraph static method)": [[202, "rustworkx.PyDiGraph.from_complex_adjacency_matrix"]], "get_all_edge_data() (pydigraph method)": [[203, "rustworkx.PyDiGraph.get_all_edge_data"]], "get_edge_data() (pydigraph method)": [[204, "rustworkx.PyDiGraph.get_edge_data"]], "get_edge_data_by_index() (pydigraph method)": [[205, "rustworkx.PyDiGraph.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pydigraph method)": [[206, "rustworkx.PyDiGraph.get_edge_endpoints_by_index"]], "get_node_data() (pydigraph method)": [[207, "rustworkx.PyDiGraph.get_node_data"]], "has_edge() (pydigraph method)": [[208, "rustworkx.PyDiGraph.has_edge"]], "has_node() (pydigraph method)": [[209, "rustworkx.PyDiGraph.has_node"]], "has_parallel_edges() (pydigraph method)": [[210, "rustworkx.PyDiGraph.has_parallel_edges"]], "in_degree() (pydigraph method)": [[211, "rustworkx.PyDiGraph.in_degree"]], "in_edges() (pydigraph method)": [[212, "rustworkx.PyDiGraph.in_edges"]], "incident_edge_index_map() (pydigraph method)": [[213, "rustworkx.PyDiGraph.incident_edge_index_map"]], "incident_edges() (pydigraph method)": [[214, "rustworkx.PyDiGraph.incident_edges"]], "insert_node_on_in_edges() (pydigraph method)": [[215, "rustworkx.PyDiGraph.insert_node_on_in_edges"]], "insert_node_on_in_edges_multiple() (pydigraph method)": [[216, "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple"]], "insert_node_on_out_edges() (pydigraph method)": [[217, "rustworkx.PyDiGraph.insert_node_on_out_edges"]], "insert_node_on_out_edges_multiple() (pydigraph method)": [[218, "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple"]], "is_symmetric() (pydigraph method)": [[219, "rustworkx.PyDiGraph.is_symmetric"]], "make_symmetric() (pydigraph method)": [[220, "rustworkx.PyDiGraph.make_symmetric"]], "merge_nodes() (pydigraph method)": [[221, "rustworkx.PyDiGraph.merge_nodes"]], "neighbors() (pydigraph method)": [[222, "rustworkx.PyDiGraph.neighbors"]], "neighbors_undirected() (pydigraph method)": [[223, "rustworkx.PyDiGraph.neighbors_undirected"]], "node_indexes() (pydigraph method)": [[224, "rustworkx.PyDiGraph.node_indexes"]], "node_indices() (pydigraph method)": [[225, "rustworkx.PyDiGraph.node_indices"]], "nodes() (pydigraph method)": [[226, "rustworkx.PyDiGraph.nodes"]], "num_edges() (pydigraph method)": [[227, "rustworkx.PyDiGraph.num_edges"]], "num_nodes() (pydigraph method)": [[228, "rustworkx.PyDiGraph.num_nodes"]], "out_degree() (pydigraph method)": [[229, "rustworkx.PyDiGraph.out_degree"]], "out_edges() (pydigraph method)": [[230, "rustworkx.PyDiGraph.out_edges"]], "predecessor_indices() (pydigraph method)": [[231, "rustworkx.PyDiGraph.predecessor_indices"]], "predecessors() (pydigraph method)": [[232, "rustworkx.PyDiGraph.predecessors"]], "read_edge_list() (pydigraph static method)": [[233, "rustworkx.PyDiGraph.read_edge_list"]], "remove_edge() (pydigraph method)": [[234, "rustworkx.PyDiGraph.remove_edge"]], "remove_edge_from_index() (pydigraph method)": [[235, "rustworkx.PyDiGraph.remove_edge_from_index"]], "remove_edges_from() (pydigraph method)": [[236, "rustworkx.PyDiGraph.remove_edges_from"]], "remove_node() (pydigraph method)": [[237, "rustworkx.PyDiGraph.remove_node"]], "remove_node_retain_edges() (pydigraph method)": [[238, "rustworkx.PyDiGraph.remove_node_retain_edges"]], "remove_node_retain_edges_by_id() (pydigraph method)": [[239, "rustworkx.PyDiGraph.remove_node_retain_edges_by_id"]], "remove_node_retain_edges_by_key() (pydigraph method)": [[240, "rustworkx.PyDiGraph.remove_node_retain_edges_by_key"]], "remove_nodes_from() (pydigraph method)": [[241, "rustworkx.PyDiGraph.remove_nodes_from"]], "reverse() (pydigraph method)": [[242, "rustworkx.PyDiGraph.reverse"]], "subgraph() (pydigraph method)": [[243, "rustworkx.PyDiGraph.subgraph"]], "substitute_node_with_subgraph() (pydigraph method)": [[244, "rustworkx.PyDiGraph.substitute_node_with_subgraph"]], "successor_indices() (pydigraph method)": [[245, "rustworkx.PyDiGraph.successor_indices"]], "successors() (pydigraph method)": [[246, "rustworkx.PyDiGraph.successors"]], "to_dot() (pydigraph method)": [[247, "rustworkx.PyDiGraph.to_dot"]], "to_undirected() (pydigraph method)": [[248, "rustworkx.PyDiGraph.to_undirected"]], "update_edge() (pydigraph method)": [[249, "rustworkx.PyDiGraph.update_edge"]], "update_edge_by_index() (pydigraph method)": [[250, "rustworkx.PyDiGraph.update_edge_by_index"]], "weighted_edge_list() (pydigraph method)": [[251, "rustworkx.PyDiGraph.weighted_edge_list"]], "write_edge_list() (pydigraph method)": [[252, "rustworkx.PyDiGraph.write_edge_list"]], "pygraph (class in rustworkx)": [[253, "rustworkx.PyGraph"]], "attrs (pygraph attribute)": [[253, "rustworkx.PyGraph.attrs"]], "multigraph (pygraph attribute)": [[253, "rustworkx.PyGraph.multigraph"]], "add_edge() (pygraph method)": [[254, "rustworkx.PyGraph.add_edge"]], "add_edges_from() (pygraph method)": [[255, "rustworkx.PyGraph.add_edges_from"]], "add_edges_from_no_data() (pygraph method)": [[256, "rustworkx.PyGraph.add_edges_from_no_data"]], "add_node() (pygraph method)": [[257, "rustworkx.PyGraph.add_node"]], "add_nodes_from() (pygraph method)": [[258, "rustworkx.PyGraph.add_nodes_from"]], "adj() (pygraph method)": [[259, "rustworkx.PyGraph.adj"]], "clear() (pygraph method)": [[260, "rustworkx.PyGraph.clear"]], "clear_edges() (pygraph method)": [[261, "rustworkx.PyGraph.clear_edges"]], "compose() (pygraph method)": [[262, "rustworkx.PyGraph.compose"]], "contract_nodes() (pygraph method)": [[263, "rustworkx.PyGraph.contract_nodes"]], "copy() (pygraph method)": [[264, "rustworkx.PyGraph.copy"]], "degree() (pygraph method)": [[265, "rustworkx.PyGraph.degree"]], "edge_index_map() (pygraph method)": [[266, "rustworkx.PyGraph.edge_index_map"]], "edge_indices() (pygraph method)": [[267, "rustworkx.PyGraph.edge_indices"]], "edge_indices_from_endpoints() (pygraph method)": [[268, "rustworkx.PyGraph.edge_indices_from_endpoints"]], "edge_list() (pygraph method)": [[269, "rustworkx.PyGraph.edge_list"]], "edge_subgraph() (pygraph method)": [[270, "rustworkx.PyGraph.edge_subgraph"]], "edges() (pygraph method)": [[271, "rustworkx.PyGraph.edges"]], "extend_from_edge_list() (pygraph method)": [[272, "rustworkx.PyGraph.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pygraph method)": [[273, "rustworkx.PyGraph.extend_from_weighted_edge_list"]], "filter_edges() (pygraph method)": [[274, "rustworkx.PyGraph.filter_edges"]], "filter_nodes() (pygraph method)": [[275, "rustworkx.PyGraph.filter_nodes"]], "find_node_by_weight() (pygraph method)": [[276, "rustworkx.PyGraph.find_node_by_weight"]], "from_adjacency_matrix() (pygraph static method)": [[277, "rustworkx.PyGraph.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pygraph static method)": [[278, "rustworkx.PyGraph.from_complex_adjacency_matrix"]], "get_all_edge_data() (pygraph method)": [[279, "rustworkx.PyGraph.get_all_edge_data"]], "get_edge_data() (pygraph method)": [[280, "rustworkx.PyGraph.get_edge_data"]], "get_edge_data_by_index() (pygraph method)": [[281, "rustworkx.PyGraph.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pygraph method)": [[282, "rustworkx.PyGraph.get_edge_endpoints_by_index"]], "get_node_data() (pygraph method)": [[283, "rustworkx.PyGraph.get_node_data"]], "has_edge() (pygraph method)": [[284, "rustworkx.PyGraph.has_edge"]], "has_node() (pygraph method)": [[285, "rustworkx.PyGraph.has_node"]], "has_parallel_edges() (pygraph method)": [[286, "rustworkx.PyGraph.has_parallel_edges"]], "in_edges() (pygraph method)": [[287, "rustworkx.PyGraph.in_edges"]], "incident_edge_index_map() (pygraph method)": [[288, "rustworkx.PyGraph.incident_edge_index_map"]], "incident_edges() (pygraph method)": [[289, "rustworkx.PyGraph.incident_edges"]], "neighbors() (pygraph method)": [[290, "rustworkx.PyGraph.neighbors"]], "node_indexes() (pygraph method)": [[291, "rustworkx.PyGraph.node_indexes"]], "node_indices() (pygraph method)": [[292, "rustworkx.PyGraph.node_indices"]], "nodes() (pygraph method)": [[293, "rustworkx.PyGraph.nodes"]], "num_edges() (pygraph method)": [[294, "rustworkx.PyGraph.num_edges"]], "num_nodes() (pygraph method)": [[295, "rustworkx.PyGraph.num_nodes"]], "out_edges() (pygraph method)": [[296, "rustworkx.PyGraph.out_edges"]], "read_edge_list() (pygraph static method)": [[297, "rustworkx.PyGraph.read_edge_list"]], "remove_edge() (pygraph method)": [[298, "rustworkx.PyGraph.remove_edge"]], "remove_edge_from_index() (pygraph method)": [[299, "rustworkx.PyGraph.remove_edge_from_index"]], "remove_edges_from() (pygraph method)": [[300, "rustworkx.PyGraph.remove_edges_from"]], "remove_node() (pygraph method)": [[301, "rustworkx.PyGraph.remove_node"]], "remove_nodes_from() (pygraph method)": [[302, "rustworkx.PyGraph.remove_nodes_from"]], "subgraph() (pygraph method)": [[303, "rustworkx.PyGraph.subgraph"]], "substitute_node_with_subgraph() (pygraph method)": [[304, "rustworkx.PyGraph.substitute_node_with_subgraph"]], "to_directed() (pygraph method)": [[305, "rustworkx.PyGraph.to_directed"]], "to_dot() (pygraph method)": [[306, "rustworkx.PyGraph.to_dot"]], "update_edge() (pygraph method)": [[307, "rustworkx.PyGraph.update_edge"]], "update_edge_by_index() (pygraph method)": [[308, "rustworkx.PyGraph.update_edge_by_index"]], "weighted_edge_list() (pygraph method)": [[309, "rustworkx.PyGraph.weighted_edge_list"]], "write_edge_list() (pygraph method)": [[310, "rustworkx.PyGraph.write_edge_list"]], "relationalcoarsestpartition (class in rustworkx)": [[311, "rustworkx.RelationalCoarsestPartition"]], "topologicalsorter (class in rustworkx)": [[312, "rustworkx.TopologicalSorter"]], "done() (topologicalsorter method)": [[313, "rustworkx.TopologicalSorter.done"]], "get_ready() (topologicalsorter method)": [[314, "rustworkx.TopologicalSorter.get_ready"]], "is_active() (topologicalsorter method)": [[315, "rustworkx.TopologicalSorter.is_active"]], "weightededgelist (class in rustworkx)": [[316, "rustworkx.WeightedEdgeList"]], "adjacency_matrix() (in module rustworkx)": [[317, "rustworkx.adjacency_matrix"]], "all_pairs_all_simple_paths() (in module rustworkx)": [[318, "rustworkx.all_pairs_all_simple_paths"]], "all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[319, "rustworkx.all_pairs_bellman_ford_path_lengths"]], "all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[320, "rustworkx.all_pairs_bellman_ford_shortest_paths"]], "all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[321, "rustworkx.all_pairs_dijkstra_path_lengths"]], "all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[322, "rustworkx.all_pairs_dijkstra_shortest_paths"]], "all_shortest_paths() (in module rustworkx)": [[323, "rustworkx.all_shortest_paths"]], "all_simple_paths() (in module rustworkx)": [[324, "rustworkx.all_simple_paths"]], "ancestors() (in module rustworkx)": [[325, "rustworkx.ancestors"]], "articulation_points() (in module rustworkx)": [[326, "rustworkx.articulation_points"]], "astar_shortest_path() (in module rustworkx)": [[327, "rustworkx.astar_shortest_path"]], "barabasi_albert_graph() (in module rustworkx)": [[328, "rustworkx.barabasi_albert_graph"]], "bellman_ford_shortest_path_lengths() (in module rustworkx)": [[329, "rustworkx.bellman_ford_shortest_path_lengths"]], "bellman_ford_shortest_paths() (in module rustworkx)": [[330, "rustworkx.bellman_ford_shortest_paths"]], "betweenness_centrality() (in module rustworkx)": [[331, "rustworkx.betweenness_centrality"]], "bfs_predecessors() (in module rustworkx)": [[332, "rustworkx.bfs_predecessors"]], "bfs_search() (in module rustworkx)": [[333, "rustworkx.bfs_search"]], "bfs_successors() (in module rustworkx)": [[334, "rustworkx.bfs_successors"]], "biconnected_components() (in module rustworkx)": [[335, "rustworkx.biconnected_components"]], "bipartite_layout() (in module rustworkx)": [[336, "rustworkx.bipartite_layout"]], "bridges() (in module rustworkx)": [[337, "rustworkx.bridges"]], "cartesian_product() (in module rustworkx)": [[338, "rustworkx.cartesian_product"]], "chain_decomposition() (in module rustworkx)": [[339, "rustworkx.chain_decomposition"]], "circular_layout() (in module rustworkx)": [[340, "rustworkx.circular_layout"]], "closeness_centrality() (in module rustworkx)": [[341, "rustworkx.closeness_centrality"]], "collect_bicolor_runs() (in module rustworkx)": [[342, "rustworkx.collect_bicolor_runs"]], "collect_runs() (in module rustworkx)": [[343, "rustworkx.collect_runs"]], "complement() (in module rustworkx)": [[344, "rustworkx.complement"]], "connected_components() (in module rustworkx)": [[345, "rustworkx.connected_components"]], "connected_subgraphs() (in module rustworkx)": [[346, "rustworkx.connected_subgraphs"]], "core_number() (in module rustworkx)": [[347, "rustworkx.core_number"]], "cycle_basis() (in module rustworkx)": [[348, "rustworkx.cycle_basis"]], "dag_longest_path() (in module rustworkx)": [[349, "rustworkx.dag_longest_path"]], "dag_longest_path_length() (in module rustworkx)": [[350, "rustworkx.dag_longest_path_length"]], "dag_weighted_longest_path() (in module rustworkx)": [[351, "rustworkx.dag_weighted_longest_path"]], "dag_weighted_longest_path_length() (in module rustworkx)": [[352, "rustworkx.dag_weighted_longest_path_length"]], "degree_centrality() (in module rustworkx)": [[353, "rustworkx.degree_centrality"]], "descendants() (in module rustworkx)": [[354, "rustworkx.descendants"]], "dfs_edges() (in module rustworkx)": [[355, "rustworkx.dfs_edges"]], "dfs_search() (in module rustworkx)": [[356, "rustworkx.dfs_search"]], "digraph_adjacency_matrix() (in module rustworkx)": [[357, "rustworkx.digraph_adjacency_matrix"]], "digraph_all_pairs_all_simple_paths() (in module rustworkx)": [[358, "rustworkx.digraph_all_pairs_all_simple_paths"]], "digraph_all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[359, "rustworkx.digraph_all_pairs_bellman_ford_path_lengths"]], "digraph_all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[360, "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths"]], "digraph_all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[361, "rustworkx.digraph_all_pairs_dijkstra_path_lengths"]], "digraph_all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[362, "rustworkx.digraph_all_pairs_dijkstra_shortest_paths"]], "digraph_all_shortest_paths() (in module rustworkx)": [[363, "rustworkx.digraph_all_shortest_paths"]], "digraph_all_simple_paths() (in module rustworkx)": [[364, "rustworkx.digraph_all_simple_paths"]], "digraph_astar_shortest_path() (in module rustworkx)": [[365, "rustworkx.digraph_astar_shortest_path"]], "digraph_bellman_ford_shortest_path_lengths() (in module rustworkx)": [[366, "rustworkx.digraph_bellman_ford_shortest_path_lengths"]], "digraph_betweenness_centrality() (in module rustworkx)": [[367, "rustworkx.digraph_betweenness_centrality"]], "digraph_bfs_search() (in module rustworkx)": [[368, "rustworkx.digraph_bfs_search"]], "digraph_bipartite_layout() (in module rustworkx)": [[369, "rustworkx.digraph_bipartite_layout"]], "digraph_cartesian_product() (in module rustworkx)": [[370, "rustworkx.digraph_cartesian_product"]], "digraph_circular_layout() (in module rustworkx)": [[371, "rustworkx.digraph_circular_layout"]], "digraph_closeness_centrality() (in module rustworkx)": [[372, "rustworkx.digraph_closeness_centrality"]], "digraph_complement() (in module rustworkx)": [[373, "rustworkx.digraph_complement"]], "digraph_core_number() (in module rustworkx)": [[374, "rustworkx.digraph_core_number"]], "digraph_dfs_edges() (in module rustworkx)": [[375, "rustworkx.digraph_dfs_edges"]], "digraph_dfs_search() (in module rustworkx)": [[376, "rustworkx.digraph_dfs_search"]], "digraph_dijkstra_search() (in module rustworkx)": [[377, "rustworkx.digraph_dijkstra_search"]], "digraph_dijkstra_shortest_path_lengths() (in module rustworkx)": [[378, "rustworkx.digraph_dijkstra_shortest_path_lengths"]], "digraph_dijkstra_shortest_paths() (in module rustworkx)": [[379, "rustworkx.digraph_dijkstra_shortest_paths"]], "digraph_distance_matrix() (in module rustworkx)": [[380, "rustworkx.digraph_distance_matrix"]], "digraph_edge_betweenness_centrality() (in module rustworkx)": [[381, "rustworkx.digraph_edge_betweenness_centrality"]], "digraph_eigenvector_centrality() (in module rustworkx)": [[382, "rustworkx.digraph_eigenvector_centrality"]], "digraph_find_cycle() (in module rustworkx)": [[383, "rustworkx.digraph_find_cycle"]], "digraph_floyd_warshall() (in module rustworkx)": [[384, "rustworkx.digraph_floyd_warshall"]], "digraph_floyd_warshall_numpy() (in module rustworkx)": [[385, "rustworkx.digraph_floyd_warshall_numpy"]], "digraph_floyd_warshall_successor_and_distance() (in module rustworkx)": [[386, "rustworkx.digraph_floyd_warshall_successor_and_distance"]], "digraph_is_isomorphic() (in module rustworkx)": [[387, "rustworkx.digraph_is_isomorphic"]], "digraph_is_subgraph_isomorphic() (in module rustworkx)": [[388, "rustworkx.digraph_is_subgraph_isomorphic"]], "digraph_k_shortest_path_lengths() (in module rustworkx)": [[389, "rustworkx.digraph_k_shortest_path_lengths"]], "digraph_katz_centrality() (in module rustworkx)": [[390, "rustworkx.digraph_katz_centrality"]], "digraph_longest_simple_path() (in module rustworkx)": [[391, "rustworkx.digraph_longest_simple_path"]], "digraph_maximum_bisimulation() (in module rustworkx)": [[392, "rustworkx.digraph_maximum_bisimulation"]], "digraph_node_link_json() (in module rustworkx)": [[393, "rustworkx.digraph_node_link_json"]], "digraph_num_shortest_paths_unweighted() (in module rustworkx)": [[394, "rustworkx.digraph_num_shortest_paths_unweighted"]], "digraph_random_layout() (in module rustworkx)": [[395, "rustworkx.digraph_random_layout"]], "digraph_shell_layout() (in module rustworkx)": [[396, "rustworkx.digraph_shell_layout"]], "digraph_spiral_layout() (in module rustworkx)": [[397, "rustworkx.digraph_spiral_layout"]], "digraph_spring_layout() (in module rustworkx)": [[398, "rustworkx.digraph_spring_layout"]], "digraph_tensor_product() (in module rustworkx)": [[399, "rustworkx.digraph_tensor_product"]], "digraph_transitivity() (in module rustworkx)": [[400, "rustworkx.digraph_transitivity"]], "digraph_union() (in module rustworkx)": [[401, "rustworkx.digraph_union"]], "digraph_unweighted_average_shortest_path_length() (in module rustworkx)": [[402, "rustworkx.digraph_unweighted_average_shortest_path_length"]], "digraph_vf2_mapping() (in module rustworkx)": [[403, "rustworkx.digraph_vf2_mapping"]], "dijkstra_search() (in module rustworkx)": [[404, "rustworkx.dijkstra_search"]], "dijkstra_shortest_path_lengths() (in module rustworkx)": [[405, "rustworkx.dijkstra_shortest_path_lengths"]], "dijkstra_shortest_paths() (in module rustworkx)": [[406, "rustworkx.dijkstra_shortest_paths"]], "directed_barabasi_albert_graph() (in module rustworkx)": [[407, "rustworkx.directed_barabasi_albert_graph"]], "directed_gnm_random_graph() (in module rustworkx)": [[408, "rustworkx.directed_gnm_random_graph"]], "directed_gnp_random_graph() (in module rustworkx)": [[409, "rustworkx.directed_gnp_random_graph"]], "directed_random_bipartite_graph() (in module rustworkx)": [[410, "rustworkx.directed_random_bipartite_graph"]], "directed_sbm_random_graph() (in module rustworkx)": [[411, "rustworkx.directed_sbm_random_graph"]], "distance_matrix() (in module rustworkx)": [[412, "rustworkx.distance_matrix"]], "dominance_frontiers() (in module rustworkx)": [[413, "rustworkx.dominance_frontiers"]], "edge_betweenness_centrality() (in module rustworkx)": [[414, "rustworkx.edge_betweenness_centrality"]], "eigenvector_centrality() (in module rustworkx)": [[415, "rustworkx.eigenvector_centrality"]], "find_negative_cycle() (in module rustworkx)": [[416, "rustworkx.find_negative_cycle"]], "floyd_warshall() (in module rustworkx)": [[417, "rustworkx.floyd_warshall"]], "floyd_warshall_numpy() (in module rustworkx)": [[418, "rustworkx.floyd_warshall_numpy"]], "floyd_warshall_successor_and_distance() (in module rustworkx)": [[419, "rustworkx.floyd_warshall_successor_and_distance"]], "from_node_link_json_file() (in module rustworkx)": [[420, "rustworkx.from_node_link_json_file"]], "barbell_graph() (in module rustworkx.generators)": [[421, "rustworkx.generators.barbell_graph"]], "binomial_tree_graph() (in module rustworkx.generators)": [[422, "rustworkx.generators.binomial_tree_graph"]], "complete_graph() (in module rustworkx.generators)": [[423, "rustworkx.generators.complete_graph"]], "cycle_graph() (in module rustworkx.generators)": [[424, "rustworkx.generators.cycle_graph"]], "directed_binomial_tree_graph() (in module rustworkx.generators)": [[425, "rustworkx.generators.directed_binomial_tree_graph"]], "directed_complete_graph() (in module rustworkx.generators)": [[426, "rustworkx.generators.directed_complete_graph"]], "directed_cycle_graph() (in module rustworkx.generators)": [[427, "rustworkx.generators.directed_cycle_graph"]], "directed_empty_graph() (in module rustworkx.generators)": [[428, "rustworkx.generators.directed_empty_graph"]], "directed_grid_graph() (in module rustworkx.generators)": [[429, "rustworkx.generators.directed_grid_graph"]], "directed_heavy_hex_graph() (in module rustworkx.generators)": [[430, "rustworkx.generators.directed_heavy_hex_graph"]], "directed_heavy_square_graph() (in module rustworkx.generators)": [[431, "rustworkx.generators.directed_heavy_square_graph"]], "directed_hexagonal_lattice_graph() (in module rustworkx.generators)": [[432, "rustworkx.generators.directed_hexagonal_lattice_graph"]], "directed_mesh_graph() (in module rustworkx.generators)": [[433, "rustworkx.generators.directed_mesh_graph"]], "directed_path_graph() (in module rustworkx.generators)": [[434, "rustworkx.generators.directed_path_graph"]], "directed_star_graph() (in module rustworkx.generators)": [[435, "rustworkx.generators.directed_star_graph"]], "dorogovtsev_goltsev_mendes_graph() (in module rustworkx.generators)": [[436, "rustworkx.generators.dorogovtsev_goltsev_mendes_graph"]], "empty_graph() (in module rustworkx.generators)": [[437, "rustworkx.generators.empty_graph"]], "full_rary_tree() (in module rustworkx.generators)": [[438, "rustworkx.generators.full_rary_tree"]], "generalized_petersen_graph() (in module rustworkx.generators)": [[439, "rustworkx.generators.generalized_petersen_graph"]], "grid_graph() (in module rustworkx.generators)": [[440, "rustworkx.generators.grid_graph"]], "heavy_hex_graph() (in module rustworkx.generators)": [[441, "rustworkx.generators.heavy_hex_graph"]], "heavy_square_graph() (in module rustworkx.generators)": [[442, "rustworkx.generators.heavy_square_graph"]], "hexagonal_lattice_graph() (in module rustworkx.generators)": [[443, "rustworkx.generators.hexagonal_lattice_graph"]], "lollipop_graph() (in module rustworkx.generators)": [[444, "rustworkx.generators.lollipop_graph"]], "mesh_graph() (in module rustworkx.generators)": [[445, "rustworkx.generators.mesh_graph"]], "path_graph() (in module rustworkx.generators)": [[446, "rustworkx.generators.path_graph"]], "star_graph() (in module rustworkx.generators)": [[447, "rustworkx.generators.star_graph"]], "graph_adjacency_matrix() (in module rustworkx)": [[448, "rustworkx.graph_adjacency_matrix"]], "graph_all_pairs_all_simple_paths() (in module rustworkx)": [[449, "rustworkx.graph_all_pairs_all_simple_paths"]], "graph_all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[450, "rustworkx.graph_all_pairs_bellman_ford_path_lengths"]], "graph_all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[451, "rustworkx.graph_all_pairs_bellman_ford_shortest_paths"]], "graph_all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[452, "rustworkx.graph_all_pairs_dijkstra_path_lengths"]], "graph_all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[453, "rustworkx.graph_all_pairs_dijkstra_shortest_paths"]], "graph_all_shortest_paths() (in module rustworkx)": [[454, "rustworkx.graph_all_shortest_paths"]], "graph_all_simple_paths() (in module rustworkx)": [[455, "rustworkx.graph_all_simple_paths"]], "graph_astar_shortest_path() (in module rustworkx)": [[456, "rustworkx.graph_astar_shortest_path"]], "graph_bellman_ford_shortest_path_lengths() (in module rustworkx)": [[457, "rustworkx.graph_bellman_ford_shortest_path_lengths"]], "graph_betweenness_centrality() (in module rustworkx)": [[458, "rustworkx.graph_betweenness_centrality"]], "graph_bfs_search() (in module rustworkx)": [[459, "rustworkx.graph_bfs_search"]], "graph_bipartite_edge_color() (in module rustworkx)": [[460, "rustworkx.graph_bipartite_edge_color"]], "graph_bipartite_layout() (in module rustworkx)": [[461, "rustworkx.graph_bipartite_layout"]], "graph_cartesian_product() (in module rustworkx)": [[462, "rustworkx.graph_cartesian_product"]], "graph_circular_layout() (in module rustworkx)": [[463, "rustworkx.graph_circular_layout"]], "graph_closeness_centrality() (in module rustworkx)": [[464, "rustworkx.graph_closeness_centrality"]], "graph_complement() (in module rustworkx)": [[465, "rustworkx.graph_complement"]], "graph_core_number() (in module rustworkx)": [[466, "rustworkx.graph_core_number"]], "graph_dfs_edges() (in module rustworkx)": [[467, "rustworkx.graph_dfs_edges"]], "graph_dfs_search() (in module rustworkx)": [[468, "rustworkx.graph_dfs_search"]], "graph_dijkstra_search() (in module rustworkx)": [[469, "rustworkx.graph_dijkstra_search"]], "graph_dijkstra_shortest_path_lengths() (in module rustworkx)": [[470, "rustworkx.graph_dijkstra_shortest_path_lengths"]], "graph_dijkstra_shortest_paths() (in module rustworkx)": [[471, "rustworkx.graph_dijkstra_shortest_paths"]], "graph_distance_matrix() (in module rustworkx)": [[472, "rustworkx.graph_distance_matrix"]], "graph_edge_betweenness_centrality() (in module rustworkx)": [[473, "rustworkx.graph_edge_betweenness_centrality"]], "graph_eigenvector_centrality() (in module rustworkx)": [[474, "rustworkx.graph_eigenvector_centrality"]], "graph_floyd_warshall() (in module rustworkx)": [[475, "rustworkx.graph_floyd_warshall"]], "graph_floyd_warshall_numpy() (in module rustworkx)": [[476, "rustworkx.graph_floyd_warshall_numpy"]], "graph_floyd_warshall_successor_and_distance() (in module rustworkx)": [[477, "rustworkx.graph_floyd_warshall_successor_and_distance"]], "graph_greedy_color() (in module rustworkx)": [[478, "rustworkx.graph_greedy_color"]], "graph_greedy_edge_color() (in module rustworkx)": [[479, "rustworkx.graph_greedy_edge_color"]], "graph_is_isomorphic() (in module rustworkx)": [[480, "rustworkx.graph_is_isomorphic"]], "graph_is_subgraph_isomorphic() (in module rustworkx)": [[481, "rustworkx.graph_is_subgraph_isomorphic"]], "graph_k_shortest_path_lengths() (in module rustworkx)": [[482, "rustworkx.graph_k_shortest_path_lengths"]], "graph_katz_centrality() (in module rustworkx)": [[483, "rustworkx.graph_katz_centrality"]], "graph_line_graph() (in module rustworkx)": [[484, "rustworkx.graph_line_graph"]], "graph_longest_simple_path() (in module rustworkx)": [[485, "rustworkx.graph_longest_simple_path"]], "graph_misra_gries_edge_color() (in module rustworkx)": [[486, "rustworkx.graph_misra_gries_edge_color"]], "graph_node_link_json() (in module rustworkx)": [[487, "rustworkx.graph_node_link_json"]], "graph_num_shortest_paths_unweighted() (in module rustworkx)": [[488, "rustworkx.graph_num_shortest_paths_unweighted"]], "graph_random_layout() (in module rustworkx)": [[489, "rustworkx.graph_random_layout"]], "graph_shell_layout() (in module rustworkx)": [[490, "rustworkx.graph_shell_layout"]], "graph_spiral_layout() (in module rustworkx)": [[491, "rustworkx.graph_spiral_layout"]], "graph_spring_layout() (in module rustworkx)": [[492, "rustworkx.graph_spring_layout"]], "graph_tensor_product() (in module rustworkx)": [[493, "rustworkx.graph_tensor_product"]], "graph_token_swapper() (in module rustworkx)": [[494, "rustworkx.graph_token_swapper"]], "graph_transitivity() (in module rustworkx)": [[495, "rustworkx.graph_transitivity"]], "graph_union() (in module rustworkx)": [[496, "rustworkx.graph_union"]], "graph_unweighted_average_shortest_path_length() (in module rustworkx)": [[497, "rustworkx.graph_unweighted_average_shortest_path_length"]], "graph_vf2_mapping() (in module rustworkx)": [[498, "rustworkx.graph_vf2_mapping"]], "has_path() (in module rustworkx)": [[499, "rustworkx.has_path"]], "hits() (in module rustworkx)": [[500, "rustworkx.hits"]], "hyperbolic_random_graph() (in module rustworkx)": [[501, "rustworkx.hyperbolic_random_graph"]], "immediate_dominators() (in module rustworkx)": [[502, "rustworkx.immediate_dominators"]], "in_degree_centrality() (in module rustworkx)": [[503, "rustworkx.in_degree_centrality"]], "is_bipartite() (in module rustworkx)": [[504, "rustworkx.is_bipartite"]], "is_connected() (in module rustworkx)": [[505, "rustworkx.is_connected"]], "is_directed_acyclic_graph() (in module rustworkx)": [[506, "rustworkx.is_directed_acyclic_graph"]], "is_isomorphic() (in module rustworkx)": [[507, "rustworkx.is_isomorphic"]], "is_isomorphic_node_match() (in module rustworkx)": [[508, "rustworkx.is_isomorphic_node_match"]], "is_matching() (in module rustworkx)": [[509, "rustworkx.is_matching"]], "is_maximal_matching() (in module rustworkx)": [[510, "rustworkx.is_maximal_matching"]], "is_planar() (in module rustworkx)": [[511, "rustworkx.is_planar"]], "is_subgraph_isomorphic() (in module rustworkx)": [[512, "rustworkx.is_subgraph_isomorphic"]], "is_weakly_connected() (in module rustworkx)": [[513, "rustworkx.is_weakly_connected"]], "isolates() (in module rustworkx)": [[514, "rustworkx.isolates"]], "k_shortest_path_lengths() (in module rustworkx)": [[515, "rustworkx.k_shortest_path_lengths"]], "katz_centrality() (in module rustworkx)": [[516, "rustworkx.katz_centrality"]], "layers() (in module rustworkx)": [[517, "rustworkx.layers"]], "lexicographical_topological_sort() (in module rustworkx)": [[518, "rustworkx.lexicographical_topological_sort"]], "longest_simple_path() (in module rustworkx)": [[519, "rustworkx.longest_simple_path"]], "max_weight_matching() (in module rustworkx)": [[520, "rustworkx.max_weight_matching"]], "metric_closure() (in module rustworkx)": [[521, "rustworkx.metric_closure"]], "minimum_spanning_edges() (in module rustworkx)": [[522, "rustworkx.minimum_spanning_edges"]], "minimum_spanning_tree() (in module rustworkx)": [[523, "rustworkx.minimum_spanning_tree"]], "negative_edge_cycle() (in module rustworkx)": [[524, "rustworkx.negative_edge_cycle"]], "networkx_converter() (in module rustworkx)": [[525, "rustworkx.networkx_converter"]], "node_connected_component() (in module rustworkx)": [[526, "rustworkx.node_connected_component"]], "node_link_json() (in module rustworkx)": [[527, "rustworkx.node_link_json"]], "num_shortest_paths_unweighted() (in module rustworkx)": [[528, "rustworkx.num_shortest_paths_unweighted"]], "number_connected_components() (in module rustworkx)": [[529, "rustworkx.number_connected_components"]], "number_weakly_connected_components() (in module rustworkx)": [[530, "rustworkx.number_weakly_connected_components"]], "out_degree_centrality() (in module rustworkx)": [[531, "rustworkx.out_degree_centrality"]], "pagerank() (in module rustworkx)": [[532, "rustworkx.pagerank"]], "parse_node_link_json() (in module rustworkx)": [[533, "rustworkx.parse_node_link_json"]], "random_geometric_graph() (in module rustworkx)": [[534, "rustworkx.random_geometric_graph"]], "random_layout() (in module rustworkx)": [[535, "rustworkx.random_layout"]], "read_graphml() (in module rustworkx)": [[536, "rustworkx.read_graphml"]], "shell_layout() (in module rustworkx)": [[537, "rustworkx.shell_layout"]], "simple_cycles() (in module rustworkx)": [[538, "rustworkx.simple_cycles"]], "spiral_layout() (in module rustworkx)": [[539, "rustworkx.spiral_layout"]], "spring_layout() (in module rustworkx)": [[540, "rustworkx.spring_layout"]], "steiner_tree() (in module rustworkx)": [[541, "rustworkx.steiner_tree"]], "stoer_wagner_min_cut() (in module rustworkx)": [[542, "rustworkx.stoer_wagner_min_cut"]], "strongly_connected_components() (in module rustworkx)": [[543, "rustworkx.strongly_connected_components"]], "topological_generations() (in module rustworkx)": [[544, "rustworkx.topological_generations"]], "topological_sort() (in module rustworkx)": [[545, "rustworkx.topological_sort"]], "transitive_reduction() (in module rustworkx)": [[546, "rustworkx.transitive_reduction"]], "transitivity() (in module rustworkx)": [[547, "rustworkx.transitivity"]], "two_color() (in module rustworkx)": [[548, "rustworkx.two_color"]], "undirected_gnm_random_graph() (in module rustworkx)": [[549, "rustworkx.undirected_gnm_random_graph"]], "undirected_gnp_random_graph() (in module rustworkx)": [[550, "rustworkx.undirected_gnp_random_graph"]], "undirected_random_bipartite_graph() (in module rustworkx)": [[551, "rustworkx.undirected_random_bipartite_graph"]], "undirected_sbm_random_graph() (in module rustworkx)": [[552, "rustworkx.undirected_sbm_random_graph"]], "union() (in module rustworkx)": [[553, "rustworkx.union"]], "unweighted_average_shortest_path_length() (in module rustworkx)": [[554, "rustworkx.unweighted_average_shortest_path_length"]], "vf2_mapping() (in module rustworkx)": [[555, "rustworkx.vf2_mapping"]], "bfsvisitor (class in rustworkx.visit)": [[556, "rustworkx.visit.BFSVisitor"]], "black_target_edge() (bfsvisitor method)": [[557, "rustworkx.visit.BFSVisitor.black_target_edge"]], "discover_vertex() (bfsvisitor method)": [[558, "rustworkx.visit.BFSVisitor.discover_vertex"]], "finish_vertex() (bfsvisitor method)": [[559, "rustworkx.visit.BFSVisitor.finish_vertex"]], "gray_target_edge() (bfsvisitor method)": [[560, "rustworkx.visit.BFSVisitor.gray_target_edge"]], "non_tree_edge() (bfsvisitor method)": [[561, "rustworkx.visit.BFSVisitor.non_tree_edge"]], "tree_edge() (bfsvisitor method)": [[562, "rustworkx.visit.BFSVisitor.tree_edge"]], "dfsvisitor (class in rustworkx.visit)": [[563, "rustworkx.visit.DFSVisitor"]], "back_edge() (dfsvisitor method)": [[564, "rustworkx.visit.DFSVisitor.back_edge"]], "discover_vertex() (dfsvisitor method)": [[565, "rustworkx.visit.DFSVisitor.discover_vertex"]], "finish_vertex() (dfsvisitor method)": [[566, "rustworkx.visit.DFSVisitor.finish_vertex"]], "forward_or_cross_edge() (dfsvisitor method)": [[567, "rustworkx.visit.DFSVisitor.forward_or_cross_edge"]], "tree_edge() (dfsvisitor method)": [[568, "rustworkx.visit.DFSVisitor.tree_edge"]], "dijkstravisitor (class in rustworkx.visit)": [[569, "rustworkx.visit.DijkstraVisitor"]], "discover_vertex() (dijkstravisitor method)": [[570, "rustworkx.visit.DijkstraVisitor.discover_vertex"]], "edge_not_relaxed() (dijkstravisitor method)": [[571, "rustworkx.visit.DijkstraVisitor.edge_not_relaxed"]], "edge_relaxed() (dijkstravisitor method)": [[572, "rustworkx.visit.DijkstraVisitor.edge_relaxed"]], "examine_edge() (dijkstravisitor method)": [[573, "rustworkx.visit.DijkstraVisitor.examine_edge"]], "finish_vertex() (dijkstravisitor method)": [[574, "rustworkx.visit.DijkstraVisitor.finish_vertex"]], "prunesearch": [[575, "rustworkx.visit.PruneSearch"]], "stopsearch": [[576, "rustworkx.visit.StopSearch"]], "graphviz_draw() (in module rustworkx.visualization)": [[577, "rustworkx.visualization.graphviz_draw"]], "mpl_draw() (in module rustworkx.visualization)": [[578, "rustworkx.visualization.mpl_draw"]], "weakly_connected_components() (in module rustworkx)": [[579, "rustworkx.weakly_connected_components"]]}})