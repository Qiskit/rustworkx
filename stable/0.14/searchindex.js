Search.setIndex({"docnames": ["CONTRIBUTING", "api/algorithm_functions/centrality", "api/algorithm_functions/coloring", "api/algorithm_functions/connectivity_and_cycles", "api/algorithm_functions/dag_algorithms", "api/algorithm_functions/graph_operations", "api/algorithm_functions/index", "api/algorithm_functions/isomorphism", "api/algorithm_functions/link_analysis", "api/algorithm_functions/matching", "api/algorithm_functions/other", "api/algorithm_functions/shortest_paths", "api/algorithm_functions/traversal", "api/algorithm_functions/tree", "api/converters", "api/custom_return_types", "api/exceptions", "api/generators", "api/graph_classes", "api/index", "api/layout_functions", "api/pydigraph_api_functions", "api/pygraph_api_functions", "api/random_graph_generator_functions", "api/serialization", "apiref/rustworkx.AllPairsPathLengthMapping", "apiref/rustworkx.AllPairsPathLengthMapping.items", "apiref/rustworkx.AllPairsPathLengthMapping.keys", "apiref/rustworkx.AllPairsPathLengthMapping.values", "apiref/rustworkx.AllPairsPathMapping", "apiref/rustworkx.AllPairsPathMapping.items", "apiref/rustworkx.AllPairsPathMapping.keys", "apiref/rustworkx.AllPairsPathMapping.values", "apiref/rustworkx.BFSPredecessors", "apiref/rustworkx.BFSSuccessors", "apiref/rustworkx.BiconnectedComponents", "apiref/rustworkx.BiconnectedComponents.items", "apiref/rustworkx.BiconnectedComponents.keys", "apiref/rustworkx.BiconnectedComponents.values", "apiref/rustworkx.CentralityMapping", "apiref/rustworkx.CentralityMapping.items", "apiref/rustworkx.CentralityMapping.keys", "apiref/rustworkx.CentralityMapping.values", "apiref/rustworkx.Chains", "apiref/rustworkx.DAGHasCycle", "apiref/rustworkx.DAGWouldCycle", "apiref/rustworkx.EdgeCentralityMapping", "apiref/rustworkx.EdgeCentralityMapping.items", "apiref/rustworkx.EdgeCentralityMapping.keys", "apiref/rustworkx.EdgeCentralityMapping.values", "apiref/rustworkx.EdgeIndexMap", "apiref/rustworkx.EdgeIndexMap.items", "apiref/rustworkx.EdgeIndexMap.keys", "apiref/rustworkx.EdgeIndexMap.values", "apiref/rustworkx.EdgeIndices", "apiref/rustworkx.EdgeList", "apiref/rustworkx.GraphNotBipartite", "apiref/rustworkx.InvalidMapping", "apiref/rustworkx.InvalidNode", "apiref/rustworkx.JSONSerializationError", "apiref/rustworkx.NegativeCycle", "apiref/rustworkx.NoEdgeBetweenNodes", "apiref/rustworkx.NoPathFound", "apiref/rustworkx.NoSuitableNeighbors", "apiref/rustworkx.NodeIndices", "apiref/rustworkx.NodeMap", "apiref/rustworkx.NodeMap.items", "apiref/rustworkx.NodeMap.keys", "apiref/rustworkx.NodeMap.values", "apiref/rustworkx.NullGraph", "apiref/rustworkx.PathLengthMapping", "apiref/rustworkx.PathLengthMapping.items", "apiref/rustworkx.PathLengthMapping.keys", "apiref/rustworkx.PathLengthMapping.values", "apiref/rustworkx.PathMapping", "apiref/rustworkx.PathMapping.items", "apiref/rustworkx.PathMapping.keys", "apiref/rustworkx.PathMapping.values", "apiref/rustworkx.Pos2DMapping", "apiref/rustworkx.Pos2DMapping.items", "apiref/rustworkx.Pos2DMapping.keys", "apiref/rustworkx.Pos2DMapping.values", "apiref/rustworkx.ProductNodeMap", "apiref/rustworkx.ProductNodeMap.items", "apiref/rustworkx.ProductNodeMap.keys", "apiref/rustworkx.ProductNodeMap.values", "apiref/rustworkx.PyDAG", "apiref/rustworkx.PyDAG.add_child", "apiref/rustworkx.PyDAG.add_edge", "apiref/rustworkx.PyDAG.add_edges_from", "apiref/rustworkx.PyDAG.add_edges_from_no_data", "apiref/rustworkx.PyDAG.add_node", "apiref/rustworkx.PyDAG.add_nodes_from", "apiref/rustworkx.PyDAG.add_parent", "apiref/rustworkx.PyDAG.adj", "apiref/rustworkx.PyDAG.adj_direction", "apiref/rustworkx.PyDAG.clear", "apiref/rustworkx.PyDAG.clear_edges", "apiref/rustworkx.PyDAG.compose", "apiref/rustworkx.PyDAG.contract_nodes", "apiref/rustworkx.PyDAG.copy", "apiref/rustworkx.PyDAG.edge_index_map", "apiref/rustworkx.PyDAG.edge_indices", "apiref/rustworkx.PyDAG.edge_indices_from_endpoints", "apiref/rustworkx.PyDAG.edge_list", "apiref/rustworkx.PyDAG.edge_subgraph", "apiref/rustworkx.PyDAG.edges", "apiref/rustworkx.PyDAG.extend_from_edge_list", "apiref/rustworkx.PyDAG.extend_from_weighted_edge_list", "apiref/rustworkx.PyDAG.filter_edges", "apiref/rustworkx.PyDAG.filter_nodes", "apiref/rustworkx.PyDAG.find_adjacent_node_by_edge", "apiref/rustworkx.PyDAG.find_node_by_weight", "apiref/rustworkx.PyDAG.find_predecessor_node_by_edge", "apiref/rustworkx.PyDAG.find_predecessors_by_edge", "apiref/rustworkx.PyDAG.find_successors_by_edge", "apiref/rustworkx.PyDAG.from_adjacency_matrix", "apiref/rustworkx.PyDAG.from_complex_adjacency_matrix", "apiref/rustworkx.PyDAG.get_all_edge_data", "apiref/rustworkx.PyDAG.get_edge_data", "apiref/rustworkx.PyDAG.get_edge_data_by_index", "apiref/rustworkx.PyDAG.get_edge_endpoints_by_index", "apiref/rustworkx.PyDAG.get_node_data", "apiref/rustworkx.PyDAG.has_edge", "apiref/rustworkx.PyDAG.has_parallel_edges", "apiref/rustworkx.PyDAG.in_degree", "apiref/rustworkx.PyDAG.in_edges", "apiref/rustworkx.PyDAG.incident_edge_index_map", "apiref/rustworkx.PyDAG.incident_edges", "apiref/rustworkx.PyDAG.insert_node_on_in_edges", "apiref/rustworkx.PyDAG.insert_node_on_in_edges_multiple", "apiref/rustworkx.PyDAG.insert_node_on_out_edges", "apiref/rustworkx.PyDAG.insert_node_on_out_edges_multiple", "apiref/rustworkx.PyDAG.is_symmetric", "apiref/rustworkx.PyDAG.make_symmetric", "apiref/rustworkx.PyDAG.merge_nodes", "apiref/rustworkx.PyDAG.neighbors", "apiref/rustworkx.PyDAG.node_indexes", "apiref/rustworkx.PyDAG.node_indices", "apiref/rustworkx.PyDAG.nodes", "apiref/rustworkx.PyDAG.num_edges", "apiref/rustworkx.PyDAG.num_nodes", "apiref/rustworkx.PyDAG.out_degree", "apiref/rustworkx.PyDAG.out_edges", "apiref/rustworkx.PyDAG.predecessor_indices", "apiref/rustworkx.PyDAG.predecessors", "apiref/rustworkx.PyDAG.read_edge_list", "apiref/rustworkx.PyDAG.remove_edge", "apiref/rustworkx.PyDAG.remove_edge_from_index", "apiref/rustworkx.PyDAG.remove_edges_from", "apiref/rustworkx.PyDAG.remove_node", "apiref/rustworkx.PyDAG.remove_node_retain_edges", "apiref/rustworkx.PyDAG.remove_nodes_from", "apiref/rustworkx.PyDAG.reverse", "apiref/rustworkx.PyDAG.subgraph", "apiref/rustworkx.PyDAG.substitute_node_with_subgraph", "apiref/rustworkx.PyDAG.successor_indices", "apiref/rustworkx.PyDAG.successors", "apiref/rustworkx.PyDAG.to_dot", "apiref/rustworkx.PyDAG.to_undirected", "apiref/rustworkx.PyDAG.update_edge", "apiref/rustworkx.PyDAG.update_edge_by_index", "apiref/rustworkx.PyDAG.weighted_edge_list", "apiref/rustworkx.PyDAG.write_edge_list", "apiref/rustworkx.PyDiGraph", "apiref/rustworkx.PyDiGraph.add_child", "apiref/rustworkx.PyDiGraph.add_edge", "apiref/rustworkx.PyDiGraph.add_edges_from", "apiref/rustworkx.PyDiGraph.add_edges_from_no_data", "apiref/rustworkx.PyDiGraph.add_node", "apiref/rustworkx.PyDiGraph.add_nodes_from", "apiref/rustworkx.PyDiGraph.add_parent", "apiref/rustworkx.PyDiGraph.adj", "apiref/rustworkx.PyDiGraph.adj_direction", "apiref/rustworkx.PyDiGraph.clear", "apiref/rustworkx.PyDiGraph.clear_edges", "apiref/rustworkx.PyDiGraph.compose", "apiref/rustworkx.PyDiGraph.contract_nodes", "apiref/rustworkx.PyDiGraph.copy", "apiref/rustworkx.PyDiGraph.edge_index_map", "apiref/rustworkx.PyDiGraph.edge_indices", "apiref/rustworkx.PyDiGraph.edge_indices_from_endpoints", "apiref/rustworkx.PyDiGraph.edge_list", "apiref/rustworkx.PyDiGraph.edge_subgraph", "apiref/rustworkx.PyDiGraph.edges", "apiref/rustworkx.PyDiGraph.extend_from_edge_list", "apiref/rustworkx.PyDiGraph.extend_from_weighted_edge_list", "apiref/rustworkx.PyDiGraph.filter_edges", "apiref/rustworkx.PyDiGraph.filter_nodes", "apiref/rustworkx.PyDiGraph.find_adjacent_node_by_edge", "apiref/rustworkx.PyDiGraph.find_node_by_weight", "apiref/rustworkx.PyDiGraph.find_predecessor_node_by_edge", "apiref/rustworkx.PyDiGraph.find_predecessors_by_edge", "apiref/rustworkx.PyDiGraph.find_successors_by_edge", "apiref/rustworkx.PyDiGraph.from_adjacency_matrix", "apiref/rustworkx.PyDiGraph.from_complex_adjacency_matrix", "apiref/rustworkx.PyDiGraph.get_all_edge_data", "apiref/rustworkx.PyDiGraph.get_edge_data", "apiref/rustworkx.PyDiGraph.get_edge_data_by_index", "apiref/rustworkx.PyDiGraph.get_edge_endpoints_by_index", "apiref/rustworkx.PyDiGraph.get_node_data", "apiref/rustworkx.PyDiGraph.has_edge", "apiref/rustworkx.PyDiGraph.has_parallel_edges", "apiref/rustworkx.PyDiGraph.in_degree", "apiref/rustworkx.PyDiGraph.in_edges", "apiref/rustworkx.PyDiGraph.incident_edge_index_map", "apiref/rustworkx.PyDiGraph.incident_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges_multiple", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges_multiple", "apiref/rustworkx.PyDiGraph.is_symmetric", "apiref/rustworkx.PyDiGraph.make_symmetric", "apiref/rustworkx.PyDiGraph.merge_nodes", "apiref/rustworkx.PyDiGraph.neighbors", "apiref/rustworkx.PyDiGraph.node_indexes", "apiref/rustworkx.PyDiGraph.node_indices", "apiref/rustworkx.PyDiGraph.nodes", "apiref/rustworkx.PyDiGraph.num_edges", "apiref/rustworkx.PyDiGraph.num_nodes", "apiref/rustworkx.PyDiGraph.out_degree", "apiref/rustworkx.PyDiGraph.out_edges", "apiref/rustworkx.PyDiGraph.predecessor_indices", "apiref/rustworkx.PyDiGraph.predecessors", "apiref/rustworkx.PyDiGraph.read_edge_list", "apiref/rustworkx.PyDiGraph.remove_edge", "apiref/rustworkx.PyDiGraph.remove_edge_from_index", "apiref/rustworkx.PyDiGraph.remove_edges_from", "apiref/rustworkx.PyDiGraph.remove_node", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges", "apiref/rustworkx.PyDiGraph.remove_nodes_from", "apiref/rustworkx.PyDiGraph.reverse", "apiref/rustworkx.PyDiGraph.subgraph", "apiref/rustworkx.PyDiGraph.substitute_node_with_subgraph", "apiref/rustworkx.PyDiGraph.successor_indices", "apiref/rustworkx.PyDiGraph.successors", "apiref/rustworkx.PyDiGraph.to_dot", "apiref/rustworkx.PyDiGraph.to_undirected", "apiref/rustworkx.PyDiGraph.update_edge", "apiref/rustworkx.PyDiGraph.update_edge_by_index", "apiref/rustworkx.PyDiGraph.weighted_edge_list", "apiref/rustworkx.PyDiGraph.write_edge_list", "apiref/rustworkx.PyGraph", "apiref/rustworkx.PyGraph.add_edge", "apiref/rustworkx.PyGraph.add_edges_from", "apiref/rustworkx.PyGraph.add_edges_from_no_data", "apiref/rustworkx.PyGraph.add_node", "apiref/rustworkx.PyGraph.add_nodes_from", "apiref/rustworkx.PyGraph.adj", "apiref/rustworkx.PyGraph.clear", "apiref/rustworkx.PyGraph.clear_edges", "apiref/rustworkx.PyGraph.compose", "apiref/rustworkx.PyGraph.contract_nodes", "apiref/rustworkx.PyGraph.copy", "apiref/rustworkx.PyGraph.degree", "apiref/rustworkx.PyGraph.edge_index_map", "apiref/rustworkx.PyGraph.edge_indices", "apiref/rustworkx.PyGraph.edge_indices_from_endpoints", "apiref/rustworkx.PyGraph.edge_list", "apiref/rustworkx.PyGraph.edge_subgraph", "apiref/rustworkx.PyGraph.edges", "apiref/rustworkx.PyGraph.extend_from_edge_list", "apiref/rustworkx.PyGraph.extend_from_weighted_edge_list", "apiref/rustworkx.PyGraph.filter_edges", "apiref/rustworkx.PyGraph.filter_nodes", "apiref/rustworkx.PyGraph.find_node_by_weight", "apiref/rustworkx.PyGraph.from_adjacency_matrix", "apiref/rustworkx.PyGraph.from_complex_adjacency_matrix", "apiref/rustworkx.PyGraph.get_all_edge_data", "apiref/rustworkx.PyGraph.get_edge_data", "apiref/rustworkx.PyGraph.get_edge_data_by_index", "apiref/rustworkx.PyGraph.get_edge_endpoints_by_index", "apiref/rustworkx.PyGraph.get_node_data", "apiref/rustworkx.PyGraph.has_edge", "apiref/rustworkx.PyGraph.has_parallel_edges", "apiref/rustworkx.PyGraph.in_edges", "apiref/rustworkx.PyGraph.incident_edge_index_map", "apiref/rustworkx.PyGraph.incident_edges", "apiref/rustworkx.PyGraph.neighbors", "apiref/rustworkx.PyGraph.node_indexes", "apiref/rustworkx.PyGraph.node_indices", "apiref/rustworkx.PyGraph.nodes", "apiref/rustworkx.PyGraph.num_edges", "apiref/rustworkx.PyGraph.num_nodes", "apiref/rustworkx.PyGraph.out_edges", "apiref/rustworkx.PyGraph.read_edge_list", "apiref/rustworkx.PyGraph.remove_edge", "apiref/rustworkx.PyGraph.remove_edge_from_index", "apiref/rustworkx.PyGraph.remove_edges_from", "apiref/rustworkx.PyGraph.remove_node", "apiref/rustworkx.PyGraph.remove_nodes_from", "apiref/rustworkx.PyGraph.subgraph", "apiref/rustworkx.PyGraph.substitute_node_with_subgraph", "apiref/rustworkx.PyGraph.to_directed", "apiref/rustworkx.PyGraph.to_dot", "apiref/rustworkx.PyGraph.update_edge", "apiref/rustworkx.PyGraph.update_edge_by_index", "apiref/rustworkx.PyGraph.weighted_edge_list", "apiref/rustworkx.PyGraph.write_edge_list", "apiref/rustworkx.TopologicalSorter", "apiref/rustworkx.TopologicalSorter.done", "apiref/rustworkx.TopologicalSorter.get_ready", "apiref/rustworkx.TopologicalSorter.is_active", "apiref/rustworkx.WeightedEdgeList", "apiref/rustworkx.adjacency_matrix", "apiref/rustworkx.all_pairs_all_simple_paths", "apiref/rustworkx.all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.all_pairs_dijkstra_path_lengths", "apiref/rustworkx.all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.all_shortest_paths", "apiref/rustworkx.all_simple_paths", "apiref/rustworkx.ancestors", "apiref/rustworkx.articulation_points", "apiref/rustworkx.astar_shortest_path", "apiref/rustworkx.barabasi_albert_graph", "apiref/rustworkx.bellman_ford_shortest_path_lengths", "apiref/rustworkx.bellman_ford_shortest_paths", "apiref/rustworkx.betweenness_centrality", "apiref/rustworkx.bfs_predecessors", "apiref/rustworkx.bfs_search", "apiref/rustworkx.bfs_successors", "apiref/rustworkx.biconnected_components", "apiref/rustworkx.bipartite_layout", "apiref/rustworkx.bridges", "apiref/rustworkx.cartesian_product", "apiref/rustworkx.chain_decomposition", "apiref/rustworkx.circular_layout", "apiref/rustworkx.closeness_centrality", "apiref/rustworkx.collect_bicolor_runs", "apiref/rustworkx.collect_runs", "apiref/rustworkx.complement", "apiref/rustworkx.connected_components", "apiref/rustworkx.core_number", "apiref/rustworkx.cycle_basis", "apiref/rustworkx.dag_longest_path", "apiref/rustworkx.dag_longest_path_length", "apiref/rustworkx.dag_weighted_longest_path", "apiref/rustworkx.dag_weighted_longest_path_length", "apiref/rustworkx.descendants", "apiref/rustworkx.dfs_edges", "apiref/rustworkx.dfs_search", "apiref/rustworkx.digraph_adjacency_matrix", "apiref/rustworkx.digraph_all_pairs_all_simple_paths", "apiref/rustworkx.digraph_all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.digraph_all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.digraph_all_pairs_dijkstra_path_lengths", "apiref/rustworkx.digraph_all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.digraph_all_shortest_paths", "apiref/rustworkx.digraph_all_simple_paths", "apiref/rustworkx.digraph_astar_shortest_path", "apiref/rustworkx.digraph_bellman_ford_shortest_path_lengths", "apiref/rustworkx.digraph_betweenness_centrality", "apiref/rustworkx.digraph_bfs_search", "apiref/rustworkx.digraph_bipartite_layout", "apiref/rustworkx.digraph_cartesian_product", "apiref/rustworkx.digraph_circular_layout", "apiref/rustworkx.digraph_closeness_centrality", "apiref/rustworkx.digraph_complement", "apiref/rustworkx.digraph_core_number", "apiref/rustworkx.digraph_dfs_edges", "apiref/rustworkx.digraph_dfs_search", "apiref/rustworkx.digraph_dijkstra_search", "apiref/rustworkx.digraph_dijkstra_shortest_path_lengths", "apiref/rustworkx.digraph_dijkstra_shortest_paths", "apiref/rustworkx.digraph_distance_matrix", "apiref/rustworkx.digraph_edge_betweenness_centrality", "apiref/rustworkx.digraph_eigenvector_centrality", "apiref/rustworkx.digraph_find_cycle", "apiref/rustworkx.digraph_floyd_warshall", "apiref/rustworkx.digraph_floyd_warshall_numpy", "apiref/rustworkx.digraph_floyd_warshall_successor_and_distance", "apiref/rustworkx.digraph_is_isomorphic", "apiref/rustworkx.digraph_is_subgraph_isomorphic", "apiref/rustworkx.digraph_k_shortest_path_lengths", "apiref/rustworkx.digraph_katz_centrality", "apiref/rustworkx.digraph_longest_simple_path", "apiref/rustworkx.digraph_node_link_json", "apiref/rustworkx.digraph_num_shortest_paths_unweighted", "apiref/rustworkx.digraph_random_layout", "apiref/rustworkx.digraph_shell_layout", "apiref/rustworkx.digraph_spiral_layout", "apiref/rustworkx.digraph_spring_layout", "apiref/rustworkx.digraph_tensor_product", "apiref/rustworkx.digraph_transitivity", "apiref/rustworkx.digraph_union", "apiref/rustworkx.digraph_unweighted_average_shortest_path_length", "apiref/rustworkx.digraph_vf2_mapping", "apiref/rustworkx.dijkstra_search", "apiref/rustworkx.dijkstra_shortest_path_lengths", "apiref/rustworkx.dijkstra_shortest_paths", "apiref/rustworkx.directed_barabasi_albert_graph", "apiref/rustworkx.directed_gnm_random_graph", "apiref/rustworkx.directed_gnp_random_graph", "apiref/rustworkx.directed_random_bipartite_graph", "apiref/rustworkx.distance_matrix", "apiref/rustworkx.edge_betweenness_centrality", "apiref/rustworkx.eigenvector_centrality", "apiref/rustworkx.find_negative_cycle", "apiref/rustworkx.floyd_warshall", "apiref/rustworkx.floyd_warshall_numpy", "apiref/rustworkx.floyd_warshall_successor_and_distance", "apiref/rustworkx.generators.barbell_graph", "apiref/rustworkx.generators.binomial_tree_graph", "apiref/rustworkx.generators.complete_graph", "apiref/rustworkx.generators.cycle_graph", "apiref/rustworkx.generators.directed_binomial_tree_graph", "apiref/rustworkx.generators.directed_complete_graph", "apiref/rustworkx.generators.directed_cycle_graph", "apiref/rustworkx.generators.directed_empty_graph", "apiref/rustworkx.generators.directed_grid_graph", "apiref/rustworkx.generators.directed_heavy_hex_graph", "apiref/rustworkx.generators.directed_heavy_square_graph", "apiref/rustworkx.generators.directed_hexagonal_lattice_graph", "apiref/rustworkx.generators.directed_mesh_graph", "apiref/rustworkx.generators.directed_path_graph", "apiref/rustworkx.generators.directed_star_graph", "apiref/rustworkx.generators.empty_graph", "apiref/rustworkx.generators.full_rary_tree", "apiref/rustworkx.generators.generalized_petersen_graph", "apiref/rustworkx.generators.grid_graph", "apiref/rustworkx.generators.heavy_hex_graph", "apiref/rustworkx.generators.heavy_square_graph", "apiref/rustworkx.generators.hexagonal_lattice_graph", "apiref/rustworkx.generators.lollipop_graph", "apiref/rustworkx.generators.mesh_graph", "apiref/rustworkx.generators.path_graph", "apiref/rustworkx.generators.star_graph", "apiref/rustworkx.graph_adjacency_matrix", "apiref/rustworkx.graph_all_pairs_all_simple_paths", "apiref/rustworkx.graph_all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.graph_all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.graph_all_pairs_dijkstra_path_lengths", "apiref/rustworkx.graph_all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.graph_all_shortest_paths", "apiref/rustworkx.graph_all_simple_paths", "apiref/rustworkx.graph_astar_shortest_path", "apiref/rustworkx.graph_bellman_ford_shortest_path_lengths", "apiref/rustworkx.graph_betweenness_centrality", "apiref/rustworkx.graph_bfs_search", "apiref/rustworkx.graph_bipartite_edge_color", "apiref/rustworkx.graph_bipartite_layout", "apiref/rustworkx.graph_cartesian_product", "apiref/rustworkx.graph_circular_layout", "apiref/rustworkx.graph_closeness_centrality", "apiref/rustworkx.graph_complement", "apiref/rustworkx.graph_core_number", "apiref/rustworkx.graph_dfs_edges", "apiref/rustworkx.graph_dfs_search", "apiref/rustworkx.graph_dijkstra_search", "apiref/rustworkx.graph_dijkstra_shortest_path_lengths", "apiref/rustworkx.graph_dijkstra_shortest_paths", "apiref/rustworkx.graph_distance_matrix", "apiref/rustworkx.graph_edge_betweenness_centrality", "apiref/rustworkx.graph_eigenvector_centrality", "apiref/rustworkx.graph_floyd_warshall", "apiref/rustworkx.graph_floyd_warshall_numpy", "apiref/rustworkx.graph_floyd_warshall_successor_and_distance", "apiref/rustworkx.graph_greedy_color", "apiref/rustworkx.graph_greedy_edge_color", "apiref/rustworkx.graph_is_isomorphic", "apiref/rustworkx.graph_is_subgraph_isomorphic", "apiref/rustworkx.graph_k_shortest_path_lengths", "apiref/rustworkx.graph_katz_centrality", "apiref/rustworkx.graph_line_graph", "apiref/rustworkx.graph_longest_simple_path", "apiref/rustworkx.graph_misra_gries_edge_color", "apiref/rustworkx.graph_node_link_json", "apiref/rustworkx.graph_num_shortest_paths_unweighted", "apiref/rustworkx.graph_random_layout", "apiref/rustworkx.graph_shell_layout", "apiref/rustworkx.graph_spiral_layout", "apiref/rustworkx.graph_spring_layout", "apiref/rustworkx.graph_tensor_product", "apiref/rustworkx.graph_token_swapper", "apiref/rustworkx.graph_transitivity", "apiref/rustworkx.graph_union", "apiref/rustworkx.graph_unweighted_average_shortest_path_length", "apiref/rustworkx.graph_vf2_mapping", "apiref/rustworkx.has_path", "apiref/rustworkx.hits", "apiref/rustworkx.is_bipartite", "apiref/rustworkx.is_connected", "apiref/rustworkx.is_directed_acyclic_graph", "apiref/rustworkx.is_isomorphic", "apiref/rustworkx.is_isomorphic_node_match", "apiref/rustworkx.is_matching", "apiref/rustworkx.is_maximal_matching", "apiref/rustworkx.is_planar", "apiref/rustworkx.is_subgraph_isomorphic", "apiref/rustworkx.is_weakly_connected", "apiref/rustworkx.isolates", "apiref/rustworkx.k_shortest_path_lengths", "apiref/rustworkx.katz_centrality", "apiref/rustworkx.layers", "apiref/rustworkx.lexicographical_topological_sort", "apiref/rustworkx.longest_simple_path", "apiref/rustworkx.max_weight_matching", "apiref/rustworkx.metric_closure", "apiref/rustworkx.minimum_spanning_edges", "apiref/rustworkx.minimum_spanning_tree", "apiref/rustworkx.negative_edge_cycle", "apiref/rustworkx.networkx_converter", "apiref/rustworkx.node_connected_component", "apiref/rustworkx.node_link_json", "apiref/rustworkx.num_shortest_paths_unweighted", "apiref/rustworkx.number_connected_components", "apiref/rustworkx.number_weakly_connected_components", "apiref/rustworkx.pagerank", "apiref/rustworkx.random_geometric_graph", "apiref/rustworkx.random_layout", "apiref/rustworkx.read_graphml", "apiref/rustworkx.shell_layout", "apiref/rustworkx.simple_cycles", "apiref/rustworkx.spiral_layout", "apiref/rustworkx.spring_layout", "apiref/rustworkx.steiner_tree", "apiref/rustworkx.stoer_wagner_min_cut", "apiref/rustworkx.strongly_connected_components", "apiref/rustworkx.topological_generations", "apiref/rustworkx.topological_sort", "apiref/rustworkx.transitive_reduction", "apiref/rustworkx.transitivity", "apiref/rustworkx.two_color", "apiref/rustworkx.undirected_gnm_random_graph", "apiref/rustworkx.undirected_gnp_random_graph", "apiref/rustworkx.undirected_random_bipartite_graph", "apiref/rustworkx.union", "apiref/rustworkx.unweighted_average_shortest_path_length", "apiref/rustworkx.vf2_mapping", "apiref/rustworkx.visit.BFSVisitor", "apiref/rustworkx.visit.BFSVisitor.black_target_edge", "apiref/rustworkx.visit.BFSVisitor.discover_vertex", "apiref/rustworkx.visit.BFSVisitor.finish_vertex", "apiref/rustworkx.visit.BFSVisitor.gray_target_edge", "apiref/rustworkx.visit.BFSVisitor.non_tree_edge", "apiref/rustworkx.visit.BFSVisitor.tree_edge", "apiref/rustworkx.visit.DFSVisitor", "apiref/rustworkx.visit.DFSVisitor.back_edge", "apiref/rustworkx.visit.DFSVisitor.discover_vertex", "apiref/rustworkx.visit.DFSVisitor.finish_vertex", "apiref/rustworkx.visit.DFSVisitor.forward_or_cross_edge", "apiref/rustworkx.visit.DFSVisitor.tree_edge", "apiref/rustworkx.visit.DijkstraVisitor", "apiref/rustworkx.visit.DijkstraVisitor.discover_vertex", "apiref/rustworkx.visit.DijkstraVisitor.edge_not_relaxed", "apiref/rustworkx.visit.DijkstraVisitor.edge_relaxed", "apiref/rustworkx.visit.DijkstraVisitor.examine_edge", "apiref/rustworkx.visit.DijkstraVisitor.finish_vertex", "apiref/rustworkx.visit.PruneSearch", "apiref/rustworkx.visit.StopSearch", "apiref/rustworkx.visualization.graphviz_draw", "apiref/rustworkx.visualization.mpl_draw", "apiref/rustworkx.weakly_connected_components", "benchmarks", "index", "install", "networkx", "release_notes", "tutorial/betweenness_centrality", "tutorial/dags", "tutorial/index", "tutorial/introduction", "visualization"], "filenames": ["CONTRIBUTING.md", "api/algorithm_functions/centrality.rst", "api/algorithm_functions/coloring.rst", "api/algorithm_functions/connectivity_and_cycles.rst", "api/algorithm_functions/dag_algorithms.rst", "api/algorithm_functions/graph_operations.rst", "api/algorithm_functions/index.rst", "api/algorithm_functions/isomorphism.rst", "api/algorithm_functions/link_analysis.rst", "api/algorithm_functions/matching.rst", "api/algorithm_functions/other.rst", "api/algorithm_functions/shortest_paths.rst", "api/algorithm_functions/traversal.rst", "api/algorithm_functions/tree.rst", "api/converters.rst", "api/custom_return_types.rst", "api/exceptions.rst", "api/generators.rst", "api/graph_classes.rst", "api/index.rst", "api/layout_functions.rst", "api/pydigraph_api_functions.rst", "api/pygraph_api_functions.rst", "api/random_graph_generator_functions.rst", "api/serialization.rst", "apiref/rustworkx.AllPairsPathLengthMapping.rst", "apiref/rustworkx.AllPairsPathLengthMapping.items.rst", "apiref/rustworkx.AllPairsPathLengthMapping.keys.rst", "apiref/rustworkx.AllPairsPathLengthMapping.values.rst", "apiref/rustworkx.AllPairsPathMapping.rst", "apiref/rustworkx.AllPairsPathMapping.items.rst", "apiref/rustworkx.AllPairsPathMapping.keys.rst", "apiref/rustworkx.AllPairsPathMapping.values.rst", "apiref/rustworkx.BFSPredecessors.rst", "apiref/rustworkx.BFSSuccessors.rst", "apiref/rustworkx.BiconnectedComponents.rst", "apiref/rustworkx.BiconnectedComponents.items.rst", "apiref/rustworkx.BiconnectedComponents.keys.rst", "apiref/rustworkx.BiconnectedComponents.values.rst", "apiref/rustworkx.CentralityMapping.rst", "apiref/rustworkx.CentralityMapping.items.rst", "apiref/rustworkx.CentralityMapping.keys.rst", "apiref/rustworkx.CentralityMapping.values.rst", "apiref/rustworkx.Chains.rst", "apiref/rustworkx.DAGHasCycle.rst", "apiref/rustworkx.DAGWouldCycle.rst", "apiref/rustworkx.EdgeCentralityMapping.rst", "apiref/rustworkx.EdgeCentralityMapping.items.rst", "apiref/rustworkx.EdgeCentralityMapping.keys.rst", "apiref/rustworkx.EdgeCentralityMapping.values.rst", "apiref/rustworkx.EdgeIndexMap.rst", "apiref/rustworkx.EdgeIndexMap.items.rst", "apiref/rustworkx.EdgeIndexMap.keys.rst", "apiref/rustworkx.EdgeIndexMap.values.rst", "apiref/rustworkx.EdgeIndices.rst", "apiref/rustworkx.EdgeList.rst", "apiref/rustworkx.GraphNotBipartite.rst", "apiref/rustworkx.InvalidMapping.rst", "apiref/rustworkx.InvalidNode.rst", "apiref/rustworkx.JSONSerializationError.rst", "apiref/rustworkx.NegativeCycle.rst", "apiref/rustworkx.NoEdgeBetweenNodes.rst", "apiref/rustworkx.NoPathFound.rst", "apiref/rustworkx.NoSuitableNeighbors.rst", "apiref/rustworkx.NodeIndices.rst", "apiref/rustworkx.NodeMap.rst", "apiref/rustworkx.NodeMap.items.rst", "apiref/rustworkx.NodeMap.keys.rst", "apiref/rustworkx.NodeMap.values.rst", "apiref/rustworkx.NullGraph.rst", "apiref/rustworkx.PathLengthMapping.rst", "apiref/rustworkx.PathLengthMapping.items.rst", "apiref/rustworkx.PathLengthMapping.keys.rst", "apiref/rustworkx.PathLengthMapping.values.rst", "apiref/rustworkx.PathMapping.rst", "apiref/rustworkx.PathMapping.items.rst", "apiref/rustworkx.PathMapping.keys.rst", "apiref/rustworkx.PathMapping.values.rst", "apiref/rustworkx.Pos2DMapping.rst", "apiref/rustworkx.Pos2DMapping.items.rst", "apiref/rustworkx.Pos2DMapping.keys.rst", "apiref/rustworkx.Pos2DMapping.values.rst", "apiref/rustworkx.ProductNodeMap.rst", "apiref/rustworkx.ProductNodeMap.items.rst", "apiref/rustworkx.ProductNodeMap.keys.rst", "apiref/rustworkx.ProductNodeMap.values.rst", "apiref/rustworkx.PyDAG.rst", "apiref/rustworkx.PyDAG.add_child.rst", "apiref/rustworkx.PyDAG.add_edge.rst", "apiref/rustworkx.PyDAG.add_edges_from.rst", "apiref/rustworkx.PyDAG.add_edges_from_no_data.rst", "apiref/rustworkx.PyDAG.add_node.rst", "apiref/rustworkx.PyDAG.add_nodes_from.rst", "apiref/rustworkx.PyDAG.add_parent.rst", "apiref/rustworkx.PyDAG.adj.rst", "apiref/rustworkx.PyDAG.adj_direction.rst", "apiref/rustworkx.PyDAG.clear.rst", "apiref/rustworkx.PyDAG.clear_edges.rst", "apiref/rustworkx.PyDAG.compose.rst", "apiref/rustworkx.PyDAG.contract_nodes.rst", "apiref/rustworkx.PyDAG.copy.rst", "apiref/rustworkx.PyDAG.edge_index_map.rst", "apiref/rustworkx.PyDAG.edge_indices.rst", "apiref/rustworkx.PyDAG.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyDAG.edge_list.rst", "apiref/rustworkx.PyDAG.edge_subgraph.rst", "apiref/rustworkx.PyDAG.edges.rst", "apiref/rustworkx.PyDAG.extend_from_edge_list.rst", "apiref/rustworkx.PyDAG.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyDAG.filter_edges.rst", "apiref/rustworkx.PyDAG.filter_nodes.rst", "apiref/rustworkx.PyDAG.find_adjacent_node_by_edge.rst", "apiref/rustworkx.PyDAG.find_node_by_weight.rst", "apiref/rustworkx.PyDAG.find_predecessor_node_by_edge.rst", "apiref/rustworkx.PyDAG.find_predecessors_by_edge.rst", "apiref/rustworkx.PyDAG.find_successors_by_edge.rst", "apiref/rustworkx.PyDAG.from_adjacency_matrix.rst", "apiref/rustworkx.PyDAG.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyDAG.get_all_edge_data.rst", "apiref/rustworkx.PyDAG.get_edge_data.rst", "apiref/rustworkx.PyDAG.get_edge_data_by_index.rst", "apiref/rustworkx.PyDAG.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyDAG.get_node_data.rst", "apiref/rustworkx.PyDAG.has_edge.rst", "apiref/rustworkx.PyDAG.has_parallel_edges.rst", "apiref/rustworkx.PyDAG.in_degree.rst", "apiref/rustworkx.PyDAG.in_edges.rst", "apiref/rustworkx.PyDAG.incident_edge_index_map.rst", "apiref/rustworkx.PyDAG.incident_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_in_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_in_edges_multiple.rst", "apiref/rustworkx.PyDAG.insert_node_on_out_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_out_edges_multiple.rst", "apiref/rustworkx.PyDAG.is_symmetric.rst", "apiref/rustworkx.PyDAG.make_symmetric.rst", "apiref/rustworkx.PyDAG.merge_nodes.rst", "apiref/rustworkx.PyDAG.neighbors.rst", "apiref/rustworkx.PyDAG.node_indexes.rst", "apiref/rustworkx.PyDAG.node_indices.rst", "apiref/rustworkx.PyDAG.nodes.rst", "apiref/rustworkx.PyDAG.num_edges.rst", "apiref/rustworkx.PyDAG.num_nodes.rst", "apiref/rustworkx.PyDAG.out_degree.rst", "apiref/rustworkx.PyDAG.out_edges.rst", "apiref/rustworkx.PyDAG.predecessor_indices.rst", "apiref/rustworkx.PyDAG.predecessors.rst", "apiref/rustworkx.PyDAG.read_edge_list.rst", "apiref/rustworkx.PyDAG.remove_edge.rst", "apiref/rustworkx.PyDAG.remove_edge_from_index.rst", "apiref/rustworkx.PyDAG.remove_edges_from.rst", "apiref/rustworkx.PyDAG.remove_node.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges.rst", "apiref/rustworkx.PyDAG.remove_nodes_from.rst", "apiref/rustworkx.PyDAG.reverse.rst", "apiref/rustworkx.PyDAG.subgraph.rst", "apiref/rustworkx.PyDAG.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyDAG.successor_indices.rst", "apiref/rustworkx.PyDAG.successors.rst", "apiref/rustworkx.PyDAG.to_dot.rst", "apiref/rustworkx.PyDAG.to_undirected.rst", "apiref/rustworkx.PyDAG.update_edge.rst", "apiref/rustworkx.PyDAG.update_edge_by_index.rst", "apiref/rustworkx.PyDAG.weighted_edge_list.rst", "apiref/rustworkx.PyDAG.write_edge_list.rst", "apiref/rustworkx.PyDiGraph.rst", "apiref/rustworkx.PyDiGraph.add_child.rst", "apiref/rustworkx.PyDiGraph.add_edge.rst", "apiref/rustworkx.PyDiGraph.add_edges_from.rst", "apiref/rustworkx.PyDiGraph.add_edges_from_no_data.rst", "apiref/rustworkx.PyDiGraph.add_node.rst", "apiref/rustworkx.PyDiGraph.add_nodes_from.rst", "apiref/rustworkx.PyDiGraph.add_parent.rst", "apiref/rustworkx.PyDiGraph.adj.rst", "apiref/rustworkx.PyDiGraph.adj_direction.rst", "apiref/rustworkx.PyDiGraph.clear.rst", "apiref/rustworkx.PyDiGraph.clear_edges.rst", "apiref/rustworkx.PyDiGraph.compose.rst", "apiref/rustworkx.PyDiGraph.contract_nodes.rst", "apiref/rustworkx.PyDiGraph.copy.rst", "apiref/rustworkx.PyDiGraph.edge_index_map.rst", "apiref/rustworkx.PyDiGraph.edge_indices.rst", "apiref/rustworkx.PyDiGraph.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyDiGraph.edge_list.rst", "apiref/rustworkx.PyDiGraph.edge_subgraph.rst", "apiref/rustworkx.PyDiGraph.edges.rst", "apiref/rustworkx.PyDiGraph.extend_from_edge_list.rst", "apiref/rustworkx.PyDiGraph.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyDiGraph.filter_edges.rst", "apiref/rustworkx.PyDiGraph.filter_nodes.rst", "apiref/rustworkx.PyDiGraph.find_adjacent_node_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_node_by_weight.rst", "apiref/rustworkx.PyDiGraph.find_predecessor_node_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_predecessors_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_successors_by_edge.rst", "apiref/rustworkx.PyDiGraph.from_adjacency_matrix.rst", "apiref/rustworkx.PyDiGraph.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyDiGraph.get_all_edge_data.rst", "apiref/rustworkx.PyDiGraph.get_edge_data.rst", "apiref/rustworkx.PyDiGraph.get_edge_data_by_index.rst", "apiref/rustworkx.PyDiGraph.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyDiGraph.get_node_data.rst", "apiref/rustworkx.PyDiGraph.has_edge.rst", "apiref/rustworkx.PyDiGraph.has_parallel_edges.rst", "apiref/rustworkx.PyDiGraph.in_degree.rst", "apiref/rustworkx.PyDiGraph.in_edges.rst", "apiref/rustworkx.PyDiGraph.incident_edge_index_map.rst", "apiref/rustworkx.PyDiGraph.incident_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges_multiple.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges_multiple.rst", "apiref/rustworkx.PyDiGraph.is_symmetric.rst", "apiref/rustworkx.PyDiGraph.make_symmetric.rst", "apiref/rustworkx.PyDiGraph.merge_nodes.rst", "apiref/rustworkx.PyDiGraph.neighbors.rst", "apiref/rustworkx.PyDiGraph.node_indexes.rst", "apiref/rustworkx.PyDiGraph.node_indices.rst", "apiref/rustworkx.PyDiGraph.nodes.rst", "apiref/rustworkx.PyDiGraph.num_edges.rst", "apiref/rustworkx.PyDiGraph.num_nodes.rst", "apiref/rustworkx.PyDiGraph.out_degree.rst", "apiref/rustworkx.PyDiGraph.out_edges.rst", "apiref/rustworkx.PyDiGraph.predecessor_indices.rst", "apiref/rustworkx.PyDiGraph.predecessors.rst", "apiref/rustworkx.PyDiGraph.read_edge_list.rst", "apiref/rustworkx.PyDiGraph.remove_edge.rst", "apiref/rustworkx.PyDiGraph.remove_edge_from_index.rst", "apiref/rustworkx.PyDiGraph.remove_edges_from.rst", "apiref/rustworkx.PyDiGraph.remove_node.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges.rst", "apiref/rustworkx.PyDiGraph.remove_nodes_from.rst", "apiref/rustworkx.PyDiGraph.reverse.rst", "apiref/rustworkx.PyDiGraph.subgraph.rst", "apiref/rustworkx.PyDiGraph.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyDiGraph.successor_indices.rst", "apiref/rustworkx.PyDiGraph.successors.rst", "apiref/rustworkx.PyDiGraph.to_dot.rst", "apiref/rustworkx.PyDiGraph.to_undirected.rst", "apiref/rustworkx.PyDiGraph.update_edge.rst", "apiref/rustworkx.PyDiGraph.update_edge_by_index.rst", "apiref/rustworkx.PyDiGraph.weighted_edge_list.rst", "apiref/rustworkx.PyDiGraph.write_edge_list.rst", "apiref/rustworkx.PyGraph.rst", "apiref/rustworkx.PyGraph.add_edge.rst", "apiref/rustworkx.PyGraph.add_edges_from.rst", "apiref/rustworkx.PyGraph.add_edges_from_no_data.rst", "apiref/rustworkx.PyGraph.add_node.rst", "apiref/rustworkx.PyGraph.add_nodes_from.rst", "apiref/rustworkx.PyGraph.adj.rst", "apiref/rustworkx.PyGraph.clear.rst", "apiref/rustworkx.PyGraph.clear_edges.rst", "apiref/rustworkx.PyGraph.compose.rst", "apiref/rustworkx.PyGraph.contract_nodes.rst", "apiref/rustworkx.PyGraph.copy.rst", "apiref/rustworkx.PyGraph.degree.rst", "apiref/rustworkx.PyGraph.edge_index_map.rst", "apiref/rustworkx.PyGraph.edge_indices.rst", "apiref/rustworkx.PyGraph.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyGraph.edge_list.rst", "apiref/rustworkx.PyGraph.edge_subgraph.rst", "apiref/rustworkx.PyGraph.edges.rst", "apiref/rustworkx.PyGraph.extend_from_edge_list.rst", "apiref/rustworkx.PyGraph.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyGraph.filter_edges.rst", "apiref/rustworkx.PyGraph.filter_nodes.rst", "apiref/rustworkx.PyGraph.find_node_by_weight.rst", "apiref/rustworkx.PyGraph.from_adjacency_matrix.rst", "apiref/rustworkx.PyGraph.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyGraph.get_all_edge_data.rst", "apiref/rustworkx.PyGraph.get_edge_data.rst", "apiref/rustworkx.PyGraph.get_edge_data_by_index.rst", "apiref/rustworkx.PyGraph.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyGraph.get_node_data.rst", "apiref/rustworkx.PyGraph.has_edge.rst", "apiref/rustworkx.PyGraph.has_parallel_edges.rst", "apiref/rustworkx.PyGraph.in_edges.rst", "apiref/rustworkx.PyGraph.incident_edge_index_map.rst", "apiref/rustworkx.PyGraph.incident_edges.rst", "apiref/rustworkx.PyGraph.neighbors.rst", "apiref/rustworkx.PyGraph.node_indexes.rst", "apiref/rustworkx.PyGraph.node_indices.rst", "apiref/rustworkx.PyGraph.nodes.rst", "apiref/rustworkx.PyGraph.num_edges.rst", "apiref/rustworkx.PyGraph.num_nodes.rst", "apiref/rustworkx.PyGraph.out_edges.rst", "apiref/rustworkx.PyGraph.read_edge_list.rst", "apiref/rustworkx.PyGraph.remove_edge.rst", "apiref/rustworkx.PyGraph.remove_edge_from_index.rst", "apiref/rustworkx.PyGraph.remove_edges_from.rst", "apiref/rustworkx.PyGraph.remove_node.rst", "apiref/rustworkx.PyGraph.remove_nodes_from.rst", "apiref/rustworkx.PyGraph.subgraph.rst", "apiref/rustworkx.PyGraph.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyGraph.to_directed.rst", "apiref/rustworkx.PyGraph.to_dot.rst", "apiref/rustworkx.PyGraph.update_edge.rst", "apiref/rustworkx.PyGraph.update_edge_by_index.rst", "apiref/rustworkx.PyGraph.weighted_edge_list.rst", "apiref/rustworkx.PyGraph.write_edge_list.rst", "apiref/rustworkx.TopologicalSorter.rst", "apiref/rustworkx.TopologicalSorter.done.rst", "apiref/rustworkx.TopologicalSorter.get_ready.rst", "apiref/rustworkx.TopologicalSorter.is_active.rst", "apiref/rustworkx.WeightedEdgeList.rst", "apiref/rustworkx.adjacency_matrix.rst", "apiref/rustworkx.all_pairs_all_simple_paths.rst", "apiref/rustworkx.all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.all_shortest_paths.rst", "apiref/rustworkx.all_simple_paths.rst", "apiref/rustworkx.ancestors.rst", "apiref/rustworkx.articulation_points.rst", "apiref/rustworkx.astar_shortest_path.rst", "apiref/rustworkx.barabasi_albert_graph.rst", "apiref/rustworkx.bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.bellman_ford_shortest_paths.rst", "apiref/rustworkx.betweenness_centrality.rst", "apiref/rustworkx.bfs_predecessors.rst", "apiref/rustworkx.bfs_search.rst", "apiref/rustworkx.bfs_successors.rst", "apiref/rustworkx.biconnected_components.rst", "apiref/rustworkx.bipartite_layout.rst", "apiref/rustworkx.bridges.rst", "apiref/rustworkx.cartesian_product.rst", "apiref/rustworkx.chain_decomposition.rst", "apiref/rustworkx.circular_layout.rst", "apiref/rustworkx.closeness_centrality.rst", "apiref/rustworkx.collect_bicolor_runs.rst", "apiref/rustworkx.collect_runs.rst", "apiref/rustworkx.complement.rst", "apiref/rustworkx.connected_components.rst", "apiref/rustworkx.core_number.rst", "apiref/rustworkx.cycle_basis.rst", "apiref/rustworkx.dag_longest_path.rst", "apiref/rustworkx.dag_longest_path_length.rst", "apiref/rustworkx.dag_weighted_longest_path.rst", "apiref/rustworkx.dag_weighted_longest_path_length.rst", "apiref/rustworkx.descendants.rst", "apiref/rustworkx.dfs_edges.rst", "apiref/rustworkx.dfs_search.rst", "apiref/rustworkx.digraph_adjacency_matrix.rst", "apiref/rustworkx.digraph_all_pairs_all_simple_paths.rst", "apiref/rustworkx.digraph_all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.digraph_all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.digraph_all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.digraph_all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.digraph_all_shortest_paths.rst", "apiref/rustworkx.digraph_all_simple_paths.rst", "apiref/rustworkx.digraph_astar_shortest_path.rst", "apiref/rustworkx.digraph_bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.digraph_betweenness_centrality.rst", "apiref/rustworkx.digraph_bfs_search.rst", "apiref/rustworkx.digraph_bipartite_layout.rst", "apiref/rustworkx.digraph_cartesian_product.rst", "apiref/rustworkx.digraph_circular_layout.rst", "apiref/rustworkx.digraph_closeness_centrality.rst", "apiref/rustworkx.digraph_complement.rst", "apiref/rustworkx.digraph_core_number.rst", "apiref/rustworkx.digraph_dfs_edges.rst", "apiref/rustworkx.digraph_dfs_search.rst", "apiref/rustworkx.digraph_dijkstra_search.rst", "apiref/rustworkx.digraph_dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.digraph_dijkstra_shortest_paths.rst", "apiref/rustworkx.digraph_distance_matrix.rst", "apiref/rustworkx.digraph_edge_betweenness_centrality.rst", "apiref/rustworkx.digraph_eigenvector_centrality.rst", "apiref/rustworkx.digraph_find_cycle.rst", "apiref/rustworkx.digraph_floyd_warshall.rst", "apiref/rustworkx.digraph_floyd_warshall_numpy.rst", "apiref/rustworkx.digraph_floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.digraph_is_isomorphic.rst", "apiref/rustworkx.digraph_is_subgraph_isomorphic.rst", "apiref/rustworkx.digraph_k_shortest_path_lengths.rst", "apiref/rustworkx.digraph_katz_centrality.rst", "apiref/rustworkx.digraph_longest_simple_path.rst", "apiref/rustworkx.digraph_node_link_json.rst", "apiref/rustworkx.digraph_num_shortest_paths_unweighted.rst", "apiref/rustworkx.digraph_random_layout.rst", "apiref/rustworkx.digraph_shell_layout.rst", "apiref/rustworkx.digraph_spiral_layout.rst", "apiref/rustworkx.digraph_spring_layout.rst", "apiref/rustworkx.digraph_tensor_product.rst", "apiref/rustworkx.digraph_transitivity.rst", "apiref/rustworkx.digraph_union.rst", "apiref/rustworkx.digraph_unweighted_average_shortest_path_length.rst", "apiref/rustworkx.digraph_vf2_mapping.rst", "apiref/rustworkx.dijkstra_search.rst", "apiref/rustworkx.dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.dijkstra_shortest_paths.rst", "apiref/rustworkx.directed_barabasi_albert_graph.rst", "apiref/rustworkx.directed_gnm_random_graph.rst", "apiref/rustworkx.directed_gnp_random_graph.rst", "apiref/rustworkx.directed_random_bipartite_graph.rst", "apiref/rustworkx.distance_matrix.rst", "apiref/rustworkx.edge_betweenness_centrality.rst", "apiref/rustworkx.eigenvector_centrality.rst", "apiref/rustworkx.find_negative_cycle.rst", "apiref/rustworkx.floyd_warshall.rst", "apiref/rustworkx.floyd_warshall_numpy.rst", "apiref/rustworkx.floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.generators.barbell_graph.rst", "apiref/rustworkx.generators.binomial_tree_graph.rst", "apiref/rustworkx.generators.complete_graph.rst", "apiref/rustworkx.generators.cycle_graph.rst", "apiref/rustworkx.generators.directed_binomial_tree_graph.rst", "apiref/rustworkx.generators.directed_complete_graph.rst", "apiref/rustworkx.generators.directed_cycle_graph.rst", "apiref/rustworkx.generators.directed_empty_graph.rst", "apiref/rustworkx.generators.directed_grid_graph.rst", "apiref/rustworkx.generators.directed_heavy_hex_graph.rst", "apiref/rustworkx.generators.directed_heavy_square_graph.rst", "apiref/rustworkx.generators.directed_hexagonal_lattice_graph.rst", "apiref/rustworkx.generators.directed_mesh_graph.rst", "apiref/rustworkx.generators.directed_path_graph.rst", "apiref/rustworkx.generators.directed_star_graph.rst", "apiref/rustworkx.generators.empty_graph.rst", "apiref/rustworkx.generators.full_rary_tree.rst", "apiref/rustworkx.generators.generalized_petersen_graph.rst", "apiref/rustworkx.generators.grid_graph.rst", "apiref/rustworkx.generators.heavy_hex_graph.rst", "apiref/rustworkx.generators.heavy_square_graph.rst", "apiref/rustworkx.generators.hexagonal_lattice_graph.rst", "apiref/rustworkx.generators.lollipop_graph.rst", "apiref/rustworkx.generators.mesh_graph.rst", "apiref/rustworkx.generators.path_graph.rst", "apiref/rustworkx.generators.star_graph.rst", "apiref/rustworkx.graph_adjacency_matrix.rst", "apiref/rustworkx.graph_all_pairs_all_simple_paths.rst", "apiref/rustworkx.graph_all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.graph_all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.graph_all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.graph_all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.graph_all_shortest_paths.rst", "apiref/rustworkx.graph_all_simple_paths.rst", "apiref/rustworkx.graph_astar_shortest_path.rst", "apiref/rustworkx.graph_bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.graph_betweenness_centrality.rst", "apiref/rustworkx.graph_bfs_search.rst", "apiref/rustworkx.graph_bipartite_edge_color.rst", "apiref/rustworkx.graph_bipartite_layout.rst", "apiref/rustworkx.graph_cartesian_product.rst", "apiref/rustworkx.graph_circular_layout.rst", "apiref/rustworkx.graph_closeness_centrality.rst", "apiref/rustworkx.graph_complement.rst", "apiref/rustworkx.graph_core_number.rst", "apiref/rustworkx.graph_dfs_edges.rst", "apiref/rustworkx.graph_dfs_search.rst", "apiref/rustworkx.graph_dijkstra_search.rst", "apiref/rustworkx.graph_dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.graph_dijkstra_shortest_paths.rst", "apiref/rustworkx.graph_distance_matrix.rst", "apiref/rustworkx.graph_edge_betweenness_centrality.rst", "apiref/rustworkx.graph_eigenvector_centrality.rst", "apiref/rustworkx.graph_floyd_warshall.rst", "apiref/rustworkx.graph_floyd_warshall_numpy.rst", "apiref/rustworkx.graph_floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.graph_greedy_color.rst", "apiref/rustworkx.graph_greedy_edge_color.rst", "apiref/rustworkx.graph_is_isomorphic.rst", "apiref/rustworkx.graph_is_subgraph_isomorphic.rst", "apiref/rustworkx.graph_k_shortest_path_lengths.rst", "apiref/rustworkx.graph_katz_centrality.rst", "apiref/rustworkx.graph_line_graph.rst", "apiref/rustworkx.graph_longest_simple_path.rst", "apiref/rustworkx.graph_misra_gries_edge_color.rst", "apiref/rustworkx.graph_node_link_json.rst", "apiref/rustworkx.graph_num_shortest_paths_unweighted.rst", "apiref/rustworkx.graph_random_layout.rst", "apiref/rustworkx.graph_shell_layout.rst", "apiref/rustworkx.graph_spiral_layout.rst", "apiref/rustworkx.graph_spring_layout.rst", "apiref/rustworkx.graph_tensor_product.rst", "apiref/rustworkx.graph_token_swapper.rst", "apiref/rustworkx.graph_transitivity.rst", "apiref/rustworkx.graph_union.rst", "apiref/rustworkx.graph_unweighted_average_shortest_path_length.rst", "apiref/rustworkx.graph_vf2_mapping.rst", "apiref/rustworkx.has_path.rst", "apiref/rustworkx.hits.rst", "apiref/rustworkx.is_bipartite.rst", "apiref/rustworkx.is_connected.rst", "apiref/rustworkx.is_directed_acyclic_graph.rst", "apiref/rustworkx.is_isomorphic.rst", "apiref/rustworkx.is_isomorphic_node_match.rst", "apiref/rustworkx.is_matching.rst", "apiref/rustworkx.is_maximal_matching.rst", "apiref/rustworkx.is_planar.rst", "apiref/rustworkx.is_subgraph_isomorphic.rst", "apiref/rustworkx.is_weakly_connected.rst", "apiref/rustworkx.isolates.rst", "apiref/rustworkx.k_shortest_path_lengths.rst", "apiref/rustworkx.katz_centrality.rst", "apiref/rustworkx.layers.rst", "apiref/rustworkx.lexicographical_topological_sort.rst", "apiref/rustworkx.longest_simple_path.rst", "apiref/rustworkx.max_weight_matching.rst", "apiref/rustworkx.metric_closure.rst", "apiref/rustworkx.minimum_spanning_edges.rst", "apiref/rustworkx.minimum_spanning_tree.rst", "apiref/rustworkx.negative_edge_cycle.rst", "apiref/rustworkx.networkx_converter.rst", "apiref/rustworkx.node_connected_component.rst", "apiref/rustworkx.node_link_json.rst", "apiref/rustworkx.num_shortest_paths_unweighted.rst", "apiref/rustworkx.number_connected_components.rst", "apiref/rustworkx.number_weakly_connected_components.rst", "apiref/rustworkx.pagerank.rst", "apiref/rustworkx.random_geometric_graph.rst", "apiref/rustworkx.random_layout.rst", "apiref/rustworkx.read_graphml.rst", "apiref/rustworkx.shell_layout.rst", "apiref/rustworkx.simple_cycles.rst", "apiref/rustworkx.spiral_layout.rst", "apiref/rustworkx.spring_layout.rst", "apiref/rustworkx.steiner_tree.rst", "apiref/rustworkx.stoer_wagner_min_cut.rst", "apiref/rustworkx.strongly_connected_components.rst", "apiref/rustworkx.topological_generations.rst", "apiref/rustworkx.topological_sort.rst", "apiref/rustworkx.transitive_reduction.rst", "apiref/rustworkx.transitivity.rst", "apiref/rustworkx.two_color.rst", "apiref/rustworkx.undirected_gnm_random_graph.rst", "apiref/rustworkx.undirected_gnp_random_graph.rst", "apiref/rustworkx.undirected_random_bipartite_graph.rst", "apiref/rustworkx.union.rst", "apiref/rustworkx.unweighted_average_shortest_path_length.rst", "apiref/rustworkx.vf2_mapping.rst", "apiref/rustworkx.visit.BFSVisitor.rst", "apiref/rustworkx.visit.BFSVisitor.black_target_edge.rst", "apiref/rustworkx.visit.BFSVisitor.discover_vertex.rst", "apiref/rustworkx.visit.BFSVisitor.finish_vertex.rst", "apiref/rustworkx.visit.BFSVisitor.gray_target_edge.rst", "apiref/rustworkx.visit.BFSVisitor.non_tree_edge.rst", "apiref/rustworkx.visit.BFSVisitor.tree_edge.rst", "apiref/rustworkx.visit.DFSVisitor.rst", "apiref/rustworkx.visit.DFSVisitor.back_edge.rst", "apiref/rustworkx.visit.DFSVisitor.discover_vertex.rst", "apiref/rustworkx.visit.DFSVisitor.finish_vertex.rst", "apiref/rustworkx.visit.DFSVisitor.forward_or_cross_edge.rst", "apiref/rustworkx.visit.DFSVisitor.tree_edge.rst", "apiref/rustworkx.visit.DijkstraVisitor.rst", "apiref/rustworkx.visit.DijkstraVisitor.discover_vertex.rst", "apiref/rustworkx.visit.DijkstraVisitor.edge_not_relaxed.rst", "apiref/rustworkx.visit.DijkstraVisitor.edge_relaxed.rst", "apiref/rustworkx.visit.DijkstraVisitor.examine_edge.rst", "apiref/rustworkx.visit.DijkstraVisitor.finish_vertex.rst", "apiref/rustworkx.visit.PruneSearch.rst", "apiref/rustworkx.visit.StopSearch.rst", "apiref/rustworkx.visualization.graphviz_draw.rst", "apiref/rustworkx.visualization.mpl_draw.rst", "apiref/rustworkx.weakly_connected_components.rst", "benchmarks.rst", "index.rst", "install.rst", "networkx.rst", "release_notes.rst", "tutorial/betweenness_centrality.rst", "tutorial/dags.rst", "tutorial/index.rst", "tutorial/introduction.rst", "visualization.rst"], "titles": ["Contributing", "Centrality", "Coloring", "Connectivity and Cycles", "DAG Algorithms", "Graph Operations", "Algorithm Functions", "Isomorphism", "Link Analysis", "Matching", "Other Algorithm Functions", "Shortest Paths", "Traversal", "Tree", "Converters", "Custom Return Types", "Exceptions", "Generators", "Graph Classes", "Rustworkx API Reference", "Layout Functions", "API functions for PyDigraph", "API functions for PyGraph", "Random Graph Generator Functions", "Serialization", "AllPairsPathLengthMapping", "rustworkx.AllPairsPathLengthMapping.items", "rustworkx.AllPairsPathLengthMapping.keys", "rustworkx.AllPairsPathLengthMapping.values", "AllPairsPathMapping", "rustworkx.AllPairsPathMapping.items", "rustworkx.AllPairsPathMapping.keys", "rustworkx.AllPairsPathMapping.values", "BFSPredecessors", "BFSSuccessors", "BiconnectedComponents", "rustworkx.BiconnectedComponents.items", "rustworkx.BiconnectedComponents.keys", "rustworkx.BiconnectedComponents.values", "CentralityMapping", "rustworkx.CentralityMapping.items", "rustworkx.CentralityMapping.keys", "rustworkx.CentralityMapping.values", "Chains", "rustworkx.DAGHasCycle", "rustworkx.DAGWouldCycle", "EdgeCentralityMapping", "rustworkx.EdgeCentralityMapping.items", "rustworkx.EdgeCentralityMapping.keys", "rustworkx.EdgeCentralityMapping.values", "EdgeIndexMap", "rustworkx.EdgeIndexMap.items", "rustworkx.EdgeIndexMap.keys", "rustworkx.EdgeIndexMap.values", "EdgeIndices", "EdgeList", "rustworkx.GraphNotBipartite", "rustworkx.InvalidMapping", "rustworkx.InvalidNode", "rustworkx.JSONSerializationError", "rustworkx.NegativeCycle", "rustworkx.NoEdgeBetweenNodes", "rustworkx.NoPathFound", "rustworkx.NoSuitableNeighbors", "NodeIndices", "NodeMap", "rustworkx.NodeMap.items", "rustworkx.NodeMap.keys", "rustworkx.NodeMap.values", "rustworkx.NullGraph", "PathLengthMapping", "rustworkx.PathLengthMapping.items", "rustworkx.PathLengthMapping.keys", "rustworkx.PathLengthMapping.values", "PathMapping", "rustworkx.PathMapping.items", "rustworkx.PathMapping.keys", "rustworkx.PathMapping.values", "Pos2DMapping", "rustworkx.Pos2DMapping.items", "rustworkx.Pos2DMapping.keys", "rustworkx.Pos2DMapping.values", "ProductNodeMap", "rustworkx.ProductNodeMap.items", "rustworkx.ProductNodeMap.keys", "rustworkx.ProductNodeMap.values", "PyDAG", "rustworkx.PyDAG.add_child", "rustworkx.PyDAG.add_edge", "rustworkx.PyDAG.add_edges_from", "rustworkx.PyDAG.add_edges_from_no_data", "rustworkx.PyDAG.add_node", "rustworkx.PyDAG.add_nodes_from", "rustworkx.PyDAG.add_parent", "rustworkx.PyDAG.adj", "rustworkx.PyDAG.adj_direction", "rustworkx.PyDAG.clear", "rustworkx.PyDAG.clear_edges", "rustworkx.PyDAG.compose", "rustworkx.PyDAG.contract_nodes", "rustworkx.PyDAG.copy", "rustworkx.PyDAG.edge_index_map", "rustworkx.PyDAG.edge_indices", "rustworkx.PyDAG.edge_indices_from_endpoints", "rustworkx.PyDAG.edge_list", "rustworkx.PyDAG.edge_subgraph", "rustworkx.PyDAG.edges", "rustworkx.PyDAG.extend_from_edge_list", "rustworkx.PyDAG.extend_from_weighted_edge_list", "rustworkx.PyDAG.filter_edges", "rustworkx.PyDAG.filter_nodes", "rustworkx.PyDAG.find_adjacent_node_by_edge", "rustworkx.PyDAG.find_node_by_weight", "rustworkx.PyDAG.find_predecessor_node_by_edge", "rustworkx.PyDAG.find_predecessors_by_edge", "rustworkx.PyDAG.find_successors_by_edge", "rustworkx.PyDAG.from_adjacency_matrix", "rustworkx.PyDAG.from_complex_adjacency_matrix", "rustworkx.PyDAG.get_all_edge_data", "rustworkx.PyDAG.get_edge_data", "rustworkx.PyDAG.get_edge_data_by_index", "rustworkx.PyDAG.get_edge_endpoints_by_index", "rustworkx.PyDAG.get_node_data", "rustworkx.PyDAG.has_edge", "rustworkx.PyDAG.has_parallel_edges", "rustworkx.PyDAG.in_degree", "rustworkx.PyDAG.in_edges", "rustworkx.PyDAG.incident_edge_index_map", "rustworkx.PyDAG.incident_edges", "rustworkx.PyDAG.insert_node_on_in_edges", "rustworkx.PyDAG.insert_node_on_in_edges_multiple", "rustworkx.PyDAG.insert_node_on_out_edges", "rustworkx.PyDAG.insert_node_on_out_edges_multiple", "rustworkx.PyDAG.is_symmetric", "rustworkx.PyDAG.make_symmetric", "rustworkx.PyDAG.merge_nodes", "rustworkx.PyDAG.neighbors", "rustworkx.PyDAG.node_indexes", "rustworkx.PyDAG.node_indices", "rustworkx.PyDAG.nodes", "rustworkx.PyDAG.num_edges", "rustworkx.PyDAG.num_nodes", "rustworkx.PyDAG.out_degree", "rustworkx.PyDAG.out_edges", "rustworkx.PyDAG.predecessor_indices", "rustworkx.PyDAG.predecessors", "rustworkx.PyDAG.read_edge_list", "rustworkx.PyDAG.remove_edge", "rustworkx.PyDAG.remove_edge_from_index", "rustworkx.PyDAG.remove_edges_from", "rustworkx.PyDAG.remove_node", "rustworkx.PyDAG.remove_node_retain_edges", "rustworkx.PyDAG.remove_nodes_from", "rustworkx.PyDAG.reverse", "rustworkx.PyDAG.subgraph", "rustworkx.PyDAG.substitute_node_with_subgraph", "rustworkx.PyDAG.successor_indices", "rustworkx.PyDAG.successors", "rustworkx.PyDAG.to_dot", "rustworkx.PyDAG.to_undirected", "rustworkx.PyDAG.update_edge", "rustworkx.PyDAG.update_edge_by_index", "rustworkx.PyDAG.weighted_edge_list", "rustworkx.PyDAG.write_edge_list", "PyDiGraph", "rustworkx.PyDiGraph.add_child", "rustworkx.PyDiGraph.add_edge", "rustworkx.PyDiGraph.add_edges_from", "rustworkx.PyDiGraph.add_edges_from_no_data", "rustworkx.PyDiGraph.add_node", "rustworkx.PyDiGraph.add_nodes_from", "rustworkx.PyDiGraph.add_parent", "rustworkx.PyDiGraph.adj", "rustworkx.PyDiGraph.adj_direction", "rustworkx.PyDiGraph.clear", "rustworkx.PyDiGraph.clear_edges", "rustworkx.PyDiGraph.compose", "rustworkx.PyDiGraph.contract_nodes", "rustworkx.PyDiGraph.copy", "rustworkx.PyDiGraph.edge_index_map", "rustworkx.PyDiGraph.edge_indices", "rustworkx.PyDiGraph.edge_indices_from_endpoints", "rustworkx.PyDiGraph.edge_list", "rustworkx.PyDiGraph.edge_subgraph", "rustworkx.PyDiGraph.edges", "rustworkx.PyDiGraph.extend_from_edge_list", "rustworkx.PyDiGraph.extend_from_weighted_edge_list", "rustworkx.PyDiGraph.filter_edges", "rustworkx.PyDiGraph.filter_nodes", "rustworkx.PyDiGraph.find_adjacent_node_by_edge", "rustworkx.PyDiGraph.find_node_by_weight", "rustworkx.PyDiGraph.find_predecessor_node_by_edge", "rustworkx.PyDiGraph.find_predecessors_by_edge", "rustworkx.PyDiGraph.find_successors_by_edge", "rustworkx.PyDiGraph.from_adjacency_matrix", "rustworkx.PyDiGraph.from_complex_adjacency_matrix", "rustworkx.PyDiGraph.get_all_edge_data", "rustworkx.PyDiGraph.get_edge_data", "rustworkx.PyDiGraph.get_edge_data_by_index", "rustworkx.PyDiGraph.get_edge_endpoints_by_index", "rustworkx.PyDiGraph.get_node_data", "rustworkx.PyDiGraph.has_edge", "rustworkx.PyDiGraph.has_parallel_edges", "rustworkx.PyDiGraph.in_degree", "rustworkx.PyDiGraph.in_edges", "rustworkx.PyDiGraph.incident_edge_index_map", "rustworkx.PyDiGraph.incident_edges", "rustworkx.PyDiGraph.insert_node_on_in_edges", "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple", "rustworkx.PyDiGraph.insert_node_on_out_edges", "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple", "rustworkx.PyDiGraph.is_symmetric", "rustworkx.PyDiGraph.make_symmetric", "rustworkx.PyDiGraph.merge_nodes", "rustworkx.PyDiGraph.neighbors", "rustworkx.PyDiGraph.node_indexes", "rustworkx.PyDiGraph.node_indices", "rustworkx.PyDiGraph.nodes", "rustworkx.PyDiGraph.num_edges", "rustworkx.PyDiGraph.num_nodes", "rustworkx.PyDiGraph.out_degree", "rustworkx.PyDiGraph.out_edges", "rustworkx.PyDiGraph.predecessor_indices", "rustworkx.PyDiGraph.predecessors", "rustworkx.PyDiGraph.read_edge_list", "rustworkx.PyDiGraph.remove_edge", "rustworkx.PyDiGraph.remove_edge_from_index", "rustworkx.PyDiGraph.remove_edges_from", "rustworkx.PyDiGraph.remove_node", "rustworkx.PyDiGraph.remove_node_retain_edges", "rustworkx.PyDiGraph.remove_nodes_from", "rustworkx.PyDiGraph.reverse", "rustworkx.PyDiGraph.subgraph", "rustworkx.PyDiGraph.substitute_node_with_subgraph", "rustworkx.PyDiGraph.successor_indices", "rustworkx.PyDiGraph.successors", "rustworkx.PyDiGraph.to_dot", "rustworkx.PyDiGraph.to_undirected", "rustworkx.PyDiGraph.update_edge", "rustworkx.PyDiGraph.update_edge_by_index", "rustworkx.PyDiGraph.weighted_edge_list", "rustworkx.PyDiGraph.write_edge_list", "PyGraph", "rustworkx.PyGraph.add_edge", "rustworkx.PyGraph.add_edges_from", "rustworkx.PyGraph.add_edges_from_no_data", "rustworkx.PyGraph.add_node", "rustworkx.PyGraph.add_nodes_from", "rustworkx.PyGraph.adj", "rustworkx.PyGraph.clear", "rustworkx.PyGraph.clear_edges", "rustworkx.PyGraph.compose", "rustworkx.PyGraph.contract_nodes", "rustworkx.PyGraph.copy", "rustworkx.PyGraph.degree", "rustworkx.PyGraph.edge_index_map", "rustworkx.PyGraph.edge_indices", "rustworkx.PyGraph.edge_indices_from_endpoints", "rustworkx.PyGraph.edge_list", "rustworkx.PyGraph.edge_subgraph", "rustworkx.PyGraph.edges", "rustworkx.PyGraph.extend_from_edge_list", "rustworkx.PyGraph.extend_from_weighted_edge_list", "rustworkx.PyGraph.filter_edges", "rustworkx.PyGraph.filter_nodes", "rustworkx.PyGraph.find_node_by_weight", "rustworkx.PyGraph.from_adjacency_matrix", "rustworkx.PyGraph.from_complex_adjacency_matrix", "rustworkx.PyGraph.get_all_edge_data", "rustworkx.PyGraph.get_edge_data", "rustworkx.PyGraph.get_edge_data_by_index", "rustworkx.PyGraph.get_edge_endpoints_by_index", "rustworkx.PyGraph.get_node_data", "rustworkx.PyGraph.has_edge", "rustworkx.PyGraph.has_parallel_edges", "rustworkx.PyGraph.in_edges", "rustworkx.PyGraph.incident_edge_index_map", "rustworkx.PyGraph.incident_edges", "rustworkx.PyGraph.neighbors", "rustworkx.PyGraph.node_indexes", "rustworkx.PyGraph.node_indices", "rustworkx.PyGraph.nodes", "rustworkx.PyGraph.num_edges", "rustworkx.PyGraph.num_nodes", "rustworkx.PyGraph.out_edges", "rustworkx.PyGraph.read_edge_list", "rustworkx.PyGraph.remove_edge", "rustworkx.PyGraph.remove_edge_from_index", "rustworkx.PyGraph.remove_edges_from", "rustworkx.PyGraph.remove_node", "rustworkx.PyGraph.remove_nodes_from", "rustworkx.PyGraph.subgraph", "rustworkx.PyGraph.substitute_node_with_subgraph", "rustworkx.PyGraph.to_directed", "rustworkx.PyGraph.to_dot", "rustworkx.PyGraph.update_edge", "rustworkx.PyGraph.update_edge_by_index", "rustworkx.PyGraph.weighted_edge_list", "rustworkx.PyGraph.write_edge_list", "TopologicalSorter", "rustworkx.TopologicalSorter.done", "rustworkx.TopologicalSorter.get_ready", "rustworkx.TopologicalSorter.is_active", "WeightedEdgeList", "rustworkx.adjacency_matrix", "rustworkx.all_pairs_all_simple_paths", "rustworkx.all_pairs_bellman_ford_path_lengths", "rustworkx.all_pairs_bellman_ford_shortest_paths", "rustworkx.all_pairs_dijkstra_path_lengths", "rustworkx.all_pairs_dijkstra_shortest_paths", "rustworkx.all_shortest_paths", "rustworkx.all_simple_paths", "rustworkx.ancestors", "rustworkx.articulation_points", "rustworkx.astar_shortest_path", "rustworkx.barabasi_albert_graph", "rustworkx.bellman_ford_shortest_path_lengths", "rustworkx.bellman_ford_shortest_paths", "rustworkx.betweenness_centrality", "rustworkx.bfs_predecessors", "rustworkx.bfs_search", "rustworkx.bfs_successors", "rustworkx.biconnected_components", "rustworkx.bipartite_layout", "rustworkx.bridges", "rustworkx.cartesian_product", "rustworkx.chain_decomposition", "rustworkx.circular_layout", "rustworkx.closeness_centrality", "rustworkx.collect_bicolor_runs", "rustworkx.collect_runs", "rustworkx.complement", "rustworkx.connected_components", "rustworkx.core_number", "rustworkx.cycle_basis", "rustworkx.dag_longest_path", "rustworkx.dag_longest_path_length", "rustworkx.dag_weighted_longest_path", "rustworkx.dag_weighted_longest_path_length", "rustworkx.descendants", "rustworkx.dfs_edges", "rustworkx.dfs_search", "rustworkx.digraph_adjacency_matrix", "rustworkx.digraph_all_pairs_all_simple_paths", "rustworkx.digraph_all_pairs_bellman_ford_path_lengths", "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths", "rustworkx.digraph_all_pairs_dijkstra_path_lengths", "rustworkx.digraph_all_pairs_dijkstra_shortest_paths", "rustworkx.digraph_all_shortest_paths", "rustworkx.digraph_all_simple_paths", "rustworkx.digraph_astar_shortest_path", "rustworkx.digraph_bellman_ford_shortest_path_lengths", "rustworkx.digraph_betweenness_centrality", "rustworkx.digraph_bfs_search", "rustworkx.digraph_bipartite_layout", "rustworkx.digraph_cartesian_product", "rustworkx.digraph_circular_layout", "rustworkx.digraph_closeness_centrality", "rustworkx.digraph_complement", "rustworkx.digraph_core_number", "rustworkx.digraph_dfs_edges", "rustworkx.digraph_dfs_search", "rustworkx.digraph_dijkstra_search", "rustworkx.digraph_dijkstra_shortest_path_lengths", "rustworkx.digraph_dijkstra_shortest_paths", "rustworkx.digraph_distance_matrix", "rustworkx.digraph_edge_betweenness_centrality", "rustworkx.digraph_eigenvector_centrality", "rustworkx.digraph_find_cycle", "rustworkx.digraph_floyd_warshall", "rustworkx.digraph_floyd_warshall_numpy", "rustworkx.digraph_floyd_warshall_successor_and_distance", "rustworkx.digraph_is_isomorphic", "rustworkx.digraph_is_subgraph_isomorphic", "rustworkx.digraph_k_shortest_path_lengths", "rustworkx.digraph_katz_centrality", "rustworkx.digraph_longest_simple_path", "rustworkx.digraph_node_link_json", "rustworkx.digraph_num_shortest_paths_unweighted", "rustworkx.digraph_random_layout", "rustworkx.digraph_shell_layout", "rustworkx.digraph_spiral_layout", "rustworkx.digraph_spring_layout", "rustworkx.digraph_tensor_product", "rustworkx.digraph_transitivity", "rustworkx.digraph_union", "rustworkx.digraph_unweighted_average_shortest_path_length", "rustworkx.digraph_vf2_mapping", "rustworkx.dijkstra_search", "rustworkx.dijkstra_shortest_path_lengths", "rustworkx.dijkstra_shortest_paths", "rustworkx.directed_barabasi_albert_graph", "rustworkx.directed_gnm_random_graph", "rustworkx.directed_gnp_random_graph", "rustworkx.directed_random_bipartite_graph", "rustworkx.distance_matrix", "rustworkx.edge_betweenness_centrality", "rustworkx.eigenvector_centrality", "rustworkx.find_negative_cycle", "rustworkx.floyd_warshall", "rustworkx.floyd_warshall_numpy", "rustworkx.floyd_warshall_successor_and_distance", "rustworkx.generators.barbell_graph", "rustworkx.generators.binomial_tree_graph", "rustworkx.generators.complete_graph", "rustworkx.generators.cycle_graph", "rustworkx.generators.directed_binomial_tree_graph", "rustworkx.generators.directed_complete_graph", "rustworkx.generators.directed_cycle_graph", "rustworkx.generators.directed_empty_graph", "rustworkx.generators.directed_grid_graph", "rustworkx.generators.directed_heavy_hex_graph", "rustworkx.generators.directed_heavy_square_graph", "rustworkx.generators.directed_hexagonal_lattice_graph", "rustworkx.generators.directed_mesh_graph", "rustworkx.generators.directed_path_graph", "rustworkx.generators.directed_star_graph", "rustworkx.generators.empty_graph", "rustworkx.generators.full_rary_tree", "rustworkx.generators.generalized_petersen_graph", "rustworkx.generators.grid_graph", "rustworkx.generators.heavy_hex_graph", "rustworkx.generators.heavy_square_graph", "rustworkx.generators.hexagonal_lattice_graph", "rustworkx.generators.lollipop_graph", "rustworkx.generators.mesh_graph", "rustworkx.generators.path_graph", "rustworkx.generators.star_graph", "rustworkx.graph_adjacency_matrix", "rustworkx.graph_all_pairs_all_simple_paths", "rustworkx.graph_all_pairs_bellman_ford_path_lengths", "rustworkx.graph_all_pairs_bellman_ford_shortest_paths", "rustworkx.graph_all_pairs_dijkstra_path_lengths", "rustworkx.graph_all_pairs_dijkstra_shortest_paths", "rustworkx.graph_all_shortest_paths", "rustworkx.graph_all_simple_paths", "rustworkx.graph_astar_shortest_path", "rustworkx.graph_bellman_ford_shortest_path_lengths", "rustworkx.graph_betweenness_centrality", "rustworkx.graph_bfs_search", "rustworkx.graph_bipartite_edge_color", "rustworkx.graph_bipartite_layout", "rustworkx.graph_cartesian_product", "rustworkx.graph_circular_layout", "rustworkx.graph_closeness_centrality", "rustworkx.graph_complement", "rustworkx.graph_core_number", "rustworkx.graph_dfs_edges", "rustworkx.graph_dfs_search", "rustworkx.graph_dijkstra_search", "rustworkx.graph_dijkstra_shortest_path_lengths", "rustworkx.graph_dijkstra_shortest_paths", "rustworkx.graph_distance_matrix", "rustworkx.graph_edge_betweenness_centrality", "rustworkx.graph_eigenvector_centrality", "rustworkx.graph_floyd_warshall", "rustworkx.graph_floyd_warshall_numpy", "rustworkx.graph_floyd_warshall_successor_and_distance", "rustworkx.graph_greedy_color", "rustworkx.graph_greedy_edge_color", "rustworkx.graph_is_isomorphic", "rustworkx.graph_is_subgraph_isomorphic", "rustworkx.graph_k_shortest_path_lengths", "rustworkx.graph_katz_centrality", "rustworkx.graph_line_graph", "rustworkx.graph_longest_simple_path", "rustworkx.graph_misra_gries_edge_color", "rustworkx.graph_node_link_json", "rustworkx.graph_num_shortest_paths_unweighted", "rustworkx.graph_random_layout", "rustworkx.graph_shell_layout", "rustworkx.graph_spiral_layout", "rustworkx.graph_spring_layout", "rustworkx.graph_tensor_product", "rustworkx.graph_token_swapper", "rustworkx.graph_transitivity", "rustworkx.graph_union", "rustworkx.graph_unweighted_average_shortest_path_length", "rustworkx.graph_vf2_mapping", "rustworkx.has_path", "rustworkx.hits", "rustworkx.is_bipartite", "rustworkx.is_connected", "rustworkx.is_directed_acyclic_graph", "rustworkx.is_isomorphic", "rustworkx.is_isomorphic_node_match", "rustworkx.is_matching", "rustworkx.is_maximal_matching", "rustworkx.is_planar", "rustworkx.is_subgraph_isomorphic", "rustworkx.is_weakly_connected", "rustworkx.isolates", "rustworkx.k_shortest_path_lengths", "rustworkx.katz_centrality", "rustworkx.layers", "rustworkx.lexicographical_topological_sort", "rustworkx.longest_simple_path", "rustworkx.max_weight_matching", "rustworkx.metric_closure", "rustworkx.minimum_spanning_edges", "rustworkx.minimum_spanning_tree", "rustworkx.negative_edge_cycle", "rustworkx.networkx_converter", "rustworkx.node_connected_component", "rustworkx.node_link_json", "rustworkx.num_shortest_paths_unweighted", "rustworkx.number_connected_components", "rustworkx.number_weakly_connected_components", "rustworkx.pagerank", "rustworkx.random_geometric_graph", "rustworkx.random_layout", "rustworkx.read_graphml", "rustworkx.shell_layout", "rustworkx.simple_cycles", "rustworkx.spiral_layout", "rustworkx.spring_layout", "rustworkx.steiner_tree", "rustworkx.stoer_wagner_min_cut", "rustworkx.strongly_connected_components", "rustworkx.topological_generations", "rustworkx.topological_sort", "rustworkx.transitive_reduction", "rustworkx.transitivity", "rustworkx.two_color", "rustworkx.undirected_gnm_random_graph", "rustworkx.undirected_gnp_random_graph", "rustworkx.undirected_random_bipartite_graph", "rustworkx.union", "rustworkx.unweighted_average_shortest_path_length", "rustworkx.vf2_mapping", "BFSVisitor", "rustworkx.visit.BFSVisitor.black_target_edge", "rustworkx.visit.BFSVisitor.discover_vertex", "rustworkx.visit.BFSVisitor.finish_vertex", "rustworkx.visit.BFSVisitor.gray_target_edge", "rustworkx.visit.BFSVisitor.non_tree_edge", "rustworkx.visit.BFSVisitor.tree_edge", "DFSVisitor", "rustworkx.visit.DFSVisitor.back_edge", "rustworkx.visit.DFSVisitor.discover_vertex", "rustworkx.visit.DFSVisitor.finish_vertex", "rustworkx.visit.DFSVisitor.forward_or_cross_edge", "rustworkx.visit.DFSVisitor.tree_edge", "DijkstraVisitor", "rustworkx.visit.DijkstraVisitor.discover_vertex", "rustworkx.visit.DijkstraVisitor.edge_not_relaxed", "rustworkx.visit.DijkstraVisitor.edge_relaxed", "rustworkx.visit.DijkstraVisitor.examine_edge", "rustworkx.visit.DijkstraVisitor.finish_vertex", "rustworkx.visit.PruneSearch", "rustworkx.visit.StopSearch", "rustworkx.visualization.graphviz_draw", "rustworkx.visualization.mpl_draw", "rustworkx.weakly_connected_components", "Rustworkx Comparison Benchmarks With Other Libraries", "rustworkx Documentation", "Getting Started", "rustworkx for NetworkX users", "Release Notes", "Working with Betweenness Centrality", "Directed Acyclic Graphs", "rustworkx Tutorials and Guides", "Introduction to rustworkx", "Visualization"], "terms": {"first": [0, 98, 112, 118, 119, 146, 160, 176, 190, 196, 197, 224, 238, 251, 265, 268, 269, 273, 284, 285, 295, 319, 320, 321, 325, 326, 340, 341, 353, 355, 360, 361, 368, 371, 372, 373, 383, 385, 387, 401, 405, 408, 415, 416, 426, 427, 439, 442, 447, 448, 457, 458, 460, 461, 473, 476, 478, 480, 484, 485, 489, 494, 527, 529, 532, 539, 544, 554, 558, 559, 560, 562], "read": [0, 25, 29, 33, 34, 35, 39, 43, 46, 50, 54, 55, 64, 70, 74, 82, 101, 146, 163, 179, 224, 241, 255, 285, 298, 303, 306, 307, 308, 309, 316, 317, 325, 344, 345, 346, 347, 351, 352, 355, 366, 367, 369, 375, 383, 396, 397, 399, 430, 431, 432, 433, 437, 438, 442, 453, 454, 455, 463, 473, 480, 493, 508, 511, 557, 558, 562], "overal": 0, "qiskit": [0, 555, 557, 558], "project": [0, 508, 557, 558], "guidelin": 0, "These": [0, 21, 22, 86, 164, 242, 556, 557, 558, 562], "ar": [0, 21, 22, 33, 34, 55, 74, 86, 89, 90, 94, 95, 98, 99, 104, 107, 108, 116, 117, 129, 130, 131, 132, 134, 146, 147, 149, 154, 160, 162, 164, 167, 168, 172, 173, 176, 177, 182, 185, 186, 194, 195, 207, 208, 209, 210, 212, 224, 225, 227, 232, 238, 240, 242, 244, 245, 248, 251, 252, 258, 261, 262, 266, 267, 269, 285, 286, 288, 291, 293, 295, 297, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 317, 320, 322, 324, 325, 326, 328, 331, 333, 334, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 355, 357, 358, 359, 360, 361, 362, 364, 366, 367, 369, 370, 371, 372, 373, 375, 376, 382, 383, 384, 385, 387, 388, 390, 391, 392, 396, 397, 399, 400, 401, 402, 404, 405, 407, 408, 410, 413, 414, 415, 416, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 442, 444, 445, 446, 447, 448, 449, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 472, 473, 474, 475, 476, 478, 480, 483, 484, 485, 489, 491, 493, 494, 495, 496, 497, 499, 500, 508, 509, 511, 515, 519, 522, 524, 527, 529, 538, 551, 552, 554, 555, 556, 557, 558, 559, 560, 562], "all": [0, 25, 29, 94, 95, 96, 97, 100, 102, 103, 105, 106, 114, 115, 118, 126, 129, 130, 131, 132, 134, 135, 137, 138, 139, 143, 145, 151, 153, 157, 159, 160, 172, 173, 174, 175, 178, 180, 181, 183, 184, 192, 193, 196, 204, 207, 208, 209, 210, 212, 213, 215, 216, 217, 221, 223, 229, 231, 235, 237, 238, 248, 249, 250, 253, 256, 257, 259, 260, 268, 269, 275, 279, 280, 281, 284, 293, 295, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 318, 320, 322, 326, 328, 329, 330, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 357, 360, 361, 362, 366, 367, 369, 370, 371, 375, 376, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 397, 399, 400, 401, 410, 420, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 444, 447, 448, 449, 453, 454, 455, 456, 457, 463, 465, 476, 477, 478, 493, 496, 497, 499, 500, 513, 516, 517, 521, 524, 525, 526, 527, 528, 529, 533, 540, 548, 551, 552, 555, 556, 558, 560, 562], "includ": [0, 114, 115, 154, 155, 192, 193, 232, 233, 291, 292, 305, 311, 318, 343, 349, 352, 377, 386, 429, 435, 438, 467, 477, 504, 528, 555, 556, 557, 558, 560, 562], "http": [0, 326, 367, 375, 393, 397, 411, 412, 419, 421, 422, 440, 454, 463, 466, 474, 480, 488, 493, 508, 511, 513, 516, 525, 555, 557, 558], "org": [0, 326, 367, 397, 411, 412, 419, 421, 422, 454, 474, 511, 513, 516, 558], "contributing_to_qiskit": 0, "html": [0, 513], "while": [0, 116, 117, 194, 195, 266, 267, 299, 312, 320, 339, 340, 341, 353, 360, 361, 362, 371, 372, 373, 382, 386, 387, 388, 401, 439, 447, 448, 449, 457, 460, 461, 472, 478, 484, 489, 511, 515, 519, 520, 528, 529, 549, 551, 555, 557, 558, 560], "": [0, 86, 99, 109, 110, 155, 160, 161, 163, 164, 177, 187, 188, 233, 238, 239, 241, 242, 252, 263, 264, 292, 295, 296, 298, 299, 306, 307, 308, 309, 310, 314, 316, 317, 318, 319, 320, 321, 325, 328, 333, 335, 336, 337, 338, 340, 341, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 357, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 373, 375, 382, 385, 386, 388, 389, 390, 396, 397, 398, 399, 400, 401, 403, 406, 411, 412, 421, 422, 430, 431, 432, 433, 434, 436, 437, 438, 439, 442, 444, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 461, 463, 466, 472, 474, 476, 477, 480, 481, 489, 493, 495, 498, 499, 500, 501, 508, 513, 515, 516, 517, 518, 522, 527, 528, 544, 551, 552, 555, 556, 557, 558, 559, 562], "directli": [0, 557, 558, 562], "applic": [0, 328, 419, 511, 555, 556], "sinc": [0, 112, 190, 265, 373, 461, 489, 538, 555, 557, 558, 560, 562], "most": [0, 466, 509, 557, 558, 562], "about": [0, 554, 555, 556], "itself": [0, 419, 557], "an": [0, 33, 34, 43, 50, 54, 55, 64, 70, 74, 86, 87, 88, 89, 90, 93, 94, 95, 98, 99, 101, 104, 105, 107, 109, 110, 111, 113, 116, 117, 119, 122, 123, 127, 128, 134, 146, 147, 148, 151, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 176, 177, 179, 182, 183, 185, 187, 188, 189, 191, 194, 195, 197, 200, 201, 205, 206, 212, 224, 225, 226, 229, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 251, 252, 255, 258, 259, 261, 262, 263, 264, 266, 267, 272, 273, 276, 277, 285, 286, 287, 291, 292, 294, 295, 296, 297, 298, 299, 303, 304, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 320, 322, 323, 324, 326, 327, 328, 332, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 353, 354, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 372, 373, 374, 375, 377, 379, 380, 381, 382, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 402, 403, 404, 405, 406, 411, 412, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 436, 437, 439, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 458, 460, 461, 462, 463, 464, 467, 469, 470, 471, 472, 474, 475, 478, 480, 482, 484, 488, 489, 490, 491, 492, 493, 497, 498, 501, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 521, 523, 524, 525, 526, 529, 538, 541, 551, 552, 554, 555, 556, 557, 558, 560, 562], "independ": [0, 393, 394, 502, 525, 526, 555], "librari": [0, 508, 551, 555, 556, 557, 558, 562], "develop": [0, 556], "tandem": 0, "advic": 0, "still": [0, 302, 392, 497, 524, 555, 556, 557, 558], "appli": [0, 474, 558, 562], "here": [0, 334, 516, 555, 557, 559, 560, 562], "In": [0, 105, 183, 259, 304, 320, 328, 329, 341, 342, 353, 357, 361, 367, 375, 376, 393, 397, 428, 439, 444, 448, 454, 463, 465, 480, 493, 496, 508, 525, 541, 555, 557, 558, 560, 562], "addit": [0, 86, 164, 242, 329, 555, 556, 557, 558, 562], "specif": [0, 21, 22, 111, 112, 113, 116, 117, 160, 189, 190, 191, 194, 195, 238, 265, 266, 267, 295, 511, 552, 556, 557, 558, 560], "detail": [0, 367, 375, 397, 419, 454, 463, 480, 493, 508, 551, 552, 555, 556, 557, 558, 562], "below": [0, 320, 340, 341, 353, 360, 361, 362, 382, 388, 402, 424, 439, 447, 448, 449, 472, 515, 557], "implement": [0, 25, 29, 33, 34, 35, 39, 43, 46, 54, 55, 64, 70, 74, 82, 86, 164, 242, 303, 319, 321, 367, 375, 393, 397, 412, 422, 440, 454, 463, 474, 493, 508, 511, 513, 516, 518, 525, 554, 555, 557, 558, 562], "primarili": [0, 557, 558], "thin": 0, "layer": [0, 6, 558], "becaus": [0, 158, 236, 294, 495, 557, 558, 559, 562], "your": [0, 403, 406, 556, 557, 558, 562], "involv": [0, 562], "modif": [0, 299], "src": 0, "To": [0, 269, 371, 401, 457, 556, 558, 559, 560, 562], "understand": 0, "which": [0, 86, 99, 109, 110, 111, 113, 114, 115, 134, 137, 155, 164, 177, 187, 188, 189, 191, 192, 193, 212, 215, 233, 242, 252, 263, 264, 279, 292, 304, 306, 307, 308, 309, 310, 314, 317, 320, 326, 334, 341, 342, 344, 345, 346, 347, 348, 350, 353, 361, 362, 364, 368, 369, 370, 371, 376, 380, 382, 388, 390, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 436, 439, 448, 449, 451, 455, 456, 457, 458, 465, 470, 472, 474, 486, 487, 495, 496, 497, 498, 499, 500, 509, 512, 515, 516, 517, 519, 555, 556, 557, 558, 559, 560, 562], "you": [0, 25, 29, 33, 34, 35, 39, 43, 46, 54, 55, 64, 65, 70, 74, 82, 86, 127, 128, 154, 158, 159, 160, 164, 205, 206, 232, 236, 237, 238, 242, 276, 277, 291, 294, 295, 303, 305, 306, 307, 308, 309, 320, 341, 343, 344, 345, 346, 347, 353, 361, 362, 369, 370, 371, 376, 384, 388, 399, 400, 401, 429, 439, 448, 449, 455, 456, 457, 458, 465, 474, 475, 496, 497, 498, 502, 516, 522, 551, 552, 555, 556, 557, 558, 559, 560, 562], "need": [0, 160, 238, 295, 410, 420, 551, 555, 556, 557, 558, 559, 560, 562], "we": [0, 299, 320, 341, 353, 361, 373, 439, 448, 461, 489, 539, 540, 544, 554, 557, 558, 559, 560, 562], "invit": 0, "overview": 0, "our": [0, 558, 560, 562], "simplifi": [0, 560], "sourc": [0, 86, 99, 104, 105, 107, 108, 111, 113, 123, 127, 135, 155, 160, 162, 177, 182, 183, 185, 186, 189, 191, 201, 205, 213, 233, 238, 240, 258, 259, 261, 262, 276, 292, 295, 297, 304, 305, 306, 307, 308, 309, 310, 311, 314, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 328, 331, 333, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 351, 353, 360, 361, 362, 363, 364, 368, 369, 371, 378, 388, 389, 390, 395, 396, 397, 399, 400, 401, 429, 430, 431, 432, 433, 434, 437, 439, 447, 448, 449, 450, 451, 455, 457, 468, 479, 480, 481, 484, 485, 489, 491, 492, 493, 496, 502, 504, 505, 510, 512, 514, 515, 516, 522, 523, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 558, 560], "tree": [0, 6, 19, 320, 326, 340, 341, 353, 360, 361, 362, 388, 403, 406, 418, 439, 447, 448, 449, 499, 500, 516, 531, 534, 536, 538, 540, 542, 549, 558], "tini": [0, 558], "larg": [0, 372, 373, 393, 460, 461, 484, 485, 525, 554, 557, 558, 560], "mod": 0, "pure_rust_cod": 0, "more_pure_rust_cod": 0, "add": [0, 86, 87, 88, 89, 90, 91, 92, 93, 98, 107, 108, 129, 130, 131, 132, 151, 164, 165, 166, 167, 168, 169, 170, 171, 176, 185, 186, 207, 208, 209, 210, 229, 242, 243, 244, 245, 246, 247, 251, 261, 262, 385, 408, 415, 416, 476, 497, 502, 511, 527, 556, 557, 558, 560, 562], "them": [0, 159, 237, 299, 372, 373, 460, 461, 484, 485, 489, 558, 562], "import": [0, 25, 29, 33, 34, 43, 54, 55, 64, 70, 74, 86, 98, 109, 110, 146, 153, 158, 163, 164, 176, 187, 188, 224, 231, 236, 241, 242, 251, 263, 264, 285, 294, 298, 299, 303, 320, 341, 353, 355, 361, 376, 383, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 439, 442, 448, 458, 459, 464, 465, 466, 473, 496, 551, 552, 556, 557, 558, 559, 560], "defin": [0, 306, 307, 316, 317, 328, 334, 344, 345, 351, 357, 384, 410, 420, 430, 431, 437, 444, 475, 517, 558, 559, 560], "see": [0, 326, 419, 511, 552, 554, 555, 558, 562], "next": [0, 33, 34, 43, 54, 55, 64, 70, 74, 303, 314, 340, 350, 360, 371, 387, 401, 436, 447, 457, 474, 478, 529, 558], "section": [0, 561, 562], "us": [0, 33, 34, 43, 50, 54, 55, 64, 70, 74, 78, 86, 88, 90, 94, 95, 98, 99, 111, 113, 114, 115, 116, 117, 126, 134, 143, 146, 151, 154, 155, 158, 159, 160, 163, 164, 166, 168, 172, 173, 176, 177, 189, 191, 192, 193, 194, 195, 204, 212, 221, 224, 229, 232, 233, 236, 237, 238, 241, 242, 244, 245, 251, 252, 262, 266, 267, 269, 275, 284, 285, 291, 292, 294, 295, 298, 299, 303, 304, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 328, 329, 330, 331, 335, 336, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 375, 376, 377, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 407, 408, 414, 415, 416, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 436, 437, 438, 439, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 466, 467, 472, 474, 475, 477, 478, 479, 480, 484, 485, 488, 489, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 508, 509, 511, 515, 516, 517, 518, 522, 524, 525, 526, 528, 529, 530, 537, 543, 551, 552, 554, 555, 557, 558, 559, 560, 561], "m": [0, 315, 326, 391, 392, 393, 394, 418, 440, 524, 525, 526, 554, 558, 560], "add_wrap": 0, "wrap_pyfunct": 0, "your_new_funct": 0, "modifi": [0, 99, 153, 164, 177, 231, 242, 315, 391, 558], "contain": [0, 25, 29, 33, 34, 39, 43, 46, 54, 55, 64, 70, 74, 86, 105, 164, 183, 242, 259, 303, 319, 321, 326, 333, 340, 359, 360, 375, 410, 420, 446, 447, 463, 464, 480, 493, 502, 503, 517, 521, 557, 558, 560, 561, 562], "pyfunct": 0, "can": [0, 25, 29, 33, 34, 35, 39, 43, 46, 54, 55, 64, 70, 74, 82, 86, 88, 116, 117, 126, 127, 128, 143, 159, 164, 166, 194, 195, 204, 205, 206, 221, 237, 242, 243, 266, 267, 275, 276, 277, 284, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 314, 316, 317, 318, 319, 320, 321, 323, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 351, 352, 353, 357, 361, 362, 365, 366, 369, 370, 371, 373, 376, 384, 386, 388, 389, 390, 392, 394, 395, 396, 397, 399, 400, 401, 428, 429, 437, 438, 439, 444, 448, 449, 452, 453, 455, 456, 457, 458, 461, 465, 474, 475, 477, 479, 484, 485, 488, 489, 492, 493, 496, 497, 498, 504, 512, 514, 515, 516, 519, 522, 524, 526, 528, 551, 552, 555, 556, 557, 558, 559, 560, 562], "either": [0, 95, 155, 159, 173, 233, 237, 292, 302, 304, 306, 307, 308, 309, 311, 314, 316, 317, 323, 327, 328, 331, 333, 340, 342, 357, 377, 387, 389, 390, 395, 397, 399, 400, 413, 419, 423, 428, 444, 458, 467, 478, 479, 484, 485, 489, 492, 493, 502, 504, 512, 514, 515, 522, 528, 529, 552, 557, 558, 560], "The": [0, 33, 34, 43, 54, 55, 74, 86, 87, 88, 91, 93, 94, 95, 98, 99, 101, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 142, 143, 144, 145, 146, 147, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 169, 171, 172, 173, 176, 177, 179, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 220, 221, 222, 223, 224, 225, 226, 228, 229, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 246, 248, 251, 252, 254, 255, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 284, 285, 286, 287, 289, 292, 293, 294, 295, 296, 298, 299, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 534, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562], "give": [0, 329, 558, 560], "power": [0, 367, 375, 397, 454, 463, 480, 493, 508, 562], "interact": [0, 552, 555, 557, 558], "both": [0, 21, 22, 127, 128, 205, 206, 372, 373, 402, 404, 405, 406, 407, 408, 410, 412, 413, 414, 415, 416, 421, 424, 425, 426, 427, 460, 461, 484, 485, 489, 491, 497, 502, 538, 557, 558, 560, 562], "interpret": [0, 558], "pure": [0, 555], "exist": [0, 86, 105, 137, 164, 183, 215, 242, 243, 244, 245, 259, 261, 262, 279, 315, 373, 387, 391, 398, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 461, 478, 479, 489, 501, 529, 557, 558, 562], "search": [0, 111, 112, 113, 189, 190, 191, 265, 299, 319, 320, 321, 326, 340, 341, 353, 360, 361, 362, 372, 373, 376, 387, 388, 439, 447, 448, 449, 460, 461, 465, 478, 484, 489, 496, 529, 536, 542, 549, 558], "its": [0, 120, 121, 128, 129, 131, 198, 199, 206, 207, 209, 270, 271, 277, 313, 318, 328, 357, 444, 497, 521, 533, 548, 554, 558, 559, 560, 562], "name": [0, 146, 224, 285, 555, 557, 558, 562], "edit": 0, "alreadi": [0, 134, 212, 243, 244, 245, 261, 262, 300, 301, 538, 557, 558, 562], "If": [0, 33, 34, 43, 54, 55, 64, 65, 70, 74, 86, 99, 107, 108, 112, 114, 115, 116, 117, 127, 128, 134, 135, 146, 147, 149, 150, 151, 152, 154, 155, 158, 159, 160, 163, 164, 177, 185, 186, 190, 192, 193, 194, 195, 205, 206, 212, 213, 224, 225, 227, 228, 229, 230, 232, 233, 236, 237, 238, 241, 242, 243, 244, 245, 252, 261, 262, 265, 266, 267, 276, 277, 285, 286, 288, 289, 290, 291, 292, 294, 295, 298, 299, 300, 303, 304, 310, 315, 317, 318, 320, 326, 328, 329, 330, 335, 336, 337, 338, 340, 341, 342, 343, 348, 352, 353, 357, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 381, 382, 385, 386, 387, 388, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 434, 438, 439, 440, 444, 447, 448, 449, 451, 452, 453, 454, 456, 457, 458, 460, 461, 463, 465, 467, 468, 471, 472, 474, 476, 477, 478, 479, 480, 482, 484, 485, 489, 490, 493, 494, 496, 497, 499, 500, 502, 504, 505, 508, 509, 514, 515, 517, 523, 524, 525, 527, 528, 529, 540, 551, 552, 556, 557, 558, 559, 560, 562], "want": [0, 33, 34, 43, 54, 55, 64, 70, 74, 303, 558, 562], "find": [0, 95, 111, 112, 113, 125, 142, 173, 189, 190, 191, 203, 220, 254, 265, 305, 307, 309, 310, 311, 314, 316, 317, 329, 330, 332, 334, 335, 336, 337, 338, 343, 345, 347, 348, 349, 350, 351, 363, 364, 368, 369, 370, 371, 374, 376, 378, 386, 387, 389, 390, 398, 399, 400, 401, 429, 431, 433, 434, 435, 436, 437, 440, 450, 451, 455, 456, 457, 462, 465, 468, 478, 479, 491, 492, 496, 497, 498, 499, 500, 505, 506, 507, 513, 518, 523, 528, 529, 553, 555, 558, 560, 562], "d": [0, 98, 176, 251, 328, 357, 362, 386, 388, 411, 412, 421, 422, 444, 449, 464, 466, 477, 528, 552, 554, 558, 560], "like": [0, 99, 127, 128, 177, 205, 206, 252, 305, 311, 343, 349, 352, 365, 366, 367, 375, 376, 395, 396, 397, 429, 435, 438, 452, 453, 454, 463, 465, 480, 493, 496, 508, 552, 556, 557, 558, 560, 562], "insert": [0, 129, 130, 131, 132, 134, 207, 208, 209, 210, 212, 362, 388, 449, 558], "creat": [0, 86, 87, 88, 89, 90, 91, 92, 93, 99, 116, 117, 129, 130, 131, 132, 134, 146, 155, 159, 164, 165, 166, 167, 168, 169, 170, 171, 177, 194, 195, 207, 208, 209, 210, 212, 224, 233, 237, 242, 243, 244, 245, 246, 247, 252, 266, 267, 285, 292, 293, 299, 315, 331, 358, 391, 392, 393, 394, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 445, 509, 524, 525, 526, 552, 554, 555, 557, 558, 560], "one": [0, 94, 95, 98, 99, 112, 114, 115, 129, 130, 131, 132, 134, 147, 149, 151, 160, 172, 173, 176, 177, 190, 192, 193, 207, 208, 209, 210, 212, 225, 227, 229, 238, 251, 252, 265, 269, 286, 288, 295, 322, 328, 329, 330, 357, 371, 372, 373, 376, 387, 401, 444, 457, 460, 461, 465, 478, 484, 485, 489, 496, 508, 517, 529, 552, 555, 557, 558, 560, 562], "your_modul": 0, "Then": [0, 98, 176, 251, 558], "start": [0, 98, 103, 176, 181, 251, 257, 310, 315, 320, 334, 340, 341, 348, 353, 360, 361, 362, 374, 380, 388, 391, 434, 439, 447, 448, 449, 462, 470, 480, 492, 508, 512, 555, 558, 559, 560, 562], "boilerpl": 0, "bellow": 0, "docstr": [0, 557], "descript": 0, "pyo3": [0, 158, 236, 294, 558], "text_signatur": 0, "graph": [0, 6, 19, 21, 22, 25, 29, 33, 34, 43, 50, 54, 55, 64, 70, 74, 78, 86, 87, 89, 90, 91, 92, 98, 99, 100, 102, 105, 106, 107, 108, 109, 110, 112, 116, 117, 124, 127, 128, 133, 134, 135, 137, 138, 139, 140, 141, 146, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 163, 164, 165, 167, 168, 169, 170, 176, 177, 178, 180, 183, 184, 185, 186, 187, 188, 190, 194, 195, 202, 205, 206, 211, 212, 213, 215, 216, 217, 218, 219, 224, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 241, 242, 244, 245, 246, 247, 251, 252, 253, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 274, 276, 277, 279, 280, 281, 282, 283, 285, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 535, 538, 541, 549, 550, 551, 552, 553, 555, 556, 558, 561], "pub": [0, 508], "fn": 0, "py": [0, 393, 513, 525], "pygraph": [0, 19, 86, 109, 154, 159, 164, 187, 232, 237, 304, 305, 306, 307, 308, 309, 311, 313, 314, 315, 316, 317, 320, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 334, 340, 341, 357, 361, 366, 374, 382, 383, 388, 389, 390, 395, 396, 397, 399, 400, 402, 403, 404, 405, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 484, 485, 488, 489, 492, 493, 496, 497, 498, 499, 500, 502, 503, 504, 506, 509, 510, 511, 512, 514, 515, 516, 517, 521, 522, 524, 525, 526, 527, 528, 551, 552, 555, 556, 557, 558, 562], "pyresult": 0, "goe": [0, 393, 525], "rememb": 0, "declar": 0, "sometim": [0, 382, 418, 472, 515], "hard": [0, 458, 474, 558], "organ": 0, "those": [0, 105, 109, 110, 129, 130, 131, 132, 183, 187, 188, 207, 208, 209, 210, 259, 263, 264, 301, 318, 322, 325, 352, 355, 366, 383, 396, 438, 442, 453, 473, 516, 557, 558, 559, 560, 562], "case": [0, 94, 95, 105, 112, 172, 173, 183, 190, 243, 248, 259, 265, 304, 320, 328, 342, 353, 357, 362, 367, 375, 376, 388, 397, 428, 439, 444, 449, 454, 463, 465, 480, 493, 496, 508, 557, 558, 560, 562], "suggest": 0, "move": [0, 382, 472, 515, 558], "split": 0, "follow": [0, 86, 164, 242, 299, 320, 326, 341, 353, 361, 439, 440, 448, 519, 558, 560, 562], "structur": [0, 328, 372, 373, 460, 461, 484, 485, 489, 511, 555, 557, 562], "have": [0, 50, 65, 78, 86, 99, 100, 134, 135, 150, 151, 155, 159, 164, 177, 178, 212, 213, 228, 229, 233, 237, 242, 253, 289, 292, 293, 301, 302, 312, 315, 316, 339, 351, 363, 373, 389, 391, 392, 437, 450, 461, 464, 483, 489, 497, 508, 517, 524, 533, 540, 548, 556, 557, 558, 560, 562], "deleg": 0, "logic": [0, 299], "call": [0, 21, 22, 86, 126, 143, 164, 204, 221, 242, 275, 284, 299, 300, 301, 320, 326, 341, 353, 361, 362, 382, 388, 394, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 439, 440, 448, 449, 472, 513, 515, 526, 540, 541, 555, 556, 557, 558, 560, 562], "from": [0, 21, 22, 25, 29, 33, 34, 86, 87, 93, 98, 99, 101, 105, 107, 108, 109, 110, 111, 113, 116, 117, 123, 127, 128, 129, 130, 131, 132, 134, 135, 146, 149, 150, 151, 152, 154, 155, 158, 159, 163, 164, 165, 171, 176, 177, 179, 183, 185, 186, 187, 188, 189, 191, 194, 195, 201, 205, 206, 207, 208, 209, 210, 212, 213, 224, 227, 228, 229, 230, 232, 233, 236, 237, 241, 242, 244, 251, 252, 255, 259, 261, 262, 263, 264, 266, 267, 276, 277, 285, 288, 289, 290, 291, 292, 293, 294, 298, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 320, 321, 325, 326, 334, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 353, 355, 360, 361, 362, 363, 364, 365, 368, 374, 375, 376, 378, 381, 383, 385, 386, 387, 389, 390, 391, 394, 395, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 439, 442, 447, 448, 449, 450, 451, 452, 458, 462, 463, 465, 468, 471, 473, 476, 477, 478, 479, 492, 493, 494, 495, 496, 498, 502, 505, 511, 514, 519, 520, 521, 527, 528, 529, 531, 544, 551, 552, 554, 555, 556, 558, 559, 560], "do": [0, 86, 159, 164, 237, 299, 373, 458, 461, 489, 557, 558, 562], "question": 0, "contact": 0, "u": [0, 135, 213, 320, 328, 341, 353, 357, 361, 362, 388, 439, 444, 448, 449, 465, 495, 538, 556, 558, 560], "channel": 0, "slack": 0, "re": [0, 86, 158, 164, 236, 294, 372, 373, 382, 460, 461, 472, 484, 485, 489, 515, 557, 558, 562], "work": [0, 21, 22, 317, 390, 459, 479, 502, 551, 555, 557, 558, 560, 561, 562], "write": [0, 146, 158, 163, 224, 236, 241, 285, 294, 298, 377, 467, 504, 551, 557, 558, 562], "made": [0, 86, 135, 164, 213, 242, 301, 302, 558, 560, 562], "ani": [0, 86, 88, 99, 105, 114, 115, 116, 117, 146, 158, 164, 166, 177, 183, 192, 193, 194, 195, 224, 236, 242, 243, 252, 259, 266, 267, 285, 294, 299, 300, 313, 324, 326, 334, 367, 375, 386, 393, 397, 403, 406, 454, 458, 463, 477, 480, 487, 488, 491, 493, 508, 519, 525, 528, 551, 555, 556, 557, 558, 560, 562], "petgraph": [0, 558], "ha": [0, 86, 111, 112, 113, 114, 115, 124, 164, 189, 190, 191, 192, 193, 202, 242, 265, 274, 300, 313, 320, 322, 324, 326, 333, 334, 335, 336, 337, 338, 353, 359, 361, 362, 384, 392, 393, 439, 446, 448, 449, 475, 491, 494, 509, 516, 522, 524, 525, 531, 540, 555, 557, 558], "depend": [0, 502, 552, 556, 557, 558, 560], "probabl": [0, 393, 394, 525, 526, 556, 558], "sens": 0, "standalon": [0, 555, 558], "provid": [0, 94, 95, 99, 111, 113, 120, 121, 122, 127, 128, 148, 155, 159, 161, 172, 173, 177, 189, 191, 198, 199, 200, 205, 206, 226, 233, 237, 239, 248, 269, 270, 271, 272, 276, 277, 287, 292, 296, 299, 310, 312, 316, 319, 321, 339, 346, 347, 348, 350, 351, 363, 364, 372, 373, 374, 375, 376, 389, 392, 398, 432, 433, 434, 436, 437, 440, 450, 451, 460, 461, 462, 463, 465, 484, 485, 486, 487, 488, 489, 493, 495, 496, 498, 502, 503, 509, 516, 520, 524, 555, 556, 557, 558, 562], "api": [0, 555, 558, 562], "other": [0, 6, 19, 98, 129, 130, 131, 132, 151, 154, 155, 176, 207, 208, 209, 210, 229, 232, 233, 251, 291, 292, 306, 307, 308, 309, 318, 344, 345, 346, 347, 352, 377, 381, 393, 414, 425, 430, 431, 432, 433, 438, 467, 471, 475, 495, 504, 514, 525, 556, 557, 559, 560, 562], "unlik": [0, 65, 90, 168, 245, 557], "design": [0, 556, 557, 558], "top": [0, 323, 354, 441, 558], "algorithm": [0, 19, 21, 22, 112, 190, 265, 306, 307, 308, 309, 310, 314, 315, 316, 317, 318, 320, 322, 334, 340, 341, 344, 345, 346, 347, 348, 350, 351, 352, 353, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 373, 375, 382, 385, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 460, 461, 463, 466, 472, 474, 476, 478, 480, 484, 488, 489, 493, 494, 497, 499, 500, 501, 508, 513, 515, 516, 517, 518, 524, 525, 526, 527, 529, 530, 537, 543, 554, 555, 557, 558, 562], "kei": [0, 94, 95, 98, 158, 172, 173, 176, 236, 248, 251, 294, 306, 307, 308, 309, 316, 317, 322, 325, 333, 344, 345, 346, 347, 351, 352, 355, 359, 362, 363, 364, 366, 367, 369, 374, 375, 376, 377, 382, 383, 388, 389, 390, 396, 397, 399, 430, 431, 432, 433, 437, 438, 440, 442, 446, 449, 450, 451, 453, 454, 455, 458, 459, 462, 463, 464, 465, 466, 467, 472, 473, 480, 492, 493, 495, 496, 502, 504, 508, 515, 551, 552, 555, 558], "differ": [0, 65, 107, 108, 116, 117, 159, 185, 186, 194, 195, 237, 261, 262, 266, 267, 293, 312, 337, 338, 339, 365, 384, 395, 452, 495, 500, 551, 555, 556, 558, 560, 562], "keep": [0, 320, 341, 353, 361, 382, 439, 448, 472, 500, 515, 557, 558, 562], "mind": [0, 557], "public": [0, 557, 558], "interfac": [0, 555, 557, 558, 562], "treat": [0, 25, 29, 33, 34, 35, 39, 43, 46, 54, 55, 64, 70, 74, 82, 116, 117, 146, 194, 195, 224, 266, 267, 285, 303, 304, 317, 342, 364, 365, 369, 370, 371, 382, 386, 390, 391, 395, 401, 428, 451, 452, 472, 479, 515, 528, 557, 558], "where": [0, 33, 34, 55, 74, 89, 90, 94, 95, 104, 107, 108, 162, 167, 168, 172, 173, 182, 185, 186, 240, 244, 245, 248, 258, 261, 262, 297, 303, 304, 311, 316, 318, 325, 326, 328, 329, 330, 332, 342, 349, 351, 352, 355, 357, 363, 366, 369, 370, 371, 374, 382, 383, 386, 389, 393, 396, 399, 400, 401, 402, 414, 424, 425, 428, 435, 437, 438, 440, 442, 444, 450, 453, 455, 456, 457, 458, 459, 462, 464, 466, 472, 473, 477, 492, 497, 499, 502, 513, 515, 516, 525, 528, 553, 555, 557, 558, 559, 560, 562], "compat": [0, 86, 137, 215, 279, 353, 361, 362, 439, 448, 449, 556, 558], "doesn": [0, 105, 163, 183, 241, 259, 298, 412, 422, 483, 557, 558, 560, 562], "t": [0, 105, 135, 163, 183, 213, 241, 259, 298, 302, 310, 317, 318, 335, 336, 337, 338, 348, 352, 364, 366, 382, 386, 390, 391, 396, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 438, 451, 453, 472, 477, 483, 499, 500, 508, 515, 516, 528, 539, 540, 557, 558, 559, 560, 562], "matter": 0, "onli": [0, 25, 29, 33, 34, 35, 39, 43, 46, 50, 54, 55, 64, 70, 74, 82, 86, 94, 95, 101, 112, 127, 128, 147, 149, 151, 160, 164, 172, 173, 179, 190, 205, 206, 225, 227, 229, 238, 242, 248, 255, 265, 269, 286, 288, 295, 303, 306, 307, 308, 309, 312, 316, 317, 325, 326, 329, 330, 335, 336, 337, 338, 339, 340, 344, 345, 346, 347, 351, 352, 355, 360, 363, 366, 367, 369, 375, 376, 383, 386, 389, 390, 396, 397, 399, 430, 431, 432, 433, 437, 438, 442, 447, 450, 453, 454, 455, 463, 465, 473, 477, 479, 480, 493, 496, 497, 508, 521, 528, 552, 556, 557, 558, 560, 562], "addition": [0, 86, 164, 242, 557, 558, 562], "should": [0, 65, 89, 90, 151, 155, 160, 167, 168, 229, 233, 238, 244, 245, 292, 295, 314, 320, 341, 350, 353, 361, 362, 388, 406, 410, 412, 413, 421, 436, 439, 448, 449, 480, 484, 485, 489, 530, 537, 543, 556, 557, 558], "done": [0, 299, 301, 302, 557, 558, 560], "via": [0, 551, 557, 558, 562], "cargo": [0, 556, 558], "doc": [0, 508, 555], "It": [0, 25, 29, 33, 34, 39, 43, 46, 50, 54, 55, 64, 70, 74, 78, 86, 88, 114, 115, 116, 117, 153, 154, 164, 166, 192, 193, 194, 195, 231, 232, 242, 243, 266, 267, 291, 303, 306, 307, 308, 309, 310, 313, 314, 316, 317, 322, 324, 325, 326, 329, 330, 333, 334, 335, 336, 337, 338, 344, 345, 346, 347, 348, 350, 351, 355, 359, 362, 363, 364, 365, 369, 370, 371, 376, 382, 384, 385, 386, 388, 389, 390, 395, 399, 400, 401, 430, 431, 432, 433, 434, 436, 437, 442, 446, 449, 450, 451, 452, 455, 456, 457, 465, 472, 474, 475, 476, 477, 484, 485, 489, 496, 497, 508, 511, 515, 516, 522, 527, 528, 551, 555, 556, 557, 558, 560, 562], "expect": [0, 146, 155, 163, 224, 233, 241, 285, 292, 298, 304, 335, 336, 337, 338, 342, 367, 369, 370, 371, 375, 377, 393, 397, 399, 400, 401, 428, 454, 455, 456, 457, 458, 463, 467, 480, 493, 495, 497, 498, 499, 500, 504, 508, 516, 517, 525, 551, 556, 557, 558], "also": [0, 86, 154, 164, 232, 242, 291, 293, 304, 320, 325, 335, 336, 337, 338, 341, 342, 353, 355, 361, 362, 365, 369, 370, 371, 372, 373, 383, 386, 388, 392, 393, 395, 399, 400, 401, 410, 420, 428, 439, 442, 448, 449, 452, 455, 456, 457, 460, 461, 473, 477, 484, 485, 489, 499, 500, 513, 524, 525, 528, 554, 555, 556, 557, 558, 560, 562], "being": [0, 86, 164, 242, 275, 284, 300, 376, 385, 465, 476, 496, 527, 555, 556, 557, 558, 562], "so": [0, 25, 29, 33, 34, 35, 39, 43, 46, 54, 55, 64, 70, 74, 82, 86, 153, 154, 155, 164, 231, 232, 233, 242, 244, 262, 291, 292, 303, 394, 440, 526, 556, 557, 558, 559, 560, 562], "coverag": 0, "onc": [0, 301, 497, 513, 556, 557, 558, 562], "ve": [0, 98, 176, 251, 559, 560], "verifi": 0, "doe": [0, 86, 153, 155, 164, 231, 233, 252, 292, 511, 555, 557, 558, 560], "break": [0, 558], "successfulli": 0, "befor": [0, 99, 177, 376, 465, 495, 496, 558, 560], "open": [0, 146, 158, 163, 224, 236, 241, 285, 294, 298, 557, 558], "ll": [0, 556, 558, 559, 560], "suit": 0, "easiest": 0, "wai": [0, 538, 557, 558, 562], "tox": 0, "instal": [0, 502, 551, 552, 555, 557, 558], "pip": [0, 551, 552, 556, 558, 562], "sever": [0, 557, 558, 562], "advantag": [0, 555, 556], "biggest": [0, 557, 558], "isol": [0, 6, 558], "virtualenv": 0, "thi": [0, 25, 29, 33, 34, 35, 39, 43, 46, 50, 54, 55, 64, 65, 70, 74, 78, 82, 86, 87, 88, 93, 94, 95, 98, 99, 105, 107, 108, 109, 110, 111, 112, 113, 116, 117, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 143, 144, 150, 151, 153, 154, 155, 156, 158, 159, 164, 165, 166, 171, 172, 173, 176, 177, 183, 185, 186, 187, 188, 189, 190, 191, 194, 195, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 221, 222, 228, 229, 231, 232, 233, 234, 236, 237, 242, 244, 248, 251, 252, 259, 261, 262, 263, 264, 265, 266, 267, 275, 276, 277, 278, 279, 284, 289, 291, 292, 293, 294, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 312, 315, 317, 318, 319, 320, 321, 323, 325, 326, 327, 328, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 354, 355, 356, 357, 360, 361, 362, 364, 365, 366, 367, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 382, 384, 385, 386, 387, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 407, 408, 412, 414, 415, 416, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 439, 441, 442, 443, 444, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 467, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 484, 485, 487, 489, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 524, 525, 527, 528, 529, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562], "mean": [0, 86, 95, 164, 173, 242, 314, 350, 373, 391, 436, 461, 475, 489, 491, 523, 555, 557, 558, 562], "pollut": 0, "system": [0, 403, 406, 555, 556, 558], "howev": [0, 86, 164, 242, 551, 555, 556, 557, 558, 562], "default": [0, 86, 116, 117, 127, 128, 134, 146, 151, 154, 159, 164, 194, 195, 205, 206, 212, 224, 229, 232, 237, 242, 266, 267, 285, 291, 299, 304, 305, 306, 307, 308, 309, 311, 318, 328, 342, 343, 344, 345, 346, 347, 349, 352, 353, 357, 361, 362, 365, 366, 367, 369, 370, 371, 372, 373, 375, 376, 382, 384, 385, 386, 387, 388, 395, 396, 397, 399, 400, 401, 406, 408, 410, 412, 413, 415, 416, 421, 428, 429, 435, 438, 439, 444, 448, 449, 452, 453, 454, 455, 456, 457, 460, 461, 463, 465, 472, 474, 475, 476, 477, 478, 480, 484, 485, 489, 493, 496, 497, 508, 509, 515, 517, 522, 527, 528, 529, 530, 537, 543, 551, 552, 557, 558, 562], "recompil": 0, "everi": [0, 159, 237, 367, 374, 375, 394, 397, 414, 425, 454, 462, 463, 464, 480, 492, 493, 495, 498, 508, 516, 526, 547, 551, 558, 559], "time": [0, 86, 88, 155, 164, 166, 233, 292, 341, 361, 374, 384, 392, 393, 440, 448, 462, 475, 492, 497, 524, 525, 531, 532, 534, 539, 540, 544, 554, 556, 557, 558, 560, 562], "even": [0, 331, 358, 411, 412, 421, 422, 445, 557, 558], "avoid": [0, 86, 164, 516, 560], "skip": [0, 99, 155, 177, 233, 292, 329, 330, 558], "pkg": 0, "packag": [0, 555, 556, 558], "rerun": 0, "without": [0, 90, 104, 158, 168, 182, 236, 245, 258, 294, 313, 320, 335, 336, 337, 338, 353, 362, 388, 439, 449, 488, 491, 508, 558, 560, 562], "flag": [0, 497, 557, 562], "recent": 0, "ran": [0, 562], "repo": 0, "otherwis": [0, 124, 202, 274, 302, 372, 373, 387, 460, 461, 478, 484, 485, 489, 501, 529, 558], "out": [0, 131, 132, 135, 209, 210, 213, 339, 392, 491, 524, 533, 540, 547, 548, 558], "date": 0, "miss": [0, 474, 557, 558], "outsid": [0, 556, 558, 560], "root": [0, 326, 334, 540, 556], "shim": 0, "conflict": 0, "version": [0, 353, 361, 362, 439, 448, 449, 556, 557, 558], "compil": [0, 555, 556, 558], "extens": [0, 391, 511, 557, 558], "just": [0, 86, 326, 335, 336, 337, 338, 372, 373, 460, 461, 484, 485, 489, 552, 555, 556, 557, 558, 562], "pass": [0, 109, 110, 134, 151, 154, 159, 163, 187, 188, 212, 229, 232, 237, 241, 263, 264, 291, 298, 304, 318, 325, 335, 336, 337, 338, 342, 352, 355, 366, 367, 369, 370, 371, 372, 373, 375, 377, 385, 387, 392, 396, 397, 399, 400, 401, 428, 438, 442, 453, 454, 455, 456, 457, 458, 460, 461, 463, 467, 476, 478, 480, 482, 484, 485, 489, 490, 493, 495, 497, 498, 499, 500, 504, 508, 516, 517, 524, 527, 529, 551, 552, 557, 558, 559, 560], "select": [0, 368, 474, 508, 562], "regex": 0, "runner": 0, "For": [0, 25, 29, 33, 34, 43, 54, 55, 64, 70, 74, 86, 98, 109, 110, 146, 151, 153, 158, 159, 163, 164, 176, 187, 188, 224, 229, 231, 236, 237, 241, 242, 251, 263, 264, 285, 294, 298, 299, 303, 305, 306, 307, 308, 309, 314, 325, 326, 335, 336, 337, 338, 343, 344, 345, 346, 347, 350, 355, 359, 367, 369, 370, 371, 372, 373, 375, 376, 383, 384, 391, 392, 393, 394, 397, 399, 400, 401, 429, 430, 431, 432, 433, 436, 442, 454, 455, 456, 457, 460, 461, 463, 465, 473, 474, 475, 480, 484, 485, 491, 493, 496, 497, 498, 508, 511, 516, 517, 522, 524, 525, 526, 538, 552, 556, 557, 558, 559, 560, 562], "exampl": [0, 25, 29, 33, 34, 43, 54, 55, 64, 70, 74, 86, 98, 109, 110, 146, 151, 153, 158, 163, 164, 176, 187, 188, 224, 229, 231, 236, 241, 242, 251, 263, 264, 285, 294, 298, 299, 303, 304, 305, 306, 307, 308, 309, 320, 325, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 353, 355, 361, 369, 370, 371, 372, 373, 376, 383, 384, 387, 399, 400, 401, 428, 429, 430, 431, 432, 433, 439, 442, 448, 455, 456, 457, 460, 461, 465, 473, 474, 475, 478, 484, 485, 489, 496, 497, 498, 499, 500, 516, 522, 529, 552, 556, 557, 558, 560, 562], "dag": [0, 6, 19, 86, 89, 90, 93, 158, 164, 167, 168, 171, 236, 294, 304, 319, 321, 335, 336, 337, 338, 342, 494, 495, 519, 520, 521, 558], "id": [0, 86, 146, 164, 224, 242, 285, 334, 368, 372, 373, 382, 387, 460, 461, 472, 478, 484, 485, 489, 494, 515, 518, 529, 558], "epi": 0, "argument": [0, 109, 110, 114, 115, 134, 164, 187, 188, 192, 193, 212, 242, 263, 264, 306, 307, 308, 309, 310, 317, 328, 329, 330, 335, 336, 337, 338, 342, 344, 345, 346, 347, 348, 353, 357, 361, 362, 364, 373, 382, 387, 388, 390, 428, 430, 431, 432, 433, 434, 439, 444, 448, 449, 451, 461, 472, 478, 489, 495, 497, 509, 515, 529, 558, 562], "after": [0, 86, 98, 155, 164, 176, 233, 242, 251, 292, 533, 540, 547, 548, 557, 558, 560, 562], "bare": 0, "option": [0, 86, 98, 99, 116, 117, 134, 146, 155, 158, 159, 163, 164, 176, 177, 194, 195, 212, 224, 233, 236, 237, 241, 242, 251, 252, 266, 267, 285, 292, 294, 298, 304, 310, 315, 316, 317, 320, 323, 326, 327, 328, 334, 340, 341, 342, 348, 351, 353, 354, 356, 357, 360, 361, 362, 363, 364, 365, 367, 368, 372, 373, 374, 375, 377, 379, 380, 381, 382, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 399, 400, 428, 434, 437, 439, 441, 443, 444, 447, 448, 449, 450, 451, 452, 454, 458, 460, 461, 462, 463, 467, 469, 470, 471, 472, 478, 480, 484, 489, 492, 493, 497, 499, 500, 504, 508, 509, 510, 512, 514, 515, 517, 524, 525, 526, 529, 551, 552, 557, 558], "refer": [0, 100, 129, 130, 131, 132, 154, 155, 159, 178, 207, 208, 209, 210, 232, 233, 237, 253, 291, 292, 293, 325, 355, 367, 375, 385, 397, 442, 454, 463, 476, 480, 493, 508, 513, 527, 551, 556, 557, 558, 562], "stestr": 0, "readthedoc": 0, "io": [0, 555, 558], "en": [0, 508, 558], "class": [0, 19, 25, 29, 33, 34, 35, 39, 43, 46, 50, 54, 55, 64, 65, 70, 74, 78, 82, 86, 164, 242, 299, 303, 311, 319, 320, 321, 341, 353, 361, 428, 439, 448, 530, 537, 543, 555, 556, 558, 562], "individu": 0, "method": [0, 25, 29, 35, 39, 46, 50, 65, 70, 74, 78, 82, 86, 88, 99, 107, 108, 111, 113, 116, 117, 127, 128, 134, 137, 153, 158, 164, 166, 177, 185, 186, 189, 191, 194, 195, 205, 206, 212, 215, 231, 236, 242, 252, 261, 262, 266, 267, 276, 277, 279, 294, 299, 300, 312, 320, 328, 339, 341, 353, 361, 362, 367, 375, 388, 397, 439, 448, 449, 454, 463, 480, 493, 497, 502, 508, 530, 537, 541, 543, 551, 556, 557, 558, 559, 560, 562], "faster": [0, 318, 352, 438, 516, 557, 558], "n": [0, 112, 146, 190, 224, 265, 285, 315, 328, 357, 382, 386, 391, 392, 393, 394, 403, 404, 406, 407, 409, 417, 418, 419, 440, 444, 472, 477, 497, 499, 515, 524, 525, 526, 528, 558, 562], "discov": [0, 320, 340, 341, 353, 360, 361, 362, 388, 439, 447, 448, 449, 539, 547], "test_max_weight_match": 0, "same": [0, 65, 86, 88, 99, 112, 151, 153, 155, 164, 166, 177, 190, 229, 231, 233, 265, 292, 371, 376, 385, 401, 457, 465, 476, 484, 485, 489, 496, 500, 508, 527, 538, 552, 555, 558, 560], "path": [0, 6, 19, 25, 29, 70, 74, 146, 153, 158, 163, 224, 231, 236, 241, 285, 294, 298, 305, 306, 307, 308, 309, 310, 311, 312, 314, 316, 317, 318, 326, 328, 330, 335, 336, 337, 338, 339, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 357, 363, 364, 365, 366, 369, 370, 371, 374, 376, 377, 378, 386, 389, 390, 396, 399, 400, 401, 402, 415, 424, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 444, 450, 451, 452, 453, 455, 456, 457, 462, 465, 467, 468, 477, 479, 492, 496, 497, 498, 504, 505, 511, 513, 516, 521, 528, 551, 555, 556, 558, 559, 560, 562], "test_nod": 0, "testnod": 0, "test_no_nod": 0, "rel": [0, 380, 382, 470, 472, 512, 515], "each": [0, 86, 105, 114, 115, 134, 153, 163, 164, 183, 192, 193, 212, 231, 241, 242, 259, 293, 298, 299, 300, 306, 307, 308, 309, 310, 311, 315, 317, 318, 320, 322, 324, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 341, 344, 345, 346, 347, 348, 349, 352, 353, 357, 359, 361, 362, 364, 365, 366, 369, 370, 371, 372, 373, 377, 380, 381, 382, 386, 387, 388, 390, 391, 393, 394, 395, 396, 401, 404, 407, 418, 430, 431, 432, 433, 434, 435, 438, 439, 444, 446, 448, 449, 451, 452, 453, 460, 461, 467, 470, 471, 472, 478, 480, 484, 485, 486, 487, 489, 494, 497, 498, 499, 500, 504, 508, 509, 512, 514, 515, 516, 519, 525, 526, 528, 529, 536, 542, 547, 551, 553, 556, 557, 558, 559, 560, 562], "fail": [0, 369, 370, 371, 399, 400, 401, 455, 456, 457, 558], "except": [0, 19, 44, 45, 56, 57, 58, 59, 60, 61, 62, 63, 69, 86, 164, 242, 320, 335, 336, 337, 338, 341, 353, 361, 362, 377, 387, 388, 439, 448, 449, 467, 478, 497, 504, 529, 549, 550, 555, 557, 558], "rais": [0, 86, 88, 99, 118, 119, 120, 121, 122, 135, 147, 149, 158, 160, 161, 163, 164, 166, 177, 196, 197, 198, 199, 200, 213, 225, 227, 236, 238, 239, 241, 242, 268, 269, 270, 271, 272, 286, 288, 294, 295, 296, 298, 299, 300, 306, 307, 310, 316, 317, 320, 333, 335, 336, 337, 338, 341, 343, 344, 345, 346, 347, 348, 350, 351, 353, 361, 362, 363, 364, 374, 377, 382, 388, 398, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 437, 439, 448, 449, 450, 451, 462, 467, 472, 482, 490, 494, 497, 498, 503, 504, 511, 515, 516, 519, 520, 521, 522, 557, 558, 560], "save": [0, 551], "output": [0, 116, 117, 154, 158, 159, 163, 194, 195, 232, 236, 237, 241, 266, 267, 291, 293, 294, 298, 299, 304, 305, 311, 316, 340, 342, 343, 349, 351, 360, 363, 365, 374, 377, 378, 389, 395, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 435, 437, 447, 450, 462, 467, 468, 492, 494, 495, 497, 502, 504, 505, 551, 558, 559, 560], "imag": [0, 158, 236, 251, 294, 411, 412, 421, 422, 551, 557, 558, 559, 560, 562], "current": [0, 86, 158, 236, 294, 342, 403, 406, 428, 497, 534, 558, 562], "ensur": [0, 86, 160, 164, 238, 276, 295, 556, 558], "usabl": [0, 558], "clutter": 0, "clean": 0, "up": [0, 299, 345, 347, 431, 433, 560, 562], "view": [0, 387, 478, 484, 489, 529, 557, 560], "inspect": [0, 560], "common": [0, 464, 486, 508, 558, 560], "set": [0, 86, 88, 99, 119, 122, 127, 128, 146, 151, 154, 159, 163, 164, 166, 177, 197, 200, 205, 206, 224, 229, 232, 237, 241, 242, 243, 252, 269, 272, 285, 291, 298, 299, 300, 305, 306, 307, 308, 309, 311, 312, 313, 317, 318, 323, 324, 326, 331, 332, 334, 335, 336, 339, 343, 344, 345, 346, 347, 349, 352, 354, 358, 364, 365, 366, 367, 369, 370, 371, 372, 373, 375, 376, 379, 382, 384, 385, 386, 387, 390, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 435, 438, 441, 445, 451, 453, 454, 455, 456, 457, 460, 461, 463, 465, 469, 472, 474, 475, 476, 477, 478, 479, 484, 485, 486, 487, 489, 493, 494, 496, 497, 502, 503, 510, 515, 516, 522, 526, 527, 528, 529, 552, 553, 557, 558, 559, 560, 562], "rustworkx_test_preserve_imag": 0, "environ": [0, 305, 306, 307, 308, 309, 343, 344, 345, 346, 347, 369, 370, 371, 376, 384, 386, 399, 400, 401, 429, 455, 456, 457, 465, 474, 475, 477, 480, 496, 522, 528, 556, 558, 562], "variabl": [0, 305, 306, 307, 308, 309, 343, 344, 345, 346, 347, 369, 370, 371, 376, 384, 386, 399, 400, 401, 429, 455, 456, 457, 465, 474, 475, 477, 496, 522, 528, 558], "valu": [0, 94, 95, 98, 99, 109, 110, 116, 117, 134, 155, 158, 172, 173, 176, 177, 187, 188, 194, 195, 212, 233, 236, 248, 251, 263, 264, 266, 267, 292, 294, 304, 306, 307, 308, 309, 310, 316, 317, 318, 322, 323, 325, 327, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 374, 375, 376, 377, 379, 380, 381, 382, 383, 386, 388, 389, 390, 395, 396, 397, 399, 400, 401, 403, 406, 408, 410, 415, 416, 420, 428, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 477, 480, 492, 493, 496, 497, 498, 499, 500, 504, 508, 509, 510, 512, 514, 515, 516, 517, 528, 551, 552, 558, 559, 562], "cleanup": 0, "enabl": [0, 86, 99, 158, 164, 177, 236, 294, 369, 370, 371, 399, 400, 401, 455, 456, 457, 555, 557, 558], "look": [0, 112, 190, 265, 557, 560, 562], "correct": [0, 558], "1": [0, 25, 29, 35, 50, 65, 70, 78, 82, 86, 98, 101, 109, 146, 153, 163, 164, 176, 179, 187, 224, 231, 241, 242, 251, 255, 263, 285, 298, 299, 304, 306, 307, 308, 309, 310, 314, 316, 317, 318, 320, 323, 325, 327, 328, 334, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 365, 367, 369, 370, 371, 375, 380, 381, 382, 383, 386, 388, 389, 390, 392, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 436, 437, 438, 439, 441, 442, 443, 444, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 463, 464, 466, 470, 471, 472, 473, 477, 480, 488, 493, 494, 497, 499, 500, 501, 509, 512, 513, 514, 515, 516, 517, 521, 523, 524, 525, 527, 528, 552, 555, 557, 559, 560, 562], "preserv": [0, 99, 177, 252, 353, 361, 362, 439, 448, 449, 558], "finish": [0, 299, 314, 320, 341, 350, 353, 361, 362, 388, 436, 439, 448, 449, 540], "As": [0, 275, 284, 560], "crate": [0, 555, 558], "own": 0, "combin": [0, 98, 99, 159, 176, 177, 237, 251, 252, 558], "embed": 0, "book": 0, "how": [0, 304, 318, 322, 342, 352, 365, 366, 369, 370, 371, 386, 395, 396, 399, 400, 401, 428, 438, 452, 453, 455, 456, 457, 477, 499, 500, 528, 551, 557, 558, 560], "lang": [0, 508], "ch11": 0, "01": [0, 326, 558], "primari": 0, "languag": [0, 511, 555, 558], "written": [0, 334, 551, 555, 556, 557, 558, 560], "rustfmt": 0, "enforc": [0, 560], "consist": [0, 65, 134, 155, 212, 233, 292, 511, 554, 558, 560], "job": [0, 558, 560], "configur": [0, 558], "check": [0, 86, 99, 123, 133, 158, 164, 177, 201, 211, 236, 294, 335, 336, 337, 338, 367, 372, 373, 375, 387, 397, 440, 454, 460, 461, 463, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 497, 501, 508, 529, 558, 560], "luckili": 0, "adapt": [0, 334, 382, 472, 515, 557], "simpl": [0, 304, 305, 311, 326, 342, 343, 349, 369, 370, 371, 372, 373, 376, 387, 399, 400, 401, 404, 428, 429, 435, 440, 455, 456, 457, 460, 461, 465, 478, 484, 485, 489, 496, 499, 500, 513, 517, 529, 556, 558, 560], "fmt": 0, "automat": 0, "restyl": 0, "match": [0, 6, 19, 109, 110, 111, 112, 113, 114, 115, 187, 188, 189, 190, 191, 192, 193, 263, 264, 265, 329, 330, 372, 373, 387, 460, 461, 478, 484, 485, 486, 487, 489, 497, 508, 529, 558], "what": [0, 557, 558], "step": [0, 299], "clippi": 0, "some": [0, 109, 110, 187, 188, 263, 264, 304, 318, 342, 352, 369, 370, 371, 394, 399, 400, 401, 428, 438, 455, 456, 457, 499, 500, 526, 538, 555, 558, 559], "small": [0, 558], "piec": 0, "namespac": 0, "actual": [0, 314, 350, 436, 557, 560], "black": [0, 158, 236, 294, 320, 341, 353, 361, 411, 412, 421, 422, 439, 448, 531, 552, 558, 562], "flake8": 0, "repositori": 0, "elint": 0, "mode": [0, 158, 236, 294, 411, 412, 421, 422, 551, 558, 559, 560, 562], "conform": 0, "rule": 0, "return": [0, 19, 25, 29, 33, 34, 35, 39, 43, 46, 54, 55, 64, 70, 74, 82, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 151, 154, 155, 156, 157, 158, 159, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 229, 232, 233, 234, 235, 236, 237, 240, 241, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 551, 552, 553, 555, 556, 557, 558, 559, 560, 562], "format": [0, 146, 224, 285, 319, 321, 377, 467, 504, 508, 511, 551, 557, 558, 562], "error": [0, 127, 128, 135, 158, 205, 206, 213, 236, 276, 277, 294, 299, 335, 336, 337, 338, 367, 375, 382, 397, 454, 463, 472, 480, 493, 508, 511, 515, 556, 558, 560], "eblack": 0, "updat": [0, 86, 154, 160, 161, 164, 232, 238, 239, 242, 243, 244, 245, 261, 262, 291, 295, 296, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 558, 562], "handl": [0, 342, 428, 557, 558, 562], "venv": 0, "edoc": 0, "render": [0, 562], "web": [0, 508], "browser": 0, "built": [0, 556, 558], "locat": [0, 558], "target": [0, 25, 29, 39, 46, 70, 74, 99, 104, 105, 107, 108, 111, 127, 135, 155, 160, 162, 177, 182, 183, 185, 186, 189, 205, 213, 233, 238, 240, 258, 259, 261, 262, 276, 292, 295, 297, 305, 306, 307, 308, 309, 310, 317, 320, 335, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 353, 360, 364, 369, 371, 378, 390, 399, 401, 429, 430, 431, 432, 433, 434, 439, 447, 451, 455, 457, 468, 479, 505, 531, 534, 546, 558, 560, 562], "rustworkx_cor": [0, 555, 558], "off": [0, 556, 558, 562], "dir": [0, 466], "signatur": 0, "anot": 0, "requir": [0, 65, 109, 110, 187, 188, 263, 264, 299, 337, 338, 353, 361, 362, 376, 439, 448, 449, 465, 496, 551, 556, 557, 558], "stub": 0, "tool": [0, 554, 557, 558, 562], "pyi": 0, "thei": [0, 98, 158, 176, 236, 251, 294, 372, 373, 385, 460, 461, 476, 484, 485, 489, 519, 527, 552, 556, 557, 558, 562], "strip": 0, "more": [0, 86, 112, 146, 164, 190, 224, 242, 265, 285, 299, 301, 302, 322, 326, 328, 333, 357, 359, 376, 381, 419, 444, 446, 465, 471, 496, 497, 511, 513, 514, 551, 552, 554, 555, 556, 557, 558, 562], "mypi": [0, 558], "latest": [0, 558], "3": [0, 29, 50, 65, 78, 86, 101, 109, 110, 146, 153, 155, 163, 164, 179, 187, 188, 224, 231, 233, 241, 242, 255, 263, 264, 285, 292, 298, 299, 320, 335, 336, 337, 338, 341, 353, 355, 361, 383, 384, 387, 410, 411, 412, 413, 419, 420, 421, 422, 439, 442, 448, 458, 459, 464, 466, 473, 475, 478, 497, 513, 529, 554, 557, 558, 559, 560, 562], "veri": [0, 557, 562], "help": 0, "end": [0, 103, 181, 257, 310, 316, 320, 340, 341, 348, 351, 353, 360, 361, 362, 363, 388, 389, 434, 437, 439, 447, 448, 449, 450, 560], "user": [0, 86, 466, 502, 555, 558, 562], "let": [0, 340, 360, 447, 558, 559, 560], "bug": 0, "estub": 0, "One": [0, 538, 562], "thing": [0, 557, 562], "necessari": [0, 558, 560], "line": [0, 146, 224, 285, 459, 464, 552, 558], "__init__": [0, 320, 341, 353, 361, 439, 448, 557, 558, 562], "form": [0, 25, 29, 33, 34, 35, 50, 55, 65, 70, 74, 78, 82, 89, 90, 101, 104, 107, 108, 126, 143, 162, 167, 168, 179, 182, 185, 186, 204, 221, 240, 244, 245, 255, 258, 261, 262, 275, 284, 297, 303, 325, 328, 334, 340, 355, 357, 360, 368, 383, 385, 442, 444, 447, 473, 476, 527, 536, 542, 558], "foo": 0, "abl": [0, 556, 558], "access": [0, 25, 29, 33, 34, 43, 54, 55, 64, 70, 74, 86, 127, 128, 164, 205, 206, 242, 303, 319, 321, 557, 558], "pattern": [0, 554, 558], "face": 0, "must": [0, 116, 117, 158, 194, 195, 236, 266, 267, 294, 314, 329, 335, 336, 337, 338, 350, 363, 375, 389, 411, 412, 421, 422, 436, 450, 463, 493, 508, 517, 551, 552, 557, 558, 560], "explain": 0, "wa": [0, 86, 362, 365, 369, 370, 371, 386, 388, 395, 399, 400, 401, 449, 455, 456, 457, 509, 528, 551, 555, 556, 557, 558, 560], "why": 0, "idea": 0, "behind": 0, "naiv": 0, "limit": [0, 158, 236, 294, 305, 306, 307, 308, 309, 343, 344, 345, 346, 347, 369, 370, 371, 372, 373, 376, 384, 387, 399, 400, 401, 429, 455, 456, 457, 460, 461, 465, 474, 475, 478, 484, 489, 496, 522, 529, 556, 557, 558], "intern": [0, 21, 22, 99, 177, 252, 419, 555, 558, 560], "knowledg": 0, "upgrad": [0, 556], "previou": [0, 300, 326, 380, 470, 512, 519, 558, 562], "program": [0, 555, 556, 558], "would": [0, 86, 99, 127, 128, 151, 164, 177, 205, 206, 229, 242, 305, 306, 307, 308, 309, 343, 344, 345, 346, 347, 369, 370, 371, 372, 373, 376, 384, 387, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 455, 456, 457, 460, 461, 465, 474, 475, 478, 484, 485, 487, 489, 496, 522, 529, 556, 557, 558, 560, 562], "go": [0, 135, 213, 557], "ideal": 0, "too": [0, 116, 117, 194, 195, 266, 267, 556, 558, 559], "context": [0, 558], "sure": [0, 552, 558], "don": [0, 135, 213, 560, 562], "forget": 0, "over": [0, 65, 129, 130, 131, 132, 134, 153, 155, 207, 208, 209, 210, 212, 231, 233, 292, 299, 328, 357, 385, 387, 444, 474, 476, 478, 527, 529, 558, 560], "cycl": [0, 6, 19, 86, 88, 99, 164, 166, 177, 299, 306, 307, 316, 317, 326, 334, 335, 336, 337, 338, 344, 345, 351, 368, 398, 405, 408, 430, 431, 437, 483, 501, 513, 519, 520, 558, 560], "accomplish": [0, 557], "reno": 0, "git": 0, "base": [0, 21, 22, 25, 29, 33, 34, 35, 39, 43, 46, 50, 54, 55, 64, 65, 70, 74, 78, 82, 86, 99, 164, 177, 242, 252, 299, 303, 318, 319, 321, 342, 352, 366, 367, 372, 373, 375, 387, 393, 396, 397, 428, 438, 440, 453, 454, 460, 461, 463, 466, 474, 478, 484, 485, 488, 489, 493, 497, 502, 513, 525, 529, 530, 537, 543, 557, 558, 559, 560], "workflow": 0, "quit": [0, 562], "straightforward": [0, 557], "checkout": 0, "short": 0, "string": [0, 146, 158, 163, 224, 236, 241, 285, 294, 298, 342, 377, 428, 467, 495, 504, 551, 552, 558, 562], "brief": 0, "space": [0, 509], "describ": [0, 89, 90, 167, 168, 244, 245, 315, 368, 391, 402, 424, 458, 511, 557, 558], "becom": [0, 536, 542, 558], "prefix": [0, 557], "yaml": 0, "releasenot": 0, "text": [0, 384, 475, 552], "editor": 0, "basic": [0, 557, 558], "restructur": 0, "list": [0, 33, 34, 43, 54, 55, 64, 74, 86, 89, 90, 92, 99, 102, 103, 104, 105, 106, 107, 108, 110, 114, 115, 118, 126, 127, 128, 130, 132, 136, 137, 138, 139, 143, 144, 145, 146, 149, 152, 154, 156, 157, 162, 163, 164, 167, 168, 170, 177, 180, 181, 182, 183, 184, 185, 186, 188, 192, 193, 196, 204, 205, 206, 208, 210, 214, 215, 216, 217, 221, 222, 223, 224, 227, 230, 232, 234, 235, 240, 241, 242, 244, 245, 247, 252, 256, 257, 258, 259, 260, 261, 262, 264, 268, 275, 277, 278, 279, 280, 281, 284, 285, 288, 290, 291, 297, 298, 300, 301, 303, 305, 307, 309, 310, 311, 314, 317, 319, 320, 321, 326, 329, 330, 332, 334, 340, 341, 343, 345, 347, 348, 349, 350, 353, 360, 361, 362, 364, 368, 380, 382, 388, 390, 398, 402, 403, 404, 405, 406, 407, 408, 410, 414, 415, 416, 418, 420, 424, 425, 426, 427, 429, 431, 433, 434, 435, 436, 439, 447, 448, 449, 451, 470, 472, 474, 491, 494, 495, 497, 509, 511, 512, 515, 516, 517, 518, 519, 520, 551, 552, 553, 557, 558, 559, 562], "under": [0, 555, 558], "categori": 0, "item": [0, 558, 559, 562], "group": [0, 328, 329, 357, 444], "A": [0, 25, 29, 33, 34, 35, 39, 43, 46, 50, 54, 55, 64, 65, 70, 74, 78, 82, 86, 89, 90, 92, 94, 95, 98, 99, 102, 103, 105, 106, 107, 108, 109, 111, 113, 114, 115, 116, 117, 118, 126, 127, 128, 136, 137, 138, 139, 143, 144, 145, 149, 151, 152, 154, 155, 156, 157, 158, 159, 164, 167, 168, 170, 172, 173, 176, 177, 180, 181, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 204, 205, 206, 214, 215, 216, 217, 221, 222, 223, 227, 229, 230, 232, 233, 234, 235, 236, 237, 242, 244, 245, 247, 248, 251, 252, 256, 257, 259, 260, 261, 262, 263, 266, 267, 268, 275, 276, 277, 278, 279, 280, 281, 284, 288, 290, 291, 292, 293, 294, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 359, 360, 361, 362, 363, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 382, 383, 384, 385, 387, 388, 389, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 444, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 472, 473, 474, 475, 476, 478, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 509, 511, 513, 515, 516, 517, 518, 519, 520, 521, 524, 525, 526, 527, 529, 530, 537, 543, 551, 552, 553, 554, 555, 556, 558, 560, 562], "mani": [0, 299, 318, 322, 352, 365, 366, 386, 395, 396, 438, 452, 453, 477, 528, 556, 557, 558], "entri": [0, 244, 262, 316, 351, 363, 370, 371, 389, 400, 401, 437, 450, 456, 457, 508, 558], "potenti": [0, 560], "newli": [0, 87, 89, 90, 91, 92, 93, 99, 129, 130, 131, 132, 155, 165, 167, 168, 169, 170, 171, 177, 207, 208, 209, 210, 233, 243, 244, 245, 246, 247, 252, 292, 557], "full": [0, 418, 558], "templat": 0, "delet": [0, 86, 164, 242, 558], "aren": [0, 560], "content": [0, 65, 146, 158, 163, 224, 236, 241, 285, 294, 298, 375, 463, 493, 555, 558], "result": [0, 25, 29, 33, 34, 39, 43, 46, 54, 55, 64, 70, 74, 86, 164, 242, 293, 299, 303, 313, 322, 324, 326, 333, 334, 359, 381, 384, 392, 446, 471, 475, 508, 514, 521, 522, 524, 554, 558, 562], "someth": [0, 376, 465, 496, 552, 557, 558, 560], "featur": [0, 86, 164, 557], "func": [0, 552], "support": [0, 342, 412, 422, 428, 474, 511, 551, 555, 557, 558, 560, 562], "pydigraph": [0, 19, 86, 98, 99, 105, 110, 116, 117, 146, 153, 154, 155, 158, 163, 293, 299, 304, 305, 306, 307, 308, 309, 311, 312, 314, 316, 317, 318, 319, 320, 321, 323, 325, 327, 328, 329, 330, 331, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 444, 479, 480, 483, 484, 485, 486, 487, 489, 490, 492, 493, 494, 495, 501, 502, 504, 505, 507, 508, 511, 512, 513, 514, 515, 518, 519, 520, 521, 522, 527, 528, 551, 552, 553, 555, 557, 558, 560, 562], "object": [0, 21, 22, 25, 29, 33, 34, 35, 39, 43, 46, 50, 54, 55, 64, 65, 70, 74, 78, 82, 86, 87, 88, 89, 91, 92, 93, 94, 95, 98, 99, 105, 106, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 135, 139, 146, 151, 154, 155, 158, 159, 161, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 176, 177, 183, 184, 189, 191, 192, 193, 194, 195, 196, 197, 198, 200, 213, 217, 224, 229, 232, 233, 236, 237, 239, 241, 242, 243, 244, 246, 247, 248, 251, 252, 259, 260, 266, 267, 268, 269, 270, 272, 281, 285, 291, 292, 293, 294, 296, 298, 299, 303, 304, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 320, 325, 328, 329, 330, 335, 336, 337, 338, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 373, 375, 377, 382, 383, 385, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 444, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 466, 467, 472, 473, 476, 478, 480, 484, 485, 489, 491, 493, 497, 498, 499, 500, 501, 502, 504, 508, 509, 515, 516, 517, 524, 525, 526, 527, 529, 530, 537, 543, 551, 552, 557, 558, 560, 562], "meth": 0, "equival": [0, 50, 65, 78, 136, 155, 214, 233, 251, 292, 376, 402, 424, 465, 496, 521, 555, 558, 560], "conveni": [0, 502], "nativ": [0, 557, 558, 560], "g": [0, 252, 320, 340, 341, 353, 360, 361, 362, 384, 388, 419, 439, 447, 448, 449, 464, 521, 552, 558, 560, 562], "deprec": 0, "bar": 0, "been": [0, 98, 159, 176, 237, 251, 293, 300, 302, 531, 533, 540, 548, 555, 558], "remov": [0, 86, 99, 129, 130, 131, 132, 135, 147, 148, 149, 150, 151, 152, 153, 158, 159, 164, 177, 207, 208, 209, 210, 213, 225, 226, 227, 228, 229, 230, 231, 236, 237, 242, 252, 286, 287, 288, 289, 290, 293, 294, 313, 322, 324, 531, 557, 558, 559], "futur": [0, 300, 558], "supersed": 0, "similar": [0, 342, 428, 557, 558, 562], "accur": 0, "better": [0, 88, 166, 372, 373, 460, 461, 484, 485, 558, 562], "perform": [0, 86, 88, 164, 166, 299, 315, 372, 373, 376, 382, 391, 460, 461, 465, 472, 474, 484, 485, 496, 515, 530, 537, 543, 555, 556, 557, 558, 560], "instead": [0, 86, 146, 151, 159, 160, 164, 224, 229, 237, 238, 242, 285, 295, 326, 376, 377, 387, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 465, 467, 478, 496, 504, 529, 557, 558, 562], "sphinx": 0, "tabl": 0, "enumer": [0, 558], "bullet": 0, "etc": [0, 304, 342, 369, 370, 371, 399, 400, 401, 428, 455, 456, 457, 499, 500, 517, 562], "express": [0, 328, 357, 444, 558], "much": [0, 557, 558], "commit": [0, 558], "pr": 0, "github": [0, 393, 513, 525, 554, 555, 557], "artifact": [0, 353, 361, 362, 439, 448, 449], "part": [0, 320, 322, 341, 353, 361, 362, 388, 439, 448, 449, 517, 549, 555, 556, 558, 562], "inlin": 0, "number": [0, 35, 86, 140, 141, 164, 218, 219, 242, 282, 283, 302, 305, 306, 307, 308, 309, 313, 315, 318, 322, 323, 324, 328, 333, 343, 344, 345, 346, 347, 352, 354, 357, 359, 365, 366, 367, 369, 370, 371, 372, 373, 375, 376, 378, 379, 382, 384, 385, 386, 387, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 438, 440, 441, 444, 446, 452, 453, 454, 455, 456, 457, 460, 461, 463, 465, 468, 469, 472, 474, 475, 476, 477, 478, 480, 484, 489, 493, 496, 497, 499, 505, 506, 507, 508, 509, 510, 515, 516, 522, 524, 525, 526, 527, 528, 529, 558, 559], "12345": 0, "fix": [0, 134, 212, 382, 472, 515], "race": 0, "condit": [0, 109, 110, 111, 113, 114, 115, 151, 187, 188, 189, 191, 192, 193, 229, 263, 264, 329, 330, 509, 558, 560], "com": [0, 375, 393, 463, 493, 513, 516, 525, 555, 557, 558], "__": [0, 335, 336, 337, 338, 558], "rst": 0, "restructuredtext": 0, "report": [0, 539, 540, 544, 554], "command": [0, 551], "dure": [0, 299, 368, 558], "0": [0, 25, 29, 33, 34, 35, 50, 64, 65, 70, 74, 78, 82, 86, 101, 109, 116, 117, 146, 153, 158, 163, 164, 179, 187, 194, 195, 224, 231, 236, 241, 242, 255, 263, 266, 267, 285, 294, 298, 299, 304, 305, 306, 307, 308, 309, 310, 311, 317, 318, 320, 325, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 355, 361, 362, 365, 367, 369, 370, 371, 375, 381, 382, 383, 388, 390, 392, 393, 395, 397, 399, 400, 401, 404, 407, 419, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 442, 448, 449, 452, 454, 455, 456, 457, 458, 459, 463, 464, 466, 471, 472, 473, 480, 491, 493, 497, 499, 500, 508, 509, 514, 515, 517, 523, 524, 525, 551, 552, 555, 556, 557, 559, 560, 562], "8": [0, 384, 419, 458, 480, 513, 552, 554, 555, 557, 562], "tag": 0, "standard": [0, 555, 558], "state": [0, 109, 110, 187, 188, 263, 264, 372, 373, 387, 460, 461, 478, 484, 489, 529, 558, 560], "_build": 0, "particular": [0, 458, 558], "release_not": 0, "submit": 0, "approv": 0, "team": 0, "get": [0, 94, 95, 101, 104, 114, 115, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 136, 137, 142, 143, 144, 145, 156, 157, 160, 162, 172, 173, 179, 182, 192, 193, 198, 199, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 220, 221, 222, 223, 234, 235, 238, 240, 248, 254, 255, 258, 269, 270, 271, 275, 276, 277, 278, 279, 284, 295, 297, 312, 314, 319, 321, 333, 339, 340, 350, 359, 360, 365, 378, 395, 436, 446, 447, 452, 468, 494, 495, 505, 519, 520, 555, 558, 562], "trigger": [0, 474], "subsequ": [0, 558, 562], "mai": [0, 159, 237, 293, 299, 313, 322, 324, 326, 333, 334, 359, 384, 446, 458, 475, 508, 522, 556, 558, 560], "take": [0, 98, 109, 110, 111, 113, 114, 115, 134, 155, 158, 159, 176, 187, 188, 189, 191, 192, 193, 212, 233, 236, 237, 251, 263, 264, 292, 294, 314, 316, 326, 329, 330, 350, 351, 363, 372, 373, 387, 389, 398, 436, 437, 450, 458, 460, 461, 478, 484, 485, 489, 497, 501, 529, 556, 557, 558, 559, 562], "week": 0, "month": 0, "dai": [0, 557, 558, 562], "avail": [0, 386, 477, 528, 551, 554, 556, 557, 558, 562], "propos": [0, 556, 558], "valuabl": 0, "everyth": [0, 557], "highest": 0, "prioriti": [0, 558], "process": [0, 299, 300, 301, 326, 440, 474, 556, 558, 559], "quickli": [0, 558, 562], "activ": 0, "member": [0, 536, 542], "permiss": 0, "final": [0, 98, 176, 251, 558], "mark": [0, 300, 301, 302, 419, 538, 558], "readi": [0, 301, 302, 558], "everyon": 0, "welcom": 0, "extrem": 0, "reduc": [0, 393, 516, 525, 546, 558], "burden": 0, "bit": [0, 556, 560], "back": [0, 320, 341, 353, 361, 362, 388, 439, 448, 449, 535, 538, 557], "forth": [0, 557], "receiv": [0, 155, 233, 292, 374, 462, 492, 558], "feedback": 0, "multipl": [0, 65, 86, 99, 147, 149, 155, 159, 164, 177, 225, 227, 233, 237, 242, 244, 262, 269, 286, 288, 292, 304, 342, 376, 428, 465, 496, 557, 558, 562], "round": [0, 552], "pleas": [0, 557, 558], "discourag": 0, "normal": [0, 318, 352, 366, 396, 438, 453, 480, 552, 556, 557, 558, 559], "qualiti": 0, "appear": [0, 329, 330, 513, 560], "might": [0, 65, 500], "larger": [0, 558, 562], "implic": 0, "obviou": 0, "feel": 0, "free": 0, "adjust": [0, 86, 164, 242, 318, 352, 365, 366, 386, 395, 396, 438, 452, 453, 477, 528, 558], "comment": [0, 146, 224, 285], "anoth": [0, 98, 176, 251, 554, 558, 560, 562], "constrain": 0, "resourc": [0, 556], "infinit": [0, 558], "wait": 0, "main": [0, 558], "period": 0, "fine": 0, "regress": [0, 558], "codebas": 0, "often": [0, 560, 562], "needlessli": 0, "wast": 0, "starvat": 0, "slow": 0, "down": 0, "total": 0, "throughput": 0, "possibl": [0, 299, 310, 348, 384, 387, 392, 393, 394, 434, 478, 519, 523, 524, 525, 526, 529, 556, 558, 562], "try": [0, 387, 478, 529, 556, 558], "bundl": 0, "head": [0, 552, 560, 562], "automerg": 0, "signal": 0, "mergifi": 0, "bot": 0, "enqueu": 0, "onto": [0, 98, 176, 251], "At": [0, 508], "point": [0, 313, 315, 320, 322, 341, 353, 361, 362, 388, 391, 439, 448, 449, 508, 530, 537, 538, 543, 558, 560, 562], "fulli": [0, 556, 558], "autom": 0, "effort": [0, 556], "conserv": 0, "maxim": [0, 322, 333, 359, 446, 487, 497, 558], "idl": 0, "deep": 0, "backlog": 0, "unless": [0, 134, 212, 382, 472, 502, 515, 557, 558], "delai": 0, "intend": [0, 552], "safe": 0, "high": [0, 315, 391, 555, 556, 558], "impact": [0, 558], "secur": 0, "balanc": 0, "risk": 0, "given": [0, 111, 112, 113, 120, 121, 122, 189, 190, 191, 198, 199, 200, 265, 270, 271, 272, 276, 299, 320, 326, 329, 330, 334, 341, 342, 353, 361, 362, 368, 371, 385, 388, 394, 401, 411, 412, 421, 422, 428, 439, 448, 449, 457, 459, 476, 481, 508, 526, 527, 558, 559, 562], "patch": [0, 552], "appropri": [0, 320, 341, 353, 361, 362, 388, 439, 448, 449, 557, 558], "inclus": 0, "riski": 0, "major": [0, 558], "trivial": 0, "fairli": [0, 562], "obscur": 0, "factor": [0, 323, 327, 354, 356, 375, 380, 381, 382, 418, 441, 443, 463, 470, 471, 472, 493, 512, 514, 515, 516], "weigh": 0, "consid": [0, 326, 372, 373, 376, 391, 460, 461, 465, 484, 485, 496], "tiniest": 0, "carri": 0, "realli": 0, "visibl": 0, "benefit": 0, "notic": [0, 558, 560], "self": [0, 292, 313, 320, 322, 324, 326, 331, 333, 341, 353, 358, 359, 361, 384, 392, 439, 445, 446, 448, 475, 522, 524, 557, 558, 562], "signific": 0, "refactor": 0, "lot": [0, 557], "worth": [0, 154, 232, 291, 325, 335, 336, 337, 338, 355, 385, 442, 476, 527, 551, 558], "think": 0, "less": [0, 302, 318, 352, 366, 396, 403, 406, 410, 418, 420, 438, 453, 474, 517], "whether": [0, 86, 109, 110, 114, 115, 151, 164, 187, 188, 192, 193, 229, 242, 263, 264, 318, 329, 330, 352, 366, 396, 438, 440, 453, 482, 486, 487, 488, 490, 502, 557, 558], "simpli": [0, 558, 562], "non": [0, 314, 320, 326, 329, 350, 353, 363, 373, 389, 419, 436, 439, 450, 461, 489, 508, 513, 531, 534, 557, 560], "allow": [0, 86, 88, 159, 164, 166, 237, 242, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 557, 558, 560, 562], "accept": [0, 306, 307, 308, 309, 310, 317, 344, 345, 346, 347, 348, 362, 364, 382, 388, 390, 430, 431, 432, 433, 434, 449, 451, 472, 515, 557, 558], "least": [0, 114, 115, 192, 193, 508, 559], "until": [0, 299, 320, 326, 340, 341, 353, 360, 361, 362, 382, 388, 439, 447, 448, 449, 472, 515, 558], "mainta": 0, "minor": 0, "approach": [0, 459, 558, 562], "reason": 0, "cherri": 0, "pick": [0, 299], "x": [0, 304, 342, 369, 370, 371, 372, 373, 376, 399, 400, 419, 428, 455, 456, 457, 460, 461, 465, 484, 485, 489, 496, 497, 499, 500, 516, 557, 558, 559, 560], "main_commit_id": 0, "squash": 0, "track": [0, 320, 341, 353, 361, 439, 448], "strict": 0, "cleanli": 0, "resolv": [0, 495, 538, 558], "yourself": [0, 558], "messag": [0, 158, 236, 294, 558], "central": [6, 19, 39, 46, 318, 328, 352, 357, 366, 367, 375, 396, 397, 438, 444, 453, 454, 463, 493, 555, 558, 561], "rustworkx": [6, 22, 25, 29, 33, 34, 43, 50, 54, 55, 64, 70, 74, 78, 86, 164, 242, 299, 303, 558, 559, 560], "betweenness_centr": [6, 396, 558, 559], "edge_betweenness_centr": [6, 318, 558], "eigenvector_centr": [6, 367, 454, 558], "katz_centr": [6, 375, 463, 558], "closeness_centr": [6, 558], "color": [6, 19, 158, 236, 294, 320, 329, 341, 353, 361, 411, 412, 419, 421, 422, 439, 440, 448, 458, 459, 466, 523, 531, 534, 551, 552, 558, 559, 562], "graph_greedy_color": [6, 558], "graph_bipartite_edge_color": [6, 558], "graph_greedy_edge_color": [6, 558], "graph_misra_gries_edge_color": [6, 558], "two_color": [6, 558], "connect": [6, 19, 103, 159, 181, 237, 257, 313, 324, 326, 328, 329, 332, 340, 357, 384, 386, 394, 402, 404, 407, 414, 424, 425, 444, 447, 475, 477, 482, 490, 499, 500, 506, 507, 518, 526, 528, 553, 558, 559, 560, 562], "number_connected_compon": [6, 558], "connected_compon": [6, 558, 562], "node_connected_compon": [6, 558], "is_connect": [6, 558], "strongly_connected_compon": [6, 558], "number_weakly_connected_compon": [6, 558], "weakly_connected_compon": [6, 558], "is_weakly_connect": [6, 558], "cycle_basi": [6, 558], "simple_cycl": [6, 558], "digraph_find_cycl": [6, 558], "articulation_point": [6, 558], "bridg": [6, 558], "biconnected_compon": [6, 558], "chain_decomposit": [6, 43, 558], "all_simple_path": [6, 558], "all_pairs_all_simple_path": [6, 376, 465, 496, 558], "stoer_wagner_min_cut": [6, 558], "longest_simple_path": [6, 558], "is_bipartit": [6, 558], "has_path": [6, 558], "dag_longest_path": [6, 336, 337, 338, 558], "dag_longest_path_length": [6, 338, 558], "dag_weighted_longest_path": [6, 558], "dag_weighted_longest_path_length": [6, 558], "is_directed_acyclic_graph": 6, "transitive_reduct": [6, 558], "topological_gener": [6, 558], "oper": [6, 19, 385, 476, 527, 556, 557, 558, 560], "complement": [6, 358, 445, 558], "union": [6, 325, 385, 476, 511, 558], "cartesian_product": [6, 558, 562], "isomorph": [6, 19, 372, 373, 387, 460, 461, 478, 484, 485, 489, 529, 555, 558], "is_isomorph": [6, 372, 387, 460, 478, 529, 558], "is_subgraph_isomorph": [6, 373, 387, 461, 478, 529, 554, 558], "is_isomorphic_node_match": [6, 558], "vf2_map": [6, 558], "link": [6, 19, 375, 377, 463, 467, 493, 504, 516, 557, 558, 562], "analysi": [6, 19, 328, 558, 560], "pagerank": [6, 558], "hit": [6, 558], "max_weight_match": [6, 558], "is_match": [6, 558], "is_maximal_match": 6, "adjacency_matrix": [6, 557, 558], "transit": [6, 384, 475, 508, 521, 558, 562], "core_numb": [6, 558], "graph_line_graph": [6, 558], "metric_closur": [6, 558], "is_planar": [6, 558], "shortest": [6, 19, 306, 307, 308, 309, 310, 314, 316, 317, 318, 328, 344, 345, 346, 347, 348, 350, 351, 352, 357, 363, 364, 366, 369, 370, 371, 374, 378, 386, 389, 390, 396, 399, 400, 401, 430, 431, 432, 433, 434, 436, 437, 438, 444, 450, 451, 453, 455, 456, 457, 462, 468, 477, 492, 498, 505, 516, 528, 555, 556, 558, 559], "dijkstra_shortest_path": [6, 74, 556, 558], "dijkstra_shortest_path_length": [6, 70, 554, 558], "all_pairs_dijkstra_shortest_path": [6, 29, 558], "all_pairs_dijkstra_path_length": [6, 554, 558], "bellman_ford_shortest_path": [6, 558], "bellman_ford_shortest_path_length": [6, 558], "all_pairs_bellman_ford_shortest_path": [6, 558], "all_pairs_bellman_ford_path_length": [6, 558], "negative_edge_cycl": [6, 558], "find_negative_cycl": [6, 558], "distance_matrix": [6, 558], "floyd_warshal": [6, 558], "floyd_warshall_numpi": [6, 395, 557, 558], "floyd_warshall_successor_and_dist": [6, 558], "astar_shortest_path": [6, 558], "k_shortest_path_length": [6, 558], "num_shortest_paths_unweight": [6, 558], "unweighted_average_shortest_path_length": [6, 558], "all_shortest_path": [6, 558], "digraph_all_shortest_path": [6, 558], "travers": [6, 19, 320, 335, 336, 337, 338, 340, 341, 353, 360, 361, 362, 363, 388, 389, 439, 447, 448, 449, 450, 549, 550, 558], "dfs_edg": [6, 558], "dfs_search": [6, 361, 448, 537, 558], "bfs_successor": [6, 34, 558], "bfs_predecessor": [6, 33, 558], "bfs_search": [6, 353, 439, 530, 558], "dijkstra_search": [6, 543, 558], "topological_sort": [6, 495, 558, 560], "lexicographical_topological_sort": 6, "descend": [6, 519], "ancestor": [6, 519], "collect_run": [6, 558, 560], "collect_bicolor_run": 6, "dfsvisitor": [6, 341, 361, 448, 558], "bfsvisitor": [6, 320, 353, 439, 558], "dijkstravisitor": [6, 362, 388, 449, 558], "topologicalsort": [6, 558], "minimum_spanning_edg": [6, 558], "minimum_spanning_tre": [6, 558], "steiner_tre": [6, 558], "pydag": [19, 21, 176, 251, 483, 485, 558], "function": [19, 25, 29, 33, 34, 39, 43, 46, 54, 55, 64, 70, 74, 109, 110, 114, 115, 134, 136, 150, 151, 158, 159, 163, 187, 188, 192, 193, 212, 214, 228, 229, 236, 237, 241, 263, 264, 289, 294, 298, 299, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 315, 317, 318, 320, 322, 324, 326, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 359, 361, 362, 364, 365, 366, 367, 369, 370, 371, 372, 373, 375, 376, 377, 382, 384, 385, 386, 387, 388, 390, 391, 393, 395, 396, 397, 398, 399, 400, 401, 412, 422, 428, 429, 430, 431, 432, 433, 434, 438, 439, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 467, 472, 474, 475, 476, 477, 478, 480, 484, 485, 489, 493, 495, 496, 497, 499, 500, 501, 502, 504, 508, 509, 513, 515, 517, 518, 522, 525, 527, 528, 529, 538, 540, 551, 552, 554, 555, 556, 558, 559, 560, 562], "gener": [19, 25, 29, 33, 34, 43, 54, 55, 64, 70, 74, 78, 105, 109, 116, 117, 153, 154, 158, 159, 163, 183, 187, 194, 195, 231, 232, 236, 237, 241, 259, 263, 266, 267, 291, 293, 294, 298, 299, 303, 304, 306, 307, 308, 309, 310, 315, 317, 323, 327, 328, 342, 345, 347, 348, 354, 355, 356, 357, 364, 366, 377, 379, 380, 381, 382, 383, 387, 390, 391, 392, 393, 394, 396, 428, 430, 431, 432, 433, 434, 441, 442, 443, 444, 451, 453, 458, 459, 466, 467, 469, 470, 471, 472, 473, 478, 504, 509, 510, 512, 513, 514, 515, 519, 524, 525, 526, 529, 551, 552, 555, 556, 557, 558, 560], "random": [19, 315, 379, 382, 391, 392, 393, 394, 469, 472, 474, 509, 510, 515, 524, 525, 526, 555, 558, 562], "layout": [19, 78, 323, 327, 354, 356, 379, 380, 381, 382, 419, 441, 443, 458, 469, 470, 471, 472, 510, 512, 514, 515, 551, 552, 555, 557, 558, 562], "serial": [19, 555, 557, 558], "convert": [19, 502, 555, 558], "custom": [19, 25, 29, 33, 34, 39, 43, 46, 54, 55, 64, 70, 74, 303, 319, 321, 555, 557, 558, 559, 562], "type": [19, 21, 22, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 101, 102, 103, 104, 105, 106, 109, 110, 112, 114, 115, 116, 117, 118, 121, 123, 124, 125, 126, 127, 128, 133, 136, 137, 138, 139, 142, 143, 144, 145, 154, 155, 156, 157, 158, 159, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 187, 188, 190, 192, 193, 194, 195, 196, 199, 201, 202, 203, 204, 205, 206, 211, 214, 215, 216, 217, 220, 221, 222, 223, 232, 233, 234, 235, 236, 237, 240, 243, 244, 245, 246, 247, 248, 251, 254, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 284, 291, 292, 293, 294, 297, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 551, 552, 553, 555, 557, 558, 559, 562], "univers": [21, 22, 328, 558], "retworkx": [21, 555, 557, 558], "explicitli": [21, 22, 557, 558], "data": [21, 22, 33, 34, 50, 86, 88, 89, 90, 94, 95, 98, 99, 100, 106, 109, 110, 114, 115, 116, 117, 118, 119, 120, 122, 126, 127, 128, 134, 139, 143, 145, 151, 154, 155, 157, 158, 159, 161, 163, 164, 166, 167, 168, 172, 173, 176, 177, 178, 184, 187, 188, 192, 193, 194, 195, 196, 197, 198, 200, 204, 205, 206, 212, 217, 221, 223, 229, 232, 233, 235, 236, 237, 239, 241, 242, 243, 244, 245, 248, 251, 252, 253, 260, 263, 264, 266, 267, 268, 269, 270, 272, 275, 276, 277, 281, 284, 291, 292, 293, 294, 296, 298, 303, 314, 316, 319, 321, 325, 329, 330, 350, 351, 355, 363, 365, 372, 373, 377, 385, 387, 389, 395, 398, 436, 437, 442, 450, 452, 460, 461, 467, 476, 478, 484, 485, 489, 494, 495, 498, 501, 502, 504, 511, 516, 527, 529, 551, 552, 555, 558, 559, 560], "length": [25, 70, 306, 308, 316, 318, 336, 338, 344, 346, 351, 363, 369, 370, 371, 374, 376, 386, 389, 399, 400, 401, 403, 410, 420, 430, 432, 437, 450, 455, 456, 457, 462, 465, 477, 492, 496, 521, 528, 552, 558], "node": [25, 29, 33, 34, 39, 50, 55, 64, 65, 70, 74, 78, 82, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 162, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 240, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 272, 273, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 467, 468, 471, 472, 473, 474, 476, 477, 478, 479, 480, 484, 485, 486, 487, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 508, 509, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 544, 551, 552, 554, 556, 558, 559, 560], "i": [25, 29, 33, 34, 39, 43, 46, 50, 54, 55, 64, 65, 70, 74, 78, 86, 88, 89, 90, 94, 95, 98, 99, 101, 107, 108, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 127, 128, 133, 134, 135, 136, 137, 146, 150, 151, 152, 154, 155, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 172, 173, 176, 177, 179, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 205, 206, 211, 212, 213, 214, 215, 224, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 251, 252, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 279, 284, 285, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562], "map": [25, 29, 35, 39, 46, 50, 65, 70, 74, 78, 82, 86, 98, 101, 127, 155, 164, 176, 179, 205, 233, 242, 251, 255, 276, 292, 305, 318, 325, 328, 343, 355, 357, 378, 383, 387, 429, 442, 444, 468, 473, 474, 478, 505, 521, 529, 552, 557, 558, 559, 562], "integ": [25, 29, 33, 34, 39, 43, 46, 54, 55, 64, 70, 74, 86, 89, 90, 107, 108, 164, 167, 168, 185, 186, 242, 244, 245, 261, 262, 303, 322, 329, 335, 336, 419, 458, 494, 497, 523, 557, 558, 562], "indic": [25, 29, 39, 46, 50, 54, 55, 64, 65, 70, 74, 78, 82, 86, 89, 90, 92, 94, 95, 98, 101, 102, 103, 104, 107, 108, 109, 110, 112, 127, 128, 132, 134, 136, 137, 138, 144, 146, 154, 155, 156, 159, 162, 164, 167, 168, 170, 172, 173, 176, 179, 180, 181, 182, 185, 186, 187, 188, 190, 205, 206, 210, 212, 214, 215, 216, 222, 224, 232, 233, 234, 237, 240, 242, 244, 245, 247, 248, 251, 255, 256, 257, 258, 261, 262, 263, 264, 265, 275, 276, 277, 278, 279, 280, 284, 285, 291, 292, 293, 297, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 320, 323, 325, 326, 335, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 361, 362, 364, 367, 369, 375, 376, 378, 380, 383, 387, 388, 390, 395, 397, 399, 406, 410, 412, 413, 421, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 448, 449, 451, 453, 454, 455, 458, 459, 463, 464, 465, 466, 468, 470, 473, 478, 480, 491, 493, 494, 496, 500, 505, 508, 512, 516, 520, 523, 529, 531, 534, 552, 556, 557, 558, 559, 562], "pathlengthmap": [25, 316, 351, 363, 374, 437, 450, 462, 558], "234": 25, "2": [25, 29, 33, 34, 43, 50, 54, 55, 64, 70, 74, 78, 86, 88, 98, 101, 105, 109, 110, 116, 117, 118, 119, 129, 130, 131, 132, 146, 147, 151, 153, 163, 164, 166, 176, 179, 183, 187, 188, 194, 195, 196, 197, 207, 208, 209, 210, 224, 225, 229, 231, 241, 242, 243, 251, 255, 259, 263, 264, 266, 267, 268, 269, 285, 286, 298, 299, 303, 304, 306, 307, 308, 309, 311, 318, 320, 323, 326, 327, 341, 342, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 356, 361, 366, 369, 372, 373, 379, 380, 381, 382, 383, 384, 387, 393, 395, 396, 399, 402, 403, 404, 406, 410, 411, 413, 419, 420, 421, 423, 424, 428, 429, 430, 431, 432, 433, 435, 438, 439, 441, 442, 443, 448, 453, 455, 458, 459, 460, 461, 464, 466, 469, 470, 471, 472, 473, 478, 484, 485, 489, 509, 510, 512, 513, 514, 515, 516, 524, 525, 527, 529, 551, 552, 555, 557, 559, 560, 562], "34": 25, "python": [25, 29, 33, 34, 35, 39, 43, 46, 54, 55, 64, 70, 74, 82, 86, 87, 88, 89, 90, 91, 92, 93, 98, 99, 111, 113, 159, 164, 165, 166, 167, 168, 169, 170, 171, 176, 177, 189, 191, 237, 242, 243, 244, 245, 246, 247, 251, 252, 303, 314, 316, 319, 321, 335, 336, 337, 338, 350, 351, 363, 372, 373, 374, 376, 387, 389, 398, 436, 437, 450, 460, 461, 462, 465, 478, 484, 485, 489, 492, 495, 496, 501, 529, 554, 555, 556, 557, 558, 562], "protocol": [25, 29, 33, 34, 35, 39, 43, 46, 54, 55, 64, 70, 74, 82, 86, 164, 242, 303, 319, 321, 557, 558, 562], "dict": [25, 29, 35, 39, 46, 50, 65, 70, 74, 78, 82, 94, 95, 98, 158, 164, 172, 173, 176, 236, 242, 248, 251, 294, 306, 307, 308, 309, 317, 318, 322, 328, 333, 344, 345, 346, 347, 352, 359, 364, 366, 367, 369, 374, 375, 382, 389, 390, 396, 397, 399, 411, 412, 421, 422, 430, 431, 432, 433, 438, 440, 446, 451, 453, 454, 455, 458, 459, 462, 463, 464, 466, 472, 474, 480, 492, 493, 508, 515, 521, 523, 551, 552, 557, 558, 562], "rx": [25, 29, 33, 34, 43, 54, 55, 64, 70, 74, 86, 98, 146, 153, 158, 163, 164, 176, 224, 231, 236, 241, 242, 251, 285, 294, 298, 299, 303, 320, 341, 353, 361, 439, 448, 458, 459, 464, 465, 466, 551, 552, 556, 557, 558, 559, 560, 562], "directed_path_graph": [25, 29, 33, 34, 54, 55, 64, 70, 74, 163, 241, 299, 303, 355, 383, 387, 552, 558, 560, 562], "5": [25, 29, 33, 34, 54, 55, 64, 70, 74, 78, 86, 110, 153, 163, 164, 188, 231, 241, 242, 264, 298, 299, 303, 367, 397, 404, 405, 407, 408, 409, 417, 418, 419, 454, 458, 459, 466, 480, 555, 556, 559, 560, 562], "edg": [25, 29, 35, 43, 46, 50, 54, 55, 70, 74, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 140, 142, 143, 146, 147, 148, 149, 151, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 218, 220, 221, 224, 225, 226, 227, 229, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 282, 284, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 303, 304, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 320, 322, 324, 326, 329, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 353, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 377, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 436, 437, 439, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 466, 467, 472, 475, 476, 477, 478, 480, 484, 486, 487, 488, 489, 492, 493, 495, 497, 498, 499, 500, 501, 504, 508, 509, 511, 515, 516, 517, 521, 522, 524, 525, 526, 527, 528, 529, 531, 533, 534, 535, 536, 538, 540, 541, 542, 545, 546, 547, 548, 551, 552, 554, 556, 558, 559, 560], "all_pairs_dijkstra_shortest_path_length": 25, "third_node_shortest_path_length": 25, "pathmap": [29, 317, 558], "third_node_shortest_path": 29, "sequenc": [33, 34, 43, 54, 55, 64, 303, 319, 321, 376, 465, 496, 552, 557, 558, 559, 560, 562], "tupl": [33, 34, 50, 55, 82, 89, 90, 98, 101, 104, 105, 107, 108, 121, 126, 127, 143, 162, 167, 168, 176, 179, 182, 183, 185, 186, 199, 204, 205, 221, 240, 244, 245, 251, 252, 255, 258, 259, 261, 262, 271, 275, 276, 284, 297, 303, 323, 325, 327, 340, 354, 355, 356, 360, 371, 379, 380, 381, 383, 401, 441, 442, 443, 447, 457, 464, 469, 470, 471, 473, 474, 480, 486, 487, 497, 510, 512, 514, 517, 521, 552, 556, 557, 558], "predecessor_a": 33, "predecessor_b": 33, "payload": [33, 34, 50, 86, 90, 100, 109, 110, 114, 115, 128, 129, 130, 131, 132, 134, 151, 154, 155, 159, 160, 161, 162, 163, 164, 168, 178, 187, 188, 192, 193, 206, 207, 208, 209, 210, 212, 229, 232, 233, 237, 238, 239, 240, 241, 242, 243, 244, 245, 253, 261, 262, 263, 264, 277, 291, 292, 293, 295, 296, 297, 298, 303, 325, 329, 330, 355, 365, 367, 374, 375, 377, 385, 395, 397, 442, 452, 454, 462, 463, 467, 476, 480, 492, 493, 498, 502, 504, 508, 516, 527, 551, 552, 557, 558, 559, 560], "index": [33, 34, 43, 50, 54, 55, 64, 86, 87, 88, 91, 93, 94, 95, 98, 99, 101, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 164, 165, 166, 169, 171, 172, 173, 176, 177, 179, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 242, 243, 246, 248, 251, 252, 254, 255, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 284, 286, 287, 288, 289, 290, 291, 292, 295, 296, 303, 310, 311, 312, 314, 316, 317, 318, 319, 321, 324, 326, 328, 333, 334, 339, 340, 348, 349, 350, 351, 357, 359, 360, 363, 364, 368, 374, 375, 389, 390, 434, 435, 436, 437, 444, 446, 447, 450, 451, 458, 462, 463, 479, 486, 487, 492, 493, 494, 503, 517, 521, 556, 557, 558, 559, 560, 562], "iter": [33, 34, 43, 54, 55, 64, 65, 70, 74, 99, 129, 130, 131, 132, 134, 153, 155, 177, 207, 208, 209, 210, 212, 231, 233, 252, 292, 299, 303, 340, 360, 367, 375, 382, 387, 397, 447, 454, 463, 472, 478, 480, 493, 508, 515, 529, 557, 558, 560], "wrap": [33, 34, 43, 54, 55, 64, 70, 74, 303, 558], "yield": [33, 34, 43, 54, 55, 64, 65, 70, 74, 303, 558], "order": [33, 34, 43, 54, 55, 64, 65, 70, 74, 99, 112, 155, 177, 190, 233, 244, 252, 262, 265, 292, 303, 319, 321, 335, 336, 337, 338, 340, 353, 360, 361, 362, 372, 373, 376, 387, 403, 406, 439, 447, 448, 449, 460, 461, 465, 478, 484, 485, 489, 495, 496, 508, 529, 530, 537, 543, 558, 560, 562], "bfs_succ": [33, 34], "third_el": [33, 34, 54, 55, 64, 70, 74, 303], "bfs_iter": [33, 34], "first_el": [33, 34, 54, 55, 64, 303], "second_el": [33, 34, 54, 55, 64, 303], "successor_a": 34, "successor_b": 34, "repres": [35, 50, 55, 65, 74, 78, 82, 86, 154, 155, 164, 232, 233, 291, 292, 303, 306, 307, 308, 309, 310, 314, 316, 317, 324, 326, 344, 345, 346, 347, 348, 350, 351, 362, 363, 364, 365, 376, 377, 380, 382, 387, 388, 389, 390, 398, 430, 431, 432, 433, 434, 436, 437, 449, 450, 451, 452, 458, 464, 465, 467, 470, 472, 474, 478, 496, 501, 504, 508, 512, 515, 521, 529, 554, 558, 560], "endpoint": [35, 55, 121, 128, 199, 206, 252, 271, 275, 276, 277, 284, 303, 318, 322, 352, 438, 486, 558, 562], "biconnect": [35, 313, 322, 558], "compon": [35, 313, 320, 322, 324, 326, 328, 332, 340, 341, 353, 357, 360, 361, 362, 388, 439, 444, 447, 448, 449, 499, 503, 506, 507, 518, 553, 558], "belong": [35, 322, 519, 558], "float": [39, 46, 70, 116, 117, 194, 195, 266, 267, 304, 306, 307, 308, 309, 310, 314, 316, 317, 323, 327, 337, 338, 342, 344, 345, 346, 347, 348, 350, 351, 354, 356, 362, 363, 364, 365, 367, 369, 370, 371, 374, 375, 379, 380, 381, 382, 384, 386, 388, 389, 390, 393, 394, 395, 397, 398, 399, 400, 401, 428, 430, 431, 432, 433, 434, 436, 437, 441, 443, 449, 450, 451, 452, 454, 455, 456, 457, 462, 463, 469, 470, 471, 472, 475, 477, 480, 492, 493, 498, 499, 500, 501, 508, 509, 510, 512, 514, 515, 516, 517, 522, 525, 526, 528, 552, 556, 557, 558, 559], "between": [39, 46, 86, 88, 94, 95, 103, 105, 118, 119, 129, 130, 131, 132, 134, 147, 149, 155, 159, 160, 164, 166, 172, 173, 181, 183, 196, 197, 207, 208, 209, 210, 212, 225, 227, 233, 237, 238, 242, 243, 244, 245, 248, 252, 257, 259, 261, 262, 268, 269, 273, 286, 288, 292, 295, 304, 305, 310, 311, 314, 318, 328, 342, 343, 348, 349, 350, 352, 357, 366, 367, 370, 371, 375, 382, 385, 386, 387, 393, 394, 395, 396, 397, 400, 401, 406, 408, 410, 412, 413, 415, 416, 421, 428, 429, 434, 435, 436, 438, 444, 453, 454, 456, 457, 463, 464, 472, 476, 477, 478, 479, 480, 493, 495, 498, 508, 509, 515, 516, 525, 526, 527, 528, 529, 538, 554, 555, 556, 557, 558, 560, 561, 562], "score": [39, 46, 318, 352, 366, 367, 375, 396, 397, 438, 453, 454, 463, 480, 493, 508, 544, 558], "edgelist": [43, 104, 182, 258, 326, 340, 360, 368, 447, 474, 557, 558], "instanc": [43, 99, 153, 164, 177, 231, 242, 252, 299, 560], "hexagonal_lattice_graph": [43, 558, 559], "third_chain": 43, "chains_it": 43, "first_chain": 43, "second_chain": 43, "weight": [50, 86, 98, 99, 100, 101, 104, 107, 108, 112, 114, 115, 116, 117, 135, 146, 151, 153, 154, 155, 159, 160, 161, 162, 163, 164, 176, 177, 178, 179, 182, 185, 186, 190, 192, 193, 194, 195, 213, 224, 229, 231, 232, 233, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 255, 258, 261, 262, 265, 266, 267, 285, 291, 292, 293, 295, 296, 297, 298, 303, 304, 306, 307, 308, 309, 310, 315, 316, 317, 325, 329, 330, 335, 336, 337, 338, 342, 344, 345, 346, 347, 348, 350, 351, 355, 362, 363, 364, 365, 367, 369, 370, 371, 374, 375, 382, 385, 388, 389, 390, 391, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 414, 415, 416, 418, 420, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 436, 437, 442, 449, 450, 451, 452, 454, 455, 456, 457, 462, 463, 472, 476, 480, 493, 497, 498, 499, 500, 508, 515, 516, 517, 527, 551, 552, 554, 556, 557, 558, 560, 562], "effici": [50, 78, 376, 393, 465, 496, 497, 525, 558], "behav": [50, 78, 86, 99, 177, 252, 305, 311, 343, 349, 429, 435, 562], "drop": [50, 78, 555, 558], "replac": [50, 78, 99, 154, 155, 177, 232, 233, 252, 291, 292, 555, 558, 560, 562], "readonli": [50, 78], "edge_indic": [54, 558, 562], "edges_it": [54, 55, 70, 74, 303], "node_index_a": [55, 303], "node_index_b": [55, 303], "edge_list": [55, 105, 107, 108, 163, 183, 185, 186, 241, 252, 259, 261, 262, 298, 464, 552, 557, 558], "node_indic": [64, 86, 137, 164, 215, 242, 279, 458, 464, 558, 559, 562], "nodes_it": 64, "though": 65, "unord": [65, 155, 233, 292, 475, 562], "when": [65, 86, 88, 90, 98, 99, 118, 119, 120, 121, 122, 134, 155, 159, 160, 161, 164, 166, 168, 176, 177, 196, 197, 198, 199, 200, 212, 233, 237, 238, 239, 242, 245, 251, 252, 268, 269, 270, 271, 272, 292, 295, 296, 299, 306, 307, 310, 316, 317, 344, 345, 346, 347, 348, 350, 351, 363, 364, 367, 374, 375, 389, 392, 393, 397, 398, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 432, 433, 434, 436, 437, 450, 451, 454, 462, 463, 480, 493, 494, 495, 498, 502, 503, 508, 511, 516, 524, 525, 532, 539, 544, 551, 555, 557, 558, 562], "sort": [65, 299, 495, 519, 520, 558, 560], "24": [70, 554, 558], "first_target": [70, 74], "first_path": [70, 74], "second_target": [70, 74], "second_path": [70, 74], "node_c": [74, 98, 176, 251, 464, 558], "node_a": [74, 98, 103, 118, 119, 123, 176, 181, 196, 197, 201, 243, 244, 245, 251, 257, 261, 262, 268, 269, 273, 286, 464, 557, 558], "node_b": [74, 98, 103, 118, 119, 123, 176, 181, 196, 197, 201, 243, 244, 245, 251, 257, 261, 262, 268, 269, 273, 286, 464, 557, 558], "2d": 78, "posit": [78, 134, 155, 212, 233, 292, 306, 307, 308, 309, 323, 327, 335, 336, 337, 338, 344, 345, 346, 347, 354, 356, 372, 373, 379, 380, 381, 382, 387, 430, 431, 432, 433, 441, 443, 460, 461, 469, 470, 471, 472, 478, 484, 485, 489, 509, 510, 512, 514, 515, 529, 552, 558], "check_cycl": [86, 99, 164, 177, 299, 558, 560], "fals": [86, 95, 99, 109, 123, 124, 127, 128, 146, 154, 159, 164, 173, 177, 187, 201, 202, 205, 206, 224, 232, 237, 242, 243, 244, 245, 261, 262, 263, 273, 274, 285, 291, 299, 302, 310, 317, 318, 323, 329, 330, 348, 352, 354, 365, 369, 370, 371, 372, 373, 381, 382, 385, 386, 387, 390, 395, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 438, 441, 460, 461, 471, 472, 476, 477, 478, 479, 481, 483, 484, 485, 489, 494, 497, 501, 502, 514, 515, 527, 528, 529, 552, 557, 558, 560, 562], "multigraph": [86, 88, 94, 95, 99, 105, 159, 164, 166, 172, 173, 177, 183, 237, 242, 243, 244, 245, 248, 252, 259, 261, 262, 331, 358, 367, 375, 392, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 440, 445, 454, 463, 480, 493, 497, 508, 524, 555, 557, 558], "true": [86, 88, 95, 98, 99, 114, 115, 123, 124, 127, 128, 133, 146, 151, 154, 155, 159, 164, 166, 173, 176, 177, 192, 193, 201, 202, 205, 206, 211, 224, 229, 232, 233, 237, 242, 251, 273, 274, 285, 291, 292, 299, 302, 314, 317, 318, 323, 328, 329, 331, 350, 352, 354, 357, 358, 364, 365, 366, 369, 370, 371, 372, 373, 381, 382, 385, 386, 387, 390, 395, 396, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 438, 441, 444, 445, 451, 453, 460, 461, 471, 472, 476, 477, 478, 479, 480, 481, 483, 484, 485, 489, 494, 497, 501, 502, 514, 515, 527, 528, 529, 552, 557, 558, 559, 560, 562], "attr": [86, 154, 164, 232, 242, 291, 377, 467, 504, 511, 557, 558, 562], "none": [86, 90, 98, 99, 107, 108, 112, 134, 146, 151, 154, 155, 158, 159, 163, 164, 168, 176, 177, 185, 186, 190, 212, 224, 229, 232, 233, 236, 237, 241, 242, 245, 251, 252, 261, 262, 265, 285, 291, 292, 294, 298, 304, 305, 310, 311, 315, 316, 317, 320, 323, 326, 327, 329, 334, 335, 336, 340, 341, 342, 343, 348, 349, 351, 353, 354, 356, 360, 361, 362, 363, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 387, 389, 390, 391, 392, 393, 394, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 414, 415, 416, 418, 420, 424, 425, 426, 427, 428, 429, 434, 435, 437, 439, 440, 441, 443, 447, 448, 449, 450, 454, 455, 456, 457, 458, 460, 461, 462, 463, 465, 467, 470, 471, 472, 474, 478, 480, 484, 489, 492, 493, 496, 497, 499, 500, 504, 508, 509, 510, 512, 514, 515, 517, 523, 524, 525, 526, 529, 551, 552, 557, 558, 560, 562], "direct": [86, 95, 103, 153, 159, 164, 173, 181, 231, 237, 299, 312, 320, 339, 341, 342, 353, 358, 359, 361, 362, 365, 369, 370, 371, 372, 373, 382, 384, 385, 386, 392, 393, 394, 395, 401, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 421, 472, 491, 495, 497, 502, 507, 511, 515, 518, 521, 523, 528, 535, 552, 553, 555, 557, 558, 561], "acycl": [86, 164, 521, 555, 558, 561], "alia": [86, 558], "ident": [86, 134, 137, 212, 215, 279, 402, 557, 558, 562], "interchang": 86, "sole": [86, 558], "backward": [86, 137, 215, 279, 353, 361, 362, 439, 448, 449, 558], "prior": [86, 556, 557, 558], "4": [86, 98, 110, 163, 164, 176, 188, 241, 242, 251, 264, 298, 299, 305, 306, 307, 308, 309, 343, 344, 345, 346, 347, 369, 370, 371, 376, 384, 393, 399, 400, 401, 402, 403, 406, 414, 419, 424, 425, 429, 455, 456, 457, 458, 459, 465, 466, 474, 475, 496, 513, 517, 522, 525, 555, 557, 559, 562], "releas": [86, 137, 215, 279, 555, 556, 557], "although": [86, 155, 164, 233, 242, 292, 558], "rare": [86, 164, 242], "stabl": [86, 164, 242, 376, 465, 496, 513, 558, 562], "lifetim": [86, 164, 242, 562], "hole": [86, 164, 242, 558, 562], "reus": [86, 164, 242, 562], "add_nodes_from": [86, 109, 110, 164, 187, 188, 242, 251, 263, 264, 557, 558, 560, 562], "rang": [86, 109, 110, 164, 187, 188, 242, 263, 264, 551, 558, 559, 560, 562], "remove_nod": [86, 164, 242, 562], "print": [86, 163, 164, 241, 242, 298, 299, 320, 341, 353, 361, 439, 448, 558, 559, 560, 562], "res_manu": [86, 164, 242], "add_par": [86, 88, 164, 166, 560], "6": [86, 164, 242, 367, 375, 382, 397, 412, 419, 422, 440, 454, 458, 459, 463, 466, 472, 493, 508, 515, 555, 560, 562], "ad": [86, 88, 89, 90, 98, 107, 108, 134, 135, 153, 159, 164, 166, 167, 168, 176, 185, 186, 212, 213, 231, 237, 242, 244, 245, 251, 261, 262, 315, 391, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 487, 557, 558, 560, 562], "new": [86, 87, 88, 89, 90, 91, 92, 93, 98, 99, 105, 116, 117, 134, 135, 146, 153, 154, 159, 164, 165, 166, 167, 168, 169, 170, 171, 176, 177, 183, 194, 195, 212, 213, 224, 231, 232, 237, 242, 244, 245, 246, 247, 251, 252, 259, 266, 267, 285, 291, 293, 301, 315, 325, 355, 375, 383, 385, 391, 442, 463, 464, 473, 476, 493, 500, 527, 556, 557, 560, 562], "nodeindic": [86, 92, 110, 136, 137, 138, 144, 156, 164, 170, 188, 214, 215, 216, 222, 234, 242, 247, 264, 278, 279, 280, 314, 335, 337, 350, 376, 398, 436, 465, 491, 496, 517, 520, 558, 562], "arbitrari": [86, 164, 242, 368, 398], "data_payload": [86, 164, 242], "node_index": [86, 126, 143, 164, 204, 221, 242, 275, 284, 558], "add_nod": [86, 98, 99, 164, 176, 177, 242, 252, 464, 556, 557, 558, 560, 562], "real": [86, 164, 557, 560], "introduc": [86, 99, 164, 177, 252, 558, 560, 562], "By": [86, 116, 117, 127, 128, 151, 154, 164, 194, 195, 205, 206, 229, 232, 242, 266, 267, 291, 299, 304, 305, 311, 342, 343, 349, 365, 373, 386, 395, 428, 429, 435, 452, 461, 477, 489, 508, 528, 530, 537, 543, 551, 552, 558, 562], "disabl": [86, 164, 242], "attribut": [86, 88, 154, 158, 164, 166, 232, 236, 242, 291, 294, 358, 377, 445, 467, 502, 504, 509, 511, 551, 552, 555, 558, 560], "creation": [86, 164, 242, 555, 562], "With": [86, 164, 557, 558, 560], "add_edg": [86, 126, 143, 164, 204, 221, 251, 275, 284, 464, 557, 558, 560, 562], "truli": [86, 164], "note": [86, 94, 95, 134, 147, 149, 154, 159, 164, 172, 173, 212, 225, 227, 232, 237, 248, 269, 286, 288, 291, 322, 325, 335, 336, 337, 338, 355, 373, 385, 422, 442, 458, 461, 476, 489, 497, 527, 551, 552, 555, 556, 557, 562], "add_edges_from": [86, 90, 108, 109, 164, 168, 186, 187, 245, 251, 262, 263, 556, 557, 558, 562], "add_edges_from_no_data": [86, 107, 164, 185, 261, 557, 558], "extend_from_edge_list": [86, 164, 320, 341, 353, 361, 439, 448, 557, 558, 562], "extend_from_weighted_edge_list": [86, 153, 164, 231, 557, 558], "come": [86, 164, 495, 554, 560], "penalti": [86, 164], "grow": [86, 164], "leverag": [86, 158, 164, 236, 294, 555, 558, 559, 562], "add_child": [86, 88, 98, 164, 166, 176, 560], "overhead": [86, 164, 558, 560], "parallel": [86, 99, 105, 124, 134, 159, 160, 164, 177, 183, 202, 212, 237, 238, 242, 244, 252, 259, 262, 274, 295, 313, 318, 322, 324, 326, 331, 333, 334, 342, 352, 358, 359, 365, 366, 367, 369, 370, 371, 375, 376, 384, 386, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 438, 445, 446, 452, 453, 454, 455, 456, 457, 463, 465, 474, 475, 477, 480, 493, 496, 497, 508, 522, 528, 558, 562], "kwarg": [86, 127, 128, 151, 164, 205, 206, 229, 242, 551, 552, 557, 558], "constructor": [86, 164, 242, 552, 558, 560, 562], "initi": [86, 164, 242, 299, 301, 315, 326, 341, 361, 382, 391, 448, 472, 515, 557, 558], "maximum": [86, 164, 242, 305, 311, 342, 343, 349, 367, 375, 376, 382, 392, 397, 403, 406, 428, 429, 435, 454, 463, 465, 466, 472, 480, 487, 493, 496, 497, 508, 515, 524, 552, 558], "32": [86, 164, 242, 551, 556, 558], "294": [86, 164, 242], "967": [86, 164, 242], "attempt": [86, 164, 242, 558, 560, 562], "than": [86, 112, 146, 164, 190, 224, 242, 265, 285, 302, 318, 322, 328, 352, 357, 366, 367, 373, 375, 376, 377, 392, 396, 397, 403, 406, 410, 418, 420, 438, 444, 453, 454, 461, 463, 465, 467, 474, 480, 489, 493, 496, 497, 504, 508, 513, 517, 521, 524, 557, 558, 559], "paramet": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 254, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 298, 299, 300, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 551, 552, 553, 557, 558], "bool": [86, 95, 99, 123, 124, 127, 128, 133, 146, 151, 159, 164, 173, 177, 201, 202, 205, 206, 211, 224, 229, 237, 242, 273, 274, 285, 299, 317, 318, 323, 328, 352, 354, 357, 364, 365, 366, 372, 373, 381, 382, 385, 386, 387, 390, 395, 396, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 438, 441, 444, 451, 453, 460, 461, 471, 472, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 494, 497, 501, 502, 514, 515, 527, 528, 529, 552], "runtim": [86, 164, 376, 465, 496, 558, 560], "detect": [86, 124, 164, 202, 274, 299], "multgraph": 86, "place": [86, 153, 164, 231, 242, 295, 296, 315, 391, 509, 558, 562], "digraph": [86, 164, 342, 557], "dagwouldcycl": [86, 99, 164, 177], "parent": [87, 88, 89, 90, 93, 95, 114, 126, 145, 147, 165, 166, 167, 168, 171, 173, 192, 204, 223, 225, 243, 245, 275, 286, 319, 321, 558], "obj": [87, 89, 91, 93, 99, 112, 165, 167, 169, 171, 177, 190, 244, 246, 252, 265], "child": [87, 88, 89, 90, 93, 115, 143, 147, 157, 165, 166, 167, 168, 171, 193, 221, 225, 235, 243, 245, 284, 286], "int": [87, 88, 89, 90, 91, 92, 93, 94, 95, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 142, 143, 144, 145, 147, 148, 150, 151, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 170, 171, 172, 173, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 220, 221, 222, 223, 225, 226, 228, 229, 233, 234, 235, 238, 239, 243, 244, 245, 246, 247, 248, 254, 265, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 284, 286, 287, 289, 292, 295, 296, 305, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 326, 334, 336, 337, 338, 339, 340, 341, 343, 348, 349, 350, 351, 352, 353, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 382, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 434, 435, 436, 437, 438, 439, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 468, 469, 472, 474, 477, 478, 479, 480, 484, 489, 492, 493, 497, 503, 505, 506, 507, 508, 509, 510, 515, 524, 525, 526, 528, 529, 552, 558], "attach": [87, 89, 90, 91, 92, 93, 165, 167, 168, 169, 170, 171, 244, 245, 246, 247, 315, 391, 557, 558], "duplic": [88, 166, 558], "obj_list": [89, 90, 92, 167, 168, 170, 244, 245, 247, 262], "neighbor": [94, 95, 114, 115, 144, 145, 156, 157, 172, 173, 192, 193, 222, 223, 234, 235, 248, 276, 340, 360, 447, 491, 557, 558], "dictionari": [94, 95, 98, 158, 172, 173, 176, 236, 248, 251, 294, 306, 307, 308, 309, 316, 317, 318, 322, 325, 328, 333, 344, 345, 346, 347, 351, 355, 357, 359, 363, 364, 369, 374, 375, 377, 382, 383, 389, 390, 399, 430, 431, 432, 433, 437, 440, 442, 444, 446, 450, 451, 455, 458, 459, 462, 463, 464, 466, 467, 472, 473, 492, 493, 502, 504, 508, 515, 523, 551, 552, 557, 558], "adjac": [94, 95, 111, 116, 117, 172, 173, 189, 194, 195, 248, 266, 267, 304, 342, 428, 464, 557, 558], "inbound": [94, 95, 125, 172, 173, 203, 248, 254], "outbound": [94, 95, 142, 172, 173, 220, 248, 558], "dat": [94, 172], "two": [94, 95, 135, 146, 159, 172, 173, 213, 224, 237, 252, 285, 310, 323, 325, 327, 329, 348, 354, 355, 356, 367, 370, 371, 375, 379, 380, 381, 383, 385, 387, 393, 394, 397, 400, 401, 402, 408, 415, 416, 434, 441, 442, 443, 454, 456, 457, 463, 464, 469, 470, 471, 473, 476, 478, 480, 486, 493, 508, 509, 510, 512, 514, 517, 523, 525, 526, 527, 529, 554, 558, 562], "share": [94, 95, 100, 172, 173, 178, 248, 252, 253, 385, 476, 486, 527, 558], "specifi": [94, 95, 99, 103, 105, 125, 129, 130, 131, 132, 134, 142, 147, 149, 155, 158, 159, 163, 164, 172, 173, 177, 181, 183, 203, 207, 208, 209, 210, 212, 220, 225, 227, 233, 236, 237, 241, 242, 248, 252, 254, 257, 259, 286, 288, 292, 294, 298, 304, 310, 315, 316, 317, 320, 323, 326, 340, 341, 342, 348, 351, 353, 354, 360, 361, 362, 363, 364, 367, 368, 372, 373, 374, 375, 377, 382, 386, 387, 388, 389, 390, 391, 397, 399, 400, 402, 404, 405, 407, 408, 410, 413, 414, 415, 416, 420, 423, 424, 425, 426, 427, 428, 434, 437, 439, 441, 447, 448, 449, 450, 451, 454, 458, 460, 461, 462, 463, 467, 472, 477, 478, 480, 484, 485, 489, 492, 493, 497, 499, 500, 504, 508, 509, 515, 517, 528, 529, 551, 552, 558, 562], "children": [95, 143, 173, 221, 319, 321, 418], "clear": [97, 175, 250, 558], "leav": [97, 99, 175, 177, 250, 252, 562], "intact": [97, 175, 250], "node_map": [98, 176, 251, 558], "node_map_func": [98, 176, 251], "edge_map_func": [98, 176, 251], "weight2": [98, 176, 251], "callabl": [98, 99, 111, 113, 134, 151, 155, 158, 159, 163, 176, 177, 189, 191, 212, 229, 233, 236, 237, 241, 251, 252, 292, 294, 298, 304, 306, 307, 308, 309, 314, 316, 335, 336, 337, 338, 342, 344, 345, 346, 347, 350, 351, 363, 367, 369, 370, 371, 372, 373, 374, 375, 377, 387, 389, 397, 398, 399, 400, 401, 428, 430, 431, 432, 433, 436, 437, 450, 454, 455, 456, 457, 458, 460, 461, 462, 463, 467, 478, 480, 484, 485, 489, 492, 493, 495, 497, 498, 499, 500, 501, 504, 508, 516, 517, 529, 551, 558], "singl": [98, 99, 111, 113, 134, 159, 176, 177, 189, 191, 212, 237, 248, 251, 252, 306, 307, 308, 309, 310, 316, 317, 318, 329, 330, 340, 344, 345, 346, 347, 348, 351, 352, 362, 363, 364, 366, 382, 388, 389, 390, 396, 411, 412, 421, 422, 430, 431, 432, 433, 434, 437, 438, 447, 449, 450, 451, 453, 472, 474, 475, 495, 497, 515, 516, 552, 555, 558, 559, 560, 562], "new_node_id": [98, 176, 251], "correspond": [98, 176, 370, 371, 400, 401, 456, 457, 464, 558, 562], "build": [98, 176, 251, 555, 556, 557, 558, 562], "visual": [98, 146, 158, 176, 224, 236, 251, 285, 294, 355, 383, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 442, 458, 473, 555, 558, 560, 562], "mpl_draw": [98, 146, 176, 224, 251, 285, 355, 383, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 442, 458, 473, 557, 558, 559, 560, 562], "b": [98, 109, 176, 187, 251, 263, 412, 422, 464, 556, 558, 560, 562], "c": [98, 109, 176, 187, 251, 263, 328, 357, 384, 444, 464, 466, 475, 480, 499, 554, 556, 557, 558, 560, 562], "with_label": [98, 176, 251, 552, 558, 562], "label": [98, 146, 176, 224, 251, 285, 322, 340, 360, 447, 552, 557, 558, 559, 560, 562], "str": [98, 146, 158, 163, 176, 224, 236, 241, 251, 285, 294, 298, 377, 467, 504, 511, 551, 552, 558, 560, 562], "edge_label": [98, 176, 251, 552, 557, 558, 562], "figur": [98, 146, 176, 224, 251, 285, 355, 383, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 442, 458, 473, 552, 558, 559, 560, 562], "size": [98, 146, 158, 176, 224, 236, 251, 285, 294, 355, 383, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 442, 458, 473, 516, 551, 552, 558, 559, 560, 562], "640x480": [98, 146, 176, 224, 251, 285, 355, 383, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 442, 458, 473, 552, 558, 559, 560, 562], "ax": [98, 146, 176, 224, 251, 285, 355, 383, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 442, 458, 473, 552, 558, 559, 560, 562], "second": [98, 118, 119, 160, 176, 196, 197, 238, 251, 268, 269, 273, 275, 276, 295, 325, 355, 371, 372, 373, 383, 385, 387, 401, 442, 457, 460, 461, 473, 476, 478, 480, 484, 485, 489, 527, 529, 554, 558, 562], "other_graph": [98, 176, 251, 558], "node_d": [98, 176, 251, 464, 558], "e": [98, 136, 176, 214, 251, 252, 366, 374, 384, 393, 396, 419, 453, 462, 474, 492, 494, 508, 517, 521, 525, 531, 534, 535, 536, 538, 541, 542, 558, 560, 562], "weight_combo_fn": [99, 159, 177, 237, 252, 558], "substitut": [99, 155, 177, 233, 252, 292], "ignor": [99, 105, 150, 152, 154, 177, 183, 228, 230, 232, 252, 259, 289, 290, 291, 329, 402, 404, 405, 407, 408, 410, 414, 415, 416, 420, 424, 425, 426, 427, 517, 560], "empti": [99, 127, 128, 177, 205, 206, 252, 276, 277, 301, 368, 376, 387, 392, 393, 409, 417, 465, 478, 482, 490, 496, 524, 525, 529, 558, 560, 562], "slower": [99, 177, 252], "associ": [99, 158, 177, 236, 252, 294, 551, 557], "valid": [99, 177, 419, 458, 486, 487, 552, 558], "contract": [99, 177, 252, 558], "inherit": [99, 177], "merg": [99, 135, 177, 213, 252, 385, 476, 527, 558], "occur": [99, 177, 244, 252, 262, 335, 336, 337, 338, 497], "incom": [99, 127, 128, 151, 177, 205, 206, 229, 335, 336, 337, 338, 558], "outgo": [99, 127, 128, 151, 177, 205, 206, 229, 558], "unspecifi": [99, 177, 252], "choos": [99, 177, 252, 552, 557], "arbitrarili": [99, 177, 252], "subject": [99, 177, 252], "chang": [99, 135, 177, 213, 252, 382, 419, 472, 515, 556, 558, 562], "shallow": [100, 178, 253, 558], "origin": [100, 129, 130, 131, 132, 159, 178, 207, 208, 209, 210, 237, 253, 349, 362, 388, 435, 449, 521, 555, 557, 558, 560], "edgeindexmap": [101, 127, 179, 205, 255, 276, 558, 562], "edgeindic": [102, 103, 109, 128, 180, 181, 187, 206, 256, 257, 263, 277, 558, 562], "induc": [105, 183, 259, 373, 387, 461, 478, 489, 516, 529, 558], "subgraph": [105, 183, 259, 322, 333, 359, 373, 387, 446, 461, 478, 484, 489, 494, 516, 529, 555, 558], "incid": [105, 127, 128, 183, 205, 206, 259, 276, 277, 313, 322, 558, 562], "silent": [105, 154, 183, 232, 259, 291], "extend": [107, 108, 185, 186, 261, 262, 315, 391, 558], "present": [107, 108, 120, 121, 127, 128, 134, 150, 151, 152, 154, 161, 185, 186, 198, 199, 205, 206, 212, 228, 229, 230, 232, 239, 261, 262, 270, 271, 276, 277, 289, 290, 291, 296, 376, 465, 496], "filter_funct": [109, 110, 187, 188, 263, 264], "filter": [109, 110, 114, 115, 187, 188, 192, 193, 263, 264, 329, 330, 558], "criteria": [109, 110, 187, 188, 263, 264, 558], "boolean": [109, 110, 111, 113, 114, 115, 187, 188, 189, 191, 192, 193, 263, 264, 314, 329, 330, 350, 387, 436, 478, 480, 497, 529, 558], "fit": [109, 110, 187, 188, 263, 264, 558], "complete_graph": [109, 187, 263, 424, 558], "def": [109, 110, 187, 188, 263, 264, 320, 341, 353, 361, 371, 401, 439, 448, 457, 551, 557, 558, 559, 560, 562], "my_filter_funct": [109, 110, 187, 188, 263, 264, 558], "assert": [109, 110, 153, 187, 188, 231, 263, 264, 459, 464, 466, 557, 558], "predic": [111, 113, 189, 191], "within": [112, 190, 265, 516, 558], "worst": [112, 190, 265], "o": [112, 158, 163, 190, 236, 241, 251, 265, 294, 298, 374, 385, 392, 393, 440, 462, 476, 492, 497, 524, 525, 527, 552, 558], "equal": [112, 135, 190, 213, 265, 305, 306, 307, 308, 309, 343, 344, 345, 346, 347, 369, 370, 371, 372, 373, 376, 384, 385, 399, 400, 401, 429, 455, 456, 457, 460, 461, 465, 474, 475, 476, 484, 485, 489, 496, 522, 527, 558], "found": [112, 190, 265, 335, 336, 337, 338, 340, 360, 368, 376, 387, 447, 465, 478, 496, 497, 513, 529, 556, 558, 559, 560], "predecessor": [113, 114, 129, 130, 144, 151, 191, 192, 207, 208, 222, 229, 301, 312, 319, 538, 558], "filter_fn": [114, 115, 192, 193, 329, 330, 560], "whose": [114, 115, 192, 193, 313, 324, 352, 366, 367, 375, 394, 396, 397, 438, 453, 454, 463, 480, 493, 494, 508, 516, 526, 531, 534, 558], "successor": [115, 131, 132, 136, 151, 156, 193, 209, 210, 214, 229, 234, 300, 321, 330, 339, 371, 401, 457, 558], "static": [116, 117, 146, 194, 195, 224, 266, 267, 285, 557, 558], "matrix": [116, 117, 194, 195, 266, 267, 304, 342, 365, 370, 371, 386, 395, 400, 401, 428, 452, 456, 457, 477, 508, 528, 558, 560], "null_valu": [116, 117, 194, 195, 266, 267, 304, 342, 365, 395, 428, 452, 558], "element": [116, 117, 146, 194, 195, 224, 266, 267, 276, 285, 325, 355, 365, 383, 405, 408, 415, 416, 426, 427, 442, 452, 473, 558], "construct": [116, 117, 164, 194, 195, 242, 266, 267, 464, 466, 494, 558, 562], "input": [116, 117, 151, 194, 195, 229, 266, 267, 304, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 322, 324, 325, 326, 328, 333, 334, 335, 336, 337, 338, 340, 342, 344, 345, 346, 347, 350, 351, 352, 355, 357, 359, 363, 365, 366, 367, 368, 375, 383, 384, 385, 386, 389, 390, 391, 395, 396, 397, 398, 403, 406, 428, 430, 431, 432, 433, 436, 437, 438, 440, 442, 444, 446, 447, 450, 453, 454, 458, 459, 463, 464, 466, 473, 474, 475, 476, 479, 480, 483, 491, 493, 498, 501, 502, 508, 511, 517, 518, 522, 523, 527, 528, 557, 558, 560, 562], "from_complex_adjacency_matrix": [116, 194, 266, 558], "numpi": [116, 117, 194, 195, 266, 267, 304, 342, 365, 370, 371, 395, 400, 401, 428, 452, 456, 457, 556, 557, 558], "float64": [116, 117, 194, 195, 266, 267, 557, 558], "complex": [116, 117, 194, 195, 266, 267, 384, 392, 524, 555, 558], "complex128": [116, 117, 194, 195, 266, 267], "ndarrai": [116, 117, 194, 195, 266, 267, 304, 342, 365, 370, 371, 395, 400, 401, 428, 452, 456, 457], "arrai": [116, 117, 194, 195, 266, 267, 304, 342, 428, 552, 557, 558], "dimension": [116, 117, 194, 195, 266, 267, 557, 558], "np": [116, 117, 194, 195, 266, 267, 370, 371, 393, 400, 401, 456, 457, 458, 525, 557, 558], "null": [116, 117, 194, 195, 266, 267, 304, 342, 365, 395, 428, 452, 558], "0j": [117, 195, 267, 558], "from_adjacency_matrix": [117, 195, 267, 557, 558, 562], "noedgebetweennod": [118, 119, 147, 149, 160, 196, 197, 225, 227, 238, 268, 269, 286, 288, 295], "edge_index": [120, 121, 161, 198, 199, 239, 270, 271, 296, 562], "indexerror": [120, 121, 122, 161, 198, 199, 200, 239, 270, 271, 272, 296, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 424, 425, 426, 427, 558], "invalid": [122, 200, 272, 333, 458, 503, 522, 558], "destin": [123, 201, 317, 364, 374, 390, 431, 433, 451, 462, 492, 558], "degre": [125, 142, 203, 220, 315, 333, 359, 391, 446, 458, 466, 491, 557, 558, 562], "recreat": [126, 143, 204, 221, 275, 284, 558], "param": [126, 204, 318, 352, 366, 396, 438, 453], "parent_index": [126, 204, 275], "edge_data": [126, 143, 204, 221, 275, 284], "weightededgelist": [126, 143, 162, 204, 221, 240, 275, 284, 297, 499, 558], "all_edg": [127, 128, 205, 206], "later": [128, 206, 277], "retriev": [128, 206, 277, 387, 478, 529, 558], "get_edge_data_by_index": [128, 206, 277, 558, 562], "get_edge_endpoints_by_index": [128, 206, 277, 558, 562], "ref_nod": [129, 130, 131, 132, 207, 208, 209, 210], "essenti": [129, 130, 131, 132, 207, 208, 209, 210], "copi": [129, 130, 131, 132, 134, 154, 155, 207, 208, 209, 210, 212, 232, 233, 291, 292, 293, 557, 558], "symmetr": [133, 134, 211, 212, 558], "edge_payload_fn": [134, 212], "make": [134, 212, 307, 309, 317, 345, 347, 364, 390, 431, 433, 451, 552, 556, 558, 560, 562], "revers": [134, 212, 557, 558], "guarante": [134, 212, 367, 375, 376, 397, 454, 463, 465, 480, 493, 496, 508, 519, 557, 558, 559, 562], "execut": [134, 212, 369, 370, 371, 376, 399, 400, 401, 455, 456, 457, 465, 496, 558, 560], "edge_payload": [134, 212], "typic": [134, 212, 557, 562], "lower": [134, 212, 381, 393, 471, 514, 525, 558], "v": [135, 213, 318, 320, 328, 340, 341, 352, 353, 357, 360, 361, 362, 366, 374, 386, 388, 396, 438, 439, 444, 447, 448, 449, 453, 462, 477, 492, 495, 521, 528, 532, 533, 538, 539, 540, 544, 548, 552, 558, 559, 560], "successor_indic": [136, 214, 558], "prefer": [137, 215, 279], "earlier": [137, 215, 279, 353, 361, 362, 439, 448, 449, 560], "child_index": [143, 221, 284], "indici": [144, 152, 156, 222, 230, 234, 278, 290], "delimin": [146, 163, 224, 241, 285, 298], "file": [146, 158, 163, 224, 236, 241, 285, 294, 298, 377, 467, 504, 511, 551, 557, 558, 562], "seper": [146, 224, 285], "3rd": [146, 224, 285], "charact": [146, 163, 224, 241, 285, 298], "whitespac": [146, 224, 285, 558], "separ": [146, 224, 285, 551, 557, 558], "field": [146, 224, 285, 377, 467, 504, 511], "uniqu": [146, 224, 285, 404, 407, 557, 558, 562], "identifi": [146, 148, 224, 226, 276, 285, 287, 558, 562], "tempfil": [146, 158, 163, 224, 236, 241, 251, 285, 294, 298, 558, 562], "namedtemporaryfil": [146, 224, 285, 558, 562], "wt": [146, 224, 285, 558, 562], "fd": [146, 224, 285, 558, 562], "flush": [146, 224, 285, 558, 562], "index_list": [149, 152, 227, 230, 288, 290], "pair": [149, 227, 288, 293, 305, 318, 324, 343, 352, 366, 369, 370, 371, 376, 382, 386, 396, 399, 400, 401, 404, 407, 429, 438, 453, 455, 456, 457, 465, 472, 475, 477, 496, 515, 516, 528, 555, 558, 559, 562], "effect": [150, 151, 228, 229, 289, 392, 524], "use_outgo": [151, 229], "retain": [151, 229, 558], "ingor": [151, 229, 558], "willl": [151, 229], "lambda": [151, 158, 229, 236, 294, 304, 335, 336, 337, 338, 342, 369, 370, 371, 372, 373, 376, 399, 400, 401, 411, 412, 421, 422, 428, 455, 456, 457, 460, 461, 465, 484, 485, 489, 496, 497, 499, 500, 517, 552, 557, 558, 560], "in_edg": [151, 229, 558], "out_edg": [151, 229, 558, 560], "had": [151, 229, 558], "opposit": [153, 231], "weighted_edge_list": [153, 231, 303, 557, 558], "preserve_attr": [154, 232, 291], "edge_map_fn": [155, 233, 292, 558], "node_filt": [155, 233, 292], "edge_weight_map": [155, 233, 292], "nodemap": [155, 233, 292, 387, 478, 529, 558], "determinist": [155, 233, 292, 558], "succesor": [156, 234], "node_attr": [158, 236, 294, 377, 467, 504, 551, 558], "edge_attr": [158, 236, 294, 377, 467, 504, 558], "graph_attr": [158, 236, 294, 377, 467, 504, 551], "filenam": [158, 236, 294, 551], "dot": [158, 236, 294, 551, 558], "typeerror": [158, 163, 236, 241, 294, 298, 333, 353, 361, 362, 413, 419, 423, 439, 448, 449, 522, 558], "unfortun": [158, 236, 294], "graphviz": [158, 236, 294, 551, 557, 558, 559, 562], "pydot": [158, 236, 251, 294, 551, 557, 558], "pil": [158, 236, 251, 294, 411, 412, 421, 422, 551, 558, 559, 560, 562], "directed_gnp_random_graph": [158, 236, 558], "15": [158, 236, 294, 418, 419, 516, 558, 559], "25": [158, 236, 294, 318, 352, 438, 552, 558], "dot_str": [158, 236, 294, 558], "fillcolor": [158, 236, 294, 411, 412, 421, 422, 551, 558, 559], "lightblu": [158, 236, 294, 411, 412, 421, 422, 558], "style": [158, 236, 294, 411, 412, 421, 422, 551, 552, 558, 559, 562], "fill": [158, 236, 294, 410, 411, 412, 420, 421, 422, 551, 558, 559, 562], "graph_from_dot_data": [158, 236, 294, 558], "temporarydirectori": [158, 236, 294, 558], "tmpdirnam": [158, 236, 294, 558], "tmp_path": [158, 236, 294, 558], "join": [158, 163, 236, 241, 294, 298, 402, 509, 558], "png": [158, 236, 294, 551, 558], "write_png": [158, 236, 294, 558], "pngimageplugin": [158, 236, 294, 411, 412, 421, 422, 551, 558, 559, 560, 562], "pngimagefil": [158, 236, 294, 411, 412, 421, 422, 551, 558, 559, 560, 562], "rgba": [158, 236, 294, 411, 412, 421, 422, 552, 558, 559, 560, 562], "1395x1307": 158, "undirect": [159, 237, 242, 275, 284, 313, 317, 320, 322, 324, 326, 332, 340, 341, 355, 364, 365, 369, 370, 371, 383, 386, 390, 395, 401, 402, 403, 404, 405, 417, 420, 421, 422, 423, 424, 425, 426, 427, 439, 442, 445, 447, 448, 449, 451, 452, 460, 461, 473, 475, 476, 479, 488, 497, 499, 500, 506, 524, 525, 526, 528, 535, 538, 541, 558, 560, 562], "bidirect": [159, 237, 293, 365, 369, 370, 371, 386, 395, 401, 406, 408, 410, 411, 412, 413, 415, 416, 421, 528, 558], "condens": [159, 237, 558], "largest": [159, 237, 458, 558], "kept": [159, 237], "inplac": [160, 238, 558], "update_edge_by_index": [160, 238, 295, 558, 562], "weight_fn": [163, 241, 298, 304, 310, 317, 335, 336, 337, 338, 342, 348, 362, 364, 367, 369, 370, 371, 375, 382, 388, 390, 397, 399, 400, 401, 428, 434, 449, 451, 454, 455, 456, 457, 463, 472, 480, 493, 497, 498, 499, 500, 508, 515, 516, 517, 556, 557, 558], "callback": [163, 241, 298, 320, 341, 353, 361, 362, 388, 439, 448, 449, 458, 552, 557, 558], "gettempdir": [163, 241, 298], "rt": [163, 241, 298], "edge_fil": [163, 241, 298], "metadata": [164, 242, 562], "keyword": [164, 242, 509, 558], "source_path": [164, 242], "tmp": [164, 242], "csv": [164, 242], "new_path": [164, 242], "old_path": [164, 242], "assign": [164, 242, 322, 342, 428, 508, 557, 558, 559, 562], "940x1019": 236, "last": [244, 262, 340, 360, 447, 554, 558, 560], "callabbl": 251, "node_": 251, "represent": [252, 382, 472, 515, 558, 560], "rest": [252, 558], "get_all_edge_data": 269, "alwai": [275, 276, 284, 392, 393, 524, 525, 557, 558], "easili": [276, 558, 562], "undirected_gnp_random_graph": [294, 558], "537x635": 294, "path_graph": [298, 442, 473, 478, 529, 558, 560, 562], "topolog": [299, 335, 336, 337, 338, 495, 519, 520, 558, 560], "is_act": 299, "get_readi": [299, 300, 302], "sorter": 299, "underli": 299, "mutat": [299, 320, 341, 353, 361, 362, 388, 439, 448, 449, 558, 562], "recommend": 299, "daghascycl": [299, 335, 336, 337, 338, 519, 520], "block": 299, "progress": [299, 301, 302], "unblock": 300, "valueerror": [300, 310, 343, 346, 347, 348, 350, 363, 364, 374, 398, 429, 432, 433, 434, 436, 450, 451, 462, 498, 516, 558], "yet": [300, 302, 558], "further": 301, "haven": 302, "default_weight": [304, 310, 317, 342, 348, 364, 367, 369, 370, 371, 375, 382, 390, 397, 399, 400, 401, 428, 434, 451, 454, 455, 456, 457, 463, 472, 493, 497, 499, 500, 508, 515], "sum": [304, 316, 318, 334, 342, 351, 352, 363, 366, 367, 375, 389, 396, 397, 428, 437, 438, 450, 453, 454, 463, 480, 493, 497, 508, 516, 558], "tell": [304, 342, 369, 370, 371, 399, 400, 401, 428, 455, 456, 457, 499, 500], "rust": [304, 342, 369, 370, 371, 399, 400, 401, 428, 455, 456, 457, 499, 500, 555, 556, 557, 558], "extract": [304, 342, 362, 369, 370, 371, 388, 399, 400, 401, 428, 449, 455, 456, 457, 499, 500], "numer": [304, 342, 369, 370, 371, 399, 400, 401, 428, 455, 456, 457, 499, 500, 552, 555, 557, 562], "cast": [304, 342, 369, 370, 371, 399, 400, 401, 428, 455, 456, 457, 498, 499, 500, 516, 552, 558], "absenc": [304, 342, 395, 428, 558], "rtype": [304, 318, 342, 352, 366, 396, 438, 453], "min_depth": [305, 311, 343, 349, 429, 435, 558], "cutoff": [305, 311, 343, 349, 429, 435, 558], "multithread": [305, 306, 307, 308, 309, 318, 343, 344, 345, 346, 347, 352, 365, 366, 369, 370, 371, 376, 384, 386, 395, 396, 399, 400, 401, 429, 438, 452, 453, 455, 456, 457, 465, 474, 475, 477, 496, 522, 528, 558], "launch": [305, 306, 307, 308, 309, 343, 344, 345, 346, 347, 369, 370, 371, 376, 384, 399, 400, 401, 429, 455, 456, 457, 465, 474, 475, 496, 522], "thread": [305, 306, 307, 308, 309, 318, 343, 344, 345, 346, 347, 352, 365, 366, 369, 370, 371, 376, 384, 386, 395, 396, 399, 400, 401, 429, 438, 452, 453, 455, 456, 457, 465, 474, 475, 477, 496, 522, 528, 558], "pool": [305, 306, 307, 308, 309, 343, 344, 345, 346, 347, 369, 370, 371, 376, 384, 399, 400, 401, 429, 455, 456, 457, 465, 474, 475, 496, 522], "cpu": [305, 306, 307, 308, 309, 343, 344, 345, 346, 347, 369, 370, 371, 376, 384, 386, 399, 400, 401, 429, 455, 456, 457, 465, 474, 475, 477, 496, 522, 528, 554, 556, 558], "tune": [305, 306, 307, 308, 309, 343, 344, 345, 346, 347, 365, 369, 370, 371, 376, 384, 386, 395, 399, 400, 401, 429, 452, 455, 456, 457, 465, 474, 475, 477, 496, 522, 528], "rayon_num_thread": [305, 306, 307, 308, 309, 318, 343, 344, 345, 346, 347, 352, 365, 366, 369, 370, 371, 376, 384, 386, 395, 396, 399, 400, 401, 429, 438, 452, 453, 455, 456, 457, 465, 474, 475, 477, 496, 522, 528, 558], "minimum": [305, 311, 342, 343, 349, 428, 429, 435, 499, 500, 516, 517, 552, 558], "depth": [305, 311, 326, 340, 341, 343, 349, 360, 361, 429, 435, 447, 448, 494, 558], "regardless": [305, 311, 343, 349, 429, 435], "allpairsmultiplepathmap": [305, 343, 429], "edge_cost_fn": [306, 307, 308, 309, 314, 316, 344, 345, 346, 347, 350, 351, 363, 389, 398, 430, 431, 432, 433, 436, 437, 450, 501], "calcul": [306, 308, 318, 328, 344, 346, 352, 357, 359, 365, 366, 386, 395, 396, 430, 432, 438, 444, 452, 453, 477, 528, 554, 556, 558], "bellman": [306, 307, 316, 317, 344, 345, 351, 398, 430, 431, 437, 501, 558], "ford": [306, 307, 316, 317, 344, 345, 351, 398, 430, 431, 437, 501, 558], "act": [306, 307, 308, 309, 344, 345, 346, 347, 430, 431, 432, 433, 557], "cost": [306, 307, 308, 309, 310, 314, 316, 317, 344, 345, 346, 347, 348, 350, 351, 362, 363, 364, 374, 382, 388, 389, 390, 398, 430, 431, 432, 433, 434, 436, 437, 449, 450, 451, 462, 472, 492, 499, 500, 501, 515], "allpairspathlengthmap": [306, 308, 344, 346, 369, 399, 430, 432, 455, 558], "negativecycl": [306, 307, 316, 317, 344, 345, 351, 430, 431, 437], "neg": [306, 307, 310, 314, 316, 317, 329, 344, 345, 346, 347, 348, 350, 351, 363, 364, 369, 370, 371, 374, 389, 398, 399, 400, 401, 419, 430, 431, 432, 433, 434, 436, 437, 450, 451, 455, 456, 457, 462, 498, 501, 516, 558], "run": [307, 309, 318, 329, 330, 345, 347, 352, 365, 366, 367, 369, 370, 371, 375, 376, 384, 386, 387, 393, 395, 396, 399, 400, 401, 403, 406, 438, 440, 452, 453, 454, 455, 456, 457, 463, 465, 474, 475, 477, 478, 480, 496, 497, 508, 522, 525, 528, 529, 552, 555, 556, 558, 560, 562], "allpairspathmap": [307, 309, 345, 347, 431, 433], "dijkstra": [308, 309, 310, 346, 347, 348, 362, 363, 364, 369, 370, 371, 388, 389, 390, 399, 400, 401, 432, 433, 434, 449, 450, 451, 455, 456, 457, 558], "as_undirect": [310, 317, 348, 364, 365, 369, 370, 371, 386, 390, 395, 401, 451, 479, 528, 558], "isn": [310, 317, 348, 364, 382, 390, 391, 434, 451, 472, 499, 500, 515, 557], "nan": [310, 346, 347, 348, 350, 363, 364, 374, 386, 432, 433, 434, 436, 450, 451, 462, 477, 498, 516, 517, 528, 558], "from_": 311, "repeat": [311, 320, 326, 340, 341, 349, 353, 360, 361, 362, 388, 435, 439, 447, 448, 449], "inner": [311, 326, 349, 435, 558], "articul": [313, 322, 558], "cut": [313, 322, 517, 558], "vertex": [313, 320, 326, 341, 353, 361, 362, 386, 388, 439, 448, 449, 464, 475, 477, 528, 531, 532, 533, 534, 539, 540, 544, 547, 548, 558], "along": 313, "increas": [313, 324, 382, 472, 515, 558], "implicitli": [313, 322, 324, 326, 333, 334, 359, 384, 446, 475, 522], "assum": [313, 322, 324, 326, 333, 334, 359, 384, 446, 475, 522, 558], "loop": [313, 322, 324, 326, 331, 333, 334, 358, 359, 368, 384, 392, 445, 446, 475, 522, 524, 558], "produc": [313, 322, 324, 326, 333, 334, 359, 384, 446, 466, 474, 475, 516, 522, 558], "incorrect": [313, 322, 324, 326, 333, 334, 359, 384, 446, 475, 522, 558], "unexpect": [313, 322, 324, 326, 333, 334, 335, 336, 337, 338, 359, 384, 446, 475, 522, 558], "goal_fn": [314, 350, 436], "estimate_cost_fn": [314, 350, 436], "comput": [314, 316, 318, 322, 328, 331, 350, 351, 352, 357, 358, 363, 366, 367, 374, 375, 376, 384, 386, 389, 396, 397, 436, 437, 438, 444, 445, 450, 453, 454, 462, 463, 465, 475, 477, 480, 492, 493, 496, 497, 508, 516, 517, 518, 522, 523, 528, 552, 558, 560], "estim": [314, 350, 436], "admiss": [314, 350, 436], "never": [314, 331, 350, 358, 436, 445, 541, 558], "overestim": [314, 350, 436], "nearest": [314, 350, 436], "goal": [314, 316, 350, 351, 363, 374, 389, 436, 437, 450, 462, 492, 557, 558], "seed": [315, 379, 382, 391, 392, 393, 394, 469, 472, 474, 509, 510, 515, 524, 525, 526, 558], "initial_graph": [315, 391, 558], "barab\u00e1si": [315, 391, 558], "albert": [315, 391, 558], "preferenti": [315, 391, 558], "grown": [315, 391, 555, 562], "l": [315, 391, 464, 508, 509, 558], "r": [315, 391, 418, 508, 554, 555, 558], "emerg": [315, 391], "scale": [315, 323, 327, 328, 354, 356, 357, 380, 381, 382, 391, 441, 443, 444, 470, 471, 472, 512, 514, 515, 552, 558], "network": [315, 328, 366, 382, 384, 391, 393, 396, 453, 472, 515, 525, 554, 555, 558, 562], "scienc": [315, 328, 391], "286": [315, 391], "pp": [315, 391], "509": [315, 391], "512": [315, 391], "1999": [315, 391, 480, 508], "star_graph": [315, 391, 558], "star": [315, 391, 416, 419, 427, 558], "spfa": [316, 317, 351, 398, 437, 501, 558], "heurist": [316, 317, 351, 372, 373, 387, 398, 437, 458, 460, 461, 478, 484, 485, 489, 501, 529, 558], "wit": 317, "parallel_threshold": [318, 352, 365, 366, 369, 370, 371, 386, 395, 396, 399, 400, 401, 438, 452, 453, 455, 456, 457, 474, 477, 528, 558], "50": [318, 352, 366, 382, 396, 438, 453, 472, 474, 515, 558], "fraction": [318, 328, 352, 357, 366, 396, 438, 444, 453, 558], "through": [318, 352, 366, 396, 438, 453, 558, 559, 560], "math": [318, 352, 366, 396, 438, 453], "c_b": [318, 352, 366, 396, 438, 453, 558, 559], "sum_": [318, 328, 352, 357, 366, 386, 396, 438, 444, 453, 477, 528, 558, 559], "frac": [318, 328, 352, 357, 366, 382, 384, 386, 396, 438, 444, 453, 472, 475, 477, 515, 528, 558, 559], "sigma": [318, 352, 366, 396, 438, 453, 558, 559], "ulrik": [318, 352, 366, 393, 396, 438, 453, 488, 525, 558], "brand": [318, 352, 366, 393, 396, 438, 453, 488, 525, 558], "journal": [318, 352, 367, 397, 419, 438, 454, 480, 517, 558], "mathemat": [318, 352, 438, 558], "sociologi": [318, 352, 367, 397, 438, 454, 558], "163": [318, 352, 438, 558], "177": [318, 352, 438, 558], "2001": [318, 352, 438, 558], "abov": [318, 352, 365, 366, 369, 370, 371, 376, 386, 393, 395, 396, 399, 400, 401, 403, 406, 438, 452, 453, 455, 456, 457, 465, 477, 496, 525, 528, 557, 558, 560, 562], "env": [318, 352, 365, 366, 386, 395, 396, 438, 452, 453, 477, 528], "var": [318, 352, 365, 366, 386, 395, 396, 438, 452, 453, 477, 528], "distinct": [318, 352, 366, 396, 404, 407, 438, 453, 486, 560], "breadth": [319, 320, 321, 353, 439, 558], "bf": [319, 320, 321, 353, 439], "bfspredecessor": [319, 558], "visitor": [320, 341, 353, 361, 362, 388, 439, 448, 449, 530, 537, 543, 558], "pseudo": [320, 340, 341, 353, 360, 361, 362, 388, 439, 447, 448, 449], "code": [320, 340, 341, 353, 360, 361, 362, 388, 411, 412, 421, 422, 439, 447, 448, 449, 555, 558, 560, 562], "annot": [320, 341, 353, 361, 362, 388, 439, 448, 449, 558], "event": [320, 341, 353, 361, 362, 388, 439, 448, 449, 530, 537, 538, 543, 545, 546, 558], "white": [320, 341, 353, 361, 439, 448, 562], "grai": [320, 341, 353, 361, 439, 448, 534], "equeu": [320, 353, 439], "q": [320, 353, 362, 388, 439, 449], "\u00f8": [320, 340, 353, 360, 362, 388, 439, 447, 449], "dequeu": [320, 353, 439], "adj": [320, 341, 353, 361, 362, 388, 439, 448, 449, 557, 558], "els": [320, 340, 341, 353, 360, 361, 362, 388, 439, 447, 448, 449, 551, 557, 558, 560, 562], "insid": [320, 341, 353, 361, 362, 388, 439, 448, 449, 530, 537, 543], "stop": [320, 329, 341, 353, 361, 362, 363, 367, 372, 373, 375, 382, 387, 388, 389, 397, 439, 448, 449, 450, 454, 460, 461, 463, 472, 478, 480, 484, 489, 493, 508, 515, 529, 550, 558], "immedi": [320, 341, 353, 361, 362, 375, 388, 439, 448, 449, 463, 493, 558], "exploit": [320, 341, 353, 361, 362, 388, 439, 448, 449], "exit": [320, 341, 353, 361, 362, 388, 439, 448, 449, 558], "earli": [320, 341, 353, 361, 362, 388, 439, 448, 449], "stopsearch": [320, 341, 353, 361, 362, 388, 439, 448, 449], "prune": [320, 341, 353, 361, 362, 388, 439, 448, 449, 549], "prunesearch": [320, 341, 353, 361, 362, 388, 439, 448, 449], "visit": [320, 341, 353, 361, 372, 373, 387, 439, 448, 460, 461, 478, 484, 489, 529, 558], "treeedgesrecord": [320, 341, 353, 361, 439, 448, 558], "tree_edg": [320, 341, 353, 361, 439, 448, 538, 558], "append": [320, 341, 353, 361, 371, 401, 403, 406, 410, 418, 420, 439, 448, 457, 558, 559], "vi": [320, 341, 353, 361, 439, 448, 558], "chosen": [320, 326, 340, 341, 353, 360, 361, 362, 388, 439, 447, 448, 449], "arbitrarli": [320, 326, 340, 341, 353, 360, 361, 362, 388, 439, 447, 448, 449], "invok": [320, 341, 353, 361, 362, 388, 439, 448, 449, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548], "subclass": [320, 341, 353, 361, 362, 388, 439, 448, 449, 558], "bfssuccessor": [321, 558], "disconnect": [322, 386, 477, 517, 528, 558], "vertic": [322, 403, 404, 406, 407, 440, 464, 495, 540, 558, 562], "first_nod": [323, 354, 441], "horizont": [323, 354, 441], "center": [323, 327, 354, 356, 379, 380, 381, 382, 405, 408, 415, 416, 426, 427, 441, 443, 469, 470, 471, 472, 510, 512, 514, 515], "aspect_ratio": [323, 354, 441], "3333333333333333": 323, "bipartit": [323, 354, 394, 440, 441, 481, 523, 526, 558], "left": [323, 354, 394, 412, 422, 441, 488, 526], "horitont": [323, 441], "orient": [323, 326, 354, 384, 441], "ratio": [323, 328, 354, 357, 441, 444, 558], "width": [323, 354, 441, 552], "height": [323, 354, 441], "pos2dmap": [323, 327, 354, 356, 379, 380, 381, 441, 443, 469, 470, 471, 510, 512, 514, 552, 557, 558], "cartesian": [325, 355, 442, 558], "product": [325, 355, 383, 442, 473, 558], "productnodemap": [325, 355, 383, 442, 473], "chain": [326, 329, 558], "decomposit": [326, 558], "respect": [326, 385, 392, 393, 476, 524, 525, 527, 554, 557, 558, 560], "deriv": [326, 375, 463, 493, 558], "fundament": [326, 334, 558], "manner": [326, 558, 562], "begin": [326, 560], "nontre": 326, "awai": 326, "overlap": 326, "segment": 326, "inform": [326, 394, 511, 526, 554, 558, 562], "schmidt": 326, "jen": 326, "2013": [326, 558], "test": [326, 488, 497, 556, 558], "letter": [326, 554], "113": 326, "241": 326, "244": 326, "elsevi": 326, "doi": [326, 328, 367, 397, 419, 454, 488, 513, 516, 558], "10": [326, 328, 367, 375, 397, 412, 415, 416, 419, 422, 426, 427, 454, 463, 488, 493, 513, 516, 552, 555, 556, 559], "1016": [326, 419, 516, 558], "j": [326, 404, 407, 480, 558], "ipl": [326, 558], "016": [326, 558], "circular": [327, 356, 443], "wf_improv": [328, 357, 444], "close": [328, 357, 382, 444, 472, 513, 515, 558], "reciproc": [328, 357, 444, 558], "averag": [328, 342, 357, 374, 386, 428, 444, 462, 477, 492, 528, 558], "distanc": [328, 357, 365, 370, 371, 382, 386, 395, 400, 401, 411, 412, 421, 422, 444, 452, 456, 457, 472, 477, 498, 509, 515, 516, 528, 544, 546, 554, 558], "reachabl": [328, 340, 357, 360, 374, 444, 447, 462, 492, 558], "reach": [328, 357, 363, 367, 375, 389, 397, 444, 450, 454, 463, 480, 493, 508, 558], "altern": [328, 357, 444, 557, 559, 562], "improv": [328, 357, 376, 444, 465, 484, 496, 555, 558], "formula": [328, 357, 444], "actor": [328, 357, 444], "who": [328, 357, 444, 562], "wf": [328, 357, 444], "c_": [328, 357, 444], "wasserman": 328, "faust": 328, "k": [328, 333, 334, 359, 374, 382, 418, 419, 446, 462, 472, 492, 515, 552, 558], "1994": 328, "social": [328, 366, 396, 453, 558], "cambridg": 328, "press": 328, "1017": 328, "cbo9780511815478": 328, "color_fn": 329, "collect": [329, 330, 334, 519, 560], "bicolor": 329, "exactli": [329, 558], "continu": [329, 382, 472, 515, 557, 558], "core": [333, 359, 446, 511, 554, 558], "basi": [334, 558], "minim": [334, 474, 516, 559], "summat": 334, "exclus": 334, "cacm": 334, "491": 334, "paton": 334, "comm": 334, "acm": [334, 480, 497, 517], "12": [334, 419, 552, 555, 556], "9": [334, 419, 458, 555, 562], "sept": 334, "1969": [334, 419], "514": 334, "518": 334, "longest": [335, 336, 337, 338, 376, 465, 496, 558], "unsign": [335, 336, 558], "_": [335, 336, 337, 338, 355, 383, 401, 442, 473, 558], "could": [335, 336, 337, 338, 552, 557, 558, 560, 562], "df": [340, 341, 360, 361, 368, 447, 448, 540], "procedur": [340, 360, 447], "stack": [340, 360, 447], "push": [340, 360, 447], "hasnext": [340, 360, 447], "w": [340, 360, 447, 521], "pop": [340, 360, 447, 544], "span": [340, 447, 499, 500, 516, 558], "examin": [341, 361, 362, 388, 448, 449, 531, 533, 534, 540, 545, 546, 548, 560], "cross": [341, 361, 448, 535, 541, 556], "forward": [341, 361, 448, 541], "parallel_edg": [342, 428, 558], "dag_adjacency_matrix": 342, "determin": [342, 372, 373, 376, 428, 460, 461, 465, 481, 484, 485, 489, 495, 496, 517, 558], "min": [342, 362, 388, 428, 449, 517, 558, 559], "caus": [342, 428, 487, 558], "behavior": [342, 428, 558], "max": [342, 376, 403, 406, 428, 465, 496, 497, 558, 559], "avg": [342, 428, 558], "digraph_edge_betweenness_centr": 352, "pathlength": [352, 438], "centralitymap": [352, 357, 367, 375, 397, 438, 444, 454, 463, 480, 493, 508, 559], "33333333333333": [354, 441], "graph_1": [355, 383, 442, 473, 558], "graph_2": [355, 383, 442, 473, 558], "graph_product": [355, 383, 442, 473, 558], "in_degre": [359, 558], "out_degre": [359, 558], "infin": [362, 386, 388, 449, 477, 509, 528], "p": [362, 388, 393, 394, 449, 509, 525, 526, 551, 552, 554, 558], "relax": [362, 388, 449, 545], "decreas": [362, 388, 449], "300": [365, 369, 370, 371, 386, 395, 399, 400, 401, 452, 455, 456, 457, 477, 528, 552], "digraph_floyd_warshall_numpi": [365, 452, 557, 558], "absens": [365, 452], "definit": [366, 396, 453], "On": [366, 396, 453, 558], "variant": [366, 396, 412, 422, 453, 557, 558], "30": [366, 396, 453, 558], "136": [366, 396, 453, 558], "145": [366, 396, 453, 516, 558], "2008": [366, 396, 453, 558], "digraph_betweenness_centr": [366, 558], "edgecentralitymap": [366, 396, 453], "max_it": [367, 375, 397, 454, 463, 480, 493, 508], "100": [367, 397, 454, 480, 493, 508, 558], "tol": [367, 375, 382, 397, 454, 463, 472, 480, 493, 508, 515], "1e": [367, 375, 382, 397, 454, 463, 472, 480, 493, 508, 515], "06": [367, 375, 382, 397, 454, 463, 472, 493, 508, 515], "eigenvector": [367, 375, 397, 454, 463, 493, 558], "phillip": [367, 397, 454], "bonacich": [367, 397, 454], "famili": [367, 397, 454, 552], "measur": [367, 397, 454, 516, 558, 559, 560], "american": [367, 397, 454], "92": [367, 397, 454], "1170": [367, 397, 454], "1182": [367, 397, 454], "1986": [367, 397, 454, 497], "1086": [367, 397, 454], "228631": [367, 397, 454], "converg": [367, 375, 397, 454, 463, 480, 493, 508], "vector": [367, 375, 397, 454, 463, 480, 493, 508], "smaller": [367, 375, 397, 454, 463, 480, 493, 508, 562], "toler": [367, 375, 397, 454, 463, 480, 493, 508], "multipli": [367, 375, 397, 454, 463, 480, 493, 508], "networkx": [367, 375, 393, 397, 454, 463, 493, 502, 508, 513, 525, 555, 558, 562], "encount": [368, 511, 519, 520, 532, 539, 544, 557, 558], "floyd": [369, 370, 371, 399, 400, 401, 455, 456, 457, 558], "dens": [369, 370, 371, 399, 400, 401, 455, 456, 457], "graph_floyd_warshall_numpi": [370, 371, 457, 558], "inf": [370, 371, 400, 401, 440, 456, 457, 558], "matric": [371, 401, 457, 557, 558], "reconstruct": [371, 401, 457], "among": [371, 401, 457, 497, 554], "reconstruct_path": [371, 401, 457], "curr": [371, 401, 457], "node_match": [372, 373, 387, 460, 461, 478, 484, 489, 529, 558], "edge_match": [372, 373, 387, 460, 461, 478, 484, 489, 529, 558], "id_ord": [372, 373, 387, 460, 461, 478, 484, 485, 489, 529, 558], "call_limit": [372, 373, 387, 460, 461, 478, 484, 489, 529, 558], "compar": [372, 373, 460, 461, 484, 485, 489, 554, 558], "matcher": [372, 373, 460, 461, 484, 485, 489], "graph_a": [372, 373, 387, 460, 461, 478, 484, 485, 489, 529], "graph_b": [372, 373, 387, 460, 461, 478, 484, 485, 489, 529], "y": [372, 373, 376, 460, 461, 465, 484, 485, 489, 496], "evalu": [372, 373, 376, 387, 460, 461, 465, 478, 484, 485, 489, 496, 529], "vied": [372, 373, 460, 461, 485], "vf2": [372, 373, 387, 460, 461, 478, 484, 485, 489, 529, 558], "paper": [372, 373, 387, 412, 422, 440, 460, 461, 466, 474, 478, 484, 485, 489, 529, 558], "bound": [372, 373, 387, 393, 460, 461, 478, 484, 489, 525, 529, 558], "solut": [372, 373, 387, 458, 460, 461, 478, 484, 489, 497, 529, 558], "exce": [372, 373, 387, 403, 406, 418, 460, 461, 478, 484, 489, 529, 558], "ambigu": [373, 461, 489, 538], "term": [373, 461, 489], "fewer": [373, 461, 489], "edge_cost": [374, 462, 492], "kth": [374, 462, 492], "log": [374, 440, 462, 492, 558], "eedg": [374, 462, 492], "alpha": [375, 463, 493, 508, 552], "beta": [375, 463, 493], "1000": [375, 463], "katz": [375, 463, 493, 558], "leo": [375, 463, 493], "statu": [375, 463, 493, 560], "sociometr": [375, 463, 493], "psychometrika": [375, 463, 493], "18": [375, 463, 493, 558], "39": [375, 463, 493, 558], "43": [375, 463, 493], "1953": [375, 463, 493], "springer": [375, 463, 493, 516, 558], "pdf": [375, 440, 463, 466, 480, 493, 508, 551], "1007": [375, 463, 493, 516, 558], "bf02289026": [375, 463, 493], "attenu": [375, 463, 493], "neighbourhood": [375, 463, 493], "roughli": [376, 465, 496], "len": [376, 465, 496, 558, 560], "There": [376, 465, 496, 557, 558, 562], "tradeoff": [376, 465, 496], "json": [377, 467, 504, 558], "anyth": [377, 467, 504], "unweight": [378, 386, 468, 477, 505, 528, 558], "preset": [378, 458, 468, 505, 558], "nodescountmap": [378, 505], "nlist": [380, 419, 458, 470, 512, 558, 562], "rotat": [380, 470, 512], "shell": [380, 470, 512], "angl": [380, 470, 512], "radian": [380, 470, 512], "resolut": [381, 471, 514], "35": [381, 471, 514], "equidist": [381, 471, 514], "spiral": [381, 471, 514], "compact": [381, 471, 514], "compress": [381, 471, 514], "plot": [381, 471, 514], "po": [382, 419, 458, 472, 509, 515, 552, 557, 558, 562], "repulsive_expon": [382, 472, 515], "adaptive_cool": [382, 472, 515, 558], "num_it": [382, 472, 515], "fruchterman": [382, 472, 515, 558], "reingold": [382, 472, 515, 558], "forc": [382, 472, 515, 558], "simul": [382, 472, 515], "spring": [382, 472, 515, 552], "hold": [382, 472, 515], "repel": [382, 472, 515], "anti": [382, 472, 515], "graviti": [382, 472, 515], "equilibrium": [382, 472, 515], "coordin": [382, 472, 515, 562], "optim": [382, 458, 472, 474, 487, 515, 516, 544, 558, 560], "sqrt": [382, 472, 515], "farther": [382, 472, 515], "apart": [382, 472, 515], "repuls": [382, 472, 515], "expon": [382, 472, 515], "cool": [382, 472, 515], "scheme": [382, 472, 515], "linear": [382, 410, 420, 464, 472, 495, 515, 558, 560], "threshold": [382, 472, 509, 515], "Not": [382, 472, 515], "around": [382, 472, 515, 558], "tensor": [383, 473, 558], "fag": 384, "eq": 384, "triangl": [384, 475], "tripl": [384, 475], "count": [384, 558, 560], "cluster": 384, "fagiolo": 384, "physic": 384, "review": [384, 560], "76": 384, "026107": 384, "2007": 384, "merge_nod": [385, 476, 527, 558], "merge_edg": [385, 476, 527, 558], "three": [385, 476, 527, 558], "phase": [385, 476, 527], "mathcal": [385, 476, 527, 558], "n_2": [385, 476, 527], "n_1": [385, 476, 527], "togeth": [385, 402, 476, 511, 527, 539, 540, 544], "ne": [386, 477, 528], "taken": [386, 477, 528, 558], "funcion": [387, 478, 529], "direccted_path_graph": 387, "stopiter": [387, 478, 529, 558], "dicitonari": [387, 478, 529], "purpos": [391, 555, 556], "weak": 391, "direction": [391, 560, 562], "num_nod": [392, 393, 404, 405, 407, 408, 414, 415, 416, 418, 425, 426, 427, 509, 524, 525, 558], "num_edg": [392, 524, 558], "g_": [392, 393, 524, 525, 558], "nm": [392, 524], "known": [392, 393, 524, 525, 558, 560], "erd\u0151": [392, 393, 524, 525], "r\u00e9nyi": [392, 393, 524, 525], "higher": [392, 458, 524], "reproduc": [392, 524, 554, 558], "complet": [392, 393, 402, 404, 407, 414, 424, 425, 498, 516, 524, 525, 558, 560], "binomi": [393, 403, 406, 525, 558], "zero": [393, 508, 517, 525, 558], "mention": [393, 525], "upper": [393, 525, 558], "fast_gnp_random_graph": [393, 525], "vladimir": [393, 525], "batagelj": [393, 525], "phy": [393, 525], "rev": [393, 525], "71": [393, 525], "036113": [393, 525], "2005": [393, 525], "blob": [393, 513, 525], "random_graph": [393, 525, 558], "l49": [393, 525], "l120": [393, 525], "num_l_nod": [394, 526], "num_r_nod": [394, 526], "divid": [394, 526], "disjoint": [394, 494, 526, 558], "right": [394, 406, 410, 412, 413, 422, 488, 526], "num_mesh_nod": [402, 424], "num_path_nod": [402, 424], "mesh_weight": [402, 424], "path_weight": [402, 424], "barbel": [402, 558], "mesh": [402, 414, 424, 425, 558], "won": [402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "recurs": [403, 406, 513], "platform": [403, 406, 555, 558, 562], "64bit": [403, 406, 555, 556], "60": [403, 406, 558], "32bit": [403, 406, 555, 556], "29": [403, 406, 558], "overflowerror": [403, 406, 558], "extra": [403, 406, 410, 418, 420, 558], "greater": [403, 406, 410, 418, 420, 521], "neither": [404, 405, 407, 408, 410, 414, 415, 416, 420, 424, 425, 426, 427, 560], "propag": [406, 410, 413], "toward": [406, 410, 413, 416], "bottom": [406, 410, 413], "lenght": [406, 418], "row": [410, 413, 420, 423], "col": [410, 413, 420, 423], "grid": [410, 420, 558], "wise": [410, 420], "trail": [410, 420, 560], "heavi": [411, 412, 421, 422, 558], "hex": [411, 421, 558], "fig": [411, 412, 421, 422, 551], "arxiv": [411, 412, 421, 422, 474, 558], "ab": [411, 412, 421, 422, 474, 558], "1907": [411, 412, 421, 422], "09528": [411, 412, 421, 422], "ascii": [411, 412, 421, 422], "diagram": [411, 412, 421, 422], "f": [411, 412, 421, 422, 559, 560, 562], "odd": [411, 412, 421, 422], "graphviz_draw": [411, 412, 421, 422, 557, 558, 559, 560, 562], "1043x155": [411, 421], "squar": [412, 422, 558], "four": [412, 422, 554, 558], "frequenc": [412, 422], "467x539": [412, 422], "hexagon": [413, 423, 558, 559], "lattic": [413, 423, 558, 559], "inward": 416, "branching_factor": 418, "ari": [418, 558], "branch": 418, "cannot": [418, 497, 558], "petersen": [419, 558], "2n": 419, "3n": 419, "watkin": 419, "denot": [419, 560], "extern": [419, 557], "regular": 419, "polygon": 419, "shift": 419, "shell_layout": [419, 458, 558, 562], "7": [419, 458, 459, 466, 555, 562], "m\u00f6biu": 419, "kantor": 419, "11": [419, 555, 556], "13": [419, 555], "14": [419, 555], "theorem": [419, 466, 558], "tait": 419, "combinatori": 419, "theori": [419, 562], "152": 419, "164": 419, "s0021": 419, "9800": 419, "69": 419, "80116": 419, "column": [423, 558], "lollipop": [424, 558], "nor": 424, "graph_edge_betweenness_centr": 438, "noga": [440, 558], "alon": [440, 558], "lett": 440, "85": [440, 508], "2003": [440, 554, 558], "www": [440, 466, 480], "tau": 440, "ac": 440, "il": 440, "nogaa": 440, "lex2": 440, "graph_betweenness_centr": [453, 558], "preset_color_fn": [458, 558], "greedi": [458, 459, 494, 558], "strategi": 458, "problem": [458, 516, 554], "manual": [458, 556], "generalized_petersen_graph": [458, 558, 562], "draw": [458, 551, 552, 558], "node_color": [458, 552, 558, 559], "adrian": 458, "kosowski": 458, "krzysztof": 458, "manuszewski": 458, "classic": [458, 560], "19": [458, 556, 558], "2004": 458, "isbn": 458, "8218": 458, "3458": 458, "greedili": [459, 558], "cycle_graph": [459, 466, 558, 560], "edge_color": [459, 466, 552, 558], "edge_ab": [464, 558], "edge_ac": [464, 558], "edge_bc": [464, 558], "edge_ad": [464, 558], "out_graph": [464, 558], "out_edge_map": [464, 558], "simple_path_pair": 465, "longest_path": [465, 558], "z": 465, "misra": [466, 558], "gri": [466, 558], "proof": [466, 558], "vize": [466, 558], "1992": [466, 558], "utexa": 466, "edu": [466, 480, 488, 508], "psp": 466, "numpathsmap": 468, "trial": 474, "modul": [474, 558], "approxim": [474, 516, 558], "token": [474, 558], "swap": [474, 558], "partial": [474, 558], "permut": [474, 558], "miltzow": [474, 558], "et": [474, 554, 558], "al": [474, 554, 558], "2016": [474, 558], "1602": [474, 558], "05150": [474, 558], "rearrang": 474, "nstart": [480, 508], "08": 480, "hub": [480, 558], "author": [480, 558], "kleinberg": 480, "authorit": 480, "hyperlink": 480, "46": 480, "cornel": 480, "home": 480, "kleinber": 480, "auth": 480, "nullgraph": [482, 490], "alp\u00e1r": 484, "j\u00fcttner": 484, "p\u00e9ter": 484, "madarasi": 484, "longer": [487, 555, 558], "global": 487, "local": [487, 556, 558], "planar": [488, 558], "iff": 488, "drawn": [488, 552], "plane": 488, "intersect": 488, "2009": [488, 554], "citeseerx": 488, "ist": 488, "psu": 488, "viewdoc": 488, "summari": 488, "217": 488, "9208": 488, "weakli": [490, 507, 553, 558], "first_lay": [494, 558], "index_output": [494, 558], "invalidnod": [494, 503], "lexicograph": 495, "ti": 495, "max_cardin": 497, "verify_optimum": 497, "subset": [497, 508, 531, 534], "cardin": 497, "blossom": 497, "augment": 497, "primal": 497, "dual": [497, 558], "invent": 497, "jack": 497, "edmond": 497, "untest": 497, "optimum": 497, "mostli": [497, 558, 562], "ofth": 497, "zvi": 497, "galil": 497, "survei": 497, "metric": [498, 509, 516, 558], "closur": [498, 516, 558], "forest": [499, 500], "kruskal": [499, 500], "keep_attribut": [502, 558], "__networkx_node__": [502, 558], "person": 508, "dangl": 508, "page": [508, 558], "brin": 508, "motwani": 508, "winograd": 508, "citat": 508, "rank": [508, 558], "bring": 508, "stanford": 508, "digit": 508, "technologi": 508, "1998": 508, "dbpub": 508, "8090": 508, "showdoc": 508, "fulltext": 508, "66": 508, "tri": [508, 558], "damp": 508, "uniform": 508, "distribut": [508, 556], "outedg": 508, "accord": 508, "irreduc": 508, "radiu": [509, 552], "dim": 509, "geometr": [509, 558], "unit": 509, "cube": [509, 558], "dimens": 509, "model": [509, 560], "uniformli": 509, "store": [509, 511, 560, 562], "euclidean": 509, "minkowski": 509, "meet": 509, "graphml": [511, 558], "comprehens": 511, "easi": [511, 538], "properti": [511, 557, 560], "flexibl": [511, 562], "mechan": 511, "graphdraw": 511, "mix": 511, "unidirect": 511, "hyperedg": 511, "nest": 511, "port": 511, "domain": 511, "pars": 511, "runtimeerror": [511, 558], "elementari": [513, 558], "circuit": [513, 560], "johnson": [513, 554, 558], "1137": 513, "0204007": 513, "document": [513, 551, 558, 562], "l98": 513, "l222": 513, "terminal_nod": 516, "steiner": [516, 558], "regard": 516, "amoung": 516, "termin": 516, "due": [516, 556, 558], "rather": [516, 558], "kou": [516, 558], "markowski": [516, 558], "berman": [516, 558], "fast": [516, 558], "acta": 516, "informatica": 516, "141": 516, "1981": [516, 558], "articl": [516, 558], "bf00288961": [516, 558], "kurt": 516, "mehlhorn": 516, "0020": [516, 558], "0190": [516, 558], "88": [516, 558], "90066": [516, 558], "stoer": [517, 558], "wagner": [517, 558], "stoer_simple_1997": 517, "nonneg": 517, "conid": 517, "partit": [517, 558], "usiz": 517, "mechthild": 517, "frank": 517, "44": 517, "585": [517, 558], "591": 517, "1997": 517, "strongli": [518, 558], "kosaraju": 518, "earliest": 519, "reduct": [521, 558], "prime": 521, "pyvalueerror": 521, "action": [530, 537, 543, 558], "queue": [531, 534, 544, 558], "record": 538, "disregard": 538, "leaf": 540, "upon": [545, 546], "emit": [545, 546, 558], "node_attr_fn": [551, 558, 559, 560, 562], "edge_attr_fn": [551, 560], "image_typ": 551, "pillow": [551, 558], "instruct": [551, 560], "disk": 551, "canon": 551, "cmap": [551, 552], "cmapx": 551, "cmapx_np": 551, "dia": 551, "gd": 551, "gd2": 551, "gif": 551, "hpgl": 551, "imap": 551, "imap_np": 551, "ismap": 551, "jpe": 551, "jpeg": 551, "jpg": 551, "mif": 551, "mp": 551, "pcl": 551, "pic": 551, "plain": 551, "ext": 551, "ps2": 551, "svg": 551, "svgz": 551, "vml": 551, "vmlz": 551, "vrml": 551, "vtx": 551, "wbmp": 551, "xdot": 551, "xlib": 551, "twopi": 551, "neato": [551, 559, 562], "circo": 551, "fdp": [551, 558], "sfdp": [551, 558], "yellow": [551, 558, 562], "blue": [551, 558, 562], "red": [551, 558], "directed_star_graph": [551, 558], "rgb": [551, 552, 558], "766x747": [551, 558], "arrow": [552, 560, 562], "kwd": 552, "matplotlib": [552, 558, 559, 562], "mpl": [552, 558], "layout_funct": 552, "arrowhead": 552, "arrowstyl": 552, "arrowshead": 552, "arrow_s": [552, 557], "fancyarrowpatch": 552, "mutation_scal": 552, "info": 552, "node_list": [552, 557], "node_s": [552, 558], "vmin": [552, 558, 559], "vmax": [552, 558, 559], "scatter": 552, "1f78b4": [552, 558], "node_shap": 552, "shape": [552, 558, 559, 562], "pyplot": [552, 558, 559, 562], "marker": 552, "h": [552, 560], "transpar": 552, "colormap": [552, 559], "intens": 552, "linewidth": 552, "symbol": 552, "border": 552, "edge_cmap": 552, "edge_vmin": 552, "edge_vmax": 552, "word": 552, "solid": 552, "dash": 552, "linestyl": 552, "Or": [552, 558, 562], "font_siz": 552, "fontsiz": 552, "font_color": 552, "font": 552, "ie": 552, "font_weight": 552, "font_famili": 552, "san": 552, "serif": 552, "legend": 552, "connectionstyl": 552, "curv": 552, "arc": [552, 560, 562], "rad": 552, "arc3": 552, "backend": [552, 557], "jupyt": 552, "plt": [552, 558, 559, 562], "competit": 554, "against": [554, 558], "popular": 554, "igraph": 554, "networkit": 554, "task": 554, "machin": 554, "intel": 554, "i9": 554, "9900k": 554, "60ghz": 554, "eight": 554, "16": [554, 558], "thead": 554, "32gb": 554, "ram": 554, "avaialbl": 554, "usa": 554, "road": 554, "9th": 554, "dimac": 554, "challeng": 554, "dataset": 554, "demetrescu": 554, "datta": 554, "third": 554, "citi": 554, "rome": 554, "lastli": 554, "fourth": 554, "benchamrk": 554, "answer": 554, "arg": 554, "databas": 554, "de": 554, "santo": 554, "goldberg": 554, "ninth": 554, "foggia": 554, "sanson": 554, "vento": 554, "recognit": 554, "1067": 554, "1079": 554, "studi": 555, "variou": [555, 557, 558], "licens": 555, "apach": 555, "host": 555, "inher": 555, "safeti": [555, 556], "significantli": [555, 558], "oppos": 555, "publish": [555, 556, 558], "pre": [555, 556, 558], "binari": [555, 558, 562], "linux": [555, 556, 558], "x86": 555, "x86_64": [555, 556, 558], "aarch64": [555, 556, 558], "s390x": [555, 556, 558], "ppc64le": [555, 556, 558], "maco": [555, 556, 558], "arm64": [555, 556, 558], "window": [555, 556], "wish": 555, "expos": [555, 557, 558], "renam": [555, 558], "legaci": [555, 558], "now": [555, 558, 559, 560, 562], "usag": [555, 562], "came": 555, "tutori": [555, 559, 560], "guid": [555, 557, 562], "introduct": [555, 556, 558, 561], "contribut": 555, "gap": [555, 558], "benchmark": 555, "pypi": [556, 558], "i686": 556, "64": [556, 558], "rustup": 556, "simpler": 556, "reli": [556, 558, 562], "properli": [556, 558], "prebuilt": 556, "pep": 556, "517": [556, 558], "setuptool": 556, "reciev": 556, "again": [556, 558, 562], "strive": 556, "broken": 556, "level": [556, 557], "architectur": 556, "manylinux": 556, "2014": 556, "pp64le": 556, "musl": [556, 558], "newer": [556, 558], "upstream": [556, 558], "correctli": [556, 558], "best": [556, 560], "introductori": 557, "impli": [557, 560], "inspir": 557, "util": 557, "offer": 557, "boundari": 557, "decis": 557, "dynam": [557, 558], "put": 557, "nx": [557, 558], "multidigraph": 557, "my_node_a": 557, "my_node_b": 557, "constraint": [557, 558, 562], "That": 557, "migrat": 557, "similarli": [557, 562], "dist_matrix": 557, "extend_from": 557, "concis": 557, "graph_": 557, "digraph_": 557, "pretti": 557, "hashabl": [557, 558, 562], "referenc": 557, "concept": [557, 558, 560], "dedic": [557, 562], "fridai": [557, 558, 562], "mondai": [557, 558, 562], "But": [557, 558, 560], "analog": [557, 558], "5pm": 557, "2pm": 557, "room": 557, "714": 557, "accessor": 557, "dtype": [557, 558], "astyp": 557, "to_numpy_matrix": 557, "to_numpy_arrai": 557, "to_numpy_recarrai": 557, "to_scipy_sparse_matrix": 557, "to_pandas_adjac": 557, "scipi": 557, "csr": 557, "spars": 557, "per": [557, 558], "digraph_adjacency_matrix": [557, 558], "graph_adjacency_matrix": [557, 558], "networkx_draw": 557, "pygraphviz": 557, "varieti": 557, "strictli": [557, 558, 560], "retwork": [557, 558], "draw_networkx": 557, "fork": 557, "nodelist": 557, "arrows": 557, "mpl_drawer": [557, 558], "draw_networkx_edge_label": 557, "networkx_convert": [557, 558], "respons": 557, "accordingli": 557, "unwant": 557, "convert_rustworkx_to_networkx": 557, "isinst": 557, "matur": 557, "wide": [557, 562], "comparison": [557, 562], "younger": 557, "enhanc": 557, "request": [557, 558], "issu": [557, 558], "priorit": 557, "firstli": 558, "secondli": 558, "panicexcept": 558, "were": [558, 560, 562], "moment": 558, "1117": 558, "hint": 558, "1130": 558, "address": 558, "prevent": [558, 562], "wheel": 558, "__getitem__": 558, "slice": 558, "previous": 558, "unnecessari": 558, "1090": 558, "highlight": 558, "downgrad": 558, "tier": 558, "directed_barabasi_albert_graph": 558, "barabasi_albert_graph": 558, "starting_graph": 558, "20": 558, "graph_all_shortest_path": 558, "shortest_path": 558, "heavy_square_graph": 558, "bridges_set": 558, "clear_edg": 558, "edge_indices_from_endpoint": 558, "filter_nod": 558, "abstract": 558, "filter_edg": 558, "substitute_node_with_subgraph": [558, 560], "sub_graph": 558, "___": 558, "stratifi": 558, "graphnotbipartit": 558, "directed_random_bipartite_graph": 558, "undirected_random_bipartite_graph": 558, "bipartite_layout": 558, "66666667": 558, "entir": 558, "invalidmap": 558, "graph_token_swapp": 558, "feasibl": 558, "path_exist": 558, "preset_color": 558, "greedy_node_color_with_preset_color": 558, "greedy_node_color": 558, "transtiv": 558, "tr": 558, "ref": 558, "wikipedia": 558, "wiki": 558, "msrv": 558, "56": 558, "adopt": [558, 562], "difficult": 558, "catch": 558, "unhandl": 558, "token_swapp": 558, "vec": 558, "nodeindex": 558, "mapnotposs": 558, "ungraph": 558, "from_edg": 558, "hashmap": 558, "err": 558, "panick": 558, "funciton": 558, "pllatform": 558, "ci": 558, "infrastructur": 558, "hopefulli": 558, "shouldn": 558, "meaning": 558, "likelihood": 558, "precompil": [558, 562], "polici": 558, "74": 558, "deprecationwarn": 558, "graph_all_simple_path": 558, "digraph_all_simple_path": 558, "955": 558, "gnp_random_graph": 558, "pin": 558, "seri": [558, 560], "unreleas": 558, "soon": 558, "manag": 558, "older": 558, "incompat": 558, "forcibli": 558, "alongsid": 558, "expans": 558, "expand": 558, "suport": 558, "make_symmetr": 558, "83x443": 558, "5x5": 558, "grid_graph": 558, "btw": [558, 559], "find_cycl": 558, "directed_hexagonal_lattice_graph": 558, "hub_scor": 558, "650": 558, "2f": [558, 559], "centrality_scor": 558, "binomial_tree_graph": 558, "31": 558, "28": 558, "path_set": 558, "longest_simple_path_multiple_target": 558, "hashset": 558, "pagerank_scor": 558, "gnm_random_graph": 558, "random_geometric_graph": 558, "bread": 558, "find_predecessor_node_by_edg": 558, "colorbar": [558, 559], "rcparam": [558, 559], "figsiz": [558, 559], "gca": [558, 559], "sm": [558, 559], "cm": [558, 559], "scalarmapp": [558, 559], "norm": [558, 559], "titl": [558, 559], "1500x1000": [558, 559], "empty_graph": 558, "directed_empty_graph": 558, "directed_complete_graph": 558, "mesh_graph": [558, 562], "directed_mesh_graph": 558, "trait": 558, "gnp_directed_random_graph": 558, "gnp_undirected_random_graph": 558, "situat": 558, "48": 558, "well": 558, "facilit": 558, "deepcopi": 558, "836": 558, "incorrectli": 558, "flatten": 558, "744": 558, "node_remov": 558, "reflect": 558, "previosuli": 558, "certain": 558, "696": 558, "formerli": 558, "maintain": 558, "notif": 558, "manylinux2014": 558, "parser": 558, "read_graphml": 558, "node_link_json": 558, "cut_val": 558, "orang": 558, "graph_tensor_product": 558, "digraph_tensor_product": 558, "all_simple_paths_multiple_target": 558, "algo": 558, "dictmap": 558, "preserve_attribut": 558, "k_5": 558, "bfs_undirect": 558, "xml": [558, 562], "manylinux2010": 558, "glibc": 558, "sdist": 558, "41": 558, "rustc": 558, "bfsssuccessor": 558, "did": 558, "590": 558, "amd": 558, "digraph_cartesian_product": 558, "graph_cartesian_product": 558, "throughout": 558, "eventu": 558, "account": 558, "barbell_graph": 558, "graph_bfs_search": 558, "digraph_bfs_search": 558, "remain": [558, 562], "comp": 558, "150": 558, "color_edg": 558, "edges_in_chain": 558, "idx": 558, "adj_matrix": 558, "1j": 558, "2j": 558, "5j": 558, "contract_nod": [558, 560], "multi": 558, "guard": 558, "abc": 558, "graph_dfs_search": 558, "digraph_dfs_search": 558, "graph_dijkstra_search": 558, "digraph_dijkstra_search": 558, "dijkstratreeedgesrecord": 558, "discover_vertex": 558, "edge_relax": 558, "incident_edg": [558, 562], "incident_edge_index_map": 558, "endoint": 558, "achiev": 558, "full_rary_tre": 558, "lollipop_graph": [558, 562], "abil": 558, "freed": 558, "workspac": 558, "downstream": 558, "stabil": 558, "necessarili": 558, "turquois": 558, "fuschia": 558, "rx_graph": 558, "arguabl": 558, "desir": 558, "undirected_gnm_random_graph": 558, "42": [558, 562], "d_mat": 558, "avg_shortest_path": 558, "directed_binomial_tree_graph": 558, "overflow": 558, "panic": 558, "exceed": 558, "457": 558, "increment": 558, "515": 558, "oversight": 558, "525": 558, "heavy_hex_graph": [558, 562], "directed_heavy_hex_graph": 558, "directed_heavy_square_graph": 558, "pyo3_runtim": 558, "452": 558, "bugfix": 558, "importantli": 558, "graph_union": 558, "digraph_union": 558, "unifi": 558, "a_0": 558, "a_1": 558, "b_0": 558, "b_1": 558, "find_node_by_weight": 558, "432": 558, "429": 558, "memori": 558, "hash": 558, "367": 558, "slew": 558, "1080": 558, "0022250x": 558, "9990249": 558, "edge_subgraph": 558, "ap": 558, "prx": 558, "1103": 558, "physrevx": 558, "011022": 558, "read_edge_list": [558, 562], "first_edg": 558, "second_edg": 558, "original_graph": 558, "_sourc": 558, "_target": 558, "_weight": 558, "17": 558, "21": 558, "22": 558, "23": 558, "26": 558, "27": 558, "to_direct": 558, "rework": 558, "graph_floyd_warshal": 558, "digraph_floyd_warshal": 558, "to_undirect": 558, "control": 558, "40": 558, "undirected_graph": 558, "digraph_num_shortest_paths_unweight": 558, "graph_num_shortest_paths_unweight": 558, "has_parallel_edg": 558, "directed_grid_graph": 558, "33": 558, "path_length": 558, "lambda_": 558, "fashion": 558, "explicit": 558, "408": 558, "digraph_dijkstra_shortest_path": 558, "graph_dijkstra_shortest_path": 558, "digraph_all_pairs_dijkstra_shortest_path": 558, "graph_all_pairs_dijkstra_shortest_path": 558, "387": 558, "consecut": 558, "373": 558, "347": 558, "plethora": 558, "drawer": 558, "spring_layout": [558, 562], "convienc": 558, "preclud": 558, "95": 558, "random_layout": 558, "graph_random_layout": 558, "diraph_random_layout": 558, "circl": [558, 559, 562], "fixeds": 558, "480x481": 558, "immut": 558, "coeffici": 558, "digraph_all_pairs_dijkstra_path_length": 558, "graph_all_pairs_dijkstra_path_length": 558, "edge_index_map": [558, 562], "source_node_index": 558, "target_node_index": 558, "find_successors_by_edg": 558, "find_predecessors_by_edg": 558, "mst": 558, "tweak": 558, "00ffff": 558, "directed_cycle_graph": [558, 560], "to_dot": 558, "circular_layout": 558, "spiral_layout": 558, "795x1031": 558, "336x340": 558, "write_edge_list": 558, "digraph_k_shortest_path_length": 558, "graph_k_shortest_path_length": 558, "digraph_dijkstra_shortest_path_length": 558, "graph_dijkstra_shortest_path_length": 558, "predecessor_indic": 558, "dispatch": 558, "mistakenli": 558, "appl": 558, "arm": 558, "outward": 558, "371x155": 558, "is_maxmimal_match": 558, "disallow": 558, "145x291": 558, "143x291": 558, "queri": 558, "__str__": [558, 562], "human": 558, "readabl": [558, 562], "__hash__": 558, "unhash": 558, "update_edg": [558, 562], "garbag": 558, "collector": 558, "know": 558, "integr": [558, 562], "250": 558, "pickl": 558, "multiprocess": 558, "lookup": 558, "graph_astar_shortest_path": 558, "digraph_astar_shortest_path": 558, "digraph_dfs_edg": 558, "graph_dfs_edg": 558, "lock": 558, "meant": 558, "focu": 558, "commonli": 558, "is_symmetr": 558, "directed_gnm_random_graph": 558, "remove_edges_from": [558, 562], "removed_edges_from": 558, "graph_distance_matrix": 558, "digraph_distance_matrix": 558, "insert_node_on_in_edg": 558, "insert_node_on_out_edg": 558, "insert_node_on_in_edges_multipl": 558, "insert_node_on_out_edges_multipl": 558, "contigu": [558, 559, 562], "fortran": 558, "easier": 558, "defer": 558, "convers": 558, "bottleneck": 558, "especi": [558, 562], "across": 558, "exact": 558, "172": 558, "eas": 558, "graphivz": 558, "compos": 558, "remove_node_retain_edg": 558, "predecesor": 558, "warshal": 558, "segfault": 558, "backtrac": 558, "problemat": 558, "thank": 558, "contributor": 558, "find_adjacent_node_by_edg": 558, "remove_nodes_from": [558, 562], "No": 558, "export": 558, "special": 558, "pprint": 559, "007277212457600987": 559, "02047046385621779": 559, "07491079688119466": 559, "04242324126690451": 559, "09205321351482312": 559, "relev": 559, "magma": 559, "color_nod": 559, "to_hex": 559, "keep_alpha": 559, "1076x910": 559, "explor": 560, "primer": 560, "broader": 560, "restrict": 560, "simultan": 560, "walk": 560, "imposs": 560, "dependency_dag": 560, "job_a": 560, "job_b": 560, "job_c": 560, "job_d": 560, "job_": 560, "job_f": 560, "330x347": 560, "relationship": 560, "releationship": 560, "topo_sort": 560, "job_index": 560, "sdk": 560, "quantum": 560, "acceler": 560, "routin": 560, "coher": 560, "gate": 560, "reset": 560, "graphic": 560, "q_0": 560, "q_1": 560, "mea": 560, "beyond": 560, "fact": 560, "qubit": 560, "c_0": 560, "c_1": 560, "deped": 560, "in_nod": 560, "out_nod": 560, "h_gate": 560, "cx": 560, "cx_gate": 560, "meas_q0": 560, "meas_q1": 560, "q0": 560, "q1": 560, "401x523": 560, "flow": 560, "transform": 560, "hardwar": 560, "translat": 560, "devic": 560, "qpu": 560, "didn": 560, "translation_matrix": 560, "rz": 560, "pi": 560, "sx": 560, "insruct": 560, "hardware_instruct": 560, "subcircuit": 560, "gate_index": 560, "edge_v": 560, "equivalent_subcircuit": 560, "map_fn": 560, "401x755": 560, "analyz": 560, "shorter": 560, "bit_nod": 560, "unitari": 560, "simplif": 560, "newest": 560, "nod": 560, "_node_id": 560, "wouldn": 560, "serv": 562, "past": 562, "shorten": 562, "convent": 562, "compris": 562, "long": 562, "green": 562, "discuss": 562, "first_index_data": 562, "first_index_edgepoint": 562, "helper": 562, "remove_edg": 562, "remove_edge_from_index": 562, "absent": 562, "last_index": 562, "simplic": 562, "graphnod": 562, "graphedg": 562, "edgenod": 562, "popul": 562, "notion": 562, "show": 562, "lolipop_graph": 562, "combined_graph": 562, "new_nod": 562, "spam": 562, "375": 562, "subax1": 562, "subplot": 562, "121": 562, "subax2": 562, "122": 562, "attr_dict": 562, "fill_color": 562, "syndrom": 562, "elif": 562, "fontcolor": 562, "2132x2297": 562, "decid": 562, "few": 562, "consider": 562, "choic": 562}, "objects": {"rustworkx": [[25, 0, 1, "", "AllPairsPathLengthMapping"], [29, 0, 1, "", "AllPairsPathMapping"], [33, 0, 1, "", "BFSPredecessors"], [34, 0, 1, "", "BFSSuccessors"], [35, 0, 1, "", "BiconnectedComponents"], [39, 0, 1, "", "CentralityMapping"], [43, 0, 1, "", "Chains"], [44, 2, 1, "", "DAGHasCycle"], [45, 2, 1, "", "DAGWouldCycle"], [46, 0, 1, "", "EdgeCentralityMapping"], [50, 0, 1, "", "EdgeIndexMap"], [54, 0, 1, "", "EdgeIndices"], [55, 0, 1, "", "EdgeList"], [56, 2, 1, "", "GraphNotBipartite"], [57, 2, 1, "", "InvalidMapping"], [58, 2, 1, "", "InvalidNode"], [59, 2, 1, "", "JSONSerializationError"], [60, 2, 1, "", "NegativeCycle"], [61, 2, 1, "", "NoEdgeBetweenNodes"], [62, 2, 1, "", "NoPathFound"], [63, 2, 1, "", "NoSuitableNeighbors"], [64, 0, 1, "", "NodeIndices"], [65, 0, 1, "", "NodeMap"], [69, 2, 1, "", "NullGraph"], [70, 0, 1, "", "PathLengthMapping"], [74, 0, 1, "", "PathMapping"], [78, 0, 1, "", "Pos2DMapping"], [82, 0, 1, "", "ProductNodeMap"], [86, 0, 1, "", "PyDAG"], [164, 0, 1, "", "PyDiGraph"], [242, 0, 1, "", "PyGraph"], [299, 0, 1, "", "TopologicalSorter"], [303, 0, 1, "", "WeightedEdgeList"], [304, 4, 1, "", "adjacency_matrix"], [305, 4, 1, "", "all_pairs_all_simple_paths"], [306, 4, 1, "", "all_pairs_bellman_ford_path_lengths"], [307, 4, 1, "", "all_pairs_bellman_ford_shortest_paths"], [308, 4, 1, "", "all_pairs_dijkstra_path_lengths"], [309, 4, 1, "", "all_pairs_dijkstra_shortest_paths"], [310, 4, 1, "", "all_shortest_paths"], [311, 4, 1, "", "all_simple_paths"], [312, 4, 1, "", "ancestors"], [313, 4, 1, "", "articulation_points"], [314, 4, 1, "", "astar_shortest_path"], [315, 4, 1, "", "barabasi_albert_graph"], [316, 4, 1, "", "bellman_ford_shortest_path_lengths"], [317, 4, 1, "", "bellman_ford_shortest_paths"], [318, 4, 1, "", "betweenness_centrality"], [319, 4, 1, "", "bfs_predecessors"], [320, 4, 1, "", "bfs_search"], [321, 4, 1, "", "bfs_successors"], [322, 4, 1, "", "biconnected_components"], [323, 4, 1, "", "bipartite_layout"], [324, 4, 1, "", "bridges"], [325, 4, 1, "", "cartesian_product"], [326, 4, 1, "", "chain_decomposition"], [327, 4, 1, "", "circular_layout"], [328, 4, 1, "", "closeness_centrality"], [329, 4, 1, "", "collect_bicolor_runs"], [330, 4, 1, "", "collect_runs"], [331, 4, 1, "", "complement"], [332, 4, 1, "", "connected_components"], [333, 4, 1, "", "core_number"], [334, 4, 1, "", "cycle_basis"], [335, 4, 1, "", "dag_longest_path"], [336, 4, 1, "", "dag_longest_path_length"], [337, 4, 1, "", "dag_weighted_longest_path"], [338, 4, 1, "", "dag_weighted_longest_path_length"], [339, 4, 1, "", "descendants"], [340, 4, 1, "", "dfs_edges"], [341, 4, 1, "", "dfs_search"], [342, 4, 1, "", "digraph_adjacency_matrix"], [343, 4, 1, "", "digraph_all_pairs_all_simple_paths"], [344, 4, 1, "", "digraph_all_pairs_bellman_ford_path_lengths"], [345, 4, 1, "", "digraph_all_pairs_bellman_ford_shortest_paths"], [346, 4, 1, "", "digraph_all_pairs_dijkstra_path_lengths"], [347, 4, 1, "", "digraph_all_pairs_dijkstra_shortest_paths"], [348, 4, 1, "", "digraph_all_shortest_paths"], [349, 4, 1, "", "digraph_all_simple_paths"], [350, 4, 1, "", "digraph_astar_shortest_path"], [351, 4, 1, "", "digraph_bellman_ford_shortest_path_lengths"], [352, 4, 1, "", "digraph_betweenness_centrality"], [353, 4, 1, "", "digraph_bfs_search"], [354, 4, 1, "", "digraph_bipartite_layout"], [355, 4, 1, "", "digraph_cartesian_product"], [356, 4, 1, "", "digraph_circular_layout"], [357, 4, 1, "", "digraph_closeness_centrality"], [358, 4, 1, "", "digraph_complement"], [359, 4, 1, "", "digraph_core_number"], [360, 4, 1, "", "digraph_dfs_edges"], [361, 4, 1, "", "digraph_dfs_search"], [362, 4, 1, "", "digraph_dijkstra_search"], [363, 4, 1, "", "digraph_dijkstra_shortest_path_lengths"], [364, 4, 1, "", "digraph_dijkstra_shortest_paths"], [365, 4, 1, "", "digraph_distance_matrix"], [366, 4, 1, "", "digraph_edge_betweenness_centrality"], [367, 4, 1, "", "digraph_eigenvector_centrality"], [368, 4, 1, "", "digraph_find_cycle"], [369, 4, 1, "", "digraph_floyd_warshall"], [370, 4, 1, "", "digraph_floyd_warshall_numpy"], [371, 4, 1, "", "digraph_floyd_warshall_successor_and_distance"], [372, 4, 1, "", "digraph_is_isomorphic"], [373, 4, 1, "", "digraph_is_subgraph_isomorphic"], [374, 4, 1, "", "digraph_k_shortest_path_lengths"], [375, 4, 1, "", "digraph_katz_centrality"], [376, 4, 1, "", "digraph_longest_simple_path"], [377, 4, 1, "", "digraph_node_link_json"], [378, 4, 1, "", "digraph_num_shortest_paths_unweighted"], [379, 4, 1, "", "digraph_random_layout"], [380, 4, 1, "", "digraph_shell_layout"], [381, 4, 1, "", "digraph_spiral_layout"], [382, 4, 1, "", "digraph_spring_layout"], [383, 4, 1, "", "digraph_tensor_product"], [384, 4, 1, "", "digraph_transitivity"], [385, 4, 1, "", "digraph_union"], [386, 4, 1, "", "digraph_unweighted_average_shortest_path_length"], [387, 4, 1, "", "digraph_vf2_mapping"], [388, 4, 1, "", "dijkstra_search"], [389, 4, 1, "", "dijkstra_shortest_path_lengths"], [390, 4, 1, "", "dijkstra_shortest_paths"], [391, 4, 1, "", "directed_barabasi_albert_graph"], [392, 4, 1, "", "directed_gnm_random_graph"], [393, 4, 1, "", "directed_gnp_random_graph"], [394, 4, 1, "", "directed_random_bipartite_graph"], [395, 4, 1, "", "distance_matrix"], [396, 4, 1, "", "edge_betweenness_centrality"], [397, 4, 1, "", "eigenvector_centrality"], [398, 4, 1, "", "find_negative_cycle"], [399, 4, 1, "", "floyd_warshall"], [400, 4, 1, "", "floyd_warshall_numpy"], [401, 4, 1, "", "floyd_warshall_successor_and_distance"], [428, 4, 1, "", "graph_adjacency_matrix"], [429, 4, 1, "", "graph_all_pairs_all_simple_paths"], [430, 4, 1, "", "graph_all_pairs_bellman_ford_path_lengths"], [431, 4, 1, "", "graph_all_pairs_bellman_ford_shortest_paths"], [432, 4, 1, "", "graph_all_pairs_dijkstra_path_lengths"], [433, 4, 1, "", "graph_all_pairs_dijkstra_shortest_paths"], [434, 4, 1, "", "graph_all_shortest_paths"], [435, 4, 1, "", "graph_all_simple_paths"], [436, 4, 1, "", "graph_astar_shortest_path"], [437, 4, 1, "", "graph_bellman_ford_shortest_path_lengths"], [438, 4, 1, "", "graph_betweenness_centrality"], [439, 4, 1, "", "graph_bfs_search"], [440, 4, 1, "", "graph_bipartite_edge_color"], [441, 4, 1, "", "graph_bipartite_layout"], [442, 4, 1, "", "graph_cartesian_product"], [443, 4, 1, "", "graph_circular_layout"], [444, 4, 1, "", "graph_closeness_centrality"], [445, 4, 1, "", "graph_complement"], [446, 4, 1, "", "graph_core_number"], [447, 4, 1, "", "graph_dfs_edges"], [448, 4, 1, "", "graph_dfs_search"], [449, 4, 1, "", "graph_dijkstra_search"], [450, 4, 1, "", "graph_dijkstra_shortest_path_lengths"], [451, 4, 1, "", "graph_dijkstra_shortest_paths"], [452, 4, 1, "", "graph_distance_matrix"], [453, 4, 1, "", "graph_edge_betweenness_centrality"], [454, 4, 1, "", "graph_eigenvector_centrality"], [455, 4, 1, "", "graph_floyd_warshall"], [456, 4, 1, "", "graph_floyd_warshall_numpy"], [457, 4, 1, "", "graph_floyd_warshall_successor_and_distance"], [458, 4, 1, "", "graph_greedy_color"], [459, 4, 1, "", "graph_greedy_edge_color"], [460, 4, 1, "", "graph_is_isomorphic"], [461, 4, 1, "", "graph_is_subgraph_isomorphic"], [462, 4, 1, "", "graph_k_shortest_path_lengths"], [463, 4, 1, "", "graph_katz_centrality"], [464, 4, 1, "", "graph_line_graph"], [465, 4, 1, "", "graph_longest_simple_path"], [466, 4, 1, "", "graph_misra_gries_edge_color"], [467, 4, 1, "", "graph_node_link_json"], [468, 4, 1, "", "graph_num_shortest_paths_unweighted"], [469, 4, 1, "", "graph_random_layout"], [470, 4, 1, "", "graph_shell_layout"], [471, 4, 1, "", "graph_spiral_layout"], [472, 4, 1, "", "graph_spring_layout"], [473, 4, 1, "", "graph_tensor_product"], [474, 4, 1, "", "graph_token_swapper"], [475, 4, 1, "", "graph_transitivity"], [476, 4, 1, "", "graph_union"], [477, 4, 1, "", "graph_unweighted_average_shortest_path_length"], [478, 4, 1, "", "graph_vf2_mapping"], [479, 4, 1, "", "has_path"], [480, 4, 1, "", "hits"], [481, 4, 1, "", "is_bipartite"], [482, 4, 1, "", "is_connected"], [483, 4, 1, "", "is_directed_acyclic_graph"], [484, 4, 1, "", "is_isomorphic"], [485, 4, 1, "", "is_isomorphic_node_match"], [486, 4, 1, "", "is_matching"], [487, 4, 1, "", "is_maximal_matching"], [488, 4, 1, "", "is_planar"], [489, 4, 1, "", "is_subgraph_isomorphic"], [490, 4, 1, "", "is_weakly_connected"], [491, 4, 1, "", "isolates"], [492, 4, 1, "", "k_shortest_path_lengths"], [493, 4, 1, "", "katz_centrality"], [494, 4, 1, "", "layers"], [495, 4, 1, "", "lexicographical_topological_sort"], [496, 4, 1, "", "longest_simple_path"], [497, 4, 1, "", "max_weight_matching"], [498, 4, 1, "", "metric_closure"], [499, 4, 1, "", "minimum_spanning_edges"], [500, 4, 1, "", "minimum_spanning_tree"], [501, 4, 1, "", "negative_edge_cycle"], [502, 4, 1, "", "networkx_converter"], [503, 4, 1, "", "node_connected_component"], [504, 4, 1, "", "node_link_json"], [505, 4, 1, "", "num_shortest_paths_unweighted"], [506, 4, 1, "", "number_connected_components"], [507, 4, 1, "", "number_weakly_connected_components"], [508, 4, 1, "", "pagerank"], [509, 4, 1, "", "random_geometric_graph"], [510, 4, 1, "", "random_layout"], [511, 4, 1, "", "read_graphml"], [512, 4, 1, "", "shell_layout"], [513, 4, 1, "", "simple_cycles"], [514, 4, 1, "", "spiral_layout"], [515, 4, 1, "", "spring_layout"], [516, 4, 1, "", "steiner_tree"], [517, 4, 1, "", "stoer_wagner_min_cut"], [518, 4, 1, "", "strongly_connected_components"], [519, 4, 1, "", "topological_generations"], [520, 4, 1, "", "topological_sort"], [521, 4, 1, "", "transitive_reduction"], [522, 4, 1, "", "transitivity"], [523, 4, 1, "", "two_color"], [524, 4, 1, "", "undirected_gnm_random_graph"], [525, 4, 1, "", "undirected_gnp_random_graph"], [526, 4, 1, "", "undirected_random_bipartite_graph"], [527, 4, 1, "", "union"], [528, 4, 1, "", "unweighted_average_shortest_path_length"], [529, 4, 1, "", "vf2_mapping"], [553, 4, 1, "", "weakly_connected_components"]], "rustworkx.AllPairsPathLengthMapping": [[26, 1, 1, "", "items"], [27, 1, 1, "", "keys"], [28, 1, 1, "", "values"]], "rustworkx.AllPairsPathMapping": [[30, 1, 1, "", "items"], [31, 1, 1, "", "keys"], [32, 1, 1, "", "values"]], "rustworkx.BiconnectedComponents": [[36, 1, 1, "", "items"], [37, 1, 1, "", "keys"], [38, 1, 1, "", "values"]], "rustworkx.CentralityMapping": [[40, 1, 1, "", "items"], [41, 1, 1, "", "keys"], [42, 1, 1, "", "values"]], "rustworkx.EdgeCentralityMapping": [[47, 1, 1, "", "items"], [48, 1, 1, "", "keys"], [49, 1, 1, "", "values"]], "rustworkx.EdgeIndexMap": [[51, 1, 1, "", "items"], [52, 1, 1, "", "keys"], [53, 1, 1, "", "values"]], "rustworkx.NodeMap": [[66, 1, 1, "", "items"], [67, 1, 1, "", "keys"], [68, 1, 1, "", "values"]], "rustworkx.PathLengthMapping": [[71, 1, 1, "", "items"], [72, 1, 1, "", "keys"], [73, 1, 1, "", "values"]], "rustworkx.PathMapping": [[75, 1, 1, "", "items"], [76, 1, 1, "", "keys"], [77, 1, 1, "", "values"]], "rustworkx.Pos2DMapping": [[79, 1, 1, "", "items"], [80, 1, 1, "", "keys"], [81, 1, 1, "", "values"]], "rustworkx.ProductNodeMap": [[83, 1, 1, "", "items"], [84, 1, 1, "", "keys"], [85, 1, 1, "", "values"]], "rustworkx.PyDAG": [[87, 1, 1, "", "add_child"], [88, 1, 1, "", "add_edge"], [89, 1, 1, "", "add_edges_from"], [90, 1, 1, "", "add_edges_from_no_data"], [91, 1, 1, "", "add_node"], [92, 1, 1, "", "add_nodes_from"], [93, 1, 1, "", "add_parent"], [94, 1, 1, "", "adj"], [95, 1, 1, "", "adj_direction"], [86, 3, 1, "", "attrs"], [86, 3, 1, "", "check_cycle"], [96, 1, 1, "", "clear"], [97, 1, 1, "", "clear_edges"], [98, 1, 1, "", "compose"], [99, 1, 1, "", "contract_nodes"], [100, 1, 1, "", "copy"], [101, 1, 1, "", "edge_index_map"], [102, 1, 1, "", "edge_indices"], [103, 1, 1, "", "edge_indices_from_endpoints"], [104, 1, 1, "", "edge_list"], [105, 1, 1, "", "edge_subgraph"], [106, 1, 1, "", "edges"], [107, 1, 1, "", "extend_from_edge_list"], [108, 1, 1, "", "extend_from_weighted_edge_list"], [109, 1, 1, "", "filter_edges"], [110, 1, 1, "", "filter_nodes"], [111, 1, 1, "", "find_adjacent_node_by_edge"], [112, 1, 1, "", "find_node_by_weight"], [113, 1, 1, "", "find_predecessor_node_by_edge"], [114, 1, 1, "", "find_predecessors_by_edge"], [115, 1, 1, "", "find_successors_by_edge"], [116, 1, 1, "", "from_adjacency_matrix"], [117, 1, 1, "", "from_complex_adjacency_matrix"], [118, 1, 1, "", "get_all_edge_data"], [119, 1, 1, "", "get_edge_data"], [120, 1, 1, "", "get_edge_data_by_index"], [121, 1, 1, "", "get_edge_endpoints_by_index"], [122, 1, 1, "", "get_node_data"], [123, 1, 1, "", "has_edge"], [124, 1, 1, "", "has_parallel_edges"], [125, 1, 1, "", "in_degree"], [126, 1, 1, "", "in_edges"], [127, 1, 1, "", "incident_edge_index_map"], [128, 1, 1, "", "incident_edges"], [129, 1, 1, "", "insert_node_on_in_edges"], [130, 1, 1, "", "insert_node_on_in_edges_multiple"], [131, 1, 1, "", "insert_node_on_out_edges"], [132, 1, 1, "", "insert_node_on_out_edges_multiple"], [133, 1, 1, "", "is_symmetric"], [134, 1, 1, "", "make_symmetric"], [135, 1, 1, "", "merge_nodes"], [86, 3, 1, "", "multigraph"], [136, 1, 1, "", "neighbors"], [137, 1, 1, "", "node_indexes"], [138, 1, 1, "", "node_indices"], [139, 1, 1, "", "nodes"], [140, 1, 1, "", "num_edges"], [141, 1, 1, "", "num_nodes"], [142, 1, 1, "", "out_degree"], [143, 1, 1, "", "out_edges"], [144, 1, 1, "", "predecessor_indices"], [145, 1, 1, "", "predecessors"], [146, 1, 1, "", "read_edge_list"], [147, 1, 1, "", "remove_edge"], [148, 1, 1, "", "remove_edge_from_index"], [149, 1, 1, "", "remove_edges_from"], [150, 1, 1, "", "remove_node"], [151, 1, 1, "", "remove_node_retain_edges"], [152, 1, 1, "", "remove_nodes_from"], [153, 1, 1, "", "reverse"], [154, 1, 1, "", "subgraph"], [155, 1, 1, "", "substitute_node_with_subgraph"], [156, 1, 1, "", "successor_indices"], [157, 1, 1, "", "successors"], [158, 1, 1, "", "to_dot"], [159, 1, 1, "", "to_undirected"], [160, 1, 1, "", "update_edge"], [161, 1, 1, "", "update_edge_by_index"], [162, 1, 1, "", "weighted_edge_list"], [163, 1, 1, "", "write_edge_list"]], "rustworkx.PyDiGraph": [[165, 1, 1, "", "add_child"], [166, 1, 1, "", "add_edge"], [167, 1, 1, "", "add_edges_from"], [168, 1, 1, "", "add_edges_from_no_data"], [169, 1, 1, "", "add_node"], [170, 1, 1, "", "add_nodes_from"], [171, 1, 1, "", "add_parent"], [172, 1, 1, "", "adj"], [173, 1, 1, "", "adj_direction"], [164, 3, 1, "", "attrs"], [164, 3, 1, "", "check_cycle"], [174, 1, 1, "", "clear"], [175, 1, 1, "", "clear_edges"], [176, 1, 1, "", "compose"], [177, 1, 1, "", "contract_nodes"], [178, 1, 1, "", "copy"], [179, 1, 1, "", "edge_index_map"], [180, 1, 1, "", "edge_indices"], [181, 1, 1, "", "edge_indices_from_endpoints"], [182, 1, 1, "", "edge_list"], [183, 1, 1, "", "edge_subgraph"], [184, 1, 1, "", "edges"], [185, 1, 1, "", "extend_from_edge_list"], [186, 1, 1, "", "extend_from_weighted_edge_list"], [187, 1, 1, "", "filter_edges"], [188, 1, 1, "", "filter_nodes"], [189, 1, 1, "", "find_adjacent_node_by_edge"], [190, 1, 1, "", "find_node_by_weight"], [191, 1, 1, "", "find_predecessor_node_by_edge"], [192, 1, 1, "", "find_predecessors_by_edge"], [193, 1, 1, "", "find_successors_by_edge"], [194, 1, 1, "", "from_adjacency_matrix"], [195, 1, 1, "", "from_complex_adjacency_matrix"], [196, 1, 1, "", "get_all_edge_data"], [197, 1, 1, "", "get_edge_data"], [198, 1, 1, "", "get_edge_data_by_index"], [199, 1, 1, "", "get_edge_endpoints_by_index"], [200, 1, 1, "", "get_node_data"], [201, 1, 1, "", "has_edge"], [202, 1, 1, "", "has_parallel_edges"], [203, 1, 1, "", "in_degree"], [204, 1, 1, "", "in_edges"], [205, 1, 1, "", "incident_edge_index_map"], [206, 1, 1, "", "incident_edges"], [207, 1, 1, "", "insert_node_on_in_edges"], [208, 1, 1, "", "insert_node_on_in_edges_multiple"], [209, 1, 1, "", "insert_node_on_out_edges"], [210, 1, 1, "", "insert_node_on_out_edges_multiple"], [211, 1, 1, "", "is_symmetric"], [212, 1, 1, "", "make_symmetric"], [213, 1, 1, "", "merge_nodes"], [164, 3, 1, "", "multigraph"], [214, 1, 1, "", "neighbors"], [215, 1, 1, "", "node_indexes"], [216, 1, 1, "", "node_indices"], [217, 1, 1, "", "nodes"], [218, 1, 1, "", "num_edges"], [219, 1, 1, "", "num_nodes"], [220, 1, 1, "", "out_degree"], [221, 1, 1, "", "out_edges"], [222, 1, 1, "", "predecessor_indices"], [223, 1, 1, "", "predecessors"], [224, 1, 1, "", "read_edge_list"], [225, 1, 1, "", "remove_edge"], [226, 1, 1, "", "remove_edge_from_index"], [227, 1, 1, "", "remove_edges_from"], [228, 1, 1, "", "remove_node"], [229, 1, 1, "", "remove_node_retain_edges"], [230, 1, 1, "", "remove_nodes_from"], [231, 1, 1, "", "reverse"], [232, 1, 1, "", "subgraph"], [233, 1, 1, "", "substitute_node_with_subgraph"], [234, 1, 1, "", "successor_indices"], [235, 1, 1, "", "successors"], [236, 1, 1, "", "to_dot"], [237, 1, 1, "", "to_undirected"], [238, 1, 1, "", "update_edge"], [239, 1, 1, "", "update_edge_by_index"], [240, 1, 1, "", "weighted_edge_list"], [241, 1, 1, "", "write_edge_list"]], "rustworkx.PyGraph": [[243, 1, 1, "", "add_edge"], [244, 1, 1, "", "add_edges_from"], [245, 1, 1, "", "add_edges_from_no_data"], [246, 1, 1, "", "add_node"], [247, 1, 1, "", "add_nodes_from"], [248, 1, 1, "", "adj"], [242, 3, 1, "", "attrs"], [249, 1, 1, "", "clear"], [250, 1, 1, "", "clear_edges"], [251, 1, 1, "", "compose"], [252, 1, 1, "", "contract_nodes"], [253, 1, 1, "", "copy"], [254, 1, 1, "", "degree"], [255, 1, 1, "", "edge_index_map"], [256, 1, 1, "", "edge_indices"], [257, 1, 1, "", "edge_indices_from_endpoints"], [258, 1, 1, "", "edge_list"], [259, 1, 1, "", "edge_subgraph"], [260, 1, 1, "", "edges"], [261, 1, 1, "", "extend_from_edge_list"], [262, 1, 1, "", "extend_from_weighted_edge_list"], [263, 1, 1, "", "filter_edges"], [264, 1, 1, "", "filter_nodes"], [265, 1, 1, "", "find_node_by_weight"], [266, 1, 1, "", "from_adjacency_matrix"], [267, 1, 1, "", "from_complex_adjacency_matrix"], [268, 1, 1, "", "get_all_edge_data"], [269, 1, 1, "", "get_edge_data"], [270, 1, 1, "", "get_edge_data_by_index"], [271, 1, 1, "", "get_edge_endpoints_by_index"], [272, 1, 1, "", "get_node_data"], [273, 1, 1, "", "has_edge"], [274, 1, 1, "", "has_parallel_edges"], [275, 1, 1, "", "in_edges"], [276, 1, 1, "", "incident_edge_index_map"], [277, 1, 1, "", "incident_edges"], [242, 3, 1, "", "multigraph"], [278, 1, 1, "", "neighbors"], [279, 1, 1, "", "node_indexes"], [280, 1, 1, "", "node_indices"], [281, 1, 1, "", "nodes"], [282, 1, 1, "", "num_edges"], [283, 1, 1, "", "num_nodes"], [284, 1, 1, "", "out_edges"], [285, 1, 1, "", "read_edge_list"], [286, 1, 1, "", "remove_edge"], [287, 1, 1, "", "remove_edge_from_index"], [288, 1, 1, "", "remove_edges_from"], [289, 1, 1, "", "remove_node"], [290, 1, 1, "", "remove_nodes_from"], [291, 1, 1, "", "subgraph"], [292, 1, 1, "", "substitute_node_with_subgraph"], [293, 1, 1, "", "to_directed"], [294, 1, 1, "", "to_dot"], [295, 1, 1, "", "update_edge"], [296, 1, 1, "", "update_edge_by_index"], [297, 1, 1, "", "weighted_edge_list"], [298, 1, 1, "", "write_edge_list"]], "rustworkx.TopologicalSorter": [[300, 1, 1, "", "done"], [301, 1, 1, "", "get_ready"], [302, 1, 1, "", "is_active"]], "rustworkx.generators": [[402, 4, 1, "", "barbell_graph"], [403, 4, 1, "", "binomial_tree_graph"], [404, 4, 1, "", "complete_graph"], [405, 4, 1, "", "cycle_graph"], [406, 4, 1, "", "directed_binomial_tree_graph"], [407, 4, 1, "", "directed_complete_graph"], [408, 4, 1, "", "directed_cycle_graph"], [409, 4, 1, "", "directed_empty_graph"], [410, 4, 1, "", "directed_grid_graph"], [411, 4, 1, "", "directed_heavy_hex_graph"], [412, 4, 1, "", "directed_heavy_square_graph"], [413, 4, 1, "", "directed_hexagonal_lattice_graph"], [414, 4, 1, "", "directed_mesh_graph"], [415, 4, 1, "", "directed_path_graph"], [416, 4, 1, "", "directed_star_graph"], [417, 4, 1, "", "empty_graph"], [418, 4, 1, "", "full_rary_tree"], [419, 4, 1, "", "generalized_petersen_graph"], [420, 4, 1, "", "grid_graph"], [421, 4, 1, "", "heavy_hex_graph"], [422, 4, 1, "", "heavy_square_graph"], [423, 4, 1, "", "hexagonal_lattice_graph"], [424, 4, 1, "", "lollipop_graph"], [425, 4, 1, "", "mesh_graph"], [426, 4, 1, "", "path_graph"], [427, 4, 1, "", "star_graph"]], "rustworkx.visit": [[530, 0, 1, "", "BFSVisitor"], [537, 0, 1, "", "DFSVisitor"], [543, 0, 1, "", "DijkstraVisitor"], [549, 2, 1, "", "PruneSearch"], [550, 2, 1, "", "StopSearch"]], "rustworkx.visit.BFSVisitor": [[531, 1, 1, "", "black_target_edge"], [532, 1, 1, "", "discover_vertex"], [533, 1, 1, "", "finish_vertex"], [534, 1, 1, "", "gray_target_edge"], [535, 1, 1, "", "non_tree_edge"], [536, 1, 1, "", "tree_edge"]], "rustworkx.visit.DFSVisitor": [[538, 1, 1, "", "back_edge"], [539, 1, 1, "", "discover_vertex"], [540, 1, 1, "", "finish_vertex"], [541, 1, 1, "", "forward_or_cross_edge"], [542, 1, 1, "", "tree_edge"]], "rustworkx.visit.DijkstraVisitor": [[544, 1, 1, "", "discover_vertex"], [545, 1, 1, "", "edge_not_relaxed"], [546, 1, 1, "", "edge_relaxed"], [547, 1, 1, "", "examine_edge"], [548, 1, 1, "", "finish_vertex"]], "rustworkx.visualization": [[551, 4, 1, "", "graphviz_draw"], [552, 4, 1, "", "mpl_draw"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:exception", "3": "py:attribute", "4": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "exception", "Python exception"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"]}, "titleterms": {"contribut": 0, "rustworkx": [0, 19, 26, 27, 28, 30, 31, 32, 36, 37, 38, 40, 41, 42, 44, 45, 47, 48, 49, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 561, 562], "make": 0, "chang": 0, "code": 0, "modul": 0, "export": 0, "lib": 0, "r": 0, "ad": 0, "function": [0, 6, 10, 20, 21, 22, 23, 557], "directori": 0, "when": 0, "singl": [0, 554], "file": 0, "i": 0, "enough": 0, "core": [0, 555], "test": 0, "run": 0, "subset": 0, "visual": [0, 551, 552, 557, 559, 563], "style": 0, "rust": 0, "lint": 0, "python": 0, "build": 0, "document": [0, 555], "type": [0, 15], "annot": 0, "releas": [0, 558], "note": [0, 558], "new": [0, 558], "link": [0, 8], "issu": 0, "gener": [0, 17, 23, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 559, 562], "local": 0, "pull": 0, "request": 0, "review": 0, "ci": 0, "merg": 0, "queue": 0, "stabl": 0, "branch": 0, "polici": 0, "backport": 0, "procedur": 0, "manual": 0, "central": [1, 559], "color": 2, "connect": 3, "cycl": 3, "dag": [4, 560], "algorithm": [4, 6, 10], "graph": [5, 18, 23, 554, 557, 559, 560, 562], "oper": [5, 562], "isomorph": [7, 554], "analysi": 8, "match": 9, "other": [10, 554, 558], "shortest": [11, 554], "path": [11, 554], "travers": 12, "tree": 13, "convert": [14, 557], "custom": 15, "return": 15, "except": 16, "class": [18, 557], "api": [19, 21, 22, 557, 563], "refer": 19, "layout": 20, "pydigraph": [21, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241], "pygraph": [22, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], "random": 23, "serial": 24, "allpairspathlengthmap": [25, 26, 27, 28], "item": [26, 30, 36, 40, 47, 51, 66, 71, 75, 79, 83], "kei": [27, 31, 37, 41, 48, 52, 67, 72, 76, 80, 84, 557], "valu": [28, 32, 38, 42, 49, 53, 68, 73, 77, 81, 85], "allpairspathmap": [29, 30, 31, 32], "bfspredecessor": 33, "bfssuccessor": 34, "biconnectedcompon": [35, 36, 37, 38], "centralitymap": [39, 40, 41, 42], "chain": 43, "daghascycl": 44, "dagwouldcycl": 45, "edgecentralitymap": [46, 47, 48, 49], "edgeindexmap": [50, 51, 52, 53], "edgeindic": 54, "edgelist": 55, "graphnotbipartit": 56, "invalidmap": 57, "invalidnod": 58, "jsonserializationerror": 59, "negativecycl": 60, "noedgebetweennod": 61, "nopathfound": 62, "nosuitableneighbor": 63, "nodeindic": 64, "nodemap": [65, 66, 67, 68], "nullgraph": 69, "pathlengthmap": [70, 71, 72, 73], "pathmap": [74, 75, 76, 77], "pos2dmap": [78, 79, 80, 81], "productnodemap": [82, 83, 84, 85], "pydag": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], "add_child": [87, 165], "add_edg": [88, 166, 243], "add_edges_from": [89, 167, 244], "add_edges_from_no_data": [90, 168, 245], "add_nod": [91, 169, 246], "add_nodes_from": [92, 170, 247], "add_par": [93, 171], "adj": [94, 172, 248], "adj_direct": [95, 173], "clear": [96, 174, 249], "clear_edg": [97, 175, 250], "compos": [98, 176, 251], "contract_nod": [99, 177, 252], "copi": [100, 178, 253], "edge_index_map": [101, 179, 255], "edge_indic": [102, 180, 256], "edge_indices_from_endpoint": [103, 181, 257], "edge_list": [104, 182, 258], "edge_subgraph": [105, 183, 259], "edg": [106, 184, 260, 557, 562], "extend_from_edge_list": [107, 185, 261], "extend_from_weighted_edge_list": [108, 186, 262], "filter_edg": [109, 187, 263], "filter_nod": [110, 188, 264], "find_adjacent_node_by_edg": [111, 189], "find_node_by_weight": [112, 190, 265], "find_predecessor_node_by_edg": [113, 191], "find_predecessors_by_edg": [114, 192], "find_successors_by_edg": [115, 193], "from_adjacency_matrix": [116, 194, 266], "from_complex_adjacency_matrix": [117, 195, 267], "get_all_edge_data": [118, 196, 268], "get_edge_data": [119, 197, 269], "get_edge_data_by_index": [120, 198, 270], "get_edge_endpoints_by_index": [121, 199, 271], "get_node_data": [122, 200, 272], "has_edg": [123, 201, 273], "has_parallel_edg": [124, 202, 274], "in_degre": [125, 203], "in_edg": [126, 204, 275], "incident_edge_index_map": [127, 205, 276], "incident_edg": [128, 206, 277], "insert_node_on_in_edg": [129, 207], "insert_node_on_in_edges_multipl": [130, 208], "insert_node_on_out_edg": [131, 209], "insert_node_on_out_edges_multipl": [132, 210], "is_symmetr": [133, 211], "make_symmetr": [134, 212], "merge_nod": [135, 213], "neighbor": [136, 214, 278, 562], "node_index": [137, 215, 279], "node_indic": [138, 216, 280], "node": [139, 217, 281, 557, 562], "num_edg": [140, 218, 282], "num_nod": [141, 219, 283], "out_degre": [142, 220], "out_edg": [143, 221, 284], "predecessor_indic": [144, 222], "predecessor": [145, 223], "read_edge_list": [146, 224, 285], "remove_edg": [147, 225, 286], "remove_edge_from_index": [148, 226, 287], "remove_edges_from": [149, 227, 288], "remove_nod": [150, 228, 289], "remove_node_retain_edg": [151, 229], "remove_nodes_from": [152, 230, 290], "revers": [153, 231], "subgraph": [154, 232, 291, 554], "substitute_node_with_subgraph": [155, 233, 292], "successor_indic": [156, 234], "successor": [157, 235], "to_dot": [158, 236, 294], "to_undirect": [159, 237], "update_edg": [160, 238, 295], "update_edge_by_index": [161, 239, 296], "weighted_edge_list": [162, 240, 297], "write_edge_list": [163, 241, 298], "degre": 254, "to_direct": 293, "topologicalsort": [299, 300, 301, 302], "done": 300, "get_readi": 301, "is_act": 302, "weightededgelist": 303, "adjacency_matrix": 304, "all_pairs_all_simple_path": 305, "all_pairs_bellman_ford_path_length": 306, "all_pairs_bellman_ford_shortest_path": 307, "all_pairs_dijkstra_path_length": 308, "all_pairs_dijkstra_shortest_path": 309, "all_shortest_path": 310, "all_simple_path": 311, "ancestor": 312, "articulation_point": 313, "astar_shortest_path": 314, "barabasi_albert_graph": 315, "bellman_ford_shortest_path_length": 316, "bellman_ford_shortest_path": 317, "betweenness_centr": 318, "see": [318, 352, 366, 396, 438, 453], "also": [318, 352, 366, 396, 438, 453], "bfs_predecessor": 319, "bfs_search": 320, "bfs_successor": 321, "biconnected_compon": 322, "bipartite_layout": 323, "bridg": 324, "cartesian_product": 325, "chain_decomposit": 326, "circular_layout": 327, "closeness_centr": 328, "collect_bicolor_run": 329, "collect_run": 330, "complement": 331, "connected_compon": 332, "core_numb": 333, "cycle_basi": 334, "dag_longest_path": 335, "dag_longest_path_length": 336, "dag_weighted_longest_path": 337, "dag_weighted_longest_path_length": 338, "descend": 339, "dfs_edg": 340, "dfs_search": 341, "digraph_adjacency_matrix": 342, "digraph_all_pairs_all_simple_path": 343, "digraph_all_pairs_bellman_ford_path_length": 344, "digraph_all_pairs_bellman_ford_shortest_path": 345, "digraph_all_pairs_dijkstra_path_length": 346, "digraph_all_pairs_dijkstra_shortest_path": 347, "digraph_all_shortest_path": 348, "digraph_all_simple_path": 349, "digraph_astar_shortest_path": 350, "digraph_bellman_ford_shortest_path_length": 351, "digraph_betweenness_centr": 352, "digraph_bfs_search": 353, "digraph_bipartite_layout": 354, "digraph_cartesian_product": 355, "digraph_circular_layout": 356, "digraph_closeness_centr": 357, "digraph_compl": 358, "digraph_core_numb": 359, "digraph_dfs_edg": 360, "digraph_dfs_search": 361, "digraph_dijkstra_search": 362, "digraph_dijkstra_shortest_path_length": 363, "digraph_dijkstra_shortest_path": 364, "digraph_distance_matrix": 365, "digraph_edge_betweenness_centr": 366, "digraph_eigenvector_centr": 367, "digraph_find_cycl": 368, "digraph_floyd_warshal": 369, "digraph_floyd_warshall_numpi": 370, "digraph_floyd_warshall_successor_and_dist": 371, "digraph_is_isomorph": 372, "digraph_is_subgraph_isomorph": 373, "digraph_k_shortest_path_length": 374, "digraph_katz_centr": 375, "digraph_longest_simple_path": 376, "digraph_node_link_json": 377, "digraph_num_shortest_paths_unweight": 378, "digraph_random_layout": 379, "digraph_shell_layout": 380, "digraph_spiral_layout": 381, "digraph_spring_layout": 382, "digraph_tensor_product": 383, "digraph_transit": 384, "digraph_union": 385, "digraph_unweighted_average_shortest_path_length": 386, "digraph_vf2_map": 387, "dijkstra_search": 388, "dijkstra_shortest_path_length": 389, "dijkstra_shortest_path": 390, "directed_barabasi_albert_graph": 391, "directed_gnm_random_graph": 392, "directed_gnp_random_graph": 393, "directed_random_bipartite_graph": 394, "distance_matrix": 395, "edge_betweenness_centr": 396, "eigenvector_centr": 397, "find_negative_cycl": 398, "floyd_warshal": 399, "floyd_warshall_numpi": 400, "floyd_warshall_successor_and_dist": 401, "barbell_graph": 402, "binomial_tree_graph": 403, "complete_graph": 404, "cycle_graph": 405, "directed_binomial_tree_graph": 406, "directed_complete_graph": 407, "directed_cycle_graph": 408, "directed_empty_graph": 409, "directed_grid_graph": 410, "directed_heavy_hex_graph": 411, "directed_heavy_square_graph": 412, "directed_hexagonal_lattice_graph": 413, "directed_mesh_graph": 414, "directed_path_graph": 415, "directed_star_graph": 416, "empty_graph": 417, "full_rary_tre": 418, "generalized_petersen_graph": 419, "grid_graph": 420, "heavy_hex_graph": 421, "heavy_square_graph": 422, "hexagonal_lattice_graph": 423, "lollipop_graph": 424, "mesh_graph": 425, "path_graph": 426, "star_graph": 427, "graph_adjacency_matrix": 428, "graph_all_pairs_all_simple_path": 429, "graph_all_pairs_bellman_ford_path_length": 430, "graph_all_pairs_bellman_ford_shortest_path": 431, "graph_all_pairs_dijkstra_path_length": 432, "graph_all_pairs_dijkstra_shortest_path": 433, "graph_all_shortest_path": 434, "graph_all_simple_path": 435, "graph_astar_shortest_path": 436, "graph_bellman_ford_shortest_path_length": 437, "graph_betweenness_centr": 438, "graph_bfs_search": 439, "graph_bipartite_edge_color": 440, "graph_bipartite_layout": 441, "graph_cartesian_product": 442, "graph_circular_layout": 443, "graph_closeness_centr": 444, "graph_compl": 445, "graph_core_numb": 446, "graph_dfs_edg": 447, "graph_dfs_search": 448, "graph_dijkstra_search": 449, "graph_dijkstra_shortest_path_length": 450, "graph_dijkstra_shortest_path": 451, "graph_distance_matrix": 452, "graph_edge_betweenness_centr": 453, "graph_eigenvector_centr": 454, "graph_floyd_warshal": 455, "graph_floyd_warshall_numpi": 456, "graph_floyd_warshall_successor_and_dist": 457, "graph_greedy_color": 458, "graph_greedy_edge_color": 459, "graph_is_isomorph": 460, "graph_is_subgraph_isomorph": 461, "graph_k_shortest_path_length": 462, "graph_katz_centr": 463, "graph_line_graph": 464, "graph_longest_simple_path": 465, "graph_misra_gries_edge_color": 466, "graph_node_link_json": 467, "graph_num_shortest_paths_unweight": 468, "graph_random_layout": 469, "graph_shell_layout": 470, "graph_spiral_layout": 471, "graph_spring_layout": 472, "graph_tensor_product": 473, "graph_token_swapp": 474, "graph_transit": 475, "graph_union": 476, "graph_unweighted_average_shortest_path_length": 477, "graph_vf2_map": 478, "has_path": 479, "hit": 480, "is_bipartit": 481, "is_connect": 482, "is_directed_acyclic_graph": 483, "is_isomorph": 484, "is_isomorphic_node_match": 485, "is_match": 486, "is_maximal_match": 487, "is_planar": 488, "is_subgraph_isomorph": 489, "is_weakly_connect": 490, "isol": 491, "k_shortest_path_length": 492, "katz_centr": 493, "layer": 494, "lexicographical_topological_sort": 495, "longest_simple_path": 496, "max_weight_match": 497, "metric_closur": 498, "minimum_spanning_edg": 499, "minimum_spanning_tre": 500, "negative_edge_cycl": 501, "networkx_convert": 502, "node_connected_compon": 503, "node_link_json": 504, "num_shortest_paths_unweight": 505, "number_connected_compon": 506, "number_weakly_connected_compon": 507, "pagerank": 508, "random_geometric_graph": 509, "random_layout": 510, "read_graphml": 511, "shell_layout": 512, "simple_cycl": 513, "spiral_layout": 514, "spring_layout": 515, "steiner_tre": 516, "stoer_wagner_min_cut": 517, "strongly_connected_compon": 518, "topological_gener": 519, "topological_sort": 520, "transitive_reduct": 521, "transit": 522, "two_color": 523, "undirected_gnm_random_graph": 524, "undirected_gnp_random_graph": 525, "undirected_random_bipartite_graph": 526, "union": 527, "unweighted_average_shortest_path_length": 528, "vf2_map": 529, "bfsvisitor": [530, 531, 532, 533, 534, 535, 536], "visit": [531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550], "black_target_edg": 531, "discover_vertex": [532, 539, 544], "finish_vertex": [533, 540, 548], "gray_target_edg": 534, "non_tree_edg": 535, "tree_edg": [536, 542], "dfsvisitor": [537, 538, 539, 540, 541, 542], "back_edg": 538, "forward_or_cross_edg": 541, "dijkstravisitor": [543, 544, 545, 546, 547, 548], "edge_not_relax": 545, "edge_relax": 546, "examine_edg": 547, "prunesearch": 549, "stopsearch": 550, "graphviz_draw": 551, "mpl_draw": 552, "weakly_connected_compon": 553, "comparison": 554, "benchmark": 554, "With": 554, "librari": 554, "creation": 554, "sourc": 554, "all": 554, "pair": 554, "citat": 554, "project": 555, "histori": 555, "get": 556, "start": 556, "instal": [556, 562], "platform": 556, "without": 556, "precompil": 556, "binari": 556, "support": 556, "tier": 556, "1": [556, 558], "2": [556, 558], "3": 556, "4": [556, 558], "us": [556, 562], "networkx": 557, "user": 557, "some": 557, "differ": 557, "data": [557, 562], "attribut": [557, 562], "examin": [557, 562], "element": [557, 562], "equival": 557, "constructor": 557, "modifi": [557, 562], "matrix": 557, "matplotlib": 557, "drawer": 557, "from": [557, 562], "gap": 557, "0": 558, "14": 558, "prelud": 558, "bug": 558, "fix": 558, "featur": 558, "upgrad": 558, "deprec": 558, "13": 558, "12": 558, "11": 558, "10": 558, "9": 558, "8": 558, "7": 558, "6": 558, "5": 558, "work": 559, "between": 559, "calcul": 559, "betwe": 559, "direct": [560, 562], "acycl": 560, "applic": 560, "task": 560, "schedul": 560, "qiskit": 560, "": 560, "compil": 560, "tutori": 561, "guid": 561, "introduct": 562, "how": 562, "import": 562, "creat": 562, "remov": 562, "what": 562, "payload": 562, "access": 562, "multigraph": 562, "analyz": 562, "draw": 562}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"Contributing": [[0, "contributing"]], "Contributing to rustworkx": [[0, "contributing-to-rustworkx"]], "Making changes to the code": [[0, "making-changes-to-the-code"]], "Module exports in lib.rs": [[0, "module-exports-in-lib-rs"]], "Adding and changing functions in modules": [[0, "adding-and-changing-functions-in-modules"]], "Module directories: when a single file is not enough": [[0, "module-directories-when-a-single-file-is-not-enough"]], "rustworkx-core": [[0, "rustworkx-core"], [555, "rustworkx-core"]], "Tests": [[0, "tests"]], "Running subsets of tests": [[0, "running-subsets-of-tests"]], "Visualization Tests": [[0, "visualization-tests"]], "rustworkx-core tests": [[0, "rustworkx-core-tests"]], "Style": [[0, "style"]], "Rust": [[0, "rust"]], "Lint": [[0, "lint"]], "Python": [[0, "python"]], "Building documentation": [[0, "building-documentation"]], "rustworkx-core documentation": [[0, "rustworkx-core-documentation"]], "Type Annotations": [[0, "type-annotations"]], "Release Notes": [[0, "release-notes"], [558, "release-notes"]], "Adding a new release note": [[0, "adding-a-new-release-note"]], "Linking to issues": [[0, "linking-to-issues"]], "Generating the release notes": [[0, "generating-the-release-notes"]], "Building release notes locally": [[0, "building-release-notes-locally"]], "Pull request review, CI, and merge queue": [[0, "pull-request-review-ci-and-merge-queue"]], "Stable Branch Policy and Backporting": [[0, "stable-branch-policy-and-backporting"]], "Backporting procedure": [[0, "backporting-procedure"]], "Manual backport procedure": [[0, "manual-backport-procedure"]], "Centrality": [[1, "centrality"]], "Coloring": [[2, "coloring"]], "Connectivity and Cycles": [[3, "connectivity-and-cycles"]], "DAG Algorithms": [[4, "dag-algorithms"]], "Graph Operations": [[5, "graph-operations"]], "Algorithm Functions": [[6, "algorithm-functions"]], "Isomorphism": [[7, "isomorphism"]], "Link Analysis": [[8, "link-analysis"]], "Matching": [[9, "matching"]], "Other Algorithm Functions": [[10, "other-algorithm-functions"]], "Shortest Paths": [[11, "shortest-paths"]], "Traversal": [[12, "traversal"]], "Tree": [[13, "tree"]], "Converters": [[14, "converters"]], "Custom Return Types": [[15, "custom-return-types"]], "Exceptions": [[16, "exceptions"]], "Generators": [[17, "generators"]], "Graph Classes": [[18, "graph-classes"]], "Rustworkx API Reference": [[19, "rustworkx-api-reference"]], "Layout Functions": [[20, "layout-functions"]], "API functions for PyDigraph": [[21, "api-functions-for-pydigraph"]], "API functions for PyGraph": [[22, "api-functions-for-pygraph"]], "Random Graph Generator Functions": [[23, "random-graph-generator-functions"]], "Serialization": [[24, "serialization"]], "AllPairsPathLengthMapping": [[25, "allpairspathlengthmapping"]], "rustworkx.AllPairsPathLengthMapping.items": [[26, "rustworkx-allpairspathlengthmapping-items"]], "rustworkx.AllPairsPathLengthMapping.keys": [[27, "rustworkx-allpairspathlengthmapping-keys"]], "rustworkx.AllPairsPathLengthMapping.values": [[28, "rustworkx-allpairspathlengthmapping-values"]], "AllPairsPathMapping": [[29, "allpairspathmapping"]], "rustworkx.AllPairsPathMapping.items": [[30, "rustworkx-allpairspathmapping-items"]], "rustworkx.AllPairsPathMapping.keys": [[31, "rustworkx-allpairspathmapping-keys"]], "rustworkx.AllPairsPathMapping.values": [[32, "rustworkx-allpairspathmapping-values"]], "BFSPredecessors": [[33, "bfspredecessors"]], "BFSSuccessors": [[34, "bfssuccessors"]], "BiconnectedComponents": [[35, "biconnectedcomponents"]], "rustworkx.BiconnectedComponents.items": [[36, "rustworkx-biconnectedcomponents-items"]], "rustworkx.BiconnectedComponents.keys": [[37, "rustworkx-biconnectedcomponents-keys"]], "rustworkx.BiconnectedComponents.values": [[38, "rustworkx-biconnectedcomponents-values"]], "CentralityMapping": [[39, "centralitymapping"]], "rustworkx.CentralityMapping.items": [[40, "rustworkx-centralitymapping-items"]], "rustworkx.CentralityMapping.keys": [[41, "rustworkx-centralitymapping-keys"]], "rustworkx.CentralityMapping.values": [[42, "rustworkx-centralitymapping-values"]], "Chains": [[43, "chains"]], "rustworkx.DAGHasCycle": [[44, "rustworkx-daghascycle"]], "rustworkx.DAGWouldCycle": [[45, "rustworkx-dagwouldcycle"]], "EdgeCentralityMapping": [[46, "edgecentralitymapping"]], "rustworkx.EdgeCentralityMapping.items": [[47, "rustworkx-edgecentralitymapping-items"]], "rustworkx.EdgeCentralityMapping.keys": [[48, "rustworkx-edgecentralitymapping-keys"]], "rustworkx.EdgeCentralityMapping.values": [[49, "rustworkx-edgecentralitymapping-values"]], "EdgeIndexMap": [[50, "edgeindexmap"]], "rustworkx.EdgeIndexMap.items": [[51, "rustworkx-edgeindexmap-items"]], "rustworkx.EdgeIndexMap.keys": [[52, "rustworkx-edgeindexmap-keys"]], "rustworkx.EdgeIndexMap.values": [[53, "rustworkx-edgeindexmap-values"]], "EdgeIndices": [[54, "edgeindices"]], "EdgeList": [[55, "edgelist"]], "rustworkx.GraphNotBipartite": [[56, "rustworkx-graphnotbipartite"]], "rustworkx.InvalidMapping": [[57, "rustworkx-invalidmapping"]], "rustworkx.InvalidNode": [[58, "rustworkx-invalidnode"]], "rustworkx.JSONSerializationError": [[59, "rustworkx-jsonserializationerror"]], "rustworkx.NegativeCycle": [[60, "rustworkx-negativecycle"]], "rustworkx.NoEdgeBetweenNodes": [[61, "rustworkx-noedgebetweennodes"]], "rustworkx.NoPathFound": [[62, "rustworkx-nopathfound"]], "rustworkx.NoSuitableNeighbors": [[63, "rustworkx-nosuitableneighbors"]], "NodeIndices": [[64, "nodeindices"]], "NodeMap": [[65, "nodemap"]], "rustworkx.NodeMap.items": [[66, "rustworkx-nodemap-items"]], "rustworkx.NodeMap.keys": [[67, "rustworkx-nodemap-keys"]], "rustworkx.NodeMap.values": [[68, "rustworkx-nodemap-values"]], "rustworkx.NullGraph": [[69, "rustworkx-nullgraph"]], "PathLengthMapping": [[70, "pathlengthmapping"]], "rustworkx.PathLengthMapping.items": [[71, "rustworkx-pathlengthmapping-items"]], "rustworkx.PathLengthMapping.keys": [[72, "rustworkx-pathlengthmapping-keys"]], "rustworkx.PathLengthMapping.values": [[73, "rustworkx-pathlengthmapping-values"]], "PathMapping": [[74, "pathmapping"]], "rustworkx.PathMapping.items": [[75, "rustworkx-pathmapping-items"]], "rustworkx.PathMapping.keys": [[76, "rustworkx-pathmapping-keys"]], "rustworkx.PathMapping.values": [[77, "rustworkx-pathmapping-values"]], "Pos2DMapping": [[78, "pos2dmapping"]], "rustworkx.Pos2DMapping.items": [[79, "rustworkx-pos2dmapping-items"]], "rustworkx.Pos2DMapping.keys": [[80, "rustworkx-pos2dmapping-keys"]], "rustworkx.Pos2DMapping.values": [[81, "rustworkx-pos2dmapping-values"]], "ProductNodeMap": [[82, "productnodemap"]], "rustworkx.ProductNodeMap.items": [[83, "rustworkx-productnodemap-items"]], "rustworkx.ProductNodeMap.keys": [[84, "rustworkx-productnodemap-keys"]], "rustworkx.ProductNodeMap.values": [[85, "rustworkx-productnodemap-values"]], "PyDAG": [[86, "pydag"]], "rustworkx.PyDAG.add_child": [[87, "rustworkx-pydag-add-child"]], "rustworkx.PyDAG.add_edge": [[88, "rustworkx-pydag-add-edge"]], "rustworkx.PyDAG.add_edges_from": [[89, "rustworkx-pydag-add-edges-from"]], "rustworkx.PyDAG.add_edges_from_no_data": [[90, "rustworkx-pydag-add-edges-from-no-data"]], "rustworkx.PyDAG.add_node": [[91, "rustworkx-pydag-add-node"]], "rustworkx.PyDAG.add_nodes_from": [[92, "rustworkx-pydag-add-nodes-from"]], "rustworkx.PyDAG.add_parent": [[93, "rustworkx-pydag-add-parent"]], "rustworkx.PyDAG.adj": [[94, "rustworkx-pydag-adj"]], "rustworkx.PyDAG.adj_direction": [[95, "rustworkx-pydag-adj-direction"]], "rustworkx.PyDAG.clear": [[96, "rustworkx-pydag-clear"]], "rustworkx.PyDAG.clear_edges": [[97, "rustworkx-pydag-clear-edges"]], "rustworkx.PyDAG.compose": [[98, "rustworkx-pydag-compose"]], "rustworkx.PyDAG.contract_nodes": [[99, "rustworkx-pydag-contract-nodes"]], "rustworkx.PyDAG.copy": [[100, "rustworkx-pydag-copy"]], "rustworkx.PyDAG.edge_index_map": [[101, "rustworkx-pydag-edge-index-map"]], "rustworkx.PyDAG.edge_indices": [[102, "rustworkx-pydag-edge-indices"]], "rustworkx.PyDAG.edge_indices_from_endpoints": [[103, "rustworkx-pydag-edge-indices-from-endpoints"]], "rustworkx.PyDAG.edge_list": [[104, "rustworkx-pydag-edge-list"]], "rustworkx.PyDAG.edge_subgraph": [[105, "rustworkx-pydag-edge-subgraph"]], "rustworkx.PyDAG.edges": [[106, "rustworkx-pydag-edges"]], "rustworkx.PyDAG.extend_from_edge_list": [[107, "rustworkx-pydag-extend-from-edge-list"]], "rustworkx.PyDAG.extend_from_weighted_edge_list": [[108, "rustworkx-pydag-extend-from-weighted-edge-list"]], "rustworkx.PyDAG.filter_edges": [[109, "rustworkx-pydag-filter-edges"]], "rustworkx.PyDAG.filter_nodes": [[110, "rustworkx-pydag-filter-nodes"]], "rustworkx.PyDAG.find_adjacent_node_by_edge": [[111, "rustworkx-pydag-find-adjacent-node-by-edge"]], "rustworkx.PyDAG.find_node_by_weight": [[112, "rustworkx-pydag-find-node-by-weight"]], "rustworkx.PyDAG.find_predecessor_node_by_edge": [[113, "rustworkx-pydag-find-predecessor-node-by-edge"]], "rustworkx.PyDAG.find_predecessors_by_edge": [[114, "rustworkx-pydag-find-predecessors-by-edge"]], "rustworkx.PyDAG.find_successors_by_edge": [[115, "rustworkx-pydag-find-successors-by-edge"]], "rustworkx.PyDAG.from_adjacency_matrix": [[116, "rustworkx-pydag-from-adjacency-matrix"]], "rustworkx.PyDAG.from_complex_adjacency_matrix": [[117, "rustworkx-pydag-from-complex-adjacency-matrix"]], "rustworkx.PyDAG.get_all_edge_data": [[118, "rustworkx-pydag-get-all-edge-data"]], "rustworkx.PyDAG.get_edge_data": [[119, "rustworkx-pydag-get-edge-data"]], "rustworkx.PyDAG.get_edge_data_by_index": [[120, "rustworkx-pydag-get-edge-data-by-index"]], "rustworkx.PyDAG.get_edge_endpoints_by_index": [[121, "rustworkx-pydag-get-edge-endpoints-by-index"]], "rustworkx.PyDAG.get_node_data": [[122, "rustworkx-pydag-get-node-data"]], "rustworkx.PyDAG.has_edge": [[123, "rustworkx-pydag-has-edge"]], "rustworkx.PyDAG.has_parallel_edges": [[124, "rustworkx-pydag-has-parallel-edges"]], "rustworkx.PyDAG.in_degree": [[125, "rustworkx-pydag-in-degree"]], "rustworkx.PyDAG.in_edges": [[126, "rustworkx-pydag-in-edges"]], "rustworkx.PyDAG.incident_edge_index_map": [[127, "rustworkx-pydag-incident-edge-index-map"]], "rustworkx.PyDAG.incident_edges": [[128, "rustworkx-pydag-incident-edges"]], "rustworkx.PyDAG.insert_node_on_in_edges": [[129, "rustworkx-pydag-insert-node-on-in-edges"]], "rustworkx.PyDAG.insert_node_on_in_edges_multiple": [[130, "rustworkx-pydag-insert-node-on-in-edges-multiple"]], "rustworkx.PyDAG.insert_node_on_out_edges": [[131, "rustworkx-pydag-insert-node-on-out-edges"]], "rustworkx.PyDAG.insert_node_on_out_edges_multiple": [[132, "rustworkx-pydag-insert-node-on-out-edges-multiple"]], "rustworkx.PyDAG.is_symmetric": [[133, "rustworkx-pydag-is-symmetric"]], "rustworkx.PyDAG.make_symmetric": [[134, "rustworkx-pydag-make-symmetric"]], "rustworkx.PyDAG.merge_nodes": [[135, "rustworkx-pydag-merge-nodes"]], "rustworkx.PyDAG.neighbors": [[136, "rustworkx-pydag-neighbors"]], "rustworkx.PyDAG.node_indexes": [[137, "rustworkx-pydag-node-indexes"]], "rustworkx.PyDAG.node_indices": [[138, "rustworkx-pydag-node-indices"]], "rustworkx.PyDAG.nodes": [[139, "rustworkx-pydag-nodes"]], "rustworkx.PyDAG.num_edges": [[140, "rustworkx-pydag-num-edges"]], "rustworkx.PyDAG.num_nodes": [[141, "rustworkx-pydag-num-nodes"]], "rustworkx.PyDAG.out_degree": [[142, "rustworkx-pydag-out-degree"]], "rustworkx.PyDAG.out_edges": [[143, "rustworkx-pydag-out-edges"]], "rustworkx.PyDAG.predecessor_indices": [[144, "rustworkx-pydag-predecessor-indices"]], "rustworkx.PyDAG.predecessors": [[145, "rustworkx-pydag-predecessors"]], "rustworkx.PyDAG.read_edge_list": [[146, "rustworkx-pydag-read-edge-list"]], "rustworkx.PyDAG.remove_edge": [[147, "rustworkx-pydag-remove-edge"]], "rustworkx.PyDAG.remove_edge_from_index": [[148, "rustworkx-pydag-remove-edge-from-index"]], "rustworkx.PyDAG.remove_edges_from": [[149, "rustworkx-pydag-remove-edges-from"]], "rustworkx.PyDAG.remove_node": [[150, "rustworkx-pydag-remove-node"]], "rustworkx.PyDAG.remove_node_retain_edges": [[151, "rustworkx-pydag-remove-node-retain-edges"]], "rustworkx.PyDAG.remove_nodes_from": [[152, "rustworkx-pydag-remove-nodes-from"]], "rustworkx.PyDAG.reverse": [[153, "rustworkx-pydag-reverse"]], "rustworkx.PyDAG.subgraph": [[154, "rustworkx-pydag-subgraph"]], "rustworkx.PyDAG.substitute_node_with_subgraph": [[155, "rustworkx-pydag-substitute-node-with-subgraph"]], "rustworkx.PyDAG.successor_indices": [[156, "rustworkx-pydag-successor-indices"]], "rustworkx.PyDAG.successors": [[157, "rustworkx-pydag-successors"]], "rustworkx.PyDAG.to_dot": [[158, "rustworkx-pydag-to-dot"]], "rustworkx.PyDAG.to_undirected": [[159, "rustworkx-pydag-to-undirected"]], "rustworkx.PyDAG.update_edge": [[160, "rustworkx-pydag-update-edge"]], "rustworkx.PyDAG.update_edge_by_index": [[161, "rustworkx-pydag-update-edge-by-index"]], "rustworkx.PyDAG.weighted_edge_list": [[162, "rustworkx-pydag-weighted-edge-list"]], "rustworkx.PyDAG.write_edge_list": [[163, "rustworkx-pydag-write-edge-list"]], "PyDiGraph": [[164, "pydigraph"]], "rustworkx.PyDiGraph.add_child": [[165, "rustworkx-pydigraph-add-child"]], "rustworkx.PyDiGraph.add_edge": [[166, "rustworkx-pydigraph-add-edge"]], "rustworkx.PyDiGraph.add_edges_from": [[167, "rustworkx-pydigraph-add-edges-from"]], "rustworkx.PyDiGraph.add_edges_from_no_data": [[168, "rustworkx-pydigraph-add-edges-from-no-data"]], "rustworkx.PyDiGraph.add_node": [[169, "rustworkx-pydigraph-add-node"]], "rustworkx.PyDiGraph.add_nodes_from": [[170, "rustworkx-pydigraph-add-nodes-from"]], "rustworkx.PyDiGraph.add_parent": [[171, "rustworkx-pydigraph-add-parent"]], "rustworkx.PyDiGraph.adj": [[172, "rustworkx-pydigraph-adj"]], "rustworkx.PyDiGraph.adj_direction": [[173, "rustworkx-pydigraph-adj-direction"]], "rustworkx.PyDiGraph.clear": [[174, "rustworkx-pydigraph-clear"]], "rustworkx.PyDiGraph.clear_edges": [[175, "rustworkx-pydigraph-clear-edges"]], "rustworkx.PyDiGraph.compose": [[176, "rustworkx-pydigraph-compose"]], "rustworkx.PyDiGraph.contract_nodes": [[177, "rustworkx-pydigraph-contract-nodes"]], "rustworkx.PyDiGraph.copy": [[178, "rustworkx-pydigraph-copy"]], "rustworkx.PyDiGraph.edge_index_map": [[179, "rustworkx-pydigraph-edge-index-map"]], "rustworkx.PyDiGraph.edge_indices": [[180, "rustworkx-pydigraph-edge-indices"]], "rustworkx.PyDiGraph.edge_indices_from_endpoints": [[181, "rustworkx-pydigraph-edge-indices-from-endpoints"]], "rustworkx.PyDiGraph.edge_list": [[182, "rustworkx-pydigraph-edge-list"]], "rustworkx.PyDiGraph.edge_subgraph": [[183, "rustworkx-pydigraph-edge-subgraph"]], "rustworkx.PyDiGraph.edges": [[184, "rustworkx-pydigraph-edges"]], "rustworkx.PyDiGraph.extend_from_edge_list": [[185, "rustworkx-pydigraph-extend-from-edge-list"]], "rustworkx.PyDiGraph.extend_from_weighted_edge_list": [[186, "rustworkx-pydigraph-extend-from-weighted-edge-list"]], "rustworkx.PyDiGraph.filter_edges": [[187, "rustworkx-pydigraph-filter-edges"]], "rustworkx.PyDiGraph.filter_nodes": [[188, "rustworkx-pydigraph-filter-nodes"]], "rustworkx.PyDiGraph.find_adjacent_node_by_edge": [[189, "rustworkx-pydigraph-find-adjacent-node-by-edge"]], "rustworkx.PyDiGraph.find_node_by_weight": [[190, "rustworkx-pydigraph-find-node-by-weight"]], "rustworkx.PyDiGraph.find_predecessor_node_by_edge": [[191, "rustworkx-pydigraph-find-predecessor-node-by-edge"]], "rustworkx.PyDiGraph.find_predecessors_by_edge": [[192, "rustworkx-pydigraph-find-predecessors-by-edge"]], "rustworkx.PyDiGraph.find_successors_by_edge": [[193, "rustworkx-pydigraph-find-successors-by-edge"]], "rustworkx.PyDiGraph.from_adjacency_matrix": [[194, "rustworkx-pydigraph-from-adjacency-matrix"]], "rustworkx.PyDiGraph.from_complex_adjacency_matrix": [[195, "rustworkx-pydigraph-from-complex-adjacency-matrix"]], "rustworkx.PyDiGraph.get_all_edge_data": [[196, "rustworkx-pydigraph-get-all-edge-data"]], "rustworkx.PyDiGraph.get_edge_data": [[197, "rustworkx-pydigraph-get-edge-data"]], "rustworkx.PyDiGraph.get_edge_data_by_index": [[198, "rustworkx-pydigraph-get-edge-data-by-index"]], "rustworkx.PyDiGraph.get_edge_endpoints_by_index": [[199, "rustworkx-pydigraph-get-edge-endpoints-by-index"]], "rustworkx.PyDiGraph.get_node_data": [[200, "rustworkx-pydigraph-get-node-data"]], "rustworkx.PyDiGraph.has_edge": [[201, "rustworkx-pydigraph-has-edge"]], "rustworkx.PyDiGraph.has_parallel_edges": [[202, "rustworkx-pydigraph-has-parallel-edges"]], "rustworkx.PyDiGraph.in_degree": [[203, "rustworkx-pydigraph-in-degree"]], "rustworkx.PyDiGraph.in_edges": [[204, "rustworkx-pydigraph-in-edges"]], "rustworkx.PyDiGraph.incident_edge_index_map": [[205, "rustworkx-pydigraph-incident-edge-index-map"]], "rustworkx.PyDiGraph.incident_edges": [[206, "rustworkx-pydigraph-incident-edges"]], "rustworkx.PyDiGraph.insert_node_on_in_edges": [[207, "rustworkx-pydigraph-insert-node-on-in-edges"]], "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple": [[208, "rustworkx-pydigraph-insert-node-on-in-edges-multiple"]], "rustworkx.PyDiGraph.insert_node_on_out_edges": [[209, "rustworkx-pydigraph-insert-node-on-out-edges"]], "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple": [[210, "rustworkx-pydigraph-insert-node-on-out-edges-multiple"]], "rustworkx.PyDiGraph.is_symmetric": [[211, "rustworkx-pydigraph-is-symmetric"]], "rustworkx.PyDiGraph.make_symmetric": [[212, "rustworkx-pydigraph-make-symmetric"]], "rustworkx.PyDiGraph.merge_nodes": [[213, "rustworkx-pydigraph-merge-nodes"]], "rustworkx.PyDiGraph.neighbors": [[214, "rustworkx-pydigraph-neighbors"]], "rustworkx.PyDiGraph.node_indexes": [[215, "rustworkx-pydigraph-node-indexes"]], "rustworkx.PyDiGraph.node_indices": [[216, "rustworkx-pydigraph-node-indices"]], "rustworkx.PyDiGraph.nodes": [[217, "rustworkx-pydigraph-nodes"]], "rustworkx.PyDiGraph.num_edges": [[218, "rustworkx-pydigraph-num-edges"]], "rustworkx.PyDiGraph.num_nodes": [[219, "rustworkx-pydigraph-num-nodes"]], "rustworkx.PyDiGraph.out_degree": [[220, "rustworkx-pydigraph-out-degree"]], "rustworkx.PyDiGraph.out_edges": [[221, "rustworkx-pydigraph-out-edges"]], "rustworkx.PyDiGraph.predecessor_indices": [[222, "rustworkx-pydigraph-predecessor-indices"]], "rustworkx.PyDiGraph.predecessors": [[223, "rustworkx-pydigraph-predecessors"]], "rustworkx.PyDiGraph.read_edge_list": [[224, "rustworkx-pydigraph-read-edge-list"]], "rustworkx.PyDiGraph.remove_edge": [[225, "rustworkx-pydigraph-remove-edge"]], "rustworkx.PyDiGraph.remove_edge_from_index": [[226, "rustworkx-pydigraph-remove-edge-from-index"]], "rustworkx.PyDiGraph.remove_edges_from": [[227, "rustworkx-pydigraph-remove-edges-from"]], "rustworkx.PyDiGraph.remove_node": [[228, "rustworkx-pydigraph-remove-node"]], "rustworkx.PyDiGraph.remove_node_retain_edges": [[229, "rustworkx-pydigraph-remove-node-retain-edges"]], "rustworkx.PyDiGraph.remove_nodes_from": [[230, "rustworkx-pydigraph-remove-nodes-from"]], "rustworkx.PyDiGraph.reverse": [[231, "rustworkx-pydigraph-reverse"]], "rustworkx.PyDiGraph.subgraph": [[232, "rustworkx-pydigraph-subgraph"]], "rustworkx.PyDiGraph.substitute_node_with_subgraph": [[233, "rustworkx-pydigraph-substitute-node-with-subgraph"]], "rustworkx.PyDiGraph.successor_indices": [[234, "rustworkx-pydigraph-successor-indices"]], "rustworkx.PyDiGraph.successors": [[235, "rustworkx-pydigraph-successors"]], "rustworkx.PyDiGraph.to_dot": [[236, "rustworkx-pydigraph-to-dot"]], "rustworkx.PyDiGraph.to_undirected": [[237, "rustworkx-pydigraph-to-undirected"]], "rustworkx.PyDiGraph.update_edge": [[238, "rustworkx-pydigraph-update-edge"]], "rustworkx.PyDiGraph.update_edge_by_index": [[239, "rustworkx-pydigraph-update-edge-by-index"]], "rustworkx.PyDiGraph.weighted_edge_list": [[240, "rustworkx-pydigraph-weighted-edge-list"]], "rustworkx.PyDiGraph.write_edge_list": [[241, "rustworkx-pydigraph-write-edge-list"]], "PyGraph": [[242, "pygraph"]], "rustworkx.PyGraph.add_edge": [[243, "rustworkx-pygraph-add-edge"]], "rustworkx.PyGraph.add_edges_from": [[244, "rustworkx-pygraph-add-edges-from"]], "rustworkx.PyGraph.add_edges_from_no_data": [[245, "rustworkx-pygraph-add-edges-from-no-data"]], "rustworkx.PyGraph.add_node": [[246, "rustworkx-pygraph-add-node"]], "rustworkx.PyGraph.add_nodes_from": [[247, "rustworkx-pygraph-add-nodes-from"]], "rustworkx.PyGraph.adj": [[248, "rustworkx-pygraph-adj"]], "rustworkx.PyGraph.clear": [[249, "rustworkx-pygraph-clear"]], "rustworkx.PyGraph.clear_edges": [[250, "rustworkx-pygraph-clear-edges"]], "rustworkx.PyGraph.compose": [[251, "rustworkx-pygraph-compose"]], "rustworkx.PyGraph.contract_nodes": [[252, "rustworkx-pygraph-contract-nodes"]], "rustworkx.PyGraph.copy": [[253, "rustworkx-pygraph-copy"]], "rustworkx.PyGraph.degree": [[254, "rustworkx-pygraph-degree"]], "rustworkx.PyGraph.edge_index_map": [[255, "rustworkx-pygraph-edge-index-map"]], "rustworkx.PyGraph.edge_indices": [[256, "rustworkx-pygraph-edge-indices"]], "rustworkx.PyGraph.edge_indices_from_endpoints": [[257, "rustworkx-pygraph-edge-indices-from-endpoints"]], "rustworkx.PyGraph.edge_list": [[258, "rustworkx-pygraph-edge-list"]], "rustworkx.PyGraph.edge_subgraph": [[259, "rustworkx-pygraph-edge-subgraph"]], "rustworkx.PyGraph.edges": [[260, "rustworkx-pygraph-edges"]], "rustworkx.PyGraph.extend_from_edge_list": [[261, "rustworkx-pygraph-extend-from-edge-list"]], "rustworkx.PyGraph.extend_from_weighted_edge_list": [[262, "rustworkx-pygraph-extend-from-weighted-edge-list"]], "rustworkx.PyGraph.filter_edges": [[263, "rustworkx-pygraph-filter-edges"]], "rustworkx.PyGraph.filter_nodes": [[264, "rustworkx-pygraph-filter-nodes"]], "rustworkx.PyGraph.find_node_by_weight": [[265, "rustworkx-pygraph-find-node-by-weight"]], "rustworkx.PyGraph.from_adjacency_matrix": [[266, "rustworkx-pygraph-from-adjacency-matrix"]], "rustworkx.PyGraph.from_complex_adjacency_matrix": [[267, "rustworkx-pygraph-from-complex-adjacency-matrix"]], "rustworkx.PyGraph.get_all_edge_data": [[268, "rustworkx-pygraph-get-all-edge-data"]], "rustworkx.PyGraph.get_edge_data": [[269, "rustworkx-pygraph-get-edge-data"]], "rustworkx.PyGraph.get_edge_data_by_index": [[270, "rustworkx-pygraph-get-edge-data-by-index"]], "rustworkx.PyGraph.get_edge_endpoints_by_index": [[271, "rustworkx-pygraph-get-edge-endpoints-by-index"]], "rustworkx.PyGraph.get_node_data": [[272, "rustworkx-pygraph-get-node-data"]], "rustworkx.PyGraph.has_edge": [[273, "rustworkx-pygraph-has-edge"]], "rustworkx.PyGraph.has_parallel_edges": [[274, "rustworkx-pygraph-has-parallel-edges"]], "rustworkx.PyGraph.in_edges": [[275, "rustworkx-pygraph-in-edges"]], "rustworkx.PyGraph.incident_edge_index_map": [[276, "rustworkx-pygraph-incident-edge-index-map"]], "rustworkx.PyGraph.incident_edges": [[277, "rustworkx-pygraph-incident-edges"]], "rustworkx.PyGraph.neighbors": [[278, "rustworkx-pygraph-neighbors"]], "rustworkx.PyGraph.node_indexes": [[279, "rustworkx-pygraph-node-indexes"]], "rustworkx.PyGraph.node_indices": [[280, "rustworkx-pygraph-node-indices"]], "rustworkx.PyGraph.nodes": [[281, "rustworkx-pygraph-nodes"]], "rustworkx.PyGraph.num_edges": [[282, "rustworkx-pygraph-num-edges"]], "rustworkx.PyGraph.num_nodes": [[283, "rustworkx-pygraph-num-nodes"]], "rustworkx.PyGraph.out_edges": [[284, "rustworkx-pygraph-out-edges"]], "rustworkx.PyGraph.read_edge_list": [[285, "rustworkx-pygraph-read-edge-list"]], "rustworkx.PyGraph.remove_edge": [[286, "rustworkx-pygraph-remove-edge"]], "rustworkx.PyGraph.remove_edge_from_index": [[287, "rustworkx-pygraph-remove-edge-from-index"]], "rustworkx.PyGraph.remove_edges_from": [[288, "rustworkx-pygraph-remove-edges-from"]], "rustworkx.PyGraph.remove_node": [[289, "rustworkx-pygraph-remove-node"]], "rustworkx.PyGraph.remove_nodes_from": [[290, "rustworkx-pygraph-remove-nodes-from"]], "rustworkx.PyGraph.subgraph": [[291, "rustworkx-pygraph-subgraph"]], "rustworkx.PyGraph.substitute_node_with_subgraph": [[292, "rustworkx-pygraph-substitute-node-with-subgraph"]], "rustworkx.PyGraph.to_directed": [[293, "rustworkx-pygraph-to-directed"]], "rustworkx.PyGraph.to_dot": [[294, "rustworkx-pygraph-to-dot"]], "rustworkx.PyGraph.update_edge": [[295, "rustworkx-pygraph-update-edge"]], "rustworkx.PyGraph.update_edge_by_index": [[296, "rustworkx-pygraph-update-edge-by-index"]], "rustworkx.PyGraph.weighted_edge_list": [[297, "rustworkx-pygraph-weighted-edge-list"]], "rustworkx.PyGraph.write_edge_list": [[298, "rustworkx-pygraph-write-edge-list"]], "TopologicalSorter": [[299, "topologicalsorter"]], "rustworkx.TopologicalSorter.done": [[300, "rustworkx-topologicalsorter-done"]], "rustworkx.TopologicalSorter.get_ready": [[301, "rustworkx-topologicalsorter-get-ready"]], "rustworkx.TopologicalSorter.is_active": [[302, "rustworkx-topologicalsorter-is-active"]], "WeightedEdgeList": [[303, "weightededgelist"]], "rustworkx.adjacency_matrix": [[304, "rustworkx-adjacency-matrix"]], "rustworkx.all_pairs_all_simple_paths": [[305, "rustworkx-all-pairs-all-simple-paths"]], "rustworkx.all_pairs_bellman_ford_path_lengths": [[306, "rustworkx-all-pairs-bellman-ford-path-lengths"]], "rustworkx.all_pairs_bellman_ford_shortest_paths": [[307, "rustworkx-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.all_pairs_dijkstra_path_lengths": [[308, "rustworkx-all-pairs-dijkstra-path-lengths"]], "rustworkx.all_pairs_dijkstra_shortest_paths": [[309, "rustworkx-all-pairs-dijkstra-shortest-paths"]], "rustworkx.all_shortest_paths": [[310, "rustworkx-all-shortest-paths"]], "rustworkx.all_simple_paths": [[311, "rustworkx-all-simple-paths"]], "rustworkx.ancestors": [[312, "rustworkx-ancestors"]], "rustworkx.articulation_points": [[313, "rustworkx-articulation-points"]], "rustworkx.astar_shortest_path": [[314, "rustworkx-astar-shortest-path"]], "rustworkx.barabasi_albert_graph": [[315, "rustworkx-barabasi-albert-graph"]], "rustworkx.bellman_ford_shortest_path_lengths": [[316, "rustworkx-bellman-ford-shortest-path-lengths"]], "rustworkx.bellman_ford_shortest_paths": [[317, "rustworkx-bellman-ford-shortest-paths"]], "rustworkx.betweenness_centrality": [[318, "rustworkx-betweenness-centrality"]], "See Also": [[318, "see-also"], [352, "see-also"], [366, "see-also"], [396, "see-also"], [438, "see-also"], [453, "see-also"]], "rustworkx.bfs_predecessors": [[319, "rustworkx-bfs-predecessors"]], "rustworkx.bfs_search": [[320, "rustworkx-bfs-search"]], "rustworkx.bfs_successors": [[321, "rustworkx-bfs-successors"]], "rustworkx.biconnected_components": [[322, "rustworkx-biconnected-components"]], "rustworkx.bipartite_layout": [[323, "rustworkx-bipartite-layout"]], "rustworkx.bridges": [[324, "rustworkx-bridges"]], "rustworkx.cartesian_product": [[325, "rustworkx-cartesian-product"]], "rustworkx.chain_decomposition": [[326, "rustworkx-chain-decomposition"]], "rustworkx.circular_layout": [[327, "rustworkx-circular-layout"]], "rustworkx.closeness_centrality": [[328, "rustworkx-closeness-centrality"]], "rustworkx.collect_bicolor_runs": [[329, "rustworkx-collect-bicolor-runs"]], "rustworkx.collect_runs": [[330, "rustworkx-collect-runs"]], "rustworkx.complement": [[331, "rustworkx-complement"]], "rustworkx.connected_components": [[332, "rustworkx-connected-components"]], "rustworkx.core_number": [[333, "rustworkx-core-number"]], "rustworkx.cycle_basis": [[334, "rustworkx-cycle-basis"]], "rustworkx.dag_longest_path": [[335, "rustworkx-dag-longest-path"]], "rustworkx.dag_longest_path_length": [[336, "rustworkx-dag-longest-path-length"]], "rustworkx.dag_weighted_longest_path": [[337, "rustworkx-dag-weighted-longest-path"]], "rustworkx.dag_weighted_longest_path_length": [[338, "rustworkx-dag-weighted-longest-path-length"]], "rustworkx.descendants": [[339, "rustworkx-descendants"]], "rustworkx.dfs_edges": [[340, "rustworkx-dfs-edges"]], "rustworkx.dfs_search": [[341, "rustworkx-dfs-search"]], "rustworkx.digraph_adjacency_matrix": [[342, "rustworkx-digraph-adjacency-matrix"]], "rustworkx.digraph_all_pairs_all_simple_paths": [[343, "rustworkx-digraph-all-pairs-all-simple-paths"]], "rustworkx.digraph_all_pairs_bellman_ford_path_lengths": [[344, "rustworkx-digraph-all-pairs-bellman-ford-path-lengths"]], "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths": [[345, "rustworkx-digraph-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.digraph_all_pairs_dijkstra_path_lengths": [[346, "rustworkx-digraph-all-pairs-dijkstra-path-lengths"]], "rustworkx.digraph_all_pairs_dijkstra_shortest_paths": [[347, "rustworkx-digraph-all-pairs-dijkstra-shortest-paths"]], "rustworkx.digraph_all_shortest_paths": [[348, "rustworkx-digraph-all-shortest-paths"]], "rustworkx.digraph_all_simple_paths": [[349, "rustworkx-digraph-all-simple-paths"]], "rustworkx.digraph_astar_shortest_path": [[350, "rustworkx-digraph-astar-shortest-path"]], "rustworkx.digraph_bellman_ford_shortest_path_lengths": [[351, "rustworkx-digraph-bellman-ford-shortest-path-lengths"]], "rustworkx.digraph_betweenness_centrality": [[352, "rustworkx-digraph-betweenness-centrality"]], "rustworkx.digraph_bfs_search": [[353, "rustworkx-digraph-bfs-search"]], "rustworkx.digraph_bipartite_layout": [[354, "rustworkx-digraph-bipartite-layout"]], "rustworkx.digraph_cartesian_product": [[355, "rustworkx-digraph-cartesian-product"]], "rustworkx.digraph_circular_layout": [[356, "rustworkx-digraph-circular-layout"]], "rustworkx.digraph_closeness_centrality": [[357, "rustworkx-digraph-closeness-centrality"]], "rustworkx.digraph_complement": [[358, "rustworkx-digraph-complement"]], "rustworkx.digraph_core_number": [[359, "rustworkx-digraph-core-number"]], "rustworkx.digraph_dfs_edges": [[360, "rustworkx-digraph-dfs-edges"]], "rustworkx.digraph_dfs_search": [[361, "rustworkx-digraph-dfs-search"]], "rustworkx.digraph_dijkstra_search": [[362, "rustworkx-digraph-dijkstra-search"]], "rustworkx.digraph_dijkstra_shortest_path_lengths": [[363, "rustworkx-digraph-dijkstra-shortest-path-lengths"]], "rustworkx.digraph_dijkstra_shortest_paths": [[364, "rustworkx-digraph-dijkstra-shortest-paths"]], "rustworkx.digraph_distance_matrix": [[365, "rustworkx-digraph-distance-matrix"]], "rustworkx.digraph_edge_betweenness_centrality": [[366, "rustworkx-digraph-edge-betweenness-centrality"]], "rustworkx.digraph_eigenvector_centrality": [[367, "rustworkx-digraph-eigenvector-centrality"]], "rustworkx.digraph_find_cycle": [[368, "rustworkx-digraph-find-cycle"]], "rustworkx.digraph_floyd_warshall": [[369, "rustworkx-digraph-floyd-warshall"]], "rustworkx.digraph_floyd_warshall_numpy": [[370, "rustworkx-digraph-floyd-warshall-numpy"]], "rustworkx.digraph_floyd_warshall_successor_and_distance": [[371, "rustworkx-digraph-floyd-warshall-successor-and-distance"]], "rustworkx.digraph_is_isomorphic": [[372, "rustworkx-digraph-is-isomorphic"]], "rustworkx.digraph_is_subgraph_isomorphic": [[373, "rustworkx-digraph-is-subgraph-isomorphic"]], "rustworkx.digraph_k_shortest_path_lengths": [[374, "rustworkx-digraph-k-shortest-path-lengths"]], "rustworkx.digraph_katz_centrality": [[375, "rustworkx-digraph-katz-centrality"]], "rustworkx.digraph_longest_simple_path": [[376, "rustworkx-digraph-longest-simple-path"]], "rustworkx.digraph_node_link_json": [[377, "rustworkx-digraph-node-link-json"]], "rustworkx.digraph_num_shortest_paths_unweighted": [[378, "rustworkx-digraph-num-shortest-paths-unweighted"]], "rustworkx.digraph_random_layout": [[379, "rustworkx-digraph-random-layout"]], "rustworkx.digraph_shell_layout": [[380, "rustworkx-digraph-shell-layout"]], "rustworkx.digraph_spiral_layout": [[381, "rustworkx-digraph-spiral-layout"]], "rustworkx.digraph_spring_layout": [[382, "rustworkx-digraph-spring-layout"]], "rustworkx.digraph_tensor_product": [[383, "rustworkx-digraph-tensor-product"]], "rustworkx.digraph_transitivity": [[384, "rustworkx-digraph-transitivity"]], "rustworkx.digraph_union": [[385, "rustworkx-digraph-union"]], "rustworkx.digraph_unweighted_average_shortest_path_length": [[386, "rustworkx-digraph-unweighted-average-shortest-path-length"]], "rustworkx.digraph_vf2_mapping": [[387, "rustworkx-digraph-vf2-mapping"]], "rustworkx.dijkstra_search": [[388, "rustworkx-dijkstra-search"]], "rustworkx.dijkstra_shortest_path_lengths": [[389, "rustworkx-dijkstra-shortest-path-lengths"]], "rustworkx.dijkstra_shortest_paths": [[390, "rustworkx-dijkstra-shortest-paths"]], "rustworkx.directed_barabasi_albert_graph": [[391, "rustworkx-directed-barabasi-albert-graph"]], "rustworkx.directed_gnm_random_graph": [[392, "rustworkx-directed-gnm-random-graph"]], "rustworkx.directed_gnp_random_graph": [[393, "rustworkx-directed-gnp-random-graph"]], "rustworkx.directed_random_bipartite_graph": [[394, "rustworkx-directed-random-bipartite-graph"]], "rustworkx.distance_matrix": [[395, "rustworkx-distance-matrix"]], "rustworkx.edge_betweenness_centrality": [[396, "rustworkx-edge-betweenness-centrality"]], "rustworkx.eigenvector_centrality": [[397, "rustworkx-eigenvector-centrality"]], "rustworkx.find_negative_cycle": [[398, "rustworkx-find-negative-cycle"]], "rustworkx.floyd_warshall": [[399, "rustworkx-floyd-warshall"]], "rustworkx.floyd_warshall_numpy": [[400, "rustworkx-floyd-warshall-numpy"]], "rustworkx.floyd_warshall_successor_and_distance": [[401, "rustworkx-floyd-warshall-successor-and-distance"]], "rustworkx.generators.barbell_graph": [[402, "rustworkx-generators-barbell-graph"]], "rustworkx.generators.binomial_tree_graph": [[403, "rustworkx-generators-binomial-tree-graph"]], "rustworkx.generators.complete_graph": [[404, "rustworkx-generators-complete-graph"]], "rustworkx.generators.cycle_graph": [[405, "rustworkx-generators-cycle-graph"]], "rustworkx.generators.directed_binomial_tree_graph": [[406, "rustworkx-generators-directed-binomial-tree-graph"]], "rustworkx.generators.directed_complete_graph": [[407, "rustworkx-generators-directed-complete-graph"]], "rustworkx.generators.directed_cycle_graph": [[408, "rustworkx-generators-directed-cycle-graph"]], "rustworkx.generators.directed_empty_graph": [[409, "rustworkx-generators-directed-empty-graph"]], "rustworkx.generators.directed_grid_graph": [[410, "rustworkx-generators-directed-grid-graph"]], "rustworkx.generators.directed_heavy_hex_graph": [[411, "rustworkx-generators-directed-heavy-hex-graph"]], "rustworkx.generators.directed_heavy_square_graph": [[412, "rustworkx-generators-directed-heavy-square-graph"]], "rustworkx.generators.directed_hexagonal_lattice_graph": [[413, "rustworkx-generators-directed-hexagonal-lattice-graph"]], "rustworkx.generators.directed_mesh_graph": [[414, "rustworkx-generators-directed-mesh-graph"]], "rustworkx.generators.directed_path_graph": [[415, "rustworkx-generators-directed-path-graph"]], "rustworkx.generators.directed_star_graph": [[416, "rustworkx-generators-directed-star-graph"]], "rustworkx.generators.empty_graph": [[417, "rustworkx-generators-empty-graph"]], "rustworkx.generators.full_rary_tree": [[418, "rustworkx-generators-full-rary-tree"]], "rustworkx.generators.generalized_petersen_graph": [[419, "rustworkx-generators-generalized-petersen-graph"]], "rustworkx.generators.grid_graph": [[420, "rustworkx-generators-grid-graph"]], "rustworkx.generators.heavy_hex_graph": [[421, "rustworkx-generators-heavy-hex-graph"]], "rustworkx.generators.heavy_square_graph": [[422, "rustworkx-generators-heavy-square-graph"]], "rustworkx.generators.hexagonal_lattice_graph": [[423, "rustworkx-generators-hexagonal-lattice-graph"]], "rustworkx.generators.lollipop_graph": [[424, "rustworkx-generators-lollipop-graph"]], "rustworkx.generators.mesh_graph": [[425, "rustworkx-generators-mesh-graph"]], "rustworkx.generators.path_graph": [[426, "rustworkx-generators-path-graph"]], "rustworkx.generators.star_graph": [[427, "rustworkx-generators-star-graph"]], "rustworkx.graph_adjacency_matrix": [[428, "rustworkx-graph-adjacency-matrix"]], "rustworkx.graph_all_pairs_all_simple_paths": [[429, "rustworkx-graph-all-pairs-all-simple-paths"]], "rustworkx.graph_all_pairs_bellman_ford_path_lengths": [[430, "rustworkx-graph-all-pairs-bellman-ford-path-lengths"]], "rustworkx.graph_all_pairs_bellman_ford_shortest_paths": [[431, "rustworkx-graph-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.graph_all_pairs_dijkstra_path_lengths": [[432, "rustworkx-graph-all-pairs-dijkstra-path-lengths"]], "rustworkx.graph_all_pairs_dijkstra_shortest_paths": [[433, "rustworkx-graph-all-pairs-dijkstra-shortest-paths"]], "rustworkx.graph_all_shortest_paths": [[434, "rustworkx-graph-all-shortest-paths"]], "rustworkx.graph_all_simple_paths": [[435, "rustworkx-graph-all-simple-paths"]], "rustworkx.graph_astar_shortest_path": [[436, "rustworkx-graph-astar-shortest-path"]], "rustworkx.graph_bellman_ford_shortest_path_lengths": [[437, "rustworkx-graph-bellman-ford-shortest-path-lengths"]], "rustworkx.graph_betweenness_centrality": [[438, "rustworkx-graph-betweenness-centrality"]], "rustworkx.graph_bfs_search": [[439, "rustworkx-graph-bfs-search"]], "rustworkx.graph_bipartite_edge_color": [[440, "rustworkx-graph-bipartite-edge-color"]], "rustworkx.graph_bipartite_layout": [[441, "rustworkx-graph-bipartite-layout"]], "rustworkx.graph_cartesian_product": [[442, "rustworkx-graph-cartesian-product"]], "rustworkx.graph_circular_layout": [[443, "rustworkx-graph-circular-layout"]], "rustworkx.graph_closeness_centrality": [[444, "rustworkx-graph-closeness-centrality"]], "rustworkx.graph_complement": [[445, "rustworkx-graph-complement"]], "rustworkx.graph_core_number": [[446, "rustworkx-graph-core-number"]], "rustworkx.graph_dfs_edges": [[447, "rustworkx-graph-dfs-edges"]], "rustworkx.graph_dfs_search": [[448, "rustworkx-graph-dfs-search"]], "rustworkx.graph_dijkstra_search": [[449, "rustworkx-graph-dijkstra-search"]], "rustworkx.graph_dijkstra_shortest_path_lengths": [[450, "rustworkx-graph-dijkstra-shortest-path-lengths"]], "rustworkx.graph_dijkstra_shortest_paths": [[451, "rustworkx-graph-dijkstra-shortest-paths"]], "rustworkx.graph_distance_matrix": [[452, "rustworkx-graph-distance-matrix"]], "rustworkx.graph_edge_betweenness_centrality": [[453, "rustworkx-graph-edge-betweenness-centrality"]], "rustworkx.graph_eigenvector_centrality": [[454, "rustworkx-graph-eigenvector-centrality"]], "rustworkx.graph_floyd_warshall": [[455, "rustworkx-graph-floyd-warshall"]], "rustworkx.graph_floyd_warshall_numpy": [[456, "rustworkx-graph-floyd-warshall-numpy"]], "rustworkx.graph_floyd_warshall_successor_and_distance": [[457, "rustworkx-graph-floyd-warshall-successor-and-distance"]], "rustworkx.graph_greedy_color": [[458, "rustworkx-graph-greedy-color"]], "rustworkx.graph_greedy_edge_color": [[459, "rustworkx-graph-greedy-edge-color"]], "rustworkx.graph_is_isomorphic": [[460, "rustworkx-graph-is-isomorphic"]], "rustworkx.graph_is_subgraph_isomorphic": [[461, "rustworkx-graph-is-subgraph-isomorphic"]], "rustworkx.graph_k_shortest_path_lengths": [[462, "rustworkx-graph-k-shortest-path-lengths"]], "rustworkx.graph_katz_centrality": [[463, "rustworkx-graph-katz-centrality"]], "rustworkx.graph_line_graph": [[464, "rustworkx-graph-line-graph"]], "rustworkx.graph_longest_simple_path": [[465, "rustworkx-graph-longest-simple-path"]], "rustworkx.graph_misra_gries_edge_color": [[466, "rustworkx-graph-misra-gries-edge-color"]], "rustworkx.graph_node_link_json": [[467, "rustworkx-graph-node-link-json"]], "rustworkx.graph_num_shortest_paths_unweighted": [[468, "rustworkx-graph-num-shortest-paths-unweighted"]], "rustworkx.graph_random_layout": [[469, "rustworkx-graph-random-layout"]], "rustworkx.graph_shell_layout": [[470, "rustworkx-graph-shell-layout"]], "rustworkx.graph_spiral_layout": [[471, "rustworkx-graph-spiral-layout"]], "rustworkx.graph_spring_layout": [[472, "rustworkx-graph-spring-layout"]], "rustworkx.graph_tensor_product": [[473, "rustworkx-graph-tensor-product"]], "rustworkx.graph_token_swapper": [[474, "rustworkx-graph-token-swapper"]], "rustworkx.graph_transitivity": [[475, "rustworkx-graph-transitivity"]], "rustworkx.graph_union": [[476, "rustworkx-graph-union"]], "rustworkx.graph_unweighted_average_shortest_path_length": [[477, "rustworkx-graph-unweighted-average-shortest-path-length"]], "rustworkx.graph_vf2_mapping": [[478, "rustworkx-graph-vf2-mapping"]], "rustworkx.has_path": [[479, "rustworkx-has-path"]], "rustworkx.hits": [[480, "rustworkx-hits"]], "rustworkx.is_bipartite": [[481, "rustworkx-is-bipartite"]], "rustworkx.is_connected": [[482, "rustworkx-is-connected"]], "rustworkx.is_directed_acyclic_graph": [[483, "rustworkx-is-directed-acyclic-graph"]], "rustworkx.is_isomorphic": [[484, "rustworkx-is-isomorphic"]], "rustworkx.is_isomorphic_node_match": [[485, "rustworkx-is-isomorphic-node-match"]], "rustworkx.is_matching": [[486, "rustworkx-is-matching"]], "rustworkx.is_maximal_matching": [[487, "rustworkx-is-maximal-matching"]], "rustworkx.is_planar": [[488, "rustworkx-is-planar"]], "rustworkx.is_subgraph_isomorphic": [[489, "rustworkx-is-subgraph-isomorphic"]], "rustworkx.is_weakly_connected": [[490, "rustworkx-is-weakly-connected"]], "rustworkx.isolates": [[491, "rustworkx-isolates"]], "rustworkx.k_shortest_path_lengths": [[492, "rustworkx-k-shortest-path-lengths"]], "rustworkx.katz_centrality": [[493, "rustworkx-katz-centrality"]], "rustworkx.layers": [[494, "rustworkx-layers"]], "rustworkx.lexicographical_topological_sort": [[495, "rustworkx-lexicographical-topological-sort"]], "rustworkx.longest_simple_path": [[496, "rustworkx-longest-simple-path"]], "rustworkx.max_weight_matching": [[497, "rustworkx-max-weight-matching"]], "rustworkx.metric_closure": [[498, "rustworkx-metric-closure"]], "rustworkx.minimum_spanning_edges": [[499, "rustworkx-minimum-spanning-edges"]], "rustworkx.minimum_spanning_tree": [[500, "rustworkx-minimum-spanning-tree"]], "rustworkx.negative_edge_cycle": [[501, "rustworkx-negative-edge-cycle"]], "rustworkx.networkx_converter": [[502, "rustworkx-networkx-converter"]], "rustworkx.node_connected_component": [[503, "rustworkx-node-connected-component"]], "rustworkx.node_link_json": [[504, "rustworkx-node-link-json"]], "rustworkx.num_shortest_paths_unweighted": [[505, "rustworkx-num-shortest-paths-unweighted"]], "rustworkx.number_connected_components": [[506, "rustworkx-number-connected-components"]], "rustworkx.number_weakly_connected_components": [[507, "rustworkx-number-weakly-connected-components"]], "rustworkx.pagerank": [[508, "rustworkx-pagerank"]], "rustworkx.random_geometric_graph": [[509, "rustworkx-random-geometric-graph"]], "rustworkx.random_layout": [[510, "rustworkx-random-layout"]], "rustworkx.read_graphml": [[511, "rustworkx-read-graphml"]], "rustworkx.shell_layout": [[512, "rustworkx-shell-layout"]], "rustworkx.simple_cycles": [[513, "rustworkx-simple-cycles"]], "rustworkx.spiral_layout": [[514, "rustworkx-spiral-layout"]], "rustworkx.spring_layout": [[515, "rustworkx-spring-layout"]], "rustworkx.steiner_tree": [[516, "rustworkx-steiner-tree"]], "rustworkx.stoer_wagner_min_cut": [[517, "rustworkx-stoer-wagner-min-cut"]], "rustworkx.strongly_connected_components": [[518, "rustworkx-strongly-connected-components"]], "rustworkx.topological_generations": [[519, "rustworkx-topological-generations"]], "rustworkx.topological_sort": [[520, "rustworkx-topological-sort"]], "rustworkx.transitive_reduction": [[521, "rustworkx-transitive-reduction"]], "rustworkx.transitivity": [[522, "rustworkx-transitivity"]], "rustworkx.two_color": [[523, "rustworkx-two-color"]], "rustworkx.undirected_gnm_random_graph": [[524, "rustworkx-undirected-gnm-random-graph"]], "rustworkx.undirected_gnp_random_graph": [[525, "rustworkx-undirected-gnp-random-graph"]], "rustworkx.undirected_random_bipartite_graph": [[526, "rustworkx-undirected-random-bipartite-graph"]], "rustworkx.union": [[527, "rustworkx-union"]], "rustworkx.unweighted_average_shortest_path_length": [[528, "rustworkx-unweighted-average-shortest-path-length"]], "rustworkx.vf2_mapping": [[529, "rustworkx-vf2-mapping"]], "BFSVisitor": [[530, "bfsvisitor"]], "rustworkx.visit.BFSVisitor.black_target_edge": [[531, "rustworkx-visit-bfsvisitor-black-target-edge"]], "rustworkx.visit.BFSVisitor.discover_vertex": [[532, "rustworkx-visit-bfsvisitor-discover-vertex"]], "rustworkx.visit.BFSVisitor.finish_vertex": [[533, "rustworkx-visit-bfsvisitor-finish-vertex"]], "rustworkx.visit.BFSVisitor.gray_target_edge": [[534, "rustworkx-visit-bfsvisitor-gray-target-edge"]], "rustworkx.visit.BFSVisitor.non_tree_edge": [[535, "rustworkx-visit-bfsvisitor-non-tree-edge"]], "rustworkx.visit.BFSVisitor.tree_edge": [[536, "rustworkx-visit-bfsvisitor-tree-edge"]], "DFSVisitor": [[537, "dfsvisitor"]], "rustworkx.visit.DFSVisitor.back_edge": [[538, "rustworkx-visit-dfsvisitor-back-edge"]], "rustworkx.visit.DFSVisitor.discover_vertex": [[539, "rustworkx-visit-dfsvisitor-discover-vertex"]], "rustworkx.visit.DFSVisitor.finish_vertex": [[540, "rustworkx-visit-dfsvisitor-finish-vertex"]], "rustworkx.visit.DFSVisitor.forward_or_cross_edge": [[541, "rustworkx-visit-dfsvisitor-forward-or-cross-edge"]], "rustworkx.visit.DFSVisitor.tree_edge": [[542, "rustworkx-visit-dfsvisitor-tree-edge"]], "DijkstraVisitor": [[543, "dijkstravisitor"]], "rustworkx.visit.DijkstraVisitor.discover_vertex": [[544, "rustworkx-visit-dijkstravisitor-discover-vertex"]], "rustworkx.visit.DijkstraVisitor.edge_not_relaxed": [[545, "rustworkx-visit-dijkstravisitor-edge-not-relaxed"]], "rustworkx.visit.DijkstraVisitor.edge_relaxed": [[546, "rustworkx-visit-dijkstravisitor-edge-relaxed"]], "rustworkx.visit.DijkstraVisitor.examine_edge": [[547, "rustworkx-visit-dijkstravisitor-examine-edge"]], "rustworkx.visit.DijkstraVisitor.finish_vertex": [[548, "rustworkx-visit-dijkstravisitor-finish-vertex"]], "rustworkx.visit.PruneSearch": [[549, "rustworkx-visit-prunesearch"]], "rustworkx.visit.StopSearch": [[550, "rustworkx-visit-stopsearch"]], "rustworkx.visualization.graphviz_draw": [[551, "rustworkx-visualization-graphviz-draw"]], "rustworkx.visualization.mpl_draw": [[552, "rustworkx-visualization-mpl-draw"]], "rustworkx.weakly_connected_components": [[553, "rustworkx-weakly-connected-components"]], "Rustworkx Comparison Benchmarks With Other Libraries": [[554, "rustworkx-comparison-benchmarks-with-other-libraries"]], "Graph Creation": [[554, "graph-creation"]], "Single Source Shortest Path": [[554, "single-source-shortest-path"]], "All-Pairs Shortest Path": [[554, "all-pairs-shortest-path"]], "Subgraph Isomorphism": [[554, "subgraph-isomorphism"]], "Citation": [[554, "citation"]], "rustworkx Documentation": [[555, "rustworkx-documentation"]], "Project history": [[555, "project-history"]], "Getting Started": [[556, "getting-started"]], "Installing Rustworkx": [[556, "installing-rustworkx"]], "Installing on a platform without precompiled binaries": [[556, "installing-on-a-platform-without-precompiled-binaries"]], "Platform Support": [[556, "platform-support"], [556, "id5"]], "Tier 1": [[556, "tier-1"]], "Tier 2": [[556, "tier-2"]], "Tier 3": [[556, "tier-3"]], "Tier 4": [[556, "tier-4"]], "Using rustworkx": [[556, "using-rustworkx"]], "rustworkx for NetworkX users": [[557, "rustworkx-for-networkx-users"]], "Some Key Differences": [[557, "some-key-differences"]], "Graph Data and Attributes": [[557, "graph-data-and-attributes"]], "Nodes": [[557, "nodes"], [562, "nodes"]], "Edges": [[557, "edges"], [562, "edges"]], "Attributes": [[557, "attributes"]], "Examining elements of a graph": [[557, "examining-elements-of-a-graph"], [562, "examining-elements-of-a-graph"]], "API Equivalents": [[557, "api-equivalents"]], "Class Constructors": [[557, "class-constructors"]], "Graph Modifiers": [[557, "graph-modifiers"]], "Matrix Converter Functions": [[557, "matrix-converter-functions"]], "Visualization Functions": [[557, "visualization-functions"]], "Matplotlib Drawers": [[557, "matplotlib-drawers"]], "Converting from a networkx graph": [[557, "converting-from-a-networkx-graph"]], "Functionality Gaps": [[557, "functionality-gaps"]], "0.14.2": [[558, "relnotes-0-14-2"]], "Prelude": [[558, "prelude"], [558, "relnotes-0-14-1-prelude"], [558, "relnotes-0-14-0-prelude"], [558, "relnotes-0-13-0-prelude"], [558, "relnotes-0-12-0-prelude"], [558, "relnotes-0-11-0-prelude"], [558, "relnotes-0-10-2-prelude"], [558, "relnotes-0-10-1-prelude"], [558, "relnotes-0-10-0-prelude"], [558, "relnotes-0-9-0-prelude"], [558, "relnotes-0-8-0-prelude"]], "Bug Fixes": [[558, "bug-fixes"], [558, "relnotes-0-14-1-bug-fixes"], [558, "relnotes-0-14-0-bug-fixes"], [558, "relnotes-0-13-0-bug-fixes"], [558, "relnotes-0-12-0-bug-fixes"], [558, "relnotes-0-11-0-bug-fixes"], [558, "relnotes-0-10-2-bug-fixes"], [558, "relnotes-0-10-0-bug-fixes"], [558, "relnotes-0-9-0-bug-fixes"], [558, "relnotes-0-8-0-bug-fixes"]], "0.14.1": [[558, "relnotes-0-14-1"]], "0.14.0": [[558, "relnotes-0-14-0"]], "New Features": [[558, "new-features"], [558, "relnotes-0-13-0-new-features"], [558, "relnotes-0-12-0-new-features"], [558, "relnotes-0-11-0-new-features"], [558, "relnotes-0-10-2-new-features"], [558, "relnotes-0-10-0-new-features"], [558, "relnotes-0-9-0-new-features"], [558, "relnotes-0-8-0-new-features"], [558, "id46"], [558, "id49"], [558, "id53"], [558, "id56"]], "Upgrade Notes": [[558, "upgrade-notes"], [558, "relnotes-0-13-0-upgrade-notes"], [558, "relnotes-0-12-0-upgrade-notes"], [558, "relnotes-0-11-0-upgrade-notes"], [558, "relnotes-0-10-0-upgrade-notes"], [558, "relnotes-0-9-0-upgrade-notes"], [558, "relnotes-0-8-0-upgrade-notes"], [558, "id47"], [558, "id50"], [558, "id57"]], "Deprecation Notes": [[558, "deprecation-notes"]], "Other Notes": [[558, "other-notes"]], "0.13.0": [[558, "relnotes-0-13-0"]], "0.12.0": [[558, "relnotes-0-12-0"]], "0.11.0": [[558, "relnotes-0-11-0"]], "0.10.2": [[558, "relnotes-0-10-2"]], "0.10.1": [[558, "relnotes-0-10-1"]], "0.10.0": [[558, "relnotes-0-10-0"]], "0.9.0": [[558, "relnotes-0-9-0"]], "0.8.0": [[558, "relnotes-0-8-0"]], "0.7.1": [[558, "id44"]], "0.7.0": [[558, "id45"]], "Fixes": [[558, "fixes"], [558, "id51"], [558, "id54"], [558, "id58"]], "0.6.0": [[558, "id48"]], "0.5.0": [[558, "id52"]], "0.4.0": [[558, "id55"]], "Working with Betweenness Centrality": [[559, "working-with-betweenness-centrality"]], "Generate a Graph": [[559, "generate-a-graph"]], "Calculate the Betweeness Centrality": [[559, "calculate-the-betweeness-centrality"]], "Visualize the Betweenness Centrality": [[559, "visualize-the-betweenness-centrality"]], "Directed Acyclic Graphs": [[560, "directed-acyclic-graphs"], [560, "id1"]], "Directed Graph": [[560, "directed-graph"]], "Applications of DAGs": [[560, "applications-of-dags"]], "Task Scheduling": [[560, "task-scheduling"]], "Qiskit\u2019s Compiler": [[560, "qiskit-s-compiler"]], "rustworkx Tutorials and Guides": [[561, "rustworkx-tutorials-and-guides"]], "Introduction to rustworkx": [[562, "introduction-to-rustworkx"]], "Installing rustworkx": [[562, "installing-rustworkx"]], "How to import rustworkx": [[562, "how-to-import-rustworkx"]], "Creating a Graph": [[562, "creating-a-graph"]], "Removing elements from a graph": [[562, "removing-elements-from-a-graph"]], "Modifying elements of a graph": [[562, "modifying-elements-of-a-graph"]], "What to use for node and edge data payload": [[562, "what-to-use-for-node-and-edge-data-payload"]], "Accessing edges and neighbors": [[562, "accessing-edges-and-neighbors"]], "Graph Attributes": [[562, "graph-attributes"]], "Directed Graphs": [[562, "directed-graphs"]], "Multigraphs": [[562, "multigraphs"]], "Graph Generators and operations": [[562, "graph-generators-and-operations"]], "Analyzing graphs": [[562, "analyzing-graphs"]], "Drawing graphs": [[562, "drawing-graphs"]], "Visualization": [[563, "visualization"]], "Visualization API": [[563, "visualization-api"]]}, "indexentries": {"allpairspathlengthmapping (class in rustworkx)": [[25, "rustworkx.AllPairsPathLengthMapping"]], "items() (allpairspathlengthmapping method)": [[26, "rustworkx.AllPairsPathLengthMapping.items"]], "keys() (allpairspathlengthmapping method)": [[27, "rustworkx.AllPairsPathLengthMapping.keys"]], "values() (allpairspathlengthmapping method)": [[28, "rustworkx.AllPairsPathLengthMapping.values"]], "allpairspathmapping (class in rustworkx)": [[29, "rustworkx.AllPairsPathMapping"]], "items() (allpairspathmapping method)": [[30, "rustworkx.AllPairsPathMapping.items"]], "keys() (allpairspathmapping method)": [[31, "rustworkx.AllPairsPathMapping.keys"]], "values() (allpairspathmapping method)": [[32, "rustworkx.AllPairsPathMapping.values"]], "bfspredecessors (class in rustworkx)": [[33, "rustworkx.BFSPredecessors"]], "bfssuccessors (class in rustworkx)": [[34, "rustworkx.BFSSuccessors"]], "biconnectedcomponents (class in rustworkx)": [[35, "rustworkx.BiconnectedComponents"]], "items() (biconnectedcomponents method)": [[36, "rustworkx.BiconnectedComponents.items"]], "keys() (biconnectedcomponents method)": [[37, "rustworkx.BiconnectedComponents.keys"]], "values() (biconnectedcomponents method)": [[38, "rustworkx.BiconnectedComponents.values"]], "centralitymapping (class in rustworkx)": [[39, "rustworkx.CentralityMapping"]], "items() (centralitymapping method)": [[40, "rustworkx.CentralityMapping.items"]], "keys() (centralitymapping method)": [[41, "rustworkx.CentralityMapping.keys"]], "values() (centralitymapping method)": [[42, "rustworkx.CentralityMapping.values"]], "chains (class in rustworkx)": [[43, "rustworkx.Chains"]], "daghascycle": [[44, "rustworkx.DAGHasCycle"]], "dagwouldcycle": [[45, "rustworkx.DAGWouldCycle"]], "edgecentralitymapping (class in rustworkx)": [[46, "rustworkx.EdgeCentralityMapping"]], "items() (edgecentralitymapping method)": [[47, "rustworkx.EdgeCentralityMapping.items"]], "keys() (edgecentralitymapping method)": [[48, "rustworkx.EdgeCentralityMapping.keys"]], "values() (edgecentralitymapping method)": [[49, "rustworkx.EdgeCentralityMapping.values"]], "edgeindexmap (class in rustworkx)": [[50, "rustworkx.EdgeIndexMap"]], "items() (edgeindexmap method)": [[51, "rustworkx.EdgeIndexMap.items"]], "keys() (edgeindexmap method)": [[52, "rustworkx.EdgeIndexMap.keys"]], "values() (edgeindexmap method)": [[53, "rustworkx.EdgeIndexMap.values"]], "edgeindices (class in rustworkx)": [[54, "rustworkx.EdgeIndices"]], "edgelist (class in rustworkx)": [[55, "rustworkx.EdgeList"]], "graphnotbipartite": [[56, "rustworkx.GraphNotBipartite"]], "invalidmapping": [[57, "rustworkx.InvalidMapping"]], "invalidnode": [[58, "rustworkx.InvalidNode"]], "jsonserializationerror": [[59, "rustworkx.JSONSerializationError"]], "negativecycle": [[60, "rustworkx.NegativeCycle"]], "noedgebetweennodes": [[61, "rustworkx.NoEdgeBetweenNodes"]], "nopathfound": [[62, "rustworkx.NoPathFound"]], "nosuitableneighbors": [[63, "rustworkx.NoSuitableNeighbors"]], "nodeindices (class in rustworkx)": [[64, "rustworkx.NodeIndices"]], "nodemap (class in rustworkx)": [[65, "rustworkx.NodeMap"]], "items() (nodemap method)": [[66, "rustworkx.NodeMap.items"]], "keys() (nodemap method)": [[67, "rustworkx.NodeMap.keys"]], "values() (nodemap method)": [[68, "rustworkx.NodeMap.values"]], "nullgraph": [[69, "rustworkx.NullGraph"]], "pathlengthmapping (class in rustworkx)": [[70, "rustworkx.PathLengthMapping"]], "items() (pathlengthmapping method)": [[71, "rustworkx.PathLengthMapping.items"]], "keys() (pathlengthmapping method)": [[72, "rustworkx.PathLengthMapping.keys"]], "values() (pathlengthmapping method)": [[73, "rustworkx.PathLengthMapping.values"]], "pathmapping (class in rustworkx)": [[74, "rustworkx.PathMapping"]], "items() (pathmapping method)": [[75, "rustworkx.PathMapping.items"]], "keys() (pathmapping method)": [[76, "rustworkx.PathMapping.keys"]], "values() (pathmapping method)": [[77, "rustworkx.PathMapping.values"]], "pos2dmapping (class in rustworkx)": [[78, "rustworkx.Pos2DMapping"]], "items() (pos2dmapping method)": [[79, "rustworkx.Pos2DMapping.items"]], "keys() (pos2dmapping method)": [[80, "rustworkx.Pos2DMapping.keys"]], "values() (pos2dmapping method)": [[81, "rustworkx.Pos2DMapping.values"]], "productnodemap (class in rustworkx)": [[82, "rustworkx.ProductNodeMap"]], "items() (productnodemap method)": [[83, "rustworkx.ProductNodeMap.items"]], "keys() (productnodemap method)": [[84, "rustworkx.ProductNodeMap.keys"]], "values() (productnodemap method)": [[85, "rustworkx.ProductNodeMap.values"]], "pydag (class in rustworkx)": [[86, "rustworkx.PyDAG"]], "attrs (pydag attribute)": [[86, "rustworkx.PyDAG.attrs"]], "check_cycle (pydag attribute)": [[86, "rustworkx.PyDAG.check_cycle"]], "multigraph (pydag attribute)": [[86, "rustworkx.PyDAG.multigraph"]], "add_child() (pydag method)": [[87, "rustworkx.PyDAG.add_child"]], "add_edge() (pydag method)": [[88, "rustworkx.PyDAG.add_edge"]], "add_edges_from() (pydag method)": [[89, "rustworkx.PyDAG.add_edges_from"]], "add_edges_from_no_data() (pydag method)": [[90, "rustworkx.PyDAG.add_edges_from_no_data"]], "add_node() (pydag method)": [[91, "rustworkx.PyDAG.add_node"]], "add_nodes_from() (pydag method)": [[92, "rustworkx.PyDAG.add_nodes_from"]], "add_parent() (pydag method)": [[93, "rustworkx.PyDAG.add_parent"]], "adj() (pydag method)": [[94, "rustworkx.PyDAG.adj"]], "adj_direction() (pydag method)": [[95, "rustworkx.PyDAG.adj_direction"]], "clear() (pydag method)": [[96, "rustworkx.PyDAG.clear"]], "clear_edges() (pydag method)": [[97, "rustworkx.PyDAG.clear_edges"]], "compose() (pydag method)": [[98, "rustworkx.PyDAG.compose"]], "contract_nodes() (pydag method)": [[99, "rustworkx.PyDAG.contract_nodes"]], "copy() (pydag method)": [[100, "rustworkx.PyDAG.copy"]], "edge_index_map() (pydag method)": [[101, "rustworkx.PyDAG.edge_index_map"]], "edge_indices() (pydag method)": [[102, "rustworkx.PyDAG.edge_indices"]], "edge_indices_from_endpoints() (pydag method)": [[103, "rustworkx.PyDAG.edge_indices_from_endpoints"]], "edge_list() (pydag method)": [[104, "rustworkx.PyDAG.edge_list"]], "edge_subgraph() (pydag method)": [[105, "rustworkx.PyDAG.edge_subgraph"]], "edges() (pydag method)": [[106, "rustworkx.PyDAG.edges"]], "extend_from_edge_list() (pydag method)": [[107, "rustworkx.PyDAG.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pydag method)": [[108, "rustworkx.PyDAG.extend_from_weighted_edge_list"]], "filter_edges() (pydag method)": [[109, "rustworkx.PyDAG.filter_edges"]], "filter_nodes() (pydag method)": [[110, "rustworkx.PyDAG.filter_nodes"]], "find_adjacent_node_by_edge() (pydag method)": [[111, "rustworkx.PyDAG.find_adjacent_node_by_edge"]], "find_node_by_weight() (pydag method)": [[112, "rustworkx.PyDAG.find_node_by_weight"]], "find_predecessor_node_by_edge() (pydag method)": [[113, "rustworkx.PyDAG.find_predecessor_node_by_edge"]], "find_predecessors_by_edge() (pydag method)": [[114, "rustworkx.PyDAG.find_predecessors_by_edge"]], "find_successors_by_edge() (pydag method)": [[115, "rustworkx.PyDAG.find_successors_by_edge"]], "from_adjacency_matrix() (pydag static method)": [[116, "rustworkx.PyDAG.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pydag static method)": [[117, "rustworkx.PyDAG.from_complex_adjacency_matrix"]], "get_all_edge_data() (pydag method)": [[118, "rustworkx.PyDAG.get_all_edge_data"]], "get_edge_data() (pydag method)": [[119, "rustworkx.PyDAG.get_edge_data"]], "get_edge_data_by_index() (pydag method)": [[120, "rustworkx.PyDAG.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pydag method)": [[121, "rustworkx.PyDAG.get_edge_endpoints_by_index"]], "get_node_data() (pydag method)": [[122, "rustworkx.PyDAG.get_node_data"]], "has_edge() (pydag method)": [[123, "rustworkx.PyDAG.has_edge"]], "has_parallel_edges() (pydag method)": [[124, "rustworkx.PyDAG.has_parallel_edges"]], "in_degree() (pydag method)": [[125, "rustworkx.PyDAG.in_degree"]], "in_edges() (pydag method)": [[126, "rustworkx.PyDAG.in_edges"]], "incident_edge_index_map() (pydag method)": [[127, "rustworkx.PyDAG.incident_edge_index_map"]], "incident_edges() (pydag method)": [[128, "rustworkx.PyDAG.incident_edges"]], "insert_node_on_in_edges() (pydag method)": [[129, "rustworkx.PyDAG.insert_node_on_in_edges"]], "insert_node_on_in_edges_multiple() (pydag method)": [[130, "rustworkx.PyDAG.insert_node_on_in_edges_multiple"]], "insert_node_on_out_edges() (pydag method)": [[131, "rustworkx.PyDAG.insert_node_on_out_edges"]], "insert_node_on_out_edges_multiple() (pydag method)": [[132, "rustworkx.PyDAG.insert_node_on_out_edges_multiple"]], "is_symmetric() (pydag method)": [[133, "rustworkx.PyDAG.is_symmetric"]], "make_symmetric() (pydag method)": [[134, "rustworkx.PyDAG.make_symmetric"]], "merge_nodes() (pydag method)": [[135, "rustworkx.PyDAG.merge_nodes"]], "neighbors() (pydag method)": [[136, "rustworkx.PyDAG.neighbors"]], "node_indexes() (pydag method)": [[137, "rustworkx.PyDAG.node_indexes"]], "node_indices() (pydag method)": [[138, "rustworkx.PyDAG.node_indices"]], "nodes() (pydag method)": [[139, "rustworkx.PyDAG.nodes"]], "num_edges() (pydag method)": [[140, "rustworkx.PyDAG.num_edges"]], "num_nodes() (pydag method)": [[141, "rustworkx.PyDAG.num_nodes"]], "out_degree() (pydag method)": [[142, "rustworkx.PyDAG.out_degree"]], "out_edges() (pydag method)": [[143, "rustworkx.PyDAG.out_edges"]], "predecessor_indices() (pydag method)": [[144, "rustworkx.PyDAG.predecessor_indices"]], "predecessors() (pydag method)": [[145, "rustworkx.PyDAG.predecessors"]], "read_edge_list() (pydag static method)": [[146, "rustworkx.PyDAG.read_edge_list"]], "remove_edge() (pydag method)": [[147, "rustworkx.PyDAG.remove_edge"]], "remove_edge_from_index() (pydag method)": [[148, "rustworkx.PyDAG.remove_edge_from_index"]], "remove_edges_from() (pydag method)": [[149, "rustworkx.PyDAG.remove_edges_from"]], "remove_node() (pydag method)": [[150, "rustworkx.PyDAG.remove_node"]], "remove_node_retain_edges() (pydag method)": [[151, "rustworkx.PyDAG.remove_node_retain_edges"]], "remove_nodes_from() (pydag method)": [[152, "rustworkx.PyDAG.remove_nodes_from"]], "reverse() (pydag method)": [[153, "rustworkx.PyDAG.reverse"]], "subgraph() (pydag method)": [[154, "rustworkx.PyDAG.subgraph"]], "substitute_node_with_subgraph() (pydag method)": [[155, "rustworkx.PyDAG.substitute_node_with_subgraph"]], "successor_indices() (pydag method)": [[156, "rustworkx.PyDAG.successor_indices"]], "successors() (pydag method)": [[157, "rustworkx.PyDAG.successors"]], "to_dot() (pydag method)": [[158, "rustworkx.PyDAG.to_dot"]], "to_undirected() (pydag method)": [[159, "rustworkx.PyDAG.to_undirected"]], "update_edge() (pydag method)": [[160, "rustworkx.PyDAG.update_edge"]], "update_edge_by_index() (pydag method)": [[161, "rustworkx.PyDAG.update_edge_by_index"]], "weighted_edge_list() (pydag method)": [[162, "rustworkx.PyDAG.weighted_edge_list"]], "write_edge_list() (pydag method)": [[163, "rustworkx.PyDAG.write_edge_list"]], "pydigraph (class in rustworkx)": [[164, "rustworkx.PyDiGraph"]], "attrs (pydigraph attribute)": [[164, "rustworkx.PyDiGraph.attrs"]], "check_cycle (pydigraph attribute)": [[164, "rustworkx.PyDiGraph.check_cycle"]], "multigraph (pydigraph attribute)": [[164, "rustworkx.PyDiGraph.multigraph"]], "add_child() (pydigraph method)": [[165, "rustworkx.PyDiGraph.add_child"]], "add_edge() (pydigraph method)": [[166, "rustworkx.PyDiGraph.add_edge"]], "add_edges_from() (pydigraph method)": [[167, "rustworkx.PyDiGraph.add_edges_from"]], "add_edges_from_no_data() (pydigraph method)": [[168, "rustworkx.PyDiGraph.add_edges_from_no_data"]], "add_node() (pydigraph method)": [[169, "rustworkx.PyDiGraph.add_node"]], "add_nodes_from() (pydigraph method)": [[170, "rustworkx.PyDiGraph.add_nodes_from"]], "add_parent() (pydigraph method)": [[171, "rustworkx.PyDiGraph.add_parent"]], "adj() (pydigraph method)": [[172, "rustworkx.PyDiGraph.adj"]], "adj_direction() (pydigraph method)": [[173, "rustworkx.PyDiGraph.adj_direction"]], "clear() (pydigraph method)": [[174, "rustworkx.PyDiGraph.clear"]], "clear_edges() (pydigraph method)": [[175, "rustworkx.PyDiGraph.clear_edges"]], "compose() (pydigraph method)": [[176, "rustworkx.PyDiGraph.compose"]], "contract_nodes() (pydigraph method)": [[177, "rustworkx.PyDiGraph.contract_nodes"]], "copy() (pydigraph method)": [[178, "rustworkx.PyDiGraph.copy"]], "edge_index_map() (pydigraph method)": [[179, "rustworkx.PyDiGraph.edge_index_map"]], "edge_indices() (pydigraph method)": [[180, "rustworkx.PyDiGraph.edge_indices"]], "edge_indices_from_endpoints() (pydigraph method)": [[181, "rustworkx.PyDiGraph.edge_indices_from_endpoints"]], "edge_list() (pydigraph method)": [[182, "rustworkx.PyDiGraph.edge_list"]], "edge_subgraph() (pydigraph method)": [[183, "rustworkx.PyDiGraph.edge_subgraph"]], "edges() (pydigraph method)": [[184, "rustworkx.PyDiGraph.edges"]], "extend_from_edge_list() (pydigraph method)": [[185, "rustworkx.PyDiGraph.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pydigraph method)": [[186, "rustworkx.PyDiGraph.extend_from_weighted_edge_list"]], "filter_edges() (pydigraph method)": [[187, "rustworkx.PyDiGraph.filter_edges"]], "filter_nodes() (pydigraph method)": [[188, "rustworkx.PyDiGraph.filter_nodes"]], "find_adjacent_node_by_edge() (pydigraph method)": [[189, "rustworkx.PyDiGraph.find_adjacent_node_by_edge"]], "find_node_by_weight() (pydigraph method)": [[190, "rustworkx.PyDiGraph.find_node_by_weight"]], "find_predecessor_node_by_edge() (pydigraph method)": [[191, "rustworkx.PyDiGraph.find_predecessor_node_by_edge"]], "find_predecessors_by_edge() (pydigraph method)": [[192, "rustworkx.PyDiGraph.find_predecessors_by_edge"]], "find_successors_by_edge() (pydigraph method)": [[193, "rustworkx.PyDiGraph.find_successors_by_edge"]], "from_adjacency_matrix() (pydigraph static method)": [[194, "rustworkx.PyDiGraph.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pydigraph static method)": [[195, "rustworkx.PyDiGraph.from_complex_adjacency_matrix"]], "get_all_edge_data() (pydigraph method)": [[196, "rustworkx.PyDiGraph.get_all_edge_data"]], "get_edge_data() (pydigraph method)": [[197, "rustworkx.PyDiGraph.get_edge_data"]], "get_edge_data_by_index() (pydigraph method)": [[198, "rustworkx.PyDiGraph.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pydigraph method)": [[199, "rustworkx.PyDiGraph.get_edge_endpoints_by_index"]], "get_node_data() (pydigraph method)": [[200, "rustworkx.PyDiGraph.get_node_data"]], "has_edge() (pydigraph method)": [[201, "rustworkx.PyDiGraph.has_edge"]], "has_parallel_edges() (pydigraph method)": [[202, "rustworkx.PyDiGraph.has_parallel_edges"]], "in_degree() (pydigraph method)": [[203, "rustworkx.PyDiGraph.in_degree"]], "in_edges() (pydigraph method)": [[204, "rustworkx.PyDiGraph.in_edges"]], "incident_edge_index_map() (pydigraph method)": [[205, "rustworkx.PyDiGraph.incident_edge_index_map"]], "incident_edges() (pydigraph method)": [[206, "rustworkx.PyDiGraph.incident_edges"]], "insert_node_on_in_edges() (pydigraph method)": [[207, "rustworkx.PyDiGraph.insert_node_on_in_edges"]], "insert_node_on_in_edges_multiple() (pydigraph method)": [[208, "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple"]], "insert_node_on_out_edges() (pydigraph method)": [[209, "rustworkx.PyDiGraph.insert_node_on_out_edges"]], "insert_node_on_out_edges_multiple() (pydigraph method)": [[210, "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple"]], "is_symmetric() (pydigraph method)": [[211, "rustworkx.PyDiGraph.is_symmetric"]], "make_symmetric() (pydigraph method)": [[212, "rustworkx.PyDiGraph.make_symmetric"]], "merge_nodes() (pydigraph method)": [[213, "rustworkx.PyDiGraph.merge_nodes"]], "neighbors() (pydigraph method)": [[214, "rustworkx.PyDiGraph.neighbors"]], "node_indexes() (pydigraph method)": [[215, "rustworkx.PyDiGraph.node_indexes"]], "node_indices() (pydigraph method)": [[216, "rustworkx.PyDiGraph.node_indices"]], "nodes() (pydigraph method)": [[217, "rustworkx.PyDiGraph.nodes"]], "num_edges() (pydigraph method)": [[218, "rustworkx.PyDiGraph.num_edges"]], "num_nodes() (pydigraph method)": [[219, "rustworkx.PyDiGraph.num_nodes"]], "out_degree() (pydigraph method)": [[220, "rustworkx.PyDiGraph.out_degree"]], "out_edges() (pydigraph method)": [[221, "rustworkx.PyDiGraph.out_edges"]], "predecessor_indices() (pydigraph method)": [[222, "rustworkx.PyDiGraph.predecessor_indices"]], "predecessors() (pydigraph method)": [[223, "rustworkx.PyDiGraph.predecessors"]], "read_edge_list() (pydigraph static method)": [[224, "rustworkx.PyDiGraph.read_edge_list"]], "remove_edge() (pydigraph method)": [[225, "rustworkx.PyDiGraph.remove_edge"]], "remove_edge_from_index() (pydigraph method)": [[226, "rustworkx.PyDiGraph.remove_edge_from_index"]], "remove_edges_from() (pydigraph method)": [[227, "rustworkx.PyDiGraph.remove_edges_from"]], "remove_node() (pydigraph method)": [[228, "rustworkx.PyDiGraph.remove_node"]], "remove_node_retain_edges() (pydigraph method)": [[229, "rustworkx.PyDiGraph.remove_node_retain_edges"]], "remove_nodes_from() (pydigraph method)": [[230, "rustworkx.PyDiGraph.remove_nodes_from"]], "reverse() (pydigraph method)": [[231, "rustworkx.PyDiGraph.reverse"]], "subgraph() (pydigraph method)": [[232, "rustworkx.PyDiGraph.subgraph"]], "substitute_node_with_subgraph() (pydigraph method)": [[233, "rustworkx.PyDiGraph.substitute_node_with_subgraph"]], "successor_indices() (pydigraph method)": [[234, "rustworkx.PyDiGraph.successor_indices"]], "successors() (pydigraph method)": [[235, "rustworkx.PyDiGraph.successors"]], "to_dot() (pydigraph method)": [[236, "rustworkx.PyDiGraph.to_dot"]], "to_undirected() (pydigraph method)": [[237, "rustworkx.PyDiGraph.to_undirected"]], "update_edge() (pydigraph method)": [[238, "rustworkx.PyDiGraph.update_edge"]], "update_edge_by_index() (pydigraph method)": [[239, "rustworkx.PyDiGraph.update_edge_by_index"]], "weighted_edge_list() (pydigraph method)": [[240, "rustworkx.PyDiGraph.weighted_edge_list"]], "write_edge_list() (pydigraph method)": [[241, "rustworkx.PyDiGraph.write_edge_list"]], "pygraph (class in rustworkx)": [[242, "rustworkx.PyGraph"]], "attrs (pygraph attribute)": [[242, "rustworkx.PyGraph.attrs"]], "multigraph (pygraph attribute)": [[242, "rustworkx.PyGraph.multigraph"]], "add_edge() (pygraph method)": [[243, "rustworkx.PyGraph.add_edge"]], "add_edges_from() (pygraph method)": [[244, "rustworkx.PyGraph.add_edges_from"]], "add_edges_from_no_data() (pygraph method)": [[245, "rustworkx.PyGraph.add_edges_from_no_data"]], "add_node() (pygraph method)": [[246, "rustworkx.PyGraph.add_node"]], "add_nodes_from() (pygraph method)": [[247, "rustworkx.PyGraph.add_nodes_from"]], "adj() (pygraph method)": [[248, "rustworkx.PyGraph.adj"]], "clear() (pygraph method)": [[249, "rustworkx.PyGraph.clear"]], "clear_edges() (pygraph method)": [[250, "rustworkx.PyGraph.clear_edges"]], "compose() (pygraph method)": [[251, "rustworkx.PyGraph.compose"]], "contract_nodes() (pygraph method)": [[252, "rustworkx.PyGraph.contract_nodes"]], "copy() (pygraph method)": [[253, "rustworkx.PyGraph.copy"]], "degree() (pygraph method)": [[254, "rustworkx.PyGraph.degree"]], "edge_index_map() (pygraph method)": [[255, "rustworkx.PyGraph.edge_index_map"]], "edge_indices() (pygraph method)": [[256, "rustworkx.PyGraph.edge_indices"]], "edge_indices_from_endpoints() (pygraph method)": [[257, "rustworkx.PyGraph.edge_indices_from_endpoints"]], "edge_list() (pygraph method)": [[258, "rustworkx.PyGraph.edge_list"]], "edge_subgraph() (pygraph method)": [[259, "rustworkx.PyGraph.edge_subgraph"]], "edges() (pygraph method)": [[260, "rustworkx.PyGraph.edges"]], "extend_from_edge_list() (pygraph method)": [[261, "rustworkx.PyGraph.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pygraph method)": [[262, "rustworkx.PyGraph.extend_from_weighted_edge_list"]], "filter_edges() (pygraph method)": [[263, "rustworkx.PyGraph.filter_edges"]], "filter_nodes() (pygraph method)": [[264, "rustworkx.PyGraph.filter_nodes"]], "find_node_by_weight() (pygraph method)": [[265, "rustworkx.PyGraph.find_node_by_weight"]], "from_adjacency_matrix() (pygraph static method)": [[266, "rustworkx.PyGraph.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pygraph static method)": [[267, "rustworkx.PyGraph.from_complex_adjacency_matrix"]], "get_all_edge_data() (pygraph method)": [[268, "rustworkx.PyGraph.get_all_edge_data"]], "get_edge_data() (pygraph method)": [[269, "rustworkx.PyGraph.get_edge_data"]], "get_edge_data_by_index() (pygraph method)": [[270, "rustworkx.PyGraph.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pygraph method)": [[271, "rustworkx.PyGraph.get_edge_endpoints_by_index"]], "get_node_data() (pygraph method)": [[272, "rustworkx.PyGraph.get_node_data"]], "has_edge() (pygraph method)": [[273, "rustworkx.PyGraph.has_edge"]], "has_parallel_edges() (pygraph method)": [[274, "rustworkx.PyGraph.has_parallel_edges"]], "in_edges() (pygraph method)": [[275, "rustworkx.PyGraph.in_edges"]], "incident_edge_index_map() (pygraph method)": [[276, "rustworkx.PyGraph.incident_edge_index_map"]], "incident_edges() (pygraph method)": [[277, "rustworkx.PyGraph.incident_edges"]], "neighbors() (pygraph method)": [[278, "rustworkx.PyGraph.neighbors"]], "node_indexes() (pygraph method)": [[279, "rustworkx.PyGraph.node_indexes"]], "node_indices() (pygraph method)": [[280, "rustworkx.PyGraph.node_indices"]], "nodes() (pygraph method)": [[281, "rustworkx.PyGraph.nodes"]], "num_edges() (pygraph method)": [[282, "rustworkx.PyGraph.num_edges"]], "num_nodes() (pygraph method)": [[283, "rustworkx.PyGraph.num_nodes"]], "out_edges() (pygraph method)": [[284, "rustworkx.PyGraph.out_edges"]], "read_edge_list() (pygraph static method)": [[285, "rustworkx.PyGraph.read_edge_list"]], "remove_edge() (pygraph method)": [[286, "rustworkx.PyGraph.remove_edge"]], "remove_edge_from_index() (pygraph method)": [[287, "rustworkx.PyGraph.remove_edge_from_index"]], "remove_edges_from() (pygraph method)": [[288, "rustworkx.PyGraph.remove_edges_from"]], "remove_node() (pygraph method)": [[289, "rustworkx.PyGraph.remove_node"]], "remove_nodes_from() (pygraph method)": [[290, "rustworkx.PyGraph.remove_nodes_from"]], "subgraph() (pygraph method)": [[291, "rustworkx.PyGraph.subgraph"]], "substitute_node_with_subgraph() (pygraph method)": [[292, "rustworkx.PyGraph.substitute_node_with_subgraph"]], "to_directed() (pygraph method)": [[293, "rustworkx.PyGraph.to_directed"]], "to_dot() (pygraph method)": [[294, "rustworkx.PyGraph.to_dot"]], "update_edge() (pygraph method)": [[295, "rustworkx.PyGraph.update_edge"]], "update_edge_by_index() (pygraph method)": [[296, "rustworkx.PyGraph.update_edge_by_index"]], "weighted_edge_list() (pygraph method)": [[297, "rustworkx.PyGraph.weighted_edge_list"]], "write_edge_list() (pygraph method)": [[298, "rustworkx.PyGraph.write_edge_list"]], "topologicalsorter (class in rustworkx)": [[299, "rustworkx.TopologicalSorter"]], "done() (topologicalsorter method)": [[300, "rustworkx.TopologicalSorter.done"]], "get_ready() (topologicalsorter method)": [[301, "rustworkx.TopologicalSorter.get_ready"]], "is_active() (topologicalsorter method)": [[302, "rustworkx.TopologicalSorter.is_active"]], "weightededgelist (class in rustworkx)": [[303, "rustworkx.WeightedEdgeList"]], "adjacency_matrix() (in module rustworkx)": [[304, "rustworkx.adjacency_matrix"]], "all_pairs_all_simple_paths() (in module rustworkx)": [[305, "rustworkx.all_pairs_all_simple_paths"]], "all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[306, "rustworkx.all_pairs_bellman_ford_path_lengths"]], "all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[307, "rustworkx.all_pairs_bellman_ford_shortest_paths"]], "all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[308, "rustworkx.all_pairs_dijkstra_path_lengths"]], "all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[309, "rustworkx.all_pairs_dijkstra_shortest_paths"]], "all_shortest_paths() (in module rustworkx)": [[310, "rustworkx.all_shortest_paths"]], "all_simple_paths() (in module rustworkx)": [[311, "rustworkx.all_simple_paths"]], "ancestors() (in module rustworkx)": [[312, "rustworkx.ancestors"]], "articulation_points() (in module rustworkx)": [[313, "rustworkx.articulation_points"]], "astar_shortest_path() (in module rustworkx)": [[314, "rustworkx.astar_shortest_path"]], "barabasi_albert_graph() (in module rustworkx)": [[315, "rustworkx.barabasi_albert_graph"]], "bellman_ford_shortest_path_lengths() (in module rustworkx)": [[316, "rustworkx.bellman_ford_shortest_path_lengths"]], "bellman_ford_shortest_paths() (in module rustworkx)": [[317, "rustworkx.bellman_ford_shortest_paths"]], "betweenness_centrality() (in module rustworkx)": [[318, "rustworkx.betweenness_centrality"]], "bfs_predecessors() (in module rustworkx)": [[319, "rustworkx.bfs_predecessors"]], "bfs_search() (in module rustworkx)": [[320, "rustworkx.bfs_search"]], "bfs_successors() (in module rustworkx)": [[321, "rustworkx.bfs_successors"]], "biconnected_components() (in module rustworkx)": [[322, "rustworkx.biconnected_components"]], "bipartite_layout() (in module rustworkx)": [[323, "rustworkx.bipartite_layout"]], "bridges() (in module rustworkx)": [[324, "rustworkx.bridges"]], "cartesian_product() (in module rustworkx)": [[325, "rustworkx.cartesian_product"]], "chain_decomposition() (in module rustworkx)": [[326, "rustworkx.chain_decomposition"]], "circular_layout() (in module rustworkx)": [[327, "rustworkx.circular_layout"]], "closeness_centrality() (in module rustworkx)": [[328, "rustworkx.closeness_centrality"]], "collect_bicolor_runs() (in module rustworkx)": [[329, "rustworkx.collect_bicolor_runs"]], "collect_runs() (in module rustworkx)": [[330, "rustworkx.collect_runs"]], "complement() (in module rustworkx)": [[331, "rustworkx.complement"]], "connected_components() (in module rustworkx)": [[332, "rustworkx.connected_components"]], "core_number() (in module rustworkx)": [[333, "rustworkx.core_number"]], "cycle_basis() (in module rustworkx)": [[334, "rustworkx.cycle_basis"]], "dag_longest_path() (in module rustworkx)": [[335, "rustworkx.dag_longest_path"]], "dag_longest_path_length() (in module rustworkx)": [[336, "rustworkx.dag_longest_path_length"]], "dag_weighted_longest_path() (in module rustworkx)": [[337, "rustworkx.dag_weighted_longest_path"]], "dag_weighted_longest_path_length() (in module rustworkx)": [[338, "rustworkx.dag_weighted_longest_path_length"]], "descendants() (in module rustworkx)": [[339, "rustworkx.descendants"]], "dfs_edges() (in module rustworkx)": [[340, "rustworkx.dfs_edges"]], "dfs_search() (in module rustworkx)": [[341, "rustworkx.dfs_search"]], "digraph_adjacency_matrix() (in module rustworkx)": [[342, "rustworkx.digraph_adjacency_matrix"]], "digraph_all_pairs_all_simple_paths() (in module rustworkx)": [[343, "rustworkx.digraph_all_pairs_all_simple_paths"]], "digraph_all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[344, "rustworkx.digraph_all_pairs_bellman_ford_path_lengths"]], "digraph_all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[345, "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths"]], "digraph_all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[346, "rustworkx.digraph_all_pairs_dijkstra_path_lengths"]], "digraph_all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[347, "rustworkx.digraph_all_pairs_dijkstra_shortest_paths"]], "digraph_all_shortest_paths() (in module rustworkx)": [[348, "rustworkx.digraph_all_shortest_paths"]], "digraph_all_simple_paths() (in module rustworkx)": [[349, "rustworkx.digraph_all_simple_paths"]], "digraph_astar_shortest_path() (in module rustworkx)": [[350, "rustworkx.digraph_astar_shortest_path"]], "digraph_bellman_ford_shortest_path_lengths() (in module rustworkx)": [[351, "rustworkx.digraph_bellman_ford_shortest_path_lengths"]], "digraph_betweenness_centrality() (in module rustworkx)": [[352, "rustworkx.digraph_betweenness_centrality"]], "digraph_bfs_search() (in module rustworkx)": [[353, "rustworkx.digraph_bfs_search"]], "digraph_bipartite_layout() (in module rustworkx)": [[354, "rustworkx.digraph_bipartite_layout"]], "digraph_cartesian_product() (in module rustworkx)": [[355, "rustworkx.digraph_cartesian_product"]], "digraph_circular_layout() (in module rustworkx)": [[356, "rustworkx.digraph_circular_layout"]], "digraph_closeness_centrality() (in module rustworkx)": [[357, "rustworkx.digraph_closeness_centrality"]], "digraph_complement() (in module rustworkx)": [[358, "rustworkx.digraph_complement"]], "digraph_core_number() (in module rustworkx)": [[359, "rustworkx.digraph_core_number"]], "digraph_dfs_edges() (in module rustworkx)": [[360, "rustworkx.digraph_dfs_edges"]], "digraph_dfs_search() (in module rustworkx)": [[361, "rustworkx.digraph_dfs_search"]], "digraph_dijkstra_search() (in module rustworkx)": [[362, "rustworkx.digraph_dijkstra_search"]], "digraph_dijkstra_shortest_path_lengths() (in module rustworkx)": [[363, "rustworkx.digraph_dijkstra_shortest_path_lengths"]], "digraph_dijkstra_shortest_paths() (in module rustworkx)": [[364, "rustworkx.digraph_dijkstra_shortest_paths"]], "digraph_distance_matrix() (in module rustworkx)": [[365, "rustworkx.digraph_distance_matrix"]], "digraph_edge_betweenness_centrality() (in module rustworkx)": [[366, "rustworkx.digraph_edge_betweenness_centrality"]], "digraph_eigenvector_centrality() (in module rustworkx)": [[367, "rustworkx.digraph_eigenvector_centrality"]], "digraph_find_cycle() (in module rustworkx)": [[368, "rustworkx.digraph_find_cycle"]], "digraph_floyd_warshall() (in module rustworkx)": [[369, "rustworkx.digraph_floyd_warshall"]], "digraph_floyd_warshall_numpy() (in module rustworkx)": [[370, "rustworkx.digraph_floyd_warshall_numpy"]], "digraph_floyd_warshall_successor_and_distance() (in module rustworkx)": [[371, "rustworkx.digraph_floyd_warshall_successor_and_distance"]], "digraph_is_isomorphic() (in module rustworkx)": [[372, "rustworkx.digraph_is_isomorphic"]], "digraph_is_subgraph_isomorphic() (in module rustworkx)": [[373, "rustworkx.digraph_is_subgraph_isomorphic"]], "digraph_k_shortest_path_lengths() (in module rustworkx)": [[374, "rustworkx.digraph_k_shortest_path_lengths"]], "digraph_katz_centrality() (in module rustworkx)": [[375, "rustworkx.digraph_katz_centrality"]], "digraph_longest_simple_path() (in module rustworkx)": [[376, "rustworkx.digraph_longest_simple_path"]], "digraph_node_link_json() (in module rustworkx)": [[377, "rustworkx.digraph_node_link_json"]], "digraph_num_shortest_paths_unweighted() (in module rustworkx)": [[378, "rustworkx.digraph_num_shortest_paths_unweighted"]], "digraph_random_layout() (in module rustworkx)": [[379, "rustworkx.digraph_random_layout"]], "digraph_shell_layout() (in module rustworkx)": [[380, "rustworkx.digraph_shell_layout"]], "digraph_spiral_layout() (in module rustworkx)": [[381, "rustworkx.digraph_spiral_layout"]], "digraph_spring_layout() (in module rustworkx)": [[382, "rustworkx.digraph_spring_layout"]], "digraph_tensor_product() (in module rustworkx)": [[383, "rustworkx.digraph_tensor_product"]], "digraph_transitivity() (in module rustworkx)": [[384, "rustworkx.digraph_transitivity"]], "digraph_union() (in module rustworkx)": [[385, "rustworkx.digraph_union"]], "digraph_unweighted_average_shortest_path_length() (in module rustworkx)": [[386, "rustworkx.digraph_unweighted_average_shortest_path_length"]], "digraph_vf2_mapping() (in module rustworkx)": [[387, "rustworkx.digraph_vf2_mapping"]], "dijkstra_search() (in module rustworkx)": [[388, "rustworkx.dijkstra_search"]], "dijkstra_shortest_path_lengths() (in module rustworkx)": [[389, "rustworkx.dijkstra_shortest_path_lengths"]], "dijkstra_shortest_paths() (in module rustworkx)": [[390, "rustworkx.dijkstra_shortest_paths"]], "directed_barabasi_albert_graph() (in module rustworkx)": [[391, "rustworkx.directed_barabasi_albert_graph"]], "directed_gnm_random_graph() (in module rustworkx)": [[392, "rustworkx.directed_gnm_random_graph"]], "directed_gnp_random_graph() (in module rustworkx)": [[393, "rustworkx.directed_gnp_random_graph"]], "directed_random_bipartite_graph() (in module rustworkx)": [[394, "rustworkx.directed_random_bipartite_graph"]], "distance_matrix() (in module rustworkx)": [[395, "rustworkx.distance_matrix"]], "edge_betweenness_centrality() (in module rustworkx)": [[396, "rustworkx.edge_betweenness_centrality"]], "eigenvector_centrality() (in module rustworkx)": [[397, "rustworkx.eigenvector_centrality"]], "find_negative_cycle() (in module rustworkx)": [[398, "rustworkx.find_negative_cycle"]], "floyd_warshall() (in module rustworkx)": [[399, "rustworkx.floyd_warshall"]], "floyd_warshall_numpy() (in module rustworkx)": [[400, "rustworkx.floyd_warshall_numpy"]], "floyd_warshall_successor_and_distance() (in module rustworkx)": [[401, "rustworkx.floyd_warshall_successor_and_distance"]], "barbell_graph() (in module rustworkx.generators)": [[402, "rustworkx.generators.barbell_graph"]], "binomial_tree_graph() (in module rustworkx.generators)": [[403, "rustworkx.generators.binomial_tree_graph"]], "complete_graph() (in module rustworkx.generators)": [[404, "rustworkx.generators.complete_graph"]], "cycle_graph() (in module rustworkx.generators)": [[405, "rustworkx.generators.cycle_graph"]], "directed_binomial_tree_graph() (in module rustworkx.generators)": [[406, "rustworkx.generators.directed_binomial_tree_graph"]], "directed_complete_graph() (in module rustworkx.generators)": [[407, "rustworkx.generators.directed_complete_graph"]], "directed_cycle_graph() (in module rustworkx.generators)": [[408, "rustworkx.generators.directed_cycle_graph"]], "directed_empty_graph() (in module rustworkx.generators)": [[409, "rustworkx.generators.directed_empty_graph"]], "directed_grid_graph() (in module rustworkx.generators)": [[410, "rustworkx.generators.directed_grid_graph"]], "directed_heavy_hex_graph() (in module rustworkx.generators)": [[411, "rustworkx.generators.directed_heavy_hex_graph"]], "directed_heavy_square_graph() (in module rustworkx.generators)": [[412, "rustworkx.generators.directed_heavy_square_graph"]], "directed_hexagonal_lattice_graph() (in module rustworkx.generators)": [[413, "rustworkx.generators.directed_hexagonal_lattice_graph"]], "directed_mesh_graph() (in module rustworkx.generators)": [[414, "rustworkx.generators.directed_mesh_graph"]], "directed_path_graph() (in module rustworkx.generators)": [[415, "rustworkx.generators.directed_path_graph"]], "directed_star_graph() (in module rustworkx.generators)": [[416, "rustworkx.generators.directed_star_graph"]], "empty_graph() (in module rustworkx.generators)": [[417, "rustworkx.generators.empty_graph"]], "full_rary_tree() (in module rustworkx.generators)": [[418, "rustworkx.generators.full_rary_tree"]], "generalized_petersen_graph() (in module rustworkx.generators)": [[419, "rustworkx.generators.generalized_petersen_graph"]], "grid_graph() (in module rustworkx.generators)": [[420, "rustworkx.generators.grid_graph"]], "heavy_hex_graph() (in module rustworkx.generators)": [[421, "rustworkx.generators.heavy_hex_graph"]], "heavy_square_graph() (in module rustworkx.generators)": [[422, "rustworkx.generators.heavy_square_graph"]], "hexagonal_lattice_graph() (in module rustworkx.generators)": [[423, "rustworkx.generators.hexagonal_lattice_graph"]], "lollipop_graph() (in module rustworkx.generators)": [[424, "rustworkx.generators.lollipop_graph"]], "mesh_graph() (in module rustworkx.generators)": [[425, "rustworkx.generators.mesh_graph"]], "path_graph() (in module rustworkx.generators)": [[426, "rustworkx.generators.path_graph"]], "star_graph() (in module rustworkx.generators)": [[427, "rustworkx.generators.star_graph"]], "graph_adjacency_matrix() (in module rustworkx)": [[428, "rustworkx.graph_adjacency_matrix"]], "graph_all_pairs_all_simple_paths() (in module rustworkx)": [[429, "rustworkx.graph_all_pairs_all_simple_paths"]], "graph_all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[430, "rustworkx.graph_all_pairs_bellman_ford_path_lengths"]], "graph_all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[431, "rustworkx.graph_all_pairs_bellman_ford_shortest_paths"]], "graph_all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[432, "rustworkx.graph_all_pairs_dijkstra_path_lengths"]], "graph_all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[433, "rustworkx.graph_all_pairs_dijkstra_shortest_paths"]], "graph_all_shortest_paths() (in module rustworkx)": [[434, "rustworkx.graph_all_shortest_paths"]], "graph_all_simple_paths() (in module rustworkx)": [[435, "rustworkx.graph_all_simple_paths"]], "graph_astar_shortest_path() (in module rustworkx)": [[436, "rustworkx.graph_astar_shortest_path"]], "graph_bellman_ford_shortest_path_lengths() (in module rustworkx)": [[437, "rustworkx.graph_bellman_ford_shortest_path_lengths"]], "graph_betweenness_centrality() (in module rustworkx)": [[438, "rustworkx.graph_betweenness_centrality"]], "graph_bfs_search() (in module rustworkx)": [[439, "rustworkx.graph_bfs_search"]], "graph_bipartite_edge_color() (in module rustworkx)": [[440, "rustworkx.graph_bipartite_edge_color"]], "graph_bipartite_layout() (in module rustworkx)": [[441, "rustworkx.graph_bipartite_layout"]], "graph_cartesian_product() (in module rustworkx)": [[442, "rustworkx.graph_cartesian_product"]], "graph_circular_layout() (in module rustworkx)": [[443, "rustworkx.graph_circular_layout"]], "graph_closeness_centrality() (in module rustworkx)": [[444, "rustworkx.graph_closeness_centrality"]], "graph_complement() (in module rustworkx)": [[445, "rustworkx.graph_complement"]], "graph_core_number() (in module rustworkx)": [[446, "rustworkx.graph_core_number"]], "graph_dfs_edges() (in module rustworkx)": [[447, "rustworkx.graph_dfs_edges"]], "graph_dfs_search() (in module rustworkx)": [[448, "rustworkx.graph_dfs_search"]], "graph_dijkstra_search() (in module rustworkx)": [[449, "rustworkx.graph_dijkstra_search"]], "graph_dijkstra_shortest_path_lengths() (in module rustworkx)": [[450, "rustworkx.graph_dijkstra_shortest_path_lengths"]], "graph_dijkstra_shortest_paths() (in module rustworkx)": [[451, "rustworkx.graph_dijkstra_shortest_paths"]], "graph_distance_matrix() (in module rustworkx)": [[452, "rustworkx.graph_distance_matrix"]], "graph_edge_betweenness_centrality() (in module rustworkx)": [[453, "rustworkx.graph_edge_betweenness_centrality"]], "graph_eigenvector_centrality() (in module rustworkx)": [[454, "rustworkx.graph_eigenvector_centrality"]], "graph_floyd_warshall() (in module rustworkx)": [[455, "rustworkx.graph_floyd_warshall"]], "graph_floyd_warshall_numpy() (in module rustworkx)": [[456, "rustworkx.graph_floyd_warshall_numpy"]], "graph_floyd_warshall_successor_and_distance() (in module rustworkx)": [[457, "rustworkx.graph_floyd_warshall_successor_and_distance"]], "graph_greedy_color() (in module rustworkx)": [[458, "rustworkx.graph_greedy_color"]], "graph_greedy_edge_color() (in module rustworkx)": [[459, "rustworkx.graph_greedy_edge_color"]], "graph_is_isomorphic() (in module rustworkx)": [[460, "rustworkx.graph_is_isomorphic"]], "graph_is_subgraph_isomorphic() (in module rustworkx)": [[461, "rustworkx.graph_is_subgraph_isomorphic"]], "graph_k_shortest_path_lengths() (in module rustworkx)": [[462, "rustworkx.graph_k_shortest_path_lengths"]], "graph_katz_centrality() (in module rustworkx)": [[463, "rustworkx.graph_katz_centrality"]], "graph_line_graph() (in module rustworkx)": [[464, "rustworkx.graph_line_graph"]], "graph_longest_simple_path() (in module rustworkx)": [[465, "rustworkx.graph_longest_simple_path"]], "graph_misra_gries_edge_color() (in module rustworkx)": [[466, "rustworkx.graph_misra_gries_edge_color"]], "graph_node_link_json() (in module rustworkx)": [[467, "rustworkx.graph_node_link_json"]], "graph_num_shortest_paths_unweighted() (in module rustworkx)": [[468, "rustworkx.graph_num_shortest_paths_unweighted"]], "graph_random_layout() (in module rustworkx)": [[469, "rustworkx.graph_random_layout"]], "graph_shell_layout() (in module rustworkx)": [[470, "rustworkx.graph_shell_layout"]], "graph_spiral_layout() (in module rustworkx)": [[471, "rustworkx.graph_spiral_layout"]], "graph_spring_layout() (in module rustworkx)": [[472, "rustworkx.graph_spring_layout"]], "graph_tensor_product() (in module rustworkx)": [[473, "rustworkx.graph_tensor_product"]], "graph_token_swapper() (in module rustworkx)": [[474, "rustworkx.graph_token_swapper"]], "graph_transitivity() (in module rustworkx)": [[475, "rustworkx.graph_transitivity"]], "graph_union() (in module rustworkx)": [[476, "rustworkx.graph_union"]], "graph_unweighted_average_shortest_path_length() (in module rustworkx)": [[477, "rustworkx.graph_unweighted_average_shortest_path_length"]], "graph_vf2_mapping() (in module rustworkx)": [[478, "rustworkx.graph_vf2_mapping"]], "has_path() (in module rustworkx)": [[479, "rustworkx.has_path"]], "hits() (in module rustworkx)": [[480, "rustworkx.hits"]], "is_bipartite() (in module rustworkx)": [[481, "rustworkx.is_bipartite"]], "is_connected() (in module rustworkx)": [[482, "rustworkx.is_connected"]], "is_directed_acyclic_graph() (in module rustworkx)": [[483, "rustworkx.is_directed_acyclic_graph"]], "is_isomorphic() (in module rustworkx)": [[484, "rustworkx.is_isomorphic"]], "is_isomorphic_node_match() (in module rustworkx)": [[485, "rustworkx.is_isomorphic_node_match"]], "is_matching() (in module rustworkx)": [[486, "rustworkx.is_matching"]], "is_maximal_matching() (in module rustworkx)": [[487, "rustworkx.is_maximal_matching"]], "is_planar() (in module rustworkx)": [[488, "rustworkx.is_planar"]], "is_subgraph_isomorphic() (in module rustworkx)": [[489, "rustworkx.is_subgraph_isomorphic"]], "is_weakly_connected() (in module rustworkx)": [[490, "rustworkx.is_weakly_connected"]], "isolates() (in module rustworkx)": [[491, "rustworkx.isolates"]], "k_shortest_path_lengths() (in module rustworkx)": [[492, "rustworkx.k_shortest_path_lengths"]], "katz_centrality() (in module rustworkx)": [[493, "rustworkx.katz_centrality"]], "layers() (in module rustworkx)": [[494, "rustworkx.layers"]], "lexicographical_topological_sort() (in module rustworkx)": [[495, "rustworkx.lexicographical_topological_sort"]], "longest_simple_path() (in module rustworkx)": [[496, "rustworkx.longest_simple_path"]], "max_weight_matching() (in module rustworkx)": [[497, "rustworkx.max_weight_matching"]], "metric_closure() (in module rustworkx)": [[498, "rustworkx.metric_closure"]], "minimum_spanning_edges() (in module rustworkx)": [[499, "rustworkx.minimum_spanning_edges"]], "minimum_spanning_tree() (in module rustworkx)": [[500, "rustworkx.minimum_spanning_tree"]], "negative_edge_cycle() (in module rustworkx)": [[501, "rustworkx.negative_edge_cycle"]], "networkx_converter() (in module rustworkx)": [[502, "rustworkx.networkx_converter"]], "node_connected_component() (in module rustworkx)": [[503, "rustworkx.node_connected_component"]], "node_link_json() (in module rustworkx)": [[504, "rustworkx.node_link_json"]], "num_shortest_paths_unweighted() (in module rustworkx)": [[505, "rustworkx.num_shortest_paths_unweighted"]], "number_connected_components() (in module rustworkx)": [[506, "rustworkx.number_connected_components"]], "number_weakly_connected_components() (in module rustworkx)": [[507, "rustworkx.number_weakly_connected_components"]], "pagerank() (in module rustworkx)": [[508, "rustworkx.pagerank"]], "random_geometric_graph() (in module rustworkx)": [[509, "rustworkx.random_geometric_graph"]], "random_layout() (in module rustworkx)": [[510, "rustworkx.random_layout"]], "read_graphml() (in module rustworkx)": [[511, "rustworkx.read_graphml"]], "shell_layout() (in module rustworkx)": [[512, "rustworkx.shell_layout"]], "simple_cycles() (in module rustworkx)": [[513, "rustworkx.simple_cycles"]], "spiral_layout() (in module rustworkx)": [[514, "rustworkx.spiral_layout"]], "spring_layout() (in module rustworkx)": [[515, "rustworkx.spring_layout"]], "steiner_tree() (in module rustworkx)": [[516, "rustworkx.steiner_tree"]], "stoer_wagner_min_cut() (in module rustworkx)": [[517, "rustworkx.stoer_wagner_min_cut"]], "strongly_connected_components() (in module rustworkx)": [[518, "rustworkx.strongly_connected_components"]], "topological_generations() (in module rustworkx)": [[519, "rustworkx.topological_generations"]], "topological_sort() (in module rustworkx)": [[520, "rustworkx.topological_sort"]], "transitive_reduction() (in module rustworkx)": [[521, "rustworkx.transitive_reduction"]], "transitivity() (in module rustworkx)": [[522, "rustworkx.transitivity"]], "two_color() (in module rustworkx)": [[523, "rustworkx.two_color"]], "undirected_gnm_random_graph() (in module rustworkx)": [[524, "rustworkx.undirected_gnm_random_graph"]], "undirected_gnp_random_graph() (in module rustworkx)": [[525, "rustworkx.undirected_gnp_random_graph"]], "undirected_random_bipartite_graph() (in module rustworkx)": [[526, "rustworkx.undirected_random_bipartite_graph"]], "union() (in module rustworkx)": [[527, "rustworkx.union"]], "unweighted_average_shortest_path_length() (in module rustworkx)": [[528, "rustworkx.unweighted_average_shortest_path_length"]], "vf2_mapping() (in module rustworkx)": [[529, "rustworkx.vf2_mapping"]], "bfsvisitor (class in rustworkx.visit)": [[530, "rustworkx.visit.BFSVisitor"]], "black_target_edge() (bfsvisitor method)": [[531, "rustworkx.visit.BFSVisitor.black_target_edge"]], "discover_vertex() (bfsvisitor method)": [[532, "rustworkx.visit.BFSVisitor.discover_vertex"]], "finish_vertex() (bfsvisitor method)": [[533, "rustworkx.visit.BFSVisitor.finish_vertex"]], "gray_target_edge() (bfsvisitor method)": [[534, "rustworkx.visit.BFSVisitor.gray_target_edge"]], "non_tree_edge() (bfsvisitor method)": [[535, "rustworkx.visit.BFSVisitor.non_tree_edge"]], "tree_edge() (bfsvisitor method)": [[536, "rustworkx.visit.BFSVisitor.tree_edge"]], "dfsvisitor (class in rustworkx.visit)": [[537, "rustworkx.visit.DFSVisitor"]], "back_edge() (dfsvisitor method)": [[538, "rustworkx.visit.DFSVisitor.back_edge"]], "discover_vertex() (dfsvisitor method)": [[539, "rustworkx.visit.DFSVisitor.discover_vertex"]], "finish_vertex() (dfsvisitor method)": [[540, "rustworkx.visit.DFSVisitor.finish_vertex"]], "forward_or_cross_edge() (dfsvisitor method)": [[541, "rustworkx.visit.DFSVisitor.forward_or_cross_edge"]], "tree_edge() (dfsvisitor method)": [[542, "rustworkx.visit.DFSVisitor.tree_edge"]], "dijkstravisitor (class in rustworkx.visit)": [[543, "rustworkx.visit.DijkstraVisitor"]], "discover_vertex() (dijkstravisitor method)": [[544, "rustworkx.visit.DijkstraVisitor.discover_vertex"]], "edge_not_relaxed() (dijkstravisitor method)": [[545, "rustworkx.visit.DijkstraVisitor.edge_not_relaxed"]], "edge_relaxed() (dijkstravisitor method)": [[546, "rustworkx.visit.DijkstraVisitor.edge_relaxed"]], "examine_edge() (dijkstravisitor method)": [[547, "rustworkx.visit.DijkstraVisitor.examine_edge"]], "finish_vertex() (dijkstravisitor method)": [[548, "rustworkx.visit.DijkstraVisitor.finish_vertex"]], "prunesearch": [[549, "rustworkx.visit.PruneSearch"]], "stopsearch": [[550, "rustworkx.visit.StopSearch"]], "graphviz_draw() (in module rustworkx.visualization)": [[551, "rustworkx.visualization.graphviz_draw"]], "mpl_draw() (in module rustworkx.visualization)": [[552, "rustworkx.visualization.mpl_draw"]], "weakly_connected_components() (in module rustworkx)": [[553, "rustworkx.weakly_connected_components"]]}})