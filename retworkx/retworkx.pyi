# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.

# This file contains only type annotations for PyO3 functions and classes
# For implementation details, see __init__.py and lib.rs

import numpy as np
import retworkx_generators as generators
from .custom_return_types import *
from .pygraph import PyGraph
from .pydigraph import PyDiGraph

from typing import (
    Any,
    Callable,
    Dict,
    Generic,
    TypeVar,
    Optional,
    List,
    Tuple,
)

S = TypeVar("S")
T = TypeVar("T")

class DAGHasCycle(Exception): ...
class DAGWouldCycle(Exception): ...
class InvalidNode(Exception): ...
class NoEdgeBetweenNodes(Exception): ...
class NoPathFound(Exception): ...
class NoSuitableNeighbors(Exception): ...
class NullGraph(Exception): ...

def ancestors(*args, **kwargs) -> Any: ...
def bfs_successors(*args, **kwargs) -> Any: ...
def collect_runs(*args, **kwargs) -> Any: ...
def cycle_basis(*args, **kwargs) -> Any: ...
def dag_longest_path(*args, **kwargs) -> Any: ...
def dag_longest_path_length(*args, **kwargs) -> Any: ...
def dag_weighted_longest_path(*args, **kwargs) -> Any: ...
def dag_weighted_longest_path_length(*args, **kwargs) -> Any: ...
def descendants(*args, **kwargs) -> Any: ...
def digraph_adjacency_matrix(*args, **kwargs) -> Any: ...
def digraph_all_pairs_dijkstra_path_lengths(*args, **kwargs) -> Any: ...
def digraph_all_pairs_dijkstra_shortest_paths(*args, **kwargs) -> Any: ...
def digraph_all_simple_paths(*args, **kwargs) -> Any: ...
def digraph_astar_shortest_path(*args, **kwargs) -> Any: ...
def digraph_bipartite_layout(*args, **kwargs) -> Any: ...
def digraph_circular_layout(*args, **kwargs) -> Any: ...
def digraph_complement(*args, **kwargs) -> Any: ...
def digraph_core_number(*args, **kwargs) -> Any: ...
def digraph_dfs_edges(*args, **kwargs) -> Any: ...
def digraph_dijkstra_shortest_path_lengths(*args, **kwargs) -> Any: ...
def digraph_dijkstra_shortest_paths(*args, **kwargs) -> Any: ...
def digraph_distance_matrix(*args, **kwargs) -> Any: ...
def digraph_find_cycle(*args, **kwargs) -> Any: ...
def digraph_floyd_warshall(graph, weight_fn=...) -> Any: ...
def digraph_floyd_warshall_numpy(*args, **kwargs) -> Any: ...
def digraph_is_isomorphic(*args, **kwargs) -> Any: ...
def digraph_is_subgraph_isomorphic(*args, **kwargs) -> Any: ...
def digraph_k_shortest_path_lengths(*args, **kwargs) -> Any: ...
def digraph_num_shortest_paths_unweighted(*args, **kwargs) -> Any: ...
def digraph_random_layout(*args, **kwargs) -> Any: ...
def digraph_shell_layout(*args, **kwargs) -> Any: ...
def digraph_spiral_layout(*args, **kwargs) -> Any: ...
def digraph_spring_layout(*args, **kwargs) -> Any: ...
def digraph_transitivity(*args, **kwargs) -> Any: ...
def digraph_union(*args, **kwargs) -> Any: ...
def directed_gnm_random_graph(*args, **kwargs) -> Any: ...
def directed_gnp_random_graph(*args, **kwargs) -> Any: ...
def graph_adjacency_matrix(graph, weight_fn) -> Any: ...
def graph_all_pairs_dijkstra_path_lengths(*args, **kwargs) -> Any: ...
def graph_all_pairs_dijkstra_shortest_paths(*args, **kwargs) -> Any: ...
def graph_all_simple_paths(*args, **kwargs) -> Any: ...
def graph_astar_shortest_path(*args, **kwargs) -> Any: ...
def graph_bipartite_layout(*args, **kwargs) -> Any: ...
def graph_circular_layout(*args, **kwargs) -> Any: ...
def graph_complement(*args, **kwargs) -> Any: ...
def graph_core_number(*args, **kwargs) -> Any: ...
def graph_dfs_edges(*args, **kwargs) -> Any: ...
def graph_dijkstra_shortest_path_lengths(*args, **kwargs) -> Any: ...
def graph_dijkstra_shortest_paths(*args, **kwargs) -> Any: ...
def graph_distance_matrix(*args, **kwargs) -> Any: ...
def graph_floyd_warshall(graph, weight_fn=...) -> Any: ...
def graph_floyd_warshall_numpy(graph, weight_fn) -> Any: ...
def graph_greedy_color(*args, **kwargs) -> Any: ...
def graph_is_isomorphic(*args, **kwargs) -> Any: ...
def graph_is_subgraph_isomorphic(*args, **kwargs) -> Any: ...
def graph_k_shortest_path_lengths(*args, **kwargs) -> Any: ...
def graph_num_shortest_paths_unweighted(*args, **kwargs) -> Any: ...
def graph_random_layout(*args, **kwargs) -> Any: ...
def graph_shell_layout(*args, **kwargs) -> Any: ...
def graph_spiral_layout(*args, **kwargs) -> Any: ...
def graph_spring_layout(*args, **kwargs) -> Any: ...
def graph_transitivity(*args, **kwargs) -> Any: ...
def is_directed_acyclic_graph(*args, **kwargs) -> Any: ...
def is_matching(*args, **kwargs) -> Any: ...
def is_maximal_matching(*args, **kwargs) -> Any: ...
def is_weakly_connected(*args, **kwargs) -> Any: ...
def layers(*args, **kwargs) -> Any: ...
def lexicographical_topological_sort(*args, **kwargs) -> Any: ...
def max_weight_matching(*args, **kwargs) -> Any: ...
def minimum_spanning_edges(graph, weight_fn) -> Any: ...
def minimum_spanning_tree(graph, weight_fn) -> Any: ...
def number_weakly_connected_components(*args, **kwargs) -> Any: ...
def random_geometric_graph(*args, **kwargs) -> Any: ...
def strongly_connected_components(*args, **kwargs) -> Any: ...
def topological_sort(*args, **kwargs) -> Any: ...
def undirected_gnm_random_graph(*args, **kwargs) -> Any: ...
def undirected_gnp_random_graph(*args, **kwargs) -> Any: ...
def weakly_connected_components(*args, **kwargs) -> Any: ...
