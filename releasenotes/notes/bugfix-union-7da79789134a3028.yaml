---
fixes:
  - |
    Previously, :func:`~retworkx.digraph_union` would incorrectly keep or delete edges
    if argument `merge_edges` is set to true. This has been fixed and an edge from
    the second graph will be skipped if both its endpoints were merged to nodes from
    the first graph and these nodes already share an edge with equal weight data.
    Fixed `#432 <https://github.com/Qiskit/retworkx/issues/432>`__
features:
  - |
    Adds a new function :func:`~retworkx.graph_union` that returns the union
    of two :class:`~retworkx.PyGraph` objects. This is the equivalent to 
    :func:`~retworkx.digraph_union` but for a :class:`~retworkx.PyGraph`
    instead of for a :class:`~retworkx.PyDiGraph`.
    For example:

    .. jupyter-execute::

      import retworkx
      from retworkx.visualization import mpl_draw

      first = retworkx.generators.path_graph(3, weights=["a_0", "node", "a_1"])
      second = retworkx.generators.cycle_graph(3, weights=["node", "b_0", "b_1"])
      graph = retworkx.graph_union(first, second, merge_nodes=True)
      mpl_draw(graph)