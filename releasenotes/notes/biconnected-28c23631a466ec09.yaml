---
features:
  - |
    Added a new function :func:`~retworkx.articulation_points` that
    finds the articulation points of an undirected :class:`~retworkx.PyGraph`.
    An articulation point or cut vertex is any node whose removal increases
    the number of connected components of a graph. For example:

    .. jupyter-execute::

      import retworkx
      from retworkx.visualization import mpl_draw

      graph = retworkx.PyGraph()
      graph.extend_from_edge_list([
          (0, 1), (1, 2), (0, 2), (1, 3)
      ])
      points = retworkx.articulation_points(graph)

      colors = ['black'] * len(graph)
      for node in points:
          colors[node] = 'blue'

      mpl_draw(graph, node_color=colors)
  - |
    Added a new function :func:`~retworkx.biconnected_components` that
    returns the biconnected components of an undirected :class:`~retworkx.PyGraph`.
    A biconnected component is a maximal subgraph that remains connected
    after removal of a node. For example:

    .. jupyter-execute::

      import retworkx
      from retworkx.visualization import mpl_draw

      graph = retworkx.PyGraph()
      graph.extend_from_edge_list([
          (0, 1), (1, 2), (0, 2), (1, 3), (2, 4)
      ])
      components = retworkx.biconnected_components(graph)

      def color_edges(graph, components):
          COLORS = ['blue', 'red', 'orange']

          def find(u, v):
              for idx, subset in enumerate(components):
                  if u in subset and v in subset:
                      return COLORS[idx]
                    
              return 'black'

          edge_colors = [
              find(u, v) for u, v in graph.edge_list()
          ]
          return edge_colors

      mpl_draw(graph, node_color='black', node_size=150,
              edge_color=color_edges(graph, components))
