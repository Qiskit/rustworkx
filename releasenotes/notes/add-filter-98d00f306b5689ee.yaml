---
features:
  - |
    The :class:`~rustworkx.PyGraph` and the :class:`~rustworkx.PyDiGraph` classes have a new method 
    :meth:`~rustworkx.PyGraph.filter_nodes` (or :meth:`~rustworkx.PyDiGraph.filter_nodes`). 
    This method returns a :class:`~.NodeIndices` object with the resulting nodes that fit some abstract criteria indicated by a filter function.
    For example:

    .. jupyter-execute::
    
        from rustworkx import PyGraph

        graph = PyGraph()
        graph.add_nodes_from(list(range(5))) # Adds nodes from 0 to 5

        def my_filter_function(node):
          return node > 2

        indices = graph.filter_nodes(my_filter_function)
        print(indices)

  - |
    The :class:`~rustworkx.PyGraph` and the :class:`~rustworkx.PyDiGraph` classes have a new method 
    :meth:`~rustworkx.PyGraph.filter_edges` (or :meth:`~rustworkx.PyDiGraph.filter_edges`). 
    This method returns a :class:`~.EdgeIndices` object with the resulting edges that fit some abstract criteria indicated by a filter function.
    For example:

    .. jupyter-execute::

        from rustworkx import PyGraph
        from rustworkx.generators import complete_graph

        graph = PyGraph()
        graph.add_nodes_from(range(3))
        graph.add_edges_from([(0, 1, 'A'), (0, 1, 'B'), (1, 2, 'C')])

        def my_filter_function(edge):
          if edge:
            return edge == 'B'
          return False  
          
        indices = graph.filter_edges(my_filter_function)
        print(indices)