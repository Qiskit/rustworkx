---
features:
  - |
    Added a new layout function, :func:`rustworkx.random_layout` (and it's
    equivalent per type variants :func:`rustworkx.graph_random_layout` and
    :func:`rustworkx.diraph_random_layout`) to generate a random layout which
    can be used for visualizations. For example:

    .. jupyter-execute::

      import rustworkx
      from rustworkx.visualization import mpl_draw

      graph = rustworkx.generators.directed_grid_graph(5, 5)
      layout = rustworkx.random_layout(graph)
      mpl_draw(graph, pos=layout)

    or with the :func:`~rustworkx.visualization.graphviz_draw` function:

    .. jupyter-execute::

      import rustworkx
      from rustworkx.visualization import graphviz_draw

      graph = rustworkx.generators.directed_grid_graph(5, 5)
      layout = rustworkx.random_layout(graph)
      for i in range(25):
        graph[i] = i

      def node_attr_fn(node):
          point = layout[node]
          return {
              "shape": "circle",
              "pos": '"%s,%s!"' % (point[0], point[1]),
              "fillcolor": "yellow",
              "style": "filled",
              "fixedsize": "true"
          }

      graphviz_draw(graph, node_attr_fn=node_attr_fn, method='fdp')

  - |
    A new custom return class, :class:`rustworkx.Pos2DMapping`, has been
    added. This class will be returned by layout functions and is a drop
    in replacement for an immutable read-only dictionary of the form::

      {1: [0.1, 0.5]}

    where the keys are node indices and the values are a 2 element sequence
    that represents the position for the node.
