
---
features:
  - |
    Added a new :func:`~rustworkx.bfs_layers` (and it's per type variants
    :func:`~rustworkx.graph_bfs_layers` and :func:`~rustworkx.digraph_bfs_layers`)
    that performs a breadth-first search traversal and returns the nodes organized
    by their BFS layers/levels. Each layer contains all nodes at the same distance
    from the source nodes. This is useful for analyzing graph structure and 
    implementing algorithms that need to process nodes level by level.
    For example:

    .. jupyter-execute::

      import rustworkx

      graph = rustworkx.PyDiGraph()
      graph.extend_from_edge_list([(0, 1), (0, 2), (1, 3), (2, 3), (3, 4)])
      
      # Print the layers of the graph in BFS-order relative to 0 (source)
      layers = rustworkx.bfs_layers(graph, sources=[0])
      print('BFS layers:', layers)
